[
    "global ans\n\ndef answer(df):\n    return df.loc[df['favorites'].idxmax(), 'lang'] == 'es'\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df.loc[df['author_name'].str.len().idxmax()]['type'] == 'original')\nans = answer(df)",
    "{\n    \"solution\": \"df.groupby('author_id')['retweets'].sum().eq(0).any()\"\n}",
    "global ans\n\ndef answer(df):\n    return (df['links'].isnull() | (df['links'] == '')).any()\nans = answer(df)",
    "{\n    \"solution\": \"return df['author_id'].nunique()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['text'].str.split().str.len().max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['mention_ids'].isnull() | (df['mention_ids'] == '')).sum()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['retweets'].idxmax(), 'author_name'].astype('category')\"\n}",
    "{\n    \"solution\": \"df.loc[df['favorites'].idxmax(), 'lang'].astype('category')\"\n}",
    "{\n    \"solution\": \"df.loc[df['text'].str.split().str.len().idxmax(), 'author_name'].astype('category')\"\n}",
    "global ans\n\ndef answer(df):\n    return df['type'].mode()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'retweets')['author_name'].unique().tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(5, 'favorites')['lang'].astype('category').tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df.nsmallest(4, df['text'].str.split().str.len())['author_name'].tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['type'].value_counts().nlargest(6).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'favorites')['retweets'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['text'].str.split().str.len().nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(4, 'favorites')['retweets'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['text'].str.split().str.len().nsmallest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['name'].eq('Pikachu').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['total'].gt(700).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[(df['generation'] == 1)]['legendary'].all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['speed'] > 150).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type1'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['total'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['generation'] == 3].shape[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['attack'].mean()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['defense'].idxmax(), 'type1'].astype('category')\"\n}",
    "{\n    \"solution\": \"df.loc[df['speed'].idxmin(), 'name'].astype('category')\"\n}",
    "global ans\n\ndef answer(df):\n    return df[df['legendary']].type1.value_counts().idxmax()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['sp_attack'].idxmax(), 'name'].astype('category')\"\n}",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'total')['name'].astype('category').tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(5, 'hp')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type1'].value_counts().head(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['generation'] == 2].nlargest(6, 'attack')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['sp_defense'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['legendary']]['defense'].nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['generation'] == 4]['speed'].nlargest(2).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['legendary'] == False]['total'].nsmallest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Extraversion'].max() > df['Agreeableness'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Openness'].idxmax(), 'Profession'] == df.loc[df['Conscientousness'].idxmax(), 'Profession']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Emotional_Range'].idxmin(), 'Conversation'] == df['Conversation'].min()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Openness to Change'].mean() > df['Hedonism'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Self-enhancement'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Emotional_Range'] > 0.5].shape[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Profession'] == df['n'].idxmax()]['Extraversion'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Self-transcendence'].min()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['Conscientousness'].idxmax(), 'Profession'].astype('category')\"\n}",
    "{\n    \"solution\": \"df.loc[df['Hedonism'].idxmin(), 'Profession'].astype('category')\"\n}",
    "{\n    \"solution\": \"df.loc[df['Emotional_Range'].idxmax(), 'Profession'].astype('category')\"\n}",
    "global ans\n\ndef answer(df):\n    return df['Profession'].mode().astype('category').iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'Openness')['Profession'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.n[df.Agreeableness.nsmallest(4).index].astype('category').tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'Conversation')['Profession'].astype('category').tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(2, 'Self-enhancement')['Profession'].astype('category').tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Openness to Change'].nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(4, 'Emotional_Range')['Emotional_Range'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Extraversion'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(6, 'Self-transcendence')['Self-transcendence'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['title'].str.contains('communication', case=False, na=False).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['organization'].eq('IBM').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['abstract'].str.contains('software', case=False, na=False).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type'].eq('design').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['organization'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['num_claims'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['num_claims'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['type'] == 'utility').sum()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['num_claims'].idxmax(), 'organization'].astype('category')\"\n}",
    "{\n    \"solution\": \"df['kind'].mode()[0].astype('category')\"\n}",
    "global ans\n\ndef answer(df):\n    return df['lang'].astype('category').unique()\nans = answer(df)",
    "{\n    \"solution\": \"df['graphext_cluster'].mode()[0].astype('category')\"\n}",
    "global ans\n\ndef answer(df):\n    return df['organization'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['kind'].value_counts().head(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['graphext_cluster'].value_counts().nsmallest(2).sort_index(ascending=False).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['num_claims'].nlargest(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'num_claims')['id'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('kind')['num_claims'].median().reindex(['B2', 'S1']).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.sort_values('date', ascending=False).head(3)['id'].tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['user_followers_count'].idxmax(), 'user_verified']\"\n}",
    "{\n    \"solution\": \"(df.loc[df['user_favourites_count'].idxmax(), 'author_id<gx:category>'] == df.loc[df['retweets'].idxmax(), 'author_id<gx:category>'])\"\n}",
    "{\n    \"solution\": \"(lambda x: x[0] == x[1])((df['mention_names<gx:list[category]>'].explode().value_counts().idxmax(), df.loc[df['mention_names<gx:list[category]>'].explode() == df['mention_names<gx:list[category]>'].explode().value_counts().idxmax(), 'retweets'].sum().idxmax())\"\n}",
    "{\n    \"solution\": \"df.loc[df['retweets'].idxmax(), 'replies'] == df['replies'].max()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['user_followers_count<gx:number>'].max()\nans = answer(df)",
    "{\n    \"solution\": \"df[df['favorites'] > 10000]['author_id<gx:category>'].nunique()\"\n}",
    "{\n    \"solution\": \"df['retweets'].max()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['mention_names<gx:list[category]>'].explode().value_counts().max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['user_followers_count<gx:number>'].idxmax(), 'author_name<gx:category>']\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['user_favourites_count'].idxmax(), 'author_name<gx:category>']\"\n}",
    "global ans\n\ndef answer(df):\n    return df['mention_names<gx:list[category]>'].explode().value_counts().idxmax()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['retweets'].idxmax(), 'author_name<gx:category>']\"\n}",
    "global ans\n\ndef answer(df):\n    return df.groupby('author_id<gx:category>')['user_followers_count<gx:number>'].sum().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('author_name<gx:category>')['favorites<gx:number>'].sum().nlargest(4).index.tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df.explode('mention_names').loc[df['author_name<gx:category>'] != df['mention_names']].groupby('mention_names').size().nlargest(4).index.tolist()\"\n}",
    "{\n    \"solution\": \"df.nlargest(2, 'retweets')['author_name<gx:category>'].tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['user_followers_count<gx:number>'].nlargest(3).tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df['favorites'].nlargest(3).tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['mention_ids<gx:list[category]>'].explode().dropna().value_counts().nlargest(5).index.tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df['retweets'].nlargest(2).tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Loan Amount'].idxmax(), 'Loan Duration - Months'] == df['Loan Duration - Months'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Number of Existing Loans'].idxmax(), 'Loan Amount'] == df['Loan Amount'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Duration - Months'].idxmax() == df['Number of Existing Loans'].idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Age'].max() == df.loc[df['Age'].idxmax(), 'Loan Amount']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Amount'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Number of Existing Loans'] > 1].shape[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Duration - Months'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['Age'] > 50).sum()\nans = answer(df)",
    "{\n    \"solution\": \"df['Purpose of Loan'].mode()[0].astype('category')\"\n}",
    "{\n    \"solution\": \"df['Job'].mode()[0].astype('category')\"\n}",
    "global ans\n\ndef answer(df):\n    return df['Credit History'].mode()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Savings Account'].mode()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'Loan Amount')['Job'].astype('category').tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['Loan Duration - Months'].idxmax()]['Job'].value_counts().nlargest(4).index.tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Number of Existing Loans'].nlargest(5).index, 'Job'].unique().tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Age'].nlargest(2).index, 'Job'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Amount'].nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Duration - Months'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Number of Existing Loans'].nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Age'].nlargest(2).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Calories (kcal)'].eq(0).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Sugar (g)'].ge(0).all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Fat (g)'].eq(0).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Protein (g)'].isnull().any() or (df['Protein (g)'] == 0).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Calories (kcal)'] > 500].shape[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Fat (g)'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['Sodium (g)'] > 1).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Protein (g)'].max()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['Calories (kcal)'].idxmax(), 'name'].astype('category')\"\n}",
    "{\n    \"solution\": \"df.loc[df['Total Sugar (g)'].idxmax(), 'name'].astype('category')\"\n}",
    "{\n    \"solution\": \"df.loc[df['Total Fat (g)'].idxmin(), 'name'].astype('category')\"\n}",
    "{\n    \"solution\": \"df.loc[df['Protein (g)'].idxmax(), 'name'].astype('category')\"\n}",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'Calories (kcal)')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(3, 'Total Sugar (g)')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(4, 'Total Fat (g)')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(6, 'Protein (g)')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Calories (kcal)'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Sugar (g)'].nsmallest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Fat (g)'].nlargest(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(6, 'Protein (g)')['Protein (g)'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['edu'] == 'Did not complete primary education').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['polInterest'].notnull().all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].str.contains('will not vote', case=False, na=False).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['User self-placement on Left-Right economic values axis'].eq(10).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['User self- placement on Progressive-Conservative economic values axis'].eq(10).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Age'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['It should be more difficult for companies to lay off workers'].value_counts().get(1, 0)\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['gender'] == 'Prefer not to say', 'Age'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].mode()[0]\nans = answer(df)",
    "{\n    \"solution\": \"df['voteReason'].mode()[0].astype('category')\"\n}",
    "{\n    \"solution\": \"df['partyId'].mode()[0].astype('category')\"\n}",
    "global ans\n\ndef answer(df):\n    return df['lang'].mode().astype('category').iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].value_counts().head(5).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['voteReason'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['partyId'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['edu'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Age'].mode()[:3].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['User self-placement on Left-Right economic values axis'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['User self- placement on Progressive-Conservative economic values axis'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Constitutional organisation of the country (More Descentralization)'].value_counts().nlargest(2).index.tolist()\nans = answer(df)"
]