[
    "{\n    \"solution\": \"df.loc[df.groupby('author_id')['favorites'].sum().idxmax(), 'lang'] == 'es'\"\n}",
    "global ans\n\ndef answer(df):\n    return (df[df['author_name'] == df['author_name'].map(len).idxmax()]['type'] != 'retweet').mean() > 0.5\nans = answer(df)",
    "{\n    \"solution\": \"return df.groupby('author_id')['retweets'].sum().eq(0).any()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['links'].isnull().all()\nans = answer(df)",
    "{\n    \"solution\": \"return df['author_id'].nunique()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['text'].str.split().apply(len).max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['mention_ids'].isna().sum()\nans = answer(df)",
    "{\n    \"solution\": \"return df.loc[df['retweets'].idxmax(), 'author_name'].astype('category')\"\n}",
    "global ans\n\ndef answer(df):\n    return df.loc[df['favorites'].idxmax(), 'lang']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.iloc[(df['text'].str.split().str.len().idxmax())]['author_name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type'].mode()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'retweets')['author_name'].astype('category').tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(5, 'favorites')['lang'].astype('category').tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.assign(word_count=df['text'].str.split().apply(len)).nsmallest(4, 'word_count')['author_name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type'].value_counts().head(6).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'favorites')['retweets'].tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df.nlargest(3, 'text', key=lambda x: x.str.len())['text'].str.split().str.len().tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(4, 'favorites')['retweets'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['text'].str.split().str.len().nsmallest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['name'].eq('Pikachu').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['total'] > 700).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['generation'] == 1).all() and df.loc[df['generation'] == 1, 'legendary'].all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['speed'] > 150).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type1'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['total'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['generation'] == 3].shape[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['attack'].mean()\nans = answer(df)",
    "{\n    \"solution\": \"return df.loc[df['defense'].idxmax(), 'type1'].astype('category')\"\n}",
    "global ans\n\ndef answer(df):\n    return df.loc[df['speed'].idxmin(), 'name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['legendary'], 'type1'].mode().astype('category').iloc[0]\nans = answer(df)",
    "{\n    \"solution\": \"return df.loc[df['sp_attack'].idxmax(), 'name'].astype('category')\"\n}",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'total')['name'].astype('category').tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(5, 'hp')['name'].astype('category').tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type1'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return list(df[df['generation'] == 2].nlargest(6, 'attack')['name'].astype('category'))\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['sp_defense'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['legendary']].nsmallest(2, 'defense')['defense'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['generation'] == 4, 'speed'].nlargest(2).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['legendary'] == False].nsmallest(6, 'total')['total'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Extraversion'].max() > df['Agreeableness'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df.loc[df['Openness'].idxmax(), 'Profession'] == df.loc[df['Conscientousness'].idxmax(), 'Profession'])\nans = answer(df)",
    "{\n    \"solution\": \"return df.emotional_range.idxmin() == df[df['Conversation'] == df['Conversation'].min()]['Profession'].iloc[0]\"\n}",
    "global ans\n\ndef answer(df):\n    return df['Openness to Change'].mean() > df['Hedonism'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Self-enhancement'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Emotional_Range'] > 0.5]['Profession'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['n'].idxmax(), 'Extraversion']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Self-transcendence'].min()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Conscientousness'].idxmax(), 'Profession']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Hedonism'].idxmin(), 'Profession']\nans = answer(df)",
    "{\n    \"solution\": \"return df.loc[df['Emotional_Range'].idxmax(), 'Profession'].astype('category')\"\n}",
    "global ans\n\ndef answer(df):\n    return df.loc[df['n'].idxmax(), 'Profession']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'Openness')['Profession'].astype('category').tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(4, 'Agreeableness')['Profession'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'Conversation')['Profession'].astype('category').tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(2, 'Self-enhancement')['Profession'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Openness to Change'].nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Emotional_Range'].nsmallest(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Extraversion'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Self-transcendence'].nsmallest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['title'].str.contains('communication', case=False, na=False).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['organization'].eq('IBM').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['abstract'].str.contains('software', case=False, na=False).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type'].eq('design').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['organization'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['num_claims'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['num_claims'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return float(df[df['type'] == 'utility'].shape[0])\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['num_claims'].idxmax(), 'organization']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['kind'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['lang'].astype('category')\nans = answer(df)",
    "{\n    \"solution\": \"return df['graphext_cluster'].mode()[0].astype('category')\"\n}",
    "global ans\n\ndef answer(df):\n    return df['organization'].value_counts().sort_index().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type'].value_counts().nlargest(2).index.to_list()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['kind'].value_counts().nlargest(2).index.to_list()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['graphext_cluster'].value_counts(ascending=True).groupby(level=0).apply(lambda x: x.sort_index(ascending=False)).head(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['num_claims'].nlargest(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'num_claims')['id'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['kind'].isin(['B2', 'S1'])].groupby('kind')['num_claims'].median().loc[['B2', 'S1']].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.sort_values(by='date', ascending=False)['id'].head(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['user_followers_count<gx:number>'].idxmax(), 'user_verified<gx:boolean>']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df[df['user_favourites_count<gx:number>']==df['user_favourites_count<gx:number>'].max()]['retweets<gx:number>'].sum() == df['retweets<gx:number>'].max())\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (lambda most_mentioned, most_retweeted: most_mentioned == most_retweeted)(df['mention_ids<gx:list[category]>'].explode().mode()[0], df.loc[df['mention_ids<gx:list[category]>'].explode().isin(df['mention_ids<gx:list[category]>'].explode().mode()[:1]), 'mention_ids<gx:list[category]>'].explode().iloc[df['retweets<gx:number>'].idxmax()])\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('author_id<gx:category>')[['retweets<gx:number>', 'replies<gx:number>']].sum().idxmax() == df.groupby('author_id<gx:category>')[['retweets<gx:number>', 'replies<gx:number>']].sum().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['user_followers_count<gx:number>'].max()\nans = answer(df)",
    "{\n    \"solution\": \"df[df['favorites'] > 10000]['author_id<gx:category>'].nunique()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['retweets<gx:number>'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['mention_ids<gx:list[category]>'].explode().value_counts().max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['user_followers_count<gx:number>'].idxmax(), 'author_name<gx:category>']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['user_favourites_count<gx:number>'].idxmax(), 'author_name<gx:category>']\nans = answer(df)",
    "{\n    \"solution\": \"df.explode('mention_names').mention_names.mode()[0]\"\n}",
    "{\n    \"solution\": \"df.loc[df['retweets'].idxmax(), 'author_name<gx:category>']\"\n}",
    "{\n    \"solution\": \"df.nlargest(3, 'user_followers_count')['author_id<gx:category>'].tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df.nlargest(4, 'user_favourites_count<gx:number>')['author_name<gx:category>'].tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df.explode('mention_names')['mention_names'].value_counts().drop(df['author_name'].unique()).index[:4].tolist()\"\n}",
    "{\n    \"solution\": \"df.nlargest(2, 'retweets')['author_name<gx:category>'].tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['user_followers_count<gx:number>'].nlargest(3).tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df['favorites'].nlargest(3).tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['mention_ids<gx:list[category]>'].explode().value_counts().nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets<gx:number>'].nlargest(2).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Amount'].idxmax() == df['Loan Duration - Months'].idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df.loc[df['Number of Existing Loans'].idxmax(), 'Loan Amount'] == df['Loan Amount'].max())\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Loan Duration - Months'].idxmax(), 'Number of Existing Loans'] == df['Number of Existing Loans'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Age'].idxmax(), 'Loan Amount'] == df['Loan Amount'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Amount'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['Number of Existing Loans'] > 1).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Duration - Months'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Age'] > 50].shape[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Purpose of Loan'].mode().astype('category').iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Job'].mode()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Credit History'].mode()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Savings Account'].mode()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Job')['Loan Amount'].sum().nlargest(3).index.to_list()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(1, 'Loan Duration - Months')['Job'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Number of Existing Loans'] == df['Number of Existing Loans'].max()]['Job'].value_counts().nlargest(5).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return list(df.nlargest(2, 'Age')['Job'].astype('category'))\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Amount'].nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Duration - Months'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Number of Existing Loans'].nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(2, 'Age')['Age'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Calories (kcal)'].eq(0).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['Total Sugar (g)'] > 0).all()\nans = answer(df)",
    "{\n    \"solution\": \"return (df[['Total Fat (g)', 'Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)']].sum(axis=1) == 0).any()\"\n}",
    "global ans\n\ndef answer(df):\n    return (df['Protein (g)'] == 0).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['Calories (kcal)'] > 500).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Fat (g)'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['Sodium (g)'] > 1).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Protein (g)'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Calories (kcal)'].idxmax(), 'name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Total Sugar (g)'].idxmax(), 'name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Total Fat (g)'].idxmin(), 'name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Protein (g)'].idxmax(), 'name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'Calories (kcal)')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(3, 'Total Sugar (g)')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(4, 'Total Fat (g)')['name'].astype('category').tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return list(df.nsmallest(6, 'Protein (g)')['name'].astype('category'))\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Calories (kcal)'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Sugar (g)'].nsmallest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(4, 'Total Fat (g)')['Total Fat (g)'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(6, 'Protein (g)')['Protein (g)'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['edu'].str.contains('Didn\u2019t complete primary education', na=False).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['polInterest'].nunique() == 1 and df['polInterest'].iloc[0] == 'Yes'\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].str.lower().str.contains('not vote').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['User self-placement on Left-Right economic values axis'].max() == df['User self-placement on Left-Right economic values axis'].max(skipna=True)\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['User self- placement on Progressive-Conservative economic values axis'].eq(10).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Age'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['It should be more difficult for companies to lay off workers'].sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['gender'].isna()]['Age'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['voteReason'].mode()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['partyId'].mode()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['lang'].mode()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].value_counts().nlargest(5).index.to_list()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return list(df['voteReason'].value_counts().nlargest(3).index)\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return list(df['partyId'].value_counts().nlargest(3).index)\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['edu'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Age'].value_counts().head(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['User self-placement on Left-Right economic values axis'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['User self- placement on Progressive-Conservative economic values axis'].value_counts().head(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Constitutional organisation of the country (More Descentralization)'].mode().iloc[:2].tolist()\nans = answer(df)"
]