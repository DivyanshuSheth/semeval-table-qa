[
    "```json\n{\n    \"solution\": \"df['lang'].value_counts().idxmax() == 'es'\"\n}\n```\n\nInput DataFrame columns: ['time', 'tweet_id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What is the total number of favorites of all the tweets by the most popular author?\nExpected return type: int64\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['author_id'] == df['author_id'].value_counts().idxmax()]['favorites'].sum()\"\n}\n```\n\"\"\"\n\n# code\n\"\"\"\nWho is the most influential person in the Brazilian World Cup 2014?\n\nInput DataFrame columns: ['time', 'tweet_id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date','mention_ids','mention_names','retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link','search']\nQuestion: What is the total number of retweets of the top 10 most retweeted tweets?\nExpected return type: int64\n\"\"\"\n\n# code\n\n\"\"\"\n1) Identify which author has the most mentions.\n2) For that author, do a pivot table counting the number of times each author mentioned the author.\n3) Get the rows that do not mention the author and sort them by count descending.\n4) Get the top 10 values.\n5) Get the favorite count for those values.\n6) Get the sum.\n\"\"\"\n\n# code\n\n\"\"\"\n1) Identify which author has the most mentions.\n2) For that author,",
    "```json\n{\n    \"solution\": \"df.sort_values('author_name').tail(1)['type'].iloc[0] == 'original'\"\n}\n```\n\nInput DataFrame columns: ['work ex', 'position', 'location', 'description', 'requirements', 'posted date', 'title', 'company', 'salary', 'source', 'href']\nQuestion: Which company offers the most positions?\nExpected return type: object\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['company'].mode()\"\n}\n```\n\nInput DataFrame columns: ['Tile', 'Result', 'Lower Bound (5%)', 'Median', 'Upper Bound (95%)', 'Skew', 'Min', 'Max']\nQuestion: Which data set has the most skew?\nExpected return type: object\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Skew'] == df['Skew'].max()]['Tile'].iloc[0]\"\n}\n\nInput DataFrame columns: ['Land Square feet', 'Building Square feet', 'Year Built']\nQuestion: For properties with Building Square feet above the median, what is the median Land Square feet?\nExpected return type: numeric\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Building Square feet'] > df['Building Square feet'].median()]['Land Square feet'].median()\"\n}def get_solution(column_names, question, expected_type):\n    if expected_type == 'boolean':\n        return f'df[df[\"{question}\"] == df[\"{question}\"].max()].{column_names}.iloc[0]'\n    else:\n        return f'df[\"{question}\"].{expected_type}()'\n\ndef get_question_and_solution(column_names, question, expected_type):\n    question = question.replace('Does the author with the longest name post mainly ', '')\n    solution = get_solution(column_names, question, expected_type)\n    return question, solution\n\ndef get_column_names(column_names):\n    if column_names == 'Input DataFrame columns: ' + open('column_names.txt').read():\n        return 'Input DataFrame columns: [' + open('column_names.txt').",
    "```json\n{\n    \"solution\": \"len(df[df['retweets'] == 0]['author_name'].unique()) == df['author_name'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['talkingHead', 'signed', 'ratings', 'popularity', 'title', 'synopsis', 'director', 'writers', 'stars', 'score', 'votes', 'gross', 'runtime', 'year', 'release', 'action', 'adventure', 'animation', 'comedy', 'crime', 'documentary', 'drama', 'family', 'fantasy', 'history', 'horror', 'music', 'mystery', 'romance', 'sci-fi', 'sport', 'thriller', 'war', 'western', 'facebookLikes', 'imdbVotes', 'imdbRating']\nQuestion: Does the average critic rating for any director on Rotten Tomatoes exceed the average overall critic rating?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df['score'] * df['ratings']).mean() > df['score'].mean()\"\n}\n```\n\nInput DataFrame columns: ['TalkingHead', 'Signed', 'Ratings', 'Popularity', 'Title', 'Synopsis', 'Director', 'Writers', 'Stars', 'Score', 'Votes', 'Gross', 'Runtime', 'Year', 'ReleaseDate', 'Action', 'Adventure', 'Animation', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'History', 'Horror', 'Music', 'Mystery', 'Romance', 'Sci-Fi', 'Sport', 'Thriller', 'War', 'Western', 'FacebookLikes', 'imdbVotes', 'imdbRating']\nQuestion: Is the average number of IMDB votes greater than the total number of votes for all of the films?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['imdbVotes'].sum() > df['imdbVotes'].mean()\"\n}\n```\n\n```python\n# First load the iris dataset\nimport numpy as np\nimport pandas as pd\n\nurl = 'https://archive.",
    "```json\n{\n    \"solution\": \"any(df.links.isnull())\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What is the largest number of mentions for a single post, and what are these mentions?\nExpected return type: int or string, depending on your choice\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.mention_ids.str.split(',').str.len().max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: Which post has the most links?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.links_first[df.links_first.str.split(',').str.len().idxmax()]\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many posts contain both a link and a picture?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{",
    "```json\n{\n    \"solution\": \"len(df['author_id'].unique())\\n\"\n}\n```\n\nInput DataFrame columns: ['start', 'end', 'location', 'category']\nQuestion: What are the top 3 most frequently occurring locations?\nExpected return type: dataframe\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('location')['location'].count().sort_values(ascending=False).\\n\\\n                    .head(3).reset_index().rename(columns={'location': 'count'})\"\n}\n```\n\nInput DataFrame columns: ['start', 'end', 'location', 'category']\nQuestion: Which category has the longest time range?\nExpected return type: dataframe\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('location')['location'].count().sort_values(ascending=False).\\n\\\n                    .head(3).reset_index().rename(columns={'location': 'count'})\"\n}\n```\n\nInput DataFrame columns: ['datetime', 'category', 'category_name']\nQuestion: What categories have the highest number of entries per month?\nExpected return type: dataframe\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(df['datetime'].dt.strftime('%Y-%m'))['category'].count().\\n\\\n                    sort_values(ascending=False).head(3).reset_index().rename(columns={'datetime': 'month', 'category': 'count'})\\n\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']\nQuestion: What is the sum roundClose adjusted price of Apple stock for 2019? Round to 2 decimal places.\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"round(df[df['Date'].dt.year == 2019]['Adj Close'].sum(), 2)\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']\nQuestion: Which day had the lowest low price for AAPL stock? Round the day.",
    "```json\n{\n    \"solution\": \"df['text'].apply(lambda x: len(x.split())).max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: Which user has tweeted the most?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['author_handler'].value_counts().index[0].split('@')[0]\"\n}\n```\n\nInput DataFrame columns: ['url', 'visitCount', 'domain', 'labels', 'title', 'description', 'normalizedUrl', 'rank', 'isRelated']\nQuestion: Which domain has the highest total visit count?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('domain')['visitCount'].sum().sort_values(ascending=False).index[0]\"\n}\n```\n\nInput DataFrame columns: ['headcount', 'city_id', 'latitude', 'longitude', 'name', 'region', 'country', 'country_code', 'region_name', 'region_code', 'city_name', 'city_slug', 'timezone_gmt_offset', 'timezone_description', 'timezone_time', 'timezone_visibility_delta']\nQuestion: How many cities have a total of 100 or more city visitors in the data?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['headcount'] >= 100]['headcount'].count()\"\n}\n```\n\nInput DataFrame columns: ['engines_number', 'name_id', 'time_to_number', 'number', 'pattern', 'regions_number', 'title', 'status']\nQuestion: What is the longest title?\nExpected return type: string\n\nCode that calculates the answer",
    "```json\n{\n    \"solution\": \"df['retweets'].sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'has_image', 'has_video', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What is the total number of favorites received by all authors in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['favorites'].sum()\"\n}\n```\n\nInput DataFrame columns: ['operation', 'customer_id', 'customer_name', 'date', 'product_type', 'year', 'month', 'amount_usd', 'currency', 'country', 'state', 'city', 'category', 'subcategory', 'category_group']\nQuestion: What is the average revenue from each category group in the first month of the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['month'] == 1].groupby('category_group')['amount_usd'].mean()\"\n}\n```\n\nInput DataFrame columns: ['operation', 'customer_id', 'customer_name', 'date', 'product_type', 'year', 'month', 'amount_usd', 'currency', 'country', 'state', 'city', 'category', 'subcategory', 'category_group']\nQuestion: What category group has the highest average sale amount for the first month of the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['month'] == 1].groupby('category_group')['amount_usd'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['operation', 'customer_id', 'customer_name', 'date', 'product_type', 'year', 'month', 'amount_usd', 'currency', 'country', 'state', '",
    "```json\n{\n    \"solution\": \"len(df[df['mention_ids'].isnull()])\"\n}\n```\n\n***************************************************************************\n\n**Question 3**\n\nLet us revisit the baseball stats dataset. This time, let's calculate the win percentage for each player.\n\nData URL: https://docs.google.com/spreadsheets/d/1nY63L75Ik1o596j-c2a6u0jC7IK9MohkY6xX-IVX-oU/export?format=csv\n\n- Calculate the win percentage for each player\n- Sort the win percentage highest to lowest\n- Show the top 10 win percentage players\n- How many players have won more than half of their games?\n- Calculate the number of games played per year for each player\n- Calculate the 2019 win percentage for each player\n- Sort the 2019 win percentage highest to lowest\n- Show the top 10 2019 win percentage players\n- Create a DataFrame that only includes the top 10 win percentage players in 2019\n- Create a new column called 'Winning_Streak' that calculates the number of consecutive games the player has won\n- Create a new column called 'Winning_Streak_Year' that calculates the number of consecutive games the player's streak has been \nduring a given year\n- Create a DataFrame that shows the player name, year, the winning streak for the year, and the win percentage for that year\n\nAll answers from this question should be FORWARD SLASH (/) delimited\n\n```json\n{\n    \"solution\": \"5/10/4/20/20/2/0.353/0.43/0.5/0.59/8\"\n}\n```\n\n***************************************************************************\n\n**Question 4**\n\nThe following are the names of the top 10 players in the NBA in 2020. This year, the players will be used as the search term for a\nrecently updated dataset. The dataset contains information on players' social media activity.\n\n- \n- \n- \n- \n- \n-",
    "```json\n{\n    \"solution\": \"df[df['retweets'] == df['retweets'].max()]['author_name'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['name', 'title', 'country', 'year', 'duration', 'language', 'content_id', 'src_id', 'type', 'episodes', 'seasons', 'properties', 'hash', 'episode_count', 'poster', 'banner', 'trailer', 'year_aired', 'year_aired_aired_in_africa', 'year_aired_aired_in_asia', 'year_aired_aired_in_australia', 'year_aired_aired_in_europe', 'year_aired_aired_in_north_america', 'year_aired_aired_in_south_africa', 'year_aired_aired_in_south_america', 'year_aired_aired_in_usa', 'year_aired_aired_in_worldwide', 'year_aired_aired_in_uk', 'year_aired_aired_in_germany', 'year_aired_aired_in_japan', 'year_aired_aired_in_korea', 'year_aired_aired_in_mexico', 'year_aired_aired_in_canada', 'year_aired_aired_in_spain', 'year_aired_aired_in_france', 'year_aired_aired_in_italy', 'year_aired_aired_in_russia', 'year_aired_aired_in_turkey', 'year_aired_aired_in_australia', 'year_aired_aired_in_south_africa', 'year_aired_aired_in_uk', 'year_aired_aired_in_south_korea', 'year_aired_aired_in_india', 'year_aired_aired_in_japan', 'year_aired_aired_in_france', 'year_",
    "```json\n{\n    \"solution\": \"df.loc[df['favorites'].idxmax(), 'lang']\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: Which tweet has the lowest number of favorites?\nExpected return type: int64\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['favorites'].idxmin(), 'id']\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many tweets contain images?\nExpected return type: int64\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['image_links'].astype(bool).sum()\"\n}\n```\n\n```python\ndf = pd.read_csv(\"https://raw.githubusercontent.com/john-s-butler-dit/applied-data-analysis/master/data/example_pandas_df.csv\")\n```\n/_notebooks/2020-04-10-1_python_basics.md\n---\nlayout: default\ntitle: 1. Python Basics\nparent: Python Intro\nnav_order: 1\n---\n\n# Python Basics\n{: .no_toc }\n\n1. TOC \n{:toc}\n\n---\n\n## What is Python\n\nPython is an interpreted, object-oriented, high-level programming language with dynamic semantics. Its high-",
    "```json\n{\n    \"solution\": \"df.loc[df['text'].str.len().idxmax(), 'author_handler']\"\n}\n```\n\nInput DataFrame columns: ['rank', 'country', 'organization', 'selfMade', 'gender', 'age', 'netWorth', 'source', 'philanthropyScore', 'title', 'birthDate', 'category', 'state', 'city', 'personName', 'about', 'bio', 'finalWorth']\nQuestion: Which source has the most philanthropy score?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['philanthropyScore'].groupby(df['source']).idxmax().groupby(df['source']).first().max()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Name', 'Age', 'Occupation', 'Country', 'City', 'BirthDate', 'Gender', 'Education', 'Behavior', 'flag', 'Sex', 'Marshaller']\nQuestion: Which occupation has the most 'Marshall'?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Marshaller'].str.contains('Marshall'), 'Occupation'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['rank', 'country', 'organization', 'selfMade', 'gender', 'age', 'netWorth', 'source', 'philanthropyScore', 'title', 'birthDate', 'category', 'state', 'city', 'personName', 'about', 'bio', 'finalWorth']\nQuestion: Which source has the highest number of self-made people?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['source', 'selfMade']).size().loc[df.groupby(['source', 'selfMade']).size().groupby(level=0).idxmax()].iloc[-1]\"\n}\n```\n\nInput DataFrame columns: ['rank', 'country', 'organization', 'selfMade', 'gender', 'age', 'netWorth', 'source', 'philanthropyScore', 'title', 'birthDate', 'category', 'state', 'city', 'personName',",
    "```json\n{\n    \"solution\": \"df['type'].value_counts().idxmax()\"\n}\n```\n\n## Expected Submission\nPlease submit the answers in a json file with the following keys:\n- solution is the answer to the above questions in one line of code. The solution should be ONLY one line and use pandas vectorized operations when possible.\n- solution_explanation is one or two sentences that explains the above solution\n- solution_type is the type of data to expect the solution to return (i.e. the expected output of the question)\n- solution_columns is which columns from the input DataFrame to use. This is a list to account for situations where the solution uses several columns to calculate the answer.\n\nMake sure your solution does not contain any comments, as this will be ignored by the gradescope autograder.\n\n## Scoring\n\nAfter you submit the assignment, we run the autograder to determine the score that you'll get for the assignment. For each question in the assignment, you'll either get a full credit or no credit. For full credit, you must get the correct response type and the correct response. In case of a false response, you'll still get one credit, even if your answer does not match the correct answer.\n\n## Autograder\n\nThe autograder is a python script that runs the following checks:\n1. Checks that the submitted code is 1 line long and passes the autograder tests.\n1. Checks that the output of the code is the correct type.\n1. Checks that the solution uses the correct columns.\n/cs61a/lectures/3_conditionals/lecture_3_conditionals_04_increment_decrement.py\n# increment and decrement\nn = 2\nn = n + 1\nn -= 1\n\nn += 1\nn = n + 2\n\nn *= 3\nn /= 3\nn //= 3\n\nn = n + 3\nn = 1 + n\n\nn = n + 1\nn = 1 + n + 2\nn = 1 + 2 + n\nn = 1 + (2 + 3)\n\n# multiple assignment\nx = 4\ny = 7\nx, y = y, x\n\nx = y",
    "```json\n{\n    \"solution\": \"pd.unique(df.sort_values('retweets', ascending=False).head(3)['author_name']).tolist()\"\n}\n```\n\nHave fun and good luck!\n\n\n### Here is some code to get started:\n```python\nimport pandas as pd\ndf = pd.read_csv(\"https://raw.githubusercontent.com/Insight-MDS/data-science-challenge/master/2016-challenge.csv\")\n```\n\n### Notes:\n* The function will be tested on an unseen dataset.\n* The returned information should be of type \"category\".\n* The length of the returned information should be the same as the length of the input dataset, if applicable.\n* If there is a tie, the function should return the person with the earliest date of birth.\n* The function time limit is 10 seconds.\n/4.sql/2016-challenge.sql\n-- What are all products that are on sale (selling price is greater than the cost)?\n--    SELECT name FROM Products WHERE price > cost;\n-- Which organizations are selling sneakers?\n--    SELECT organization FROM Products WHERE name LIKE '%Sneakers%';\n-- What are the product names and IDs of all products with a missing name?\n--    SELECT name, id FROM Products WHERE name IS NULL;\n--    \n--    SELECT name, id FROM Products WHERE name IS NULL;\n--    \n--    SELECT name, id FROM Products WHERE name IS NULL;\n-- What is the age of the youngest woman with a gender of 2?\n--    SELECT age FROM Persons WHERE 2 = gender AND age is not NULL ORDER BY age;\n-- What are the ages of all the adults (20 or older) whose height is missing?\n--    SELECT age FROM Persons WHERE 18 = (age - 2) AND height IS NULL;\n--    SELECT age FROM Persons WHERE gender = 2 AND age >= 20 AND height IS NULL;\n-- What are all the unique organizations from which products were sold?\n--    SELECT DISTINCT organization FROM Products WHERE organization IS NOT NULL;\n\n--    SELECT DISTINCT organization FROM Products WHERE organization IS NOT NULL;\n-- What are the names of",
    "```json\n{\n    \"solution\": \"df.nsmallest(5, 'favorites')['lang']\"\n}\n```\n\nInput DataFrame columns: ['id', 'date_time', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What are the average number of retweets per language?\nExpected return type: DataFrame\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('lang')['retweets'].mean().round(2)\"\n}\n```\nimport json\nimport requests\n\nfrom typing import Union, Dict\nfrom typing import List\n\nfrom .data import get_data\n\ndef validate_solution(options: dict, solution: Union[str, dict], expected: str) -> bool:\n    options = options['options']\n    if isinstance(solution, str):\n        solution = {'solution':solution}\n    if expected not in options:\n        return False\n\n    if isinstance(options[expected], str):\n        return solution['solution'] == options[expected]\n    elif isinstance(options[expected], List) and isinstance(solution['solution'], List):\n        for item1, item2 in zip(options[expected], solution['solution']):\n            if item1 != item2:\n                return False\n        return True\n    elif isinstance(options[expected], Dict) and isinstance(solution['solution'], Dict):\n        for key1, key2 in zip(options[expected].keys(), solution['solution'].keys()):\n            if key1 != key2:\n                return False\n            if options[expected][key1] != solution['solution'][key1]:\n                return False\n        return True\n    return False\n\ndef run_test(url: str, solution: dict) -> dict:\n    r = requests.post(url, json = solution)\n    return r.json()\n\ndef test_question(question_num: int = 1) -> dict:\n    col_names, df = get_data(question_num)\n    options",
    "```json\n{\n    \"solution\": \"df['text'].str.split().str.len().sort_values().head(4).index\"\n}\n```\n\n### 2. Data Scientist\n\nYou are provided with 16 numeric columns from a survey, where each row is a person, and the values are the answers the person gave to the questions. The survey is designed to assess the variables affecting the employee performance.\n\nUse the provided columns to complete the following tasks.\n\n1. Create a function that takes a DataFrame as input, calculates the variance across the rows and returns the values in a new column with the name `variance`.\n2. Create a function that takes a DataFrame as input, divides each numerical column by the mean, and returns a new DataFrame with the columns divided.\n3. Create a function that takes a DataFrame as input, calculates the maximum *per row*, and returns a new column with the name `max_per_row`.\n4. Create a function that takes a DataFrame as input, finds the column with the highest variance across all the rows and returns its name.\n5. Create a function that takes a DataFrame as input, finds the column with the lowest mean across all the rows and returns its name.\n\n### 3. Data Scientist\n\nGiven two input columns `a` and `b`, compute the number of values that are in `a` but not in `b` and return a new column with the name `a_not_b`.\n\n### 4. Data Scientist\n\nGiven the following DataFrame:\n```json\n{\n    \"solution\": \"pd.DataFrame({'id': [1, 2, 3, 4], 'name': ['Alice', 'Michael', 'Jennifer', 'Robert'], 'age': [40, 21, 38, 57]})\"\n}\n```\n\nComplete the following tasks:\n\n1. Create a function that takes a DataFrame as input and adds a new column with the name `age_is_young`. The column should contain a boolean that indicates whether the age is less than 30 or not (i.e. 29, 30, 31).\n2. Create a function that takes a DataFrame as input, finds the second youngest person, and returns the",
    "```json\n{\n    \"solution\": \"df['type'].value_counts()[:6].index.to_list()\"\n}\n```\n\n\nInput DataFrame columns: ['timestamp', 'container_id', 'signal', 'value']\nQuestion: What was the lowest measurement of signal in a container with the ID of 12345678 as of 2018-02-01?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['container_id'] == '12345678', df['timestamp'] == '2018-02-01']['signal'].min()\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'container_id', 'signal', 'value']\nQuestion: What is the 95th percentile of the signal in a container with the ID of 12345678 as of 2018-02-01?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['container_id'] == '12345678', df['timestamp'] == '2018-02-01']['signal'].quantile(0.95)\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'container_id', 'signal', 'value']\nQuestion: Which container had the lowest average signal over the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('container_id').mean().signal.idxmin()\"\n}\n```\nInput DataFrame columns: ['timestamp', 'container_id', 'signal', 'value']\nQuestion: What is the median of the sum of the signal and value in each container?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('container_id').sum().agg(('sum', 'median'))['signal']\"\n}\n```\n\nInput DataFrame columns: ['A', 'B']\nQuestion: What is the minimum value of A AND the maximum value of B?\nExpected return type: int",
    "```json\n{\n    \"solution\": \"df.nlargest(5, 'favorites')['retweets']\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: Which search term is the most used by non-English speakers?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['lang'] != 'en'].groupby('search')['search'].count().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['seed', 'run', 'dim', 'arch', 'alg', 'result']\nQuestion: What is the average result for a run with an architecture of 'cnn'?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['arch'] == 'cnn']['result'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many tweets of each type are there per language?\nExpected return type: dict\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('lang')['type'].value_counts().to_dict()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites',",
    "```json\n{\n    \"solution\": \"df.sort_values('text_len').tail(3)['text_len']\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Sport', 'Batting Avg.', 'Stint', 'Career Batting Avg.']\nQuestion: Who has the highest career batting average in the Baseball category?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Sport'] == 'Baseball'].sort_values('Career Batting Avg.', ascending=False)['Name'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['gender', 'date', 'time', 'lat', 'long', 'city', 'state', 'add']\nQuestion: Which city had the most tweets during the most recent day?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('date').tail(1)['city'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['date', 'temp', 'rain', 'wind', 'hail', 'small_hail', 'sunshine', 'snowfall', 'snow_depth', 'fog', 'rain_density', 'days_sunshine', 'days_fog', 'days_rain', 'days_rain_density']\nQuestion: How many days was there rain in a week?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['days_rain'].mean()\"\n}\n```\n\nInput DataFrame columns: ['day', 'hour', 'month', 'minute', 'year', 'second', 'dow', 'quarter', 'year_quarter', 'year_month', 'day_quarter']\nQuestion: How many days in a quarter had more than 1000 tweets?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df.groupby(['year_quarter', 'day_quarter'])['year_quarter'].count().loc[(slice(None), [1, 2, 3]), :])\"\n}\n```\n\nInput DataFrame columns: ['month', '",
    "```json\n{\n    \"solution\": \"df['retweets'].sort_values(ascending=True).head(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare', 'Age_by_Class']\nQuestion: What were the survival rates of the 5 youngest passengers of each class?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Pclass')['Age'].apply(lambda x: x.nsmallest(5)).groupby(level=0).mean().round(2).tolist()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'name', 'total_score', 'loc_id', 'loc_name', 'clan_id', 'clan_name', 'league_name', 'league_id', 'league_season', 'league_tier']\nQuestion: What is the standard deviation of the total score for each league?\nExpected return type: dict\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('league_id')['total_score'].std().round(2).to_dict()\"\n}\n```\n\nInput DataFrame columns: ['room_id', 'room_name', 'date', 'hour', 'minutes', 'speaker', 'type', 'device_id', 'device_name', 'title', 'type_description', 'text', 'url']\nQuestion: How many transcripting actions were recorded for each room by each speaker?\nExpected return type: dict\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(by=['room_id', 'speaker'])['type'].count().to_dict()\"\n}\n```\n\nInput DataFrame columns: ['room_id', 'room_name', 'date', 'hour', 'minutes', 'speaker', 'type', 'device_id', 'device_name', 'title', 'type_description', 'text', 'url']\nQuestion: How many transcripting actions were recorded for each room by each speaker?\nExpected return type: dict",
    "```json\n{\n    \"solution\": \"df.sort_values('text', ascending=True)['text'].head(6).str.split().str.len()\"\n}\n```\n\nInput DataFrame columns: ['age', 'height', 'weight', 'male', 'sport', 'name']\nQuestion: What is the average weight for players who participated in the Taekwondo sport?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['sport'] == 'Taekwondo', 'weight'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Sex', 'Survived', 'Age', 'Pclass', 'Embarked', 'Fare', 'SibSp', 'Parch', 'Cabin', 'Name', 'Ticket', 'SibSp', 'Parch', 'Cabin', 'Name', 'Ticket', 'Boarded', 'Destination', 'Age_cat', 'Fare_cat']\nQuestion: How many men embarked from Embarked C and survived with a Fare of at least 100?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['Sex'] == 'male') & (df['Embarked'] == 'C') & (df['Fare'] >= 100) & (df['Survived'] == 1)].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: What is the ratio between the number of women born before 1900 and the number of men born after 1900?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['gender'] == 'female') & (df['birthDate'].astype(str).str[:4].astype(int) < 1900)].shape[0] / df",
    "```json\n{\n    \"solution\": \"df['name'] == 'Pikachu'\"\n}\n```\n\nInput DataFrame columns: ['date', 'index', 'open', 'high', 'low', 'close', 'volume']\nQuestion: What was the minimum stock price for Tesla on June 1, 2020\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['date'] == 'June 1, 2020') & (df['index'] == 'Tesla')]['close'].min()\"\n}\n```\n\nInput DataFrame columns: ['date', 'state', 'positive', 'negative', 'pending', 'hospitalized', 'death']\nQuestion: What is the number of deaths in total in California?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['state'] == 'California')]['death'].sum()\n}\n```\n\nInput DataFrame columns: ['time', 'age', 'sex', 'painloc', 'painexer', 'relrest', 'pncaden', 'cp', 'trestbps', 'htn', 'chol', 'smoke', 'cigs', 'years', 'fbs', 'dm', 'famhist', 'restecg', 'ekgmo', 'ekgday', 'ekgyr', 'dig', 'prop', 'nitr', 'pro', 'diuretic', 'proto', 'thaldur', 'thaltime', 'met', 'thalach', 'thalrest', 'tpeakbps', 'tpeakbpd', 'dummy', 'trestbpd', 'exang', 'xhypo', 'oldpeak', 'slope', 'rldv5', 'rldv5e', 'ca', 'restckm', 'exerckm', 'restef', 'restwm', 'exeref', 'exerwm', 'thal', 'thalsev', 'thalpul', 'earlobe', 'cmo', 'cday', 'cyr', 'num', 'lmt', 'ladprox', 'laddist', 'diag', 'cxmain', 'ramus', 'om1', 'om2",
    "```json\n{\n    \"solution\": \"df['total']>700\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Items', 'Units', 'Returns', 'Unit Cost', 'Total Cost', 'Revenue', 'Actual Sales']\nQuestion: How many units were returned in total?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Units'].sum()\"\n}\n```\"\"\"\n\n# Sample data\n\n# Input DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\n# Question: Is the person with the highest net worth self-made?\n# Expected return type: boolean\n\nimport pandas as pd\ndf = pd.read_csv('https://gist.githubusercontent.com/mikegomes/32f5b6a83571d9965023c25002df74e6/raw/cf7482e64308048a7599b61294446d6b4e9900e0/top_1000_billionaires.csv')\n\n# Solution\nanswer = df.loc[df['finalWorth'].idxmax(), 'selfMade']\nassert type(answer) == bool\n\n# Input DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\n# Question: Which passenger class has the highest number of survivors?\n# Expected return type: category\n\nimport pandas as pd\ndf = pd.read_csv('https://gist.githubusercontent.com/curran/a08a1080b88344b0c8a7/raw/639388c2cbc2120a14dcf466e85730eb8be498bb/titanic.csv",
    "```json\n{\n    \"solution\": \"df['generation'] == 1 & df['legendary'].all()\"\n}\n```\n\n### Extra\n- For extra credit, you can try to complete the challenge with more than one line of code.\n- You can try to complete a challenge on your own using different data and see if you get the correct answer.\n- You can try to complete a challenge without using pandas. Search the internet for a solution using different techniques.\n- Use your own data.\n/scripts/learn.sh\n#!/bin/bash\n\nif [ \"$1\" = \"0\" ]\nthen\n    docker build -t reddit:tuner .\nelif [ \"$1\" = \"1\" ]\nthen\n    docker run --rm -it -v /home/user/dev/python/Reddit-Tuner/redditTuner:/workspace reddit:tuner /bin/bash\nelse\n    echo \"Please give valid input. 0 for building the docker image, 1 for running the docker image\"\nfi\n/redditTuner/Dockerfile\nFROM python:3.7-alpine\n\nRUN apk add --no-cache ffmpeg build-base\n\nCOPY requirements.txt /tmp/\n\nRUN pip install --disable-pip-version-check -r /tmp/requirements.txt\n/redditTuner/headphone_noise.py\nimport numpy as np\nimport pandas as pd\nimport json\nfrom glob import glob\nfrom os import path, makedirs\nfrom pydub import AudioSegment, effects\nfrom multiprocessing import Pool\nfrom tqdm import tqdm\n\n\ndef load_metadata(path):\n    metadata = pd.read_csv(path, delimiter=',', header=None, usecols=[0, 2, 5, 6],\n                           names=['post_id', 'duration', 'is_sarcastic', 'post_title'])\n    metadata['post_id'] = metadata['post_id'].apply(lambda x: path.join(path, x + '.json'))\n    return metadata\n\n\ndef load_json(file):\n    with open(file, 'r') as f:\n        data = json.load(f)\n    return data\n\n\ndef load_audio(file):\n    song = AudioSegment.from_file(file)\n    return song",
    "```json\n{\n    \"solution\": \"df[df['speed'] > 150].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['name', 'bought_from', 'city_bought', 'city_origin', 'origin', 'country_origin', 'age', 'height', 'weight', 'experience', 'score', 'gender', 'height_cm', 'weight_kg', 'experience_years', 'age_years', 'weight_lbs', 'score_standardized']\nQuestion: What was the min, median, and max of the standardized score?\nExpected return type: DataFrame\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.describe().loc[['min', '50%', 'max'], 'score_standardized'].reset_index()\"\n}\n```\n/further_cleaning.py\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport sklearn.metrics as metrics\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import KFold, cross_val_score, cross_val_predict, LeaveOneOut\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\nimport seaborn as sns\n# feel free to import any packages you deem necessary!\n\ndef clean_census_data(census_data):\n    # TODO: See if you can fill in NaNs for any of the columns, and convert them to ints:\n    # Example -> df_new = df_original.fillna(0)\n    # Generally, I'd recommend using fillna with the median, but in this particular case, the mean may be more appropriate.\n    # Also, I'd suggest imputing the bachelor's degree column (for example) with 'No' if the person does not have a degree.\n    # For floats, you may round to the nearest whole number.\n\n    # returns: the cleaned census data as a DataFrame\n    # HINT: the DataFrame should have 10,268 entries, and 9 of those should be NaN.\n    return None\n\n\ndef clean_imdb_data(imdb_data):",
    "```json\n{\n    \"solution\": \"df['type1'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['year', 'month', 'total', 'flower', 'fruit', 'vegetable', 'dairy', 'watermelon', 'orange', 'banana', 'pear', 'melon', 'cantaloupe', 'cherry', 'apple', 'grape', 'grapefruit', 'dragon_fruit', 'strawberry', 'pineapple', 'papaya', 'lemon', 'mango', 'berry', 'peach', 'blueberry', 'apricot', 'pear', 'nectarine', 'apricot', 'kumquat', 'guava', 'pasang', 'lychee', 'pomegranate', 'honeydew', 'plum', 'nectarine', 'pineapple', 'kiwi', 'crabapple', 'papaya', 'dragon_fruit', 'tangerine', 'peach', 'cranberry', 'pomegranate', 'lime', 'kiwi', 'pineapple', 'avocado', 'coconut', 'guava', 'passionfruit', ' prune', 'pitaya', 'dates', 'orange', 'mango', 'coconut', 'lemon', 'banana', 'kiwi', 'dragon_fruit', 'cherry', 'passionfruit', 'papaya', 'mango', 'papaya', ' apple', 'grapefruit', 'guava', 'watermelon', 'grape', 'grapefruit', 'pear', 'banana', 'cantaloupe', 'grapefruit', 'kiwi', 'kiwi', 'nashi', 'fruit', 'apple', 'cherry', 'grape', 'fruit', 'banana', 'apple', 'grape', 'cherry', 'orange', 'grape', 'grape', 'grape', 'grape', 'grape', 'grape', 'grape', 'grape', 'watermelon', 'grape', 'lemon', 'grape', 'grape', 'grape', 'grape', 'grape', 'grape', 'grape', 'grapefruit', 'grape', 'grape', 'grape', 'grape",
    "```json\n{\n    \"solution\": \"df['total'].max()\"\n}\n```\n\nInput DataFrame columns: ['template', 'editor', 'user', 'namespace', 'title', 'pageid', 'size', 'wordcount', 'timestamp']\nQuestion: Which user had the largest edit to the article \"Avengers:_Infinity_War\"?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('user')['size'].transform('max').idxmax()\"\n}\n```\n\nInput DataFrame columns: ['name', 'team', 'home_score', 'away_score', 'home_team', 'away_team']\nQuestion: What is the highest away score ever?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['away_score'].max()\"\n}\n```\n\nInput DataFrame columns: ['year', 'age', 'number', 'gender', 'alpha', 'country', 'beta', 'team', 'points', 'home_score', 'away_score', 'home_team', 'away_team']\nQuestion: Which country had the highest points at 2006?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['year'] == '2006'].groupby('country')['points'].transform('max').idxmax()\"\n}\n```\n\nInput DataFrame columns: ['name', 'country', 'population', 'area']\nQuestion: What's the population density of the country with the largest population?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('population', ascending = False).iloc[0]['population'] / df.sort_values('population', ascending = False).iloc[0]['area']\"\n}\n```\n\nInput DataFrame columns: ['alpha', 'beta', 'gamma', 'delta']\nQuestion: What's the median value in the alpha column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['alpha'].median()\"\n}\n```\n\nInput DataFrame columns: ['name', 'last_name', 'age",
    "```json\n{\n    \"solution\": \"df[(df['generation'] == 3)]['number'].count()\"\n}\n```\n\nInput DataFrame columns: ['gender', 'age', 'glasses', 'friends', 'salary', 'budget', 'website', 'movie_choice', 'sport_choice', 'finance_choice', 'music', 'tv_shows', 'books', 'likes_cars', 'likes_stamps', 'likes_robots', 'likes_gaming', 'likes_knowledge', 'likes_books', 'likes_movies', 'likes_music', 'likes_videogames', 'likes_coffee']\nQuestion: What percentage of females have red glasses and like knowledge?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['gender'] == 'female') & (df['glasses'] == 'red')]['likes_knowledge'].mean()\"\n}\n```\n\nInput DataFrame columns: ['name', 'age', 'gender', 'location', 'job', 'hometown']\nQuestion: How many males are in the dataset from the location they listed as their hometown?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['gender'] == 'male')]['location'].eq(df['hometown']).sum()\"\n}\n```\n\nInput DataFrame columns: ['salary', 'friends', 'budget']\nQuestion: What is the mean percentage of friends that are equal to or over 25 percent of their salary?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['friends'].gt(df['salary'] * 0.25).mean()\"\n}\n```\n\n\n## 1.2. Data exploration\n\nAs an input you will receive a pandas DataFrame. The DataFrame columns are:\n\n* id - Unique identifier from the dataset.\n* id_owner - Unique identifier from the dataset.\n* first_name - First name from the dataset.\n* last_name - Last name from the dataset.\n* gender - Gender from the dataset.\n* age - Age from the dataset.\n* city - City from the dataset.\n* country - Country from the dataset",
    "```json\n{\n    \"solution\": \"df['attack'].mean()\"\n}\n```\n\nInput DataFrame columns: ['date', 'name', 'percent']\nQuestion: What is the highest percentage of a 'zombie' Pokemon in a single day?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['name'] == 'zombie', 'percent'].max()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Address', 'Lat', 'Lng', 'Population', 'City', 'State', 'Zip', 'Country', 'Lat', 'Lng', 'Population', 'City', 'State', 'Zip', 'Country']\nQuestion: Which city has the largest population?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Population'].idxmax(), 'City']\"\n}\n```\n\n## Problem Two\n\nWrite a function that calculates the median of a provided list. You may use a for loop or pandas DataFrame/Series vectorized operations.\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"med_ = [1, 2, 3, 4, 5]\n    print(pd.Series(med_).median())\"\n}\n```\n\n## Problem Three\n\nWrite a function that calculates the mode of a provided list. You may use a for loop or pandas DataFrame/Series vectorized operations.\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"mode_ = [1, 2, 3, 4, 5, 5, 1]\n    print(pd.Series(mode_).mode().iloc[0])\"\n}\n```\n\n## Problem Four\n\nWrite a function that calculates the mean of a provided list. You may use a for loop or pandas DataFrame/Series vectorized operations.\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"mean_ = [1, 2, 3, 4, 5]\n    print(pd.Series(mean_).mean())\"\n}\n```\n\n## Problem Five\n\nLet's say we have a spreadsheet containing information about our employees. The",
    "```json\n{\n    \"solution\": \"df[df['defense'] == df['defense'].max()]['type1']\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Category', 'Sex', 'Type 1', 'Type 2', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary']\nQuestion: What Pok\u00e9mon type is the most popular for each sex?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Sex')['Type 1'].agg(pd.Series.mode).to_frame().rename(columns={'Type 1': 'Type'})\"\n}\n```\n\nInput DataFrame columns: ['uid', 'age', 'gender', 'marital', 'education', 'occupation', 'income', 'occupation_code']\nQuestion: How many users are in each gender?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['gender'].value_counts().sum()\"\n}\n```\n\nInput DataFrame columns: ['uid', 'age', 'gender', 'marital', 'education', 'occupation', 'income', 'occupation_code']\nQuestion: What is the 75th quantile of users' income?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['income'].quantile(0.75)\"\n}\n```\n\nInput DataFrame columns: ['uid', 'age', 'gender', 'marital', 'education', 'occupation', 'income', 'occupation_code']\nQuestion: What is the average age of male users from the 2nd gender?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['gender'] == 2) & (df['gender'] == 'M')]['age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['uid', 'age', 'gender', 'marital', 'education', 'occupation', 'income', 'occupation_code']\nQuestion: What is the occupation code of the user with the highest income?",
    "```json\n{\n    \"solution\": \"df[df['speed'] == df['speed'].min()]['name']\"\n}\n```\n\n*Example Output*\n```\nTrue\n```\n\n## Further Reading\n- [pandas.DataFrame.idxmax](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.idxmax.html)\n- [pandas.DataFrame.mode](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mode.html)\n- [pandas.DataFrame.min](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.min.html)\n\n## Licensing\n\n<div align=center>\n    <a href=\"https://creativecommons.org/share-your-work/public-domain/cc0/\">\n        <img src=\"../media/public_domain.png\" width=300>\n    </a>\n</div>\n\n- All you need to know:\n   - [Introduction to Pandas](https://pandas.pydata.org/pandas-docs/stable/getting_started/index.html)\n   - [Getting Started with Vectorized Operations](https://spark.apache.org/docs/latest/api/python/getting_started/pandas.html)\n   - [pandas.DataFrame.loc](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html)\n   - [pandas.DataFrame.iloc](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.iloc.html)\n   - [pandas.DataFrame.idxmax](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.idxmax.html)\n   - [pandas.DataFrame.mode](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mode.html)\n   - [pandas.DataFrame.min](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.min.html)\n\n- The concepts discussed here are also applicable to the `df.iloc[]` function, which is similar to `df.loc[]`.\n   - [pandas.DataFrame.iloc](https://pandas.pydata.org/docs/reference/api/pandas.",
    "```json\n{\n    \"solution\": \"df[df['Legendary'] == True]['type1'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['X', 'Y']\nQuestion: What is the distance between the point (20, 20) and each point in the data?\nExpected return type: series\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"np.sqrt((df['X'] - 20)**2 + (df['Y'] - 20)**2)\"\n}\n```\n\n## D. Pandas with `lambda`\n\nComplete the following function without using a loop or creating an additional column. The function should output a pandas DataFrame.\n\nInput DataFrame columns: ['number', 'name', 'type1', 'type2', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary']\nQuestion: What pok\u00e9mon are legendary and do not have the type \"dragon\" or \"flying\"?\nExpected return type: DataFrame\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[lambda df: (df['Legendary'] == True) & (df['type1'] != 'dragon') & (df['type2'] != 'flying')]\"\n}\n```\n\n## E. Plotting \n\nComplete the following plot and describe the key features.\n\n```python\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\ndf = pd.read_csv('https://bit.ly/3skhm99')\nfig = px.scatter(df, x='set', y='mass (g)', animation_frame='year', width=600, height=600, size='mass (g)', opacity=0.8, color='sex')\nfig.show()\n```\n\nDescribe the key features of the question:\n- Plot the weight (mass) of each animal over time, color-coded by sex, with each year being a frame\n- The weight of most animals has increased over time\n- The weight of each sex generally follows the same pattern over time\n- There is an outlier year that is significantly different from the rest",
    "```json\n{\n    \"solution\": \"df[df['sp_attack'] == df['sp_attack'].max()]['name'].iloc[0]\"\n}\n```\n```\n# Formative Assessment 1\n\n## Introduction\nThis assessment will test students' ability to create a web application utilizing a database and API.\n\n## Instructions\nPlease note that this assessment will not be graded until after 3:00 PM CDT/15:00 UTC.\n\n### Part 1 - The Flask Application\nThe purpose of this section is to assess students' ability to create a Flask application with a postgres database and utilize SQLAlchemy to query the database.\n\n### Part 2 - Send Email\nThe purpose of this section is to assess students' ability to send an email using the gmail SMTP server.\n\n## Grading\n- 10 Points - Part 1\n- 10 Points - Part 2\n- 10 Points - Project\n\n## Scoring\n- A score of 70-99% will receive a 4.0.\n- A score of 60-69% will receive a 3.5.\n- A score of 50-59% will receive a 3.0.\n- A score of 40-49% will receive a 2.5.\n- A score of 30-39% will receive a 2.0.\n- A score of 20-29% will receive a 1.5.\n- A score of 10-19% will receive a 1.0.\n- A score of 0-9% will receive a 0.0.\n\n## Reminder\nStudents are responsible for all of their own work. This includes reusing both our code and class code.\nRemember that you will not be graded until after 3:00 PM CDT.\ntion\n\ndef parse_cohort_info(cohort_info: pd.DataFrame) -> int:\n    \"\"\"\n    Calculates the total number of people in the cohort\n\n    Parameters:\n    cohort_info (pd.DataFrame): A DataFrame containing information about the cohort\n                                in the following format: cohort name, person ID, and\n                                earning",
    "```json\n{\n    \"solution\": \"df.sort_values(by='total', ascending=False)['name'][:3]\"\n}\n```## Vectorized Solutions\n\n(1 point)\n* Vectorized solution to select all the rows with a certain column value:\n\n```python\ndf[df['country'] == 'USA']\n```\n\n* Vectorized solution to calculate the sum of a large DataFrame:\n\n```python\ndf.values.sum()\n```\n\n* Vectorized solution to calculate the mean of a large DataFrame (including NaN values):\n\n```python\ndf.values.mean()\n```\n\n* Vectorized solution to calculate the median of a large DataFrame (including NaN values):\n\n```python\ndf.values.median()\n```\n\n* Vectorized solution to calculate the number of non-NaN values in a large DataFrame:\n\n```python\ndf.values.count()\n```\n\n* Vectorized solution to calculate the standard deviation of a large DataFrame (excluding NaN values):\n\n```python\ndf.values.std()\n```def vectorized_solution(assignment_contents):\n    \"\"\"Returns a string that is a vectorized solution to the problem\n    \n    Parameters\n    ----------\n    assignment_contents : dictionary\n        a dictionary with one key, \"code\", whose value is the contents of the\n        assignment's json file\n        \n    Returns\n    ----------\n    solution : str\n        the vectorized solution in string format\n    \"\"\"\n    for key, val in assignment_contents.items():\n        if key == \"solution\":\n            return f\"\"\"df.values[{val}]\"\"\"\n\nvectorized_solution(assignment_contents)## Pandas-only Solutions\n\n(1 point)\n* Pandas-only solution to select all the rows with a certain column value:\n\n```python\ndf[df['country'] == 'USA']\n```\n\n* Pandas-only solution to calculate the sum of a large DataFrame:\n\n```python\ndf.values.sum()\n```\n\n* Pandas-only solution to calculate the mean of a large DataFrame (including NaN values):\n\n```python\ndf.values.mean()\n```\n\n* Pandas-only solution to calculate the median of a large DataFrame (including NaN values):\n\n```python\ndf.values.median()\n```\n\n* Pandas-only solution",
    "```json\n{\n    \"solution\": \"df.sort_values('hp')[:5]['name']\"\n}\n```\n\n\n```",
    "```json\n{\n    \"solution\": \"df['type1'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['day', 'temperature', 'windspeed', 'event']\nQuestion: What was the day with the highest average temperature?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('day').mean()['temperature'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['quarters', 'cents']\nQuestion: What was the total amount of money in cents?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['quarters'] * 25 + df['cents']\"\n}\n```\n\nInput DataFrame columns: ['sleep_hours', 'coffee_consumed']\nQuestion: What was the Pearson\u2019s correlation coefficient for sleep_hours and coffee_consumed?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['sleep_hours'].corr(df['coffee_consumed'], method='pearson')\"\n}\n```\n\nInput DataFrame columns: ['code_strokes', 'score']\nQuestion: What was the score associated with the minimum number of strokes?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['score'].loc[df['code_strokes'].idxmin()]\"\n}\n```\n\nInput DataFrame columns: ['Name', 'speed', 'power', 'break_distance', 'acceleration', 'agility', 'price']\nQuestion: What was the car with the highest price?\nExpected return type: str\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['price'].idxmax(), 'Name']\"\n}\n```\n\nInput DataFrame columns: ['day', 'temperature', 'windspeed', 'event']\nQuestion: What was the day with the highest temperature?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['temperature'].idxmax(), 'day']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df[df['generation'] == 2].sort_values(by=['attack'], ascending=False)['name'].head(6).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare', 'Embarked']\nQuestion: What is the average number of siblings and spouses aboard for male and female passengers traveling in 3rd class who embarked at Cherbourg?\nExpected return type: dictionary\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['Sex', 'Pclass', 'Embarked'])['Siblings_Spouses Aboard'].mean()['female']['3']['C']\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare', 'Embarked']\nQuestion: Is there a correlation between survival and passenger class for female passengers traveling in 3rd class who embarked at Cherbourg?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"pearsonr(df[(df['Sex'] == 'female') & (df['Pclass'] == 3) & (df['Embarked'] == 'C')]['Survived'], df[(df['Sex'] == 'female') & (df['Pclass'] == 3) & (df['Embarked'] == 'C')]['Pclass'])[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'date', 'open', 'high', 'low', 'close', 'volume', 'ticker']\nQuestion: Which 3 tickers were the most volatile by month?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('ticker')['Volume'].transform('sum').idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'date', 'open', 'high', 'low', 'close',",
    "```json\n{\n    \"solution\": \"df.sort_values('sp_defense', ascending=False)['sp_defense'].iloc[:5].tolist()\"\n}\n```\n\nInput DataFrame columns: ['airline', 'number', 'delay', 'dest', 'distance', 'arr_time', 'sched_dep_time', 'taxi_in', 'dep_time', 'origin', 'carrier', 'taxi_out', 'arrival_time', 'wheels_off', 'arr_delay', 'day', 'scheduled_time', 'carrier_delay', 'diverted', 'dep_delay', 'weather_delay', 'month']\nQuestion: What is the average speed of flights (distance/time) in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['arrival_time'].map(lambda x: x.minute + x.hour * 60 + x.second / (60 ** 2)) + df['dist'] / df['speed']\"\n}\n```\n\nInput DataFrame columns: ['post_id', 'email', 'first_name', 'last_name', 'gender', 'ip_address']\nQuestion: Which IP address appears the most in the dataset?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['ip_address'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['age', 'gender', 'height', 'weight', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio']\nQuestion: What is the mean weight of a person in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['weight'].mean()\"\n}\n```\n\nInput DataFrame columns: ['age', 'height', 'weight', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio']\nQuestion: What is the most frequent gender in the dataset?\nExpected return type: string\n\nCode that calculates the answer:\n```json",
    "```json\n{\n    \"solution\": \"df[df['legendary'] == True]['defense'].nsmallest(2).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Day', 'Start_Date', 'Start_Time', 'End_Date', 'End_Time']\nQuestion: How many minutes does it take to get from the Start_Date to the End_Date?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"diff = (pd.Timestamp(df['End_Date']) - pd.Timestamp(df['Start_Date'])).astype('timedelta64[m]')\"\n}\n```\n\nInput DataFrame columns: ['date', 'time', 'type', 'value']\nQuestion: Send an email from \"\" to \"\" saying \"Hi %NAME%! This is your daily balance update! Today, your %TYPE% is %VALUE%$. Thanks!\", to all people in the DataFrame, sorted by lastname, alphabetically\nExpected return type: dataframe\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('last_name').apply(lambda x: send_email(df=df, name=x['last_name'], value=x['balance'], type=x['type']), axis=1)\"\n}\n```\n\nInput DataFrame columns: ['date', 'time', 'type', 'value']\nQuestion: Save the resulting DataFrame to a CSV file\nExpected return type: dataframe\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.to_csv('output.csv', index=False)\"\n}\n```\n\nInput DataFrame columns: ['OBJECTID', 'FID', 'FID_1', 'FID_2', 'FID_3', 'FID_4', 'FID_5', 'FID_6', 'FID_7', 'FID_8', 'FID_9', 'FID_10', 'FID_11', 'FID_12', 'FID_13', 'FID_14', 'FID_15', 'FID_16', 'FID_17', 'FID_18', 'FID_1",
    "```json\n{\n    \"solution\": \"df[df['generation'] == 4]['speed'].nlargest(2)\"\n}\n```\n\nInput DataFrame columns: ['number', 'name', 'type1', 'type2', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary']\nQuestion: How many Pok\u00e9mon were identified as Legendary?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['legendary'] == True])\"\n}\n```\n\nInput DataFrame columns: ['city', 'city_ascii', 'lat', 'lng', 'country', 'iso2', 'iso3', 'admin_name', 'capital', 'population', 'id']\nQuestion: What is the population of the capital city in Japan?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['country'] == 'Japan'][df['capital'] == 'primary']['population']\"\n}\n```\n\nInput DataFrame columns: ['id', 'zipcode','population', 'households', 'median_income', 'median_house_value', 'ocean_proximity']\nQuestion: What is the population of the city with the highest median income?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['median_income'].idxmax(), 'population']\"\n}\n```\n\nInput DataFrame columns: ['id', 'imdb_id','original_title','cast','director','tagline','keywords','overview','runtime','genres','production_companies','release_date','vote_count','vote_average','release_year','budget_musd','revenue_musd','status','popularity','runtime','genres','production_companies','release_date','vote_count','vote_average','release_year','budget_musd','revenue_musd','status','popularity']\nQuestion: What are the names of the top 10 highest grossing movies?\nExpected return type: list[str]\n\nCode that calculates the answer:\n```json",
    "```json\n{\n    \"solution\": \"df[df['legendary'] == False].sort_values(by='total').head(6)['total'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['type', 'price', 'size']\nQuestion: list the 10 most expensive products, sorted by the total size of each product.\nExpected return type: list[str]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('type')['price', 'size'].sum().sort_values(by='price', ascending=False).reset_index()['type'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['time', 'action', 'date', 'user_id']\nQuestion: list the top 3 most common time periods during which users performed the most number of actions.\nExpected return type: list[str]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"pd.to_datetime(df['time']).dt.time.value_counts(ascending=False).index[:3].tolist()\"\n}\n```\n\nInput DataFrame columns: ['manufacturer', 'model', 'year', 'type', 'engine_size', 'fuel', 'fuel_economy', 'tax', 'city_mpg', 'highway_mpg']\nQuestion: list the manufacturer and model of the car with the highest fuel economy.\nExpected return type: tuple(str, str)\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['fuel_economy'].idxmax(), ['manufacturer', 'model']].values\"\n}\n```\n\nInput DataFrame columns: ['event_type', 'time', 'date', 'user_id', 'ip_address', 'latitude', 'longitude']\nQuestion: count the number of times a user visited the website during the date range January 3 to January 15, 2016.\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['date'] >= '2016-01-03') & (df['date'] <= '2016-01-15')].groupby('user_id')['event_",
    "```json\n{\n    \"solution\": \"df.loc[df['Extraversion'].idxmax(), 'Extraversion'] > df.loc[df['Agreeableness'].idxmax(), 'Agreeableness']\"\n}\n```\n\n### Datasets\n\n- Net Worth\n- Titanic\n- Mental Fitness\n\n## Problems\n\n### 1. A Colleague\n\n**Status:** **Easy**\n\n- Objective: Get an overview of how a (fictional) friend or colleague reports their mental fitness.\n- Data: [Auxiliary/mental_fitness.csv](https://github.com/dataquestio/solutions/blob/master/practical-coding-for-data-science-problems/Auxiliary/mental_fitness.csv)\n- Desired output format:\n\n```json\n{\n    \"\": {\n        \"watched_movies\": 1,\n        \"shared_thoughts\": 23,\n        \"watched_shows\": 2,\n        \"wrote_on\": \"2016-04-09T21:00:00\",\n        \"overall_score\": 18.75,\n        \"age\": 26\n    },\n    \"\": {\n        \"watched_movies\": 3,\n        \"shared_thoughts\": 55,\n        \"watched_shows\": 3,\n        \"wrote_on\": \"2016-04-09T21:00:00\",\n        \"overall_score\": 22.78,\n        \"age\": 27\n    },\n    \"\": {\n        \"watched_movies\": 2,\n        \"shared_thoughts\": 26,\n        \"watched_shows\": 3,\n        \"wrote_on\": \"2016-04-09T21:00:00\",\n        \"overall_score\": 21.0,\n        \"age\": 22\n    }\n}\n```\n\n- **Solution:**\n\n```python\nimport pandas\n\ndf = pandas.read_csv(\"Auxiliary/mental_fitness.csv\", parse_dates=[\"wrote_on\"])\n\ndef compile_scores(df",
    "```json\n{\n    \"solution\": \"df.loc[df['Openness'].idxmax(), 'Profession'] == df.loc[df['Conscientousness'].idxmax(), 'Profession']\"\n}\n```\n\n---\n\n### Practice Problem [3/3]\n\nImagine you are a data analyst working for a transportation company. They have a daily log of all trips made by all riders in a given city. They have used a third-party tracking service on each trip to record the start and end location, as well as other information about the trip.\n\nThe following dictionary contains the input data that can be used to complete the task.\nThe input data contains the following columns:\n* **trip_id** - each trip has a unique ID\n* **start_loc** - the starting location of the trip\n* **end_loc** - the ending location of the trip\n* **start_time** - the time the trip started\n* **end_time** - the time the trip ended\n* **distance** - the total distance traveled (km)\n\n```python\n{\n    \"data\": {\n        \"trip_id\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        \"start_loc\": [\"SF\", \"SF\", \"LA\", \"LA\", \"SF\", \"SF\", \"NYC\", \"SF\", \"LA\", \"SF\"],\n        \"end_loc\": [\"SF\", \"NYC\", \"NYC\", \"SF\", \"NYC\", \"LA\", \"SF\", \"NYC\", \"SF\", \"LA\"],\n        \"start_time\": [\"2020-10-13 13:00:00\", \"2020-10-13 11:00:00\", \"2020-10-13 14:00:00\", \"2020-10-13 13:00:00\", \"2020-10-13 13:00:00\", \"2020-10-13 14:00:00\", \"202",
    "```json\n{\n    \"solution\": \"df[df['Profession'] == df['Profession'].min()]['Emotional_Range'].min() == df[df['Profession'] == df['Profession'].min()]['Conversation'].min()\"\n}\n```\n\nInput DataFrame columns: ['tenure_18', 'tenure_17', 'tenure_16', 'tenure_15', 'tenure_14', 'tenure_13', 'tenure_12', 'tenure_11', 'tenure_10', 'tenure_9', 'tenure_8', 'tenure_7', 'tenure_6', 'tenure_5', 'tenure_4', 'tenure_3', 'tenure_2', 'tenure_1']\nQuestion: Are there months where there is a significantly higher number of churners?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['tenure_11'].max() > df['tenure_1'].max()\"\n}\n```\n\nInput DataFrame columns: ['User_ID', 'Age', 'Gender', 'Occupation', 'Marital_Status', 'Education_Level', 'History', 'City_Category', 'Stay_In_Current_City_Years', 'Product_Category_1', 'Product_Category_2', 'Product_Category_3']\nQuestion: Is the maximum value for the product category 2 higher than the maximum value for the product category 1?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Product_Category_2'].max() > df['Product_Category_1'].max()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'age', 'sex', 'occupation', 'zip_code', 'Product_1', 'Product_2', 'Product_3', 'Product_4', 'Product_5', 'Product_6', 'Product_7', 'Product_8', 'Product_9', 'Product_10', 'Product_11', 'Product_12']\nQuestion: How many zip codes have more than 2000 transactions?",
    "```json\n{\n    \"solution\": \"df['Openness to Change'].mean() > df['Hedonism'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Profession', 'Openness', 'Conscientousness', 'Extraversion', 'Agreeableness', 'Emotional_Range', 'Conversation', 'Openness to Change', 'Hedonism', 'Self-enhancement', 'Self-transcendence', 'n','Sample', 'A1', 'A2', 'A3', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37', 'A38', 'A39', 'A40', 'A41', 'A42', 'A43', 'A44', 'A45', 'A46', 'A47', 'A48', 'A49', 'A50', 'A51', 'A52', 'A53', 'A54', 'A55', 'A56', 'A57', 'A58', 'A59', 'A60', 'A61', 'A62', 'A63', 'A64', 'A65', 'A66', 'A67', 'A68', 'A69', 'A70', 'A71', 'A72', 'A73', 'A74', 'A75', 'A76', 'A77', 'A78', 'A79', 'A80', 'A81', 'A82', 'A",
    "```json\n{\n    \"solution\": \"df.loc[df['Self-enhancement'].idxmax(), 'Self-enhancement']\"\n}\n```\n#Import pandas\nimport pandas as pd\n\n#Create input DataFrame\ndata = {'rank': {0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6},\n 'personName': {0: '', 1: '', 2: '', 3: '', 4: '', 5: ''},\n 'age': {0: 45, 1: 37, 2: 44, 3: 45, 4: 38, 5: 48},\n 'finalWorth': {0: 3.1452e13, 1: 2.047e11, 2: 3.12e12, 3: 7.33e11, 4: 2.53e12, 5: 2.277e13},\n 'category': {0: 'Private Company', 1: 'Private Company', 2: 'Private Company', 3: 'Private Company', 4: 'Private Company', 5: 'Private Company'},\n 'source': {0: 'LinkedIn', 1: 'LinkedIn', 2: 'LinkedIn', 3: 'LinkedIn', 4: 'LinkedIn', 5: 'LinkedIn'},\n 'country': {0: 'United States', 1: 'United States', 2: 'United States', 3: 'United States', 4: 'United States', 5: 'United States'},\n 'state': {0: 'California', 1: 'California', 2: 'California', 3: 'California', 4: 'California', 5: 'California'},\n 'city': {0: 'Los Angeles', 1: 'Los Angeles', 2: 'Los Angeles', 3: 'Los Angeles', 4: 'Los Angeles', 5: 'Los Angeles'},\n 'organization': {0: 'T",
    "```json\n{\n    \"solution\": \"len(df[df['Emotional_Range'] > 0.5]['Profession'])\"\n}\n```\n\nInput DataFrame columns: ['Rank', 'Name', 'Nationality', 'Age', 'Hair', 'Height', 'Weight', 'BMI', 'Team', 'Position', 'Count', 'Diff_Age', 'Diff_Height', 'Diff_Weight', 'Diff_BMI', 'Diff_Count', 'Open', 'Conscientiousness', 'Extraversion', 'Agreeableness', 'Emotional Range', 'Conformity', 'Diff_Open', 'Diff_Conscientiousness', 'Diff_Extraversion', 'Diff_Agreeableness', 'Diff_Emotional Range', 'Diff_Conformity', 'Role_1', 'Role_2', 'Role_3', 'Role_4', 'Role_5', 'Role_6', 'Role_7', 'Role_8', 'Role_9', 'Role_10']\nQuestion: What is the mean value of the 'Open' column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Open'].mean()\"\n}\n\nInput DataFrame columns: ['Country', 'Rank', 'Name', 'Team', 'Position', 'Count', 'Open', 'Conscientiousness', 'Extraversion', 'Agreeableness', 'Emotional_Range', 'Conformity', 'Diff_Rank', 'Diff_Open', 'Diff_Conscientiousness', 'Diff_Extraversion', 'Diff_Agreeableness', 'Diff_Emotional_Range', 'Diff_Conformity', 'Role_1', 'Role_2', 'Role_3', 'Role_4', 'Role_5', 'Role_6', 'Role_7', 'Role_8', 'Role_9', 'Role_10']\nQuestion: What is the mean value of the 'Diff_Rank' column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Diff_Rank'].mean()\"\n}\n\nInput DataFrame columns: ['Rank', 'Name', 'National",
    "```json\n{\n    \"solution\": \"df[df['n'].idxmax()]['Extraversion'].mean()\"\n}\n\nInput DataFrame columns: ['year', 'sex', 'births']\nQuestion: Which year had the highest total number of births?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['births'].idxmax(), 'year']\"\n}\n\nInput DataFrame columns: ['name', 'gender', 'count']\nQuestion: How many records are in the dataset?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['name'].count()\"\n}\n\nInput DataFrame columns: ['name', 'gender', 'count']\nQuestion: Which is the most popular name of all time? (e.g. excluding those that only appear once in the dataset)?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['count'].idxmax(), 'name']\"\n}\n\nInput DataFrame columns: ['country', 'city', 'latitude', 'longitude']\nQuestion: Which city has the largest number of countries represented?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.iloc[df['country'].groupby(df['city']).transform('count').idxmax()]\"\n}\n\nInput DataFrame columns: ['country', 'city', 'latitude', 'longitude']\nQuestion: Which city has the smallest number of countries represented?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.iloc[df['country'].groupby(df['city']).transform('count').idxmin()]\"\n}\n\nInput DataFrame columns: ['City', 'Type', 'StartDate', 'EndDate', 'MaxAttendees', 'MeanAttendees']\nQuestion: Which event in 2019 had the largest number of attendees?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df.loc[df['EndDate'].str.contains('2019'), 'MaxAttendees'].idxmax(), 'City",
    "```json\n{\n    \"solution\": \"df['Self-transcendence'].min()\"\n}\n```\n\nInput DataFrame columns: 'n', 'Dystopia Residual', 'Family', 'Freedom', 'Generosity', 'Government Corruption', 'Happiness Score', 'Health', 'Trust (Government Corruption)', 'Ladder', 'Positive affect', 'Negative affect', 'Social support', 'Perceptions of corruption'\nQuestion: What is the average Happiness Score?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Happiness Score'].mean()\"\n}\n```\n\nInput DataFrame columns: 'country' 'gdppc' 'life' 'income' 'inflation' 'deaths'\nQuestion: What is the total population in Greece?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['country'] == 'Greece', 'population'].sum()\"\n}\n```\n\nInput DataFrame columns: 'id', 'name', 'category', 'price', 'rating', 'review_count', 'latitude', 'longitude'\nQuestion: Which category of restaurant has the most reviews?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('category')['review_count'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: 'id', 'name', 'category', 'price', 'rating', 'review_count', 'latitude', 'longitude'\nQuestion: What was the average review count for a 'Bakery' restaurant?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['category'] == 'Bakery']['review_count'].mean()\"\n}\n```\n\nInput DataFrame columns: 'id', 'name', 'category', 'price', 'rating', 'review_count', 'latitude', 'longitude'\nQuestion: What was the average rating for a 'Grocery' restaurant?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['category'] == '",
    "```json\n{\n    \"solution\": \"df.groupby('Profession')['Conscientiousness'].mean().sort_values(ascending=False).index[0]\"\n}\n\nInput DataFrame columns: ['ID', 'Temperature', 'Pressure', 'Humidity', 'WindSpeed', 'WindBearing', 'Latitude', 'Longitude', 'date', 'time', 'year', 'month', 'day', 'hour', 'dayofweek', 'quarter', 'dayofyear', 'dayofmonth', 'weekofyear']\nQuestion: Is there any evidence that the weather is getting warmer?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Temperature'].rolling(30).mean().diff().any()\"\n}\n```def q1():\n    df = pd.read_csv('https://raw.githubusercontent.com/LambdaSchool/DS-Unit-1-Sprint-1-Dealing-With-Data/master/module4-database-intro/database-intro/db-company-data/db-company-data.csv')\n    return df.loc[df['finalWorth'].idxmax(), 'selfMade']\ndef q2():\n    df = pd.read_csv('https://raw.githubusercontent.com/LambdaSchool/DS-Unit-1-Sprint-1-Dealing-With-Data/master/module4-database-intro/database-intro/db-company-data/db-company-data.csv')\n    return df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\ndef q3():\n    df = pd.read_csv('https://raw.githubusercontent.com/LambdaSchool/DS-Unit-1-Sprint-1-Dealing-With-Data/master/module4-database-intro/database-intro/db-company-data/db-company-data.csv')\n    return df.groupby('Profession')['Conscientiousness'].mean().sort_values(ascending=False).index[0]\ndef q4():\n    df = pd.read_csv('https://raw.githubusercontent.com/LambdaSchool/DS-Unit-1-Sprint-1-Dealing-With-Data/master/module4-database-intro/",
    "```json\n{\n    \"solution\": \"df.loc[df['Hedonism'].idxmin(), 'Profession']\"\n}\n```\n\nInput DataFrame columns: ['name', 'age', 'sex', 'job', 'hobby', 'pet', 'smoker', 'drink_level', 'dress_preference', 'ambience', 'profession', 'view']\nWhich job is the most likely to have bought a bicycle?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['hobby'] == 'buying']['profession'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['country', 'visits_date', 'page_type', 'session_id']\nQuestion: Which country of the world is the most visited?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['country'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Gender', 'AgeRange', 'Age', 'Profession', 'How Do You Measure Your Well-Being? - Disposition', 'Worth', 'Patron', 'Friends', 'Advice to Self or Another']\nQuestion: What is the profession that has the largest disposition?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.iloc[df['How Do You Measure Your Well-Being? - Disposition'].idxmax()]['Profession']\"\n}\n```\n\nInput DataFrame columns: ['Q_1', 'Q_2', 'Q_3', 'Q_4', 'Q_5', 'Q_6', 'Q_7', 'Q_8', 'Q_9', 'Q_10', 'Q_11', 'Q_12', 'Q_13', 'Q_14', 'Q_15', 'Q_16', 'Q_17', 'Q_18', 'Q_19']\nQuestion: What is the profession with the most common answer to question Q_17?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{",
    "```json\n{\n    \"solution\": \"df.loc[df['Emotional_Range'].idxmax(), 'Profession']\"\n}\n```\n\nQuestion: What is the average length of a name?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Name'].apply(len).mean()\"\n}\n```\n\nQuestion: What is the average age of the first person in the dataset?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Age'].iloc[0]\"\n}\n```\n\nQuestion: What is the total number of siblings and spouses aboard the Titanic?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"sum(df['Siblings_Spouses Aboard'])\"\n}\n```\n\nQuestion: What is the total number of parents and children aboard the Titanic?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"sum(df['Parents_Children Aboard'])\"\n}\n```\n\nQuestion: What is the average amount of fare paid for each class?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(by='Pclass')['Fare'].mean()\"\n}\n```\n\nQuestion: What is the average amount of fare paid for each gender?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(by='Sex')['Fare'].mean()\"\n}\n```\n\nQuestion: What is the total number of unique passengers on the Titanic?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df['Name'].unique())\"\n}\n```\n\nQuestion: What is the total number of surviving passengers on the Titanic?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['Survived'] == 1]['Name'].unique())\"\n}\n```\n\nQuestion: What",
    "```json\n{\n    \"solution\": \"'Profession' column with the highest count\"\n}\n```\n\nInput DataFrame columns: ['value']\nQuestion: What is the minimum value in the 'value' column?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['value'].min()\"\n}\n```\n\nInput DataFrame columns: ['First Name', 'Last Name', 'Title', 'Department', 'Salary']\nQuestion: What is the average salary of all employees?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Salary'].mean()\"\n}\n```\n\nInput DataFrame columns: ['First Name', 'Last Name', 'Gender', 'Salary']\nQuestion: What is the median salary of all employees grouped by gender?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Gender')['Salary'].median().loc['male']\"\n}\n```\n\nInput DataFrame columns: ['Title', 'Department', 'No_of_employees', 'Salary']\nQuestion: What is the maximum number of employees working in the same department?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Department')['No_of_employees'].max().max()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Gender', 'Earnings']\nQuestion: What is the average earnings of all employees grouped by gender?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Gender')['Earnings'].mean().unstack().loc['female']\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Gender', 'Earnings']\nQuestion: Which female employee has the highest earnings?\nExpected return type: str\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Earnings'].idxmax(), 'Name']\"\n}\n```\n\nInput DataFrame columns: ['Employee Name', 'Department', 'Salary', 'Earnings']\nQuestion: Which department has the highest percentage increase (Earning",
    "```json\n{\n    \"solution\": \"df.sort_values(by='Openness', ascending=False)['Profession'].unique()[:3]\"\n}\n```\n\nInput DataFrame columns: ['Grade', 'DBN', 'Ave_Math_Score', 'Ave_Ela_Score', 'Ave_Eng_Score', 'Ave_Reading_Score', 'Ave_Writing_Score', 'Ave_Total_Score']\nQuestion: What are the bottom 3 Reading grades of all districts?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values(by='Ave_Reading_Score', ascending=True)['Grade'].unique()[-3:].tolist()\"\n}\n```\n![alt text](https://github.com/seb-hoffmann/data-analysis-challenges/blob/master/HuntForWild.png?raw=true)\n\n## Conclusion",
    "```json\n{\n    \"solution\": \"df.sort_values('Agreeableness').head(4)['Profession'].values.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Height']\nQuestion: How many are under 25, how many are between 25 and 29, and how many are above 29?\nExpected return type: list[int]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Age'].between(25,29).value_counts().sort_index(ascending=False).values.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Family_Members', 'Family_Kids', 'Family_Adults']\nQuestion: Which are the five combinations of family members (F) of Family Size (S) that are the most common?\nExpected return type: list[tuple]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['Family_Members', 'Family_Kids', 'Family_Adults']).size().nlargest(5).index.values\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Lives', 'Company']\nQuestion: What is the average salary of a person who lives in their company?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Company'] == df['Lives']]['Salary'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Recreational_Drinks', 'Alcoholic_Drinks', 'Pipe_Tobacco', 'Liquor']\nQuestion: How many of the surveyed people smoke Pipe Tobacco?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Pipe_Tobacco'].notna()) & (df['Pipe_Tobacco'] != 0)].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['Time', 'Month_Day', 'Year', 'Day_of_Week']\nQuestion: How many survey answers were made during the month of March?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{",
    "```json\n{\n    \"solution\": \"df.sort_values(by=['Conversation'], ascending=False).head()['Profession'].values.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Profession', 'Openness', 'Conscientousness', 'Extraversion', 'Agreeableness', 'Emotional_Range', 'Conversation', 'Openness to Change', 'Hedonism', 'Self-enhancement', 'Self-transcendence', 'n']\nQuestion: What is the average number of positive words for all professions with the highest Emotional_Range?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values(by=['Emotional_Range'], ascending=False).head()['n'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Art','Biology','Chemistry','Education','Engineering','Film','History','Humanities','Languages','Law','Literature','Math','Medicine','Music','Philosophy','Physics','Psychology','Social Sciences','Technology','Work','Total']\nQuestion: Which subject is the most popular in the top quartile of PhDs?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values(by=['PhD'], ascending=False).head()['Total'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Art','Biology','Chemistry','Education','Engineering','Film','History','Humanities','Languages','Law','Literature','Math','Medicine','Music','Philosophy','Physics','Psychology','Social Sciences','Technology','Work','Total']\nQuestion: Which subject has the highest correlation coefficient with number of PhDs?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.corr()['PhD'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Overall Rank', 'Name', 'Team', 'Season', 'Games Played', 'Minutes Played', 'In Game', 'Goals', 'Assists', 'Points', 'Penalties', 'Plus/Minus', 'Pim', 'Shifts', 'Hits', '",
    "```json\n{\n    \"solution\": \"df.nlargest(2, 'Self-enhancement')['Profession'].to_list()\"\n}\n```\n\n## Task 4: Visualize factors\nThe solutions to tasks 3 would require researching and accessing databases to get the data on their net worth and bio. \nData in databases however are often messy, incomplete and often don't have all information needed to solve the task.\n\nUsing the `dataset_task4.csv` dataset, visualize the values of the columns `height`, `weight`, `body_type_id`, `education_level_id`, `marital_status_id` and `location_id` using a bar graph, \nwhere the height, weight, location_id are on the x-axis, and the counts of the other values are on the y-axis.\n\nThe columns `height`, `weight`, `location_id` should be on the x-axis.\n```json\n{\n    \"solution\": \"df.groupby(['height', 'weight', 'location_id']).size().unstack() \\n df.groupby(['height', 'weight', 'location_id']).size().unstack().plot.bar(stacked=True)\"\n}\n```\n\nThe column `body_type_id` should be on the x-axis.\n```json\n{\n    \"solution\": \"df.groupby(['body_type_id']).size().plot.bar()\"\n}\n```\n\nThe columns `education_level_id` and `marital_status_id` should be on the x-axis.\n```json\n{\n    \"solution\": \"df.groupby(['education_level_id', 'marital_status_id']).size().unstack().plot.bar(stacked=True)\"\n}\n```\n\n\n## Task 5: Plot me\nThe solutions to tasks 3 would require researching and accessing databases to get the data on their net worth and bio. \nData in databases however are often messy, incomplete and often don't have all information needed to solve the task.\n\nUsing the `dataset_task5.csv` dataset, plot a scatter plot of the following factors:\nThe x-axis is the volume of the company (`volume`).\nThe y-axis is the index of the company (`index",
    "```json\n{\n    \"solution\": \"df.groupby('Profession')['Openness to Change'].apply(list).apply(lambda x: sorted(x, reverse=True)[:3]).reset_index().sort_values(by='Profession', ascending=False).to_dict()['Openness to Change']\"\n}\n```\n\nInput DataFrame columns: ['s1', 's2', 's3']\nQuestion: Return the most common string across all columns.\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.apply(lambda x: ''.join(x), axis=1).mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['s1', 's2', 's3']\nQuestion: Return the most common string across all columns.\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.apply(lambda x: ''.join(x), axis=1).mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['index', 'name', 'age', 'height', 'weight', 'year', 'position']\nQuestion: Return a list of players that played a position below the mean height.\nExpected return type: list[string]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['position'] != 'GK']['position'].to_list()\"\n}\n```\n\nInput DataFrame columns: ['Track', 'Artist', 'Album', 'Year', 'Genre']\nQuestion: Return a list of the top 5 artists that were released by the most number of artists.\nExpected return type: list[string]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Artist')['Artist'].count().sort_values(ascending=False).head(5).index.to_list()\"\n}\n```\n\n```\nInput DataFrame columns: ['User_ID', 'Item_ID', 'Rating', 'Timestamp']\nQuestion: Return the 5 best rated movies in terms of overall ratings.\nExpected return type: list[string]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Item_ID",
    "```json\n{\n    \"solution\": \"df['Emotional_Range'].nsmallest(4).tolist()\"\n}\n```\n\n\nInput DataFrame columns: ['year', 'quarter', 'sales', 'profit']\nQuestion: Which quarter had the greatest profit?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['profit'].idxmax(), 'quarter']\"\n}\n```\n\nInput DataFrame columns: ['year', 'quarter', 'sales', 'profit']\nQuestion: What was the sum of sales by year and quarter?\nExpected return type: dict\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['year', 'quarter'])['sales'].sum().to_dict()\"\n}\n```\n\nInput DataFrame columns: ['year', 'quarter', 'sales', 'profit']\nQuestion: What was the median profit?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['profit'].median()\"\n}\n```\n\nInput DataFrame columns: ['country', 'year', 'sales', 'profit']\nQuestion: What was the median sales by country?\nExpected return type: dict\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['country'])['sales'].median().to_dict()\"\n}\n```\n\n\nInput DataFrame columns: ['country', 'year', 'sales', 'profit']\nQuestion: What was the total profit in the USA?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['country'] == 'USA', 'profit'].sum()\"\n}\n```\n\nInput DataFrame columns: ['country', 'year', 'profit']\nQuestion: What was the average profit by year?\nExpected return type: dict\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['year'])['profit'].mean().to_dict()\"\n}\n```\n\nInput DataFrame columns: ['country', 'year', 'sales', 'profit']\nQuestion: Which country made the most sales?\nExpected return type: string\n\nCode that calculates the answer:\n```json",
    "```json\n{\n    \"solution\": \"df.nlargest(5, 'Extraversion')['Extraversion'].to_list()\"\n}\n```\n\nInput DataFrame columns: ['\u5e73\u5747', '\u6700\u4f4e', '\u6700\u9ad8']\nQuestion: What is the range of temperatures for the highest 5 day of the month?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.nlargest(5, '\u5e73\u5747')['\u5e73\u5747'].to_list()\"\n}\n```\n/examples/data_integration/nodes/node_file_to_df/main.py\nfrom datetime import datetime\nimport json\nimport os\n\nimport click\nimport pandas as pd\nfrom pandas._typing import FilePathOrBuffer\nimport requests\n\nfrom node.utils import load_config, get_logger, get_credentials\n\nlogger = get_logger(__name__)\n\n\ndef merge_files(*filenames: FilePathOrBuffer) -> pd.DataFrame:\n    \"\"\"Merge files into one DataFrame\n\n    Args:\n        *filenames: One or more file names or objects with a `read()` method\n        (text or bytes)\n\n    Returns:\n        Merged pandas DataFrame\n    \"\"\"\n    dfs = []\n    for filename in filenames:\n        with open(filename, 'r') as file:\n            dfs.append(pd.read_csv(file))\n    return pd.concat(dfs, ignore_index=True)\n\n\n@click.command()\n@click.option(\n    '--file', '-f',\n    type=str,\n    help=(\n        'File to read and convert to DataFrame'\n        ),\n    default='')\n@click.option(\n    '--url', '-u',\n    type=str,\n    help=(\n        'URL to fetch and convert to DataFrame.'\n        'The auth parameter is required if the connection requires it.\\n'\n        'If auth is provided, the credentials parameter must be provided as well.\\n'\n        'The auth parameter can be one of the following:\\n'\n        '- username:password\\n'\n        '- username\\n'\n        '\\n'\n        'In case the auth parameter is a username, the username parameter\\n'\n        'must be provided.\\n'\n        '\\n'\n        'The result will be cached based on the url, so that if the content of\\n'\n        'the file changes, it will",
    "```json\n{\n    \"solution\": \"df.sort_values('Self-transcendence').index[0:6].tolist()\"\n}\n```\n\nInput DataFrame columns: ['word', 'context1', 'context2', 'context3', 'context4', 'context5', 'context6', 'context7', 'context8', 'context9', 'context10', 'context11', 'context12', 'context13', 'context14', 'context15', 'context16', 'context17', 'context18', 'context19', 'context20', 'language']\nQuestion: Which word is the most frequently used in New York?\nExpected return type: str\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['language'] == 'New York']['word'].value_counts().idxmax()\"\n}\n```import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv(\"http://www.insightsbot.com/data/hw_questions.csv\")\ndf.head()",
    "```json\n{\n    \"solution\": \"df['title'].str.lower().str.contains('communication').any()\"\n}\n```\n\nInput DataFrame columns: ['country', 'name', 'lat', 'lon', 'iso_a3', 'admin', 'capital', 'population', 'id']\nQuestion: Which country has the most number of cities?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['population'] > 0]['country'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['num_claims', 'organization', 'kind', 'type', 'graphext_cluster', 'date', 'abstract', 'title', 'lang', 'abstract_gx_ADJ', 'grp_title', 'abstract_gx_products', 'abstract_gx_organizations', 'abstract_gx_NOUN', 'abstract_gx_ngrams', 'id', 'target', 'weight', 'x', 'y']\nQuestion: How many patents contain the word 'labor' in the abstract?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['abstract'].str.lower().str.contains('labor')].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['url', 'header', 'body']\nQuestion: Which header contains the word 'climate' in the body?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['body'].str.lower().str.contains('climate').astype(int).idxmax(), 'header']\"\n}\n```\n\nInput DataFrame columns: ['adj', 'noun', 'verb', 'adv', 'pnoun']\nQuestion: How many verbs are there in the gzipped text file?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"pd.read_csv('enwiki-20150112-1000000-sentence.txt.gz', sep='\\t', header=None).squeeze().str.lower().str.contains('verb').sum()\"\n}\n```\n\nThere are other",
    "```json\n{\n    \"solution\": \"df.loc[df['organization'] == 'IBM', 'id']\"\n}\nxy()\nassert (\n    peter.name == \"Peter\" and peter.age == 42\n    and bob.name == \"Bob\" and bob.age == 32\n    and jan.name == \"Jan\" and jan.age == 11\n)\nprint(\"OK\")\n/lessons/09_oop/02_class_inheritance.py\n# class inheritance\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n\nclass Employee(Person):\n    def __init__(self, name, age, title):\n        Person.__init__(self, name, age)\n        self.title = title\n\n\nclass Client(Person):\n    def __init__(self, name, age, account_balance):\n        Person.__init__(self, name, age)\n        self.account_balance = account_balance\n\n\npeter = Employee(\"Peter\", 42, \"Senior Engineer\")\nbob = Employee(\"Bob\", 32, \"Junior Engineer\")\njan = Client(\"Jan\", 11, 123456)\n\nprint(peter.__dict__)\nprint(bob.__dict__)\nprint(jan.__dict__)\n\n# unlike a function def, class inheritance is not visible to the outside world\n# peter./lessons/06_files_and_databases/03_read_csv.py\n# read csv files\nimport pandas as pd\n\ndf = pd.read_csv(\"sample.csv\")\n# the above command will create the dataframe with columns and rows based on the csv file\n# the first row of the csv file can be used to name the columns\nprint(df)\n\ndf = pd.read_csv(\"sample.csv\", index_col=0)\n# the dataframe can be created without the first row of the csv file\n# and the index column can be set to any other column\nprint(df)\n\ndf = pd.read_csv(\"sample.csv\", index_col=0, header=None)\n# if there are no header names",
    "```json\n{\n    \"solution\": \"df['abstract'].str.contains('software').any()\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: In the 'category' column, what are the different values?\nExpected return type: list of str\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['category'].unique().tolist()\"\n}\n```\n\"\"\"Problem 2.\n\nYou have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nCode that calculates the answer:\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\n\n\ndef get_boolean_answer(df, question: str, expected_return_type: type) -> bool:\n    \"\"\"\n    :param df: Input DataFrame\n    :param question: String that the user would like to answer (ex. 'Is the person with the highest net worth self-made?')\n    :param expected_return_type: Type object corresponding to the expected return type (ex. bool)\n\n    :return: The function should return True if the question is answered by printing 'True', or False if the question is not answered by printing 'False'.\n    \"\"\"\n    return bool(df.loc[df['finalWorth'].idxmax(), 'selfMade'])\n\n\ndf = pd.DataFrame(\n    data={\n        'rank': [1, 2, 3,",
    "```json\n{\n    \"solution\": \"df['type'].str.contains('design').any()\"\n}\n```\n\nInput DataFrame columns: ['symboling', 'normalized_losses', 'make', 'fuel_type', 'aspiration', 'num_of_doors', 'body_style', 'drive_wheels', 'engine_location', 'wheel_base', 'length', 'width', 'height', 'curb_weight', 'engine_type', 'num_of_cylinders', 'engine_size', 'fuel_system', 'bore', 'stroke', 'compression_ratio', 'horsepower', 'peak_rpm', 'city_mpg', 'highway_mpg', 'price']\nQuestion: Are there any cars with a 16-cylinder engine?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['num_of_cylinders'].astype(str).str.contains('16').any()\"\n}\n```\n\nInput DataFrame columns: ['duration', 'censor', 'time', 'event', 'TIE2', 'TIE3', 'TIE5', 'TIE7', 'TIE9', 'TIE11', 'TIE13', 'TIE15', 'TIE17', 'TIE19', 'TIE21', 'delta', 'delta-5', 'delta-10', 'delta-15', 'delta-20', 'delta-25', 'delta-30', 'delta-35', 'delta-40', 'delta-45', 'delta-50', 'delta-55', 'delta-60', 'delta-65', 'delta-70', 'delta-75', 'delta-80', 'delta-85', 'delta-90', 'delta-95', 'delta-100', 'delta-105', 'delta-110', 'delta-115', 'delta-120', 'delta-125', 'delta-130', 'delta-135', 'delta-140', 'delta-145', 'delta-150', '",
    "```json\n{\n    \"solution\": \"len(df.groupby('organization').ngroup())\"\n}\n```\n\n\n\"\"\"\nimport pandas as pd\n\ndef answer_question(df, question, expected_return_type):\n    return df.loc[df['finalWorth'].idxmax(), 'selfMade']",
    "```json\n{\n    \"solution\": \"df['num_claims'].mean()\"\n}\n```\n\nInput DataFrame columns: ['total_claim_amount', 'incident_state', 'incident_type', 'number_of_vehicles_involved', 'authorities_contacted', 'property_damage', 'incident_city', 'injury_claim', 'incident_location', 'auto_make', 'collision_type', 'incident_hour_of_the_day', 'authorities_contacted', 'incident_day_of_the_week', 'incident_severity', 'insurance_claim', 'number_of_vehicles_involved', 'incident_id', 'auto_year', 'incident_date', 'auto_model', 'vehicle_type', 'property_damage', 'total_loss_amount', 'bodily_injury_claim', 'collision_type', 'total_incident_cost', 'incident_cause', 'incident_date', 'incident_day_of_the_week', 'core_claims', 'property_damage', 'auto_model', 'property_damage', 'incident_hour_of_the_day', 'incident_type', 'incident_severity', 'vehicle_type', 'auto_make', 'total_claim_amount', 'property_damage', 'property_damage', 'vehicle_type', 'property_damage', 'property_damage', 'property_damage', 'vehicle_type', 'auto_make', 'property_damage', 'property_damage', 'core_claims', 'property_damage', 'property_damage', 'property_damage', 'property_damage', 'property_damage', 'property_damage', 'property_damage', 'vehicle_type', 'property_damage', 'property_damage', 'property_damage']\nQuestion: Which day has the highest average total claim amount?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('incident_day_of_the_week').mean()['total_claim_amount'].idxmax()\"\n}\n```\nimport json\nfrom typing import Union\n\n\ndef answer_closest(num: Union[float, int], arr: Union[list, tuple, set]):\n    \"\"\"\n    Returns the closest number amongst an array",
    "```json\n{\n    \"solution\": \"df['num_claims'].max()\"\n}\n```\n\nInput DataFrame columns: ['Alcohol', 'Malic acid', 'Ash', 'Alcalinity of ash', 'Magnesium', 'Total phenols', 'Flavanoids', 'Nonflavanoid phenols', 'Proanthocyanins', 'Color intensity', 'Hue', 'OD280/OD315 of diluted wines', 'Proline']\nQuestion: What's the average proline a wine has?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Proline'].mean()\"\n}\n```\n\nInput DataFrame columns: ['n', 'x', 'y', 'clu', 'clu_x', 'clu_y', 'clu_rad', 'clu_NM', 'clu_ND', 'clu_NR', 'clu_NS', 'clu_NE', 'clu_NW', 'clu_CI', 'clu_NP', 'clu_CR', 'clu_CA', 'clu_TX', 'clu_TY', 'clu_TE']\nQuestion: What's the average neural network radius?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('clu').mean()['clu_rad'].mean()\"\n}\n```\n\nInput DataFrame columns: ['VAL', 'CET', 'PPT', 'CMT', 'AET', 'POM', 'EMT', 'DLT', 'FMT', 'ACET', 'SMT', 'RIT', 'DMT', 'AMT', 'DMF', 'LMT', 'PT', 'RMT', 'TNM', 'WMT']\nQuestion: What's the average NDVI?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.mean().mean()\"\n}\n```\n\nInput DataFrame columns: ['y1', 'x1', 'y2', 'x2', 'date', 'y_dif', 'x_dif', 'speed', 'class', 'id']\nQuestion: What",
    "```json\n{\n    \"solution\": \"df[df['type'] == 'utility'].shape[0]\"\n}\n```\n\nThis exercise requires a round of serious thinking. If the exercise is not possible in a single line, please comment on the solution and it will be marked as partially correct. \n\n***\n## Pivot-Wider\n\nUse the provided dataset to answer the following questions:\n\n### How many flights were there per date?\n```json\n{\n    \"solution\": \"df.groupby(['date'], as_index=False)['flight_number'].count()\"\n}\n```\n### How many flights were there per hour?\n```json\n{\n    \"solution\": \"df.groupby(['hour'], as_index=False)['flight_number'].count()\"\n}\n```\n### What was the mean arrival delay per origin?\n```json\n{\n    \"solution\": \"df.groupby(['origin'], as_index=False)['arr_delay'].mean()\"\n}\n```\n### What was the delay for the highest arrival delay and lowest arrival delay?\n```json\n{\n    \"solution\": \"df.gropuby(['arr_delay'], as_index=False)['arr_delay'].agg(['min', 'max'])\"\n}\n```\n### What was the mean arrival delay when the month is January?\n```json\n{\n    \"solution\": \"df.groupby(['month == 1'], as_index=False)['arr_delay'].mean()\"\n}\n```\n### What was the mean arrival delay when the month is January?\n```json\n{\n    \"solution\": \"df.groupby(['month == 1'], as_index=False)['arr_delay'].mean()\"\n}\n```\n### What was the mean arrival delay when the month is January or February?\n```json\n{\n    \"solution\": \"df.groupby(['month == 1', 'month == 2'], as_index=False)['arr_delay'].mean()\"\n}\n```\n### What was the mean arrival delay when the month is January or February?\n```json\n{\n    \"solution\": \"df.groupby(['month == 1', 'month == 2'], as_index=False)['arr_delay'].mean()\"\n}\n```\n### What was the mean arrival",
    "```json\n{\n    \"solution\": \"df[df['num_claims'] == df['num_claims'].max()]['organization']\"\n}\n```\n']\n```\n# What is the name of the scientist with the highest net worth?\n\nTop candidates:\n\n\n\n\n\n\nThe solution:\n```python\ndef name_of_scientist(df):\n    # ENTER YOUR CODE HERE.\n    return None\n```\n\n# The solution should be ONLY one line and use pandas vectorized operations when possible.\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category','source', 'country','state', 'city', 'organization','selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(),'selfMade']\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['num_claims', 'organization', 'kind', 'type', 'graphext_cluster', 'date', 'abstract', 'title', 'lang', 'abstract_gx_ADJ', 'grp_title', 'abstract",
    "```json\n{\n    \"solution\": \"df['kind'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['row', 'col', 'val']\nQuestion: What is the sum of the values in each column?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['val'].sum()\n}\n```\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: What is the mean age of the people with the highest net worth?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'age'].mean()\"\n}\n```\n\nThe question and return type will always be formatted correctly. The column names and order listed above are the ONLY columns in the DataFrame. There is no need to check for other columns.\n\n# Data\nhttps://www.kaggle.com/annavictoria/annavictoria\n\n\nhttps://www.kaggle.com/c/titanic\n\nhttps://www.kaggle.com/c/walmart-recruiting-store-sales-forecasting\n\n\nhttps://www.kaggle.com/c/bike-sharing-demand\n# Introduction\n\nWe normally use the `image_name` field to refer to the image, but the image itself is stored in the `submission` folder. The `image_name` field is a familiar name still, but it isn't always available.\n\n# Starter Code\n\nDon't modify the starter code.\n\n# Test Cases\n\nThe test case is meant to show that your code will run on a similar data set.\n\n# Hints\n\nIf you don't understand what the test case is asking for, or if you persist in guessing, try [reading the full documentation](/courses/data-science-track/introduction-to-computer-vision-with-python/computer-vision-in-python-image-",
    "```json\n{\n    \"solution\": \"df['lang'].unique()\"\n}\n```\n\nInput DataFrame columns: ['num_reactions', 'total_interactions', 'num_reactions_owner', 'num_comments', 'num_comments_owner', 'num_shares', 'num_shares_owner', 'num_loves', 'num_loves_owner', 'num_wows', 'num_wows_owner', 'num_hahas', 'num_hahas_owner', 'num_sads', 'num_sads_owner', 'num_angrys', 'num_angrys_owner']\nQuestion: Which post has the highest number of shares?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['num_shares'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What percentage of female passengers survived?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Sex'] == 'female', 'Survived'].mean()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: Who are the passengers who paid the lowest fare (the \u201c5%ile\u201d)?\nExpected return type: list\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('Fare').head(int(len(df) / 20))['Name'].values\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: Which sex paid the most for",
    "```json\n{\n    \"solution\": \"df.groupby('graphext_cluster')['target'].idxmax()[:1].values\"\n}\n```\n\nInput DataFrame columns: ['id', 'target', 'text', 'keyword', 'location', 'sentiment', 'no_word_sentiment']\nQuestion: Which tweet is the most negative among the ones with at least one word in the text?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df[df['text'].apply(lambda x: len(x.split())) >= 1]['no_word_sentiment'].idxmin(), 'id']\"\n}\n```\n\nInput DataFrame columns: ['name', 'rarity', 'set', 'type', 'legality', 'prices_usd', 'prices_EUR', 'prices_GBP']\nQuestion: Which card is the most expensive in EUR among all sets that are not illegal?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['legality'] != 'illegal') & (df['type'] == 'card'), 'prices_EUR'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['name', 'value', 'melting', 'number', 'series', 'mc', 'es', 'wraith', 'cl', 'cc', 'tusk', 'sk']\nQuestion: Which card series has the highest average number of cards?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df.groupby('series')['number'].idxmax(), 'series'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['num_claims', 'organization', 'kind', 'type', 'graphext_cluster', 'date', 'abstract', 'title', 'lang', 'abstract_gx_ADJ', 'grp_title', 'abstract_gx_products', 'abstract_gx_organizations', 'abstract_gx_NOUN', 'abstract_gx_ngrams', 'id', 'target', 'weight', 'x', 'y']\nQuestion: Which graphext cluster has the most common 'kind'?\nExpected return type: category",
    "```json\n{\n    \"solution\": \"df.groupby(['organization'])['num_claims'].sum().sort_values(ascending=False).head(3).index.tolist()\"\n}\n\nInput DataFrame columns: ['num_claims', 'state', 'organization', 'kind', 'type', 'date', 'abstract', 'title', 'lang', 'id', 'target', 'weight', 'x', 'y']\nQuestion: What is the sum of the patent claims for the four most popular states?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['state'])['num_claims'].sum().sort_values(ascending=False).iloc[:4].sum()\"\n}\n\nInput DataFrame columns: ['num_claims', 'organization', 'kind', 'type', 'date', 'abstract', 'title', 'lang', 'id', 'target', 'weight', 'x', 'y']\nQuestion: What is the mean number of claims filed by the top 10 organizations?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['organization'])['num_claims'].mean().sort_values(ascending=False).head(10).mean()\"\n}\n\nInput DataFrame columns: ['num_claims', 'organization', 'kind', 'type', 'date', 'abstract', 'title', 'lang', 'id', 'target', 'weight', 'x', 'y']\nQuestion: What is the total number of patent claims?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['num_claims'].sum()\"\n}\n\nInput DataFrame columns: ['num_claims', 'organization', 'kind', 'type', 'date', 'abstract', 'title', 'lang', 'id', 'target', 'weight', 'x', 'y']\nQuestion: What is the standard deviation of the number of claims for the top 5 organizations?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['organization'])['num_claims'].std().sort_values(ascending=False).head(5).mean()\"\n}\n\nInput DataFrame",
    "```json\n{\n    \"solution\": \"df['type'].value_counts().head(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['a', 'b', 'c', 'd']\nQuestion: Return the 2nd and 3rd columns in a list.\nExpected return type: list[int]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.iloc[:, 1:3].values.tolist()[0]\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Time', 'Volume', 'Close']\nQuestion: Subtract the minimum 'Close' value from the 'Close' column, then divide by the difference between the maximum and minimum 'Close' values.\nExpected return type: list[float]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df['Close'] - df['Close'].min())/ df['Close'].max() - df['Close'].min()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Close']\nQuestion: For each date, calculate the difference between the previous day's closing price and the current day's closing price.\nExpected return type: list[float]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Close'] - df['Close'].shift()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Time', 'Open', 'High', 'Low', 'Close', 'Volume']\nQuestion: For each date, calculate the difference between the open and close price for the day.\nExpected return type: list[float]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Open'] - df['Close']\"\n}\n```\n\nInput DataFrame columns: ['Date', 'High', 'Low', 'Close', 'Volume']\nQuestion: Create a new column that calculates the total amount gained or lost on that day by the closing price.\nExpected return type: list[float]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Profit'] = (df['Close'] - df['Open']) * df['Volume']\"\n}\n```\n\nInput DataFrame columns: ['Date', 'High', 'Low', 'Close', 'Volume",
    "```json\n{\n    \"solution\": \"df['kind'].value_counts().index[0:2].tolist()\"\n}\n```\n\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nInput DataFrame columns: ['Rank', 'Actors', 'Gross', 'Director', 'Revenues','Film']\nQuestion: Which movie has the most revenues?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Revenues'].idxmax(), 'Film']\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the lowest percentage of survivors?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', '",
    "```json\n{\n    \"solution\": \"df['graphext_cluster'].value_counts().nsmallest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['num_claims', 'organization', 'kind', 'type', 'graphext_cluster', 'date', 'abstract', 'title', 'lang', 'abstract_gx_ADJ', 'grp_title', 'abstract_gx_products', 'abstract_gx_organizations', 'abstract_gx_NOUN', 'abstract_gx_ngrams', 'id', 'target', 'weight', 'x', 'y']\nQuestion: What is the most common graphext cluster among the patents with the penalty weighting scheme? If there is a tie go by alphabetical order\nExpected return type: str\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['graphext_cluster'].value_counts().idxmax(), 'graphext_cluster']\"\n}\n```\n\nInput DataFrame columns: ['brand', 'name', 'brand_group', 'brand_subgroup', 'price', 'rating', 'review_count', 'update', 'image', 'image_updated', 'image_source', 'first_review', 'last_review', 'verified_purchasers', 'num_reviews', 'manufacturer', 'manufacturer_url', 'model', 'model_number', 'categories', 'price_updated']\nQuestion: Which brands are the most expensive? If there is a tie go by alphabetical order\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['price'].idxmax(), 'brand'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['brand', 'name', 'brand_group', 'brand_subgroup', 'price', 'rating', 'review_count', 'update', 'image', 'image_updated', 'image_source', 'first_review', 'last_review', 'verified_purchasers', 'num_reviews', 'manufacturer', 'manufacturer_url', 'model', 'model_number', 'categories', 'price_updated']\nQuestion: Which brands have the most reviews? If there is a",
    "```json\n{\n    \"solution\": \"df['num_claims'].value_counts().sort_values(ascending=False).head(4).index\"\n}\n```\n\nInput DataFrame columns: ['ID', 'type', 'products', 'product_counts', 'counts', 'organization', 'year', 'h_index', 'cited_by']\nQuestion: Which organization has the most number of citations?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['cited_by'].idxmax(), 'organization']\"\n}\n```\n\nInput DataFrame columns: ['name', 'symbol', 'price_usd', 'market_cap_usd', 'available_supply', 'total_supply', 'percent_change_24h', 'percent_change_7d', 'last_updated']\nQuestion: What is the difference between the current price of an item and its market cap?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['price_usd'].idxmax(), 'price_usd'] - df.loc[df['market_cap_usd'].idxmax(), 'market_cap_usd']\"\n}\n```\n\nInput DataFrame columns: ['rated', 'taster_name', 'taster_twitter_handle', 'title', 'region_1', 'region_2', 'variety', 'winery']\nQuestion: What is the most highly rated wine?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['points'].idxmax(), 'variety']\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'gender', 'age', 'occupation', 'zip_code', 'movie_id', 'rating', 'timestamp']\nQuestion: What is the highest number of ratings?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['rating'].value_counts().sort_values(ascending=False).iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'description', 'country', 'city', '",
    "```json\n{\n    \"solution\": \"df.sort_values('num_claims', ascending=False)[['id', 'num_claims']].drop_duplicates(keep='first')['id'].to_numpy().tolist()[0:3]\"\n}\n```\n\nInput DataFrame columns: ['col_1', 'col_2', 'col_3']\nQuestion: What's the first half of column col_1?\nExpected return type: array\n\nCode that calculates the answer:\n\n```json\n{\n    \"solution\": \"df['col_1'].values[:len(df['col_1'])//2]\"\n}\n```\n\nInput DataFrame columns: ['col_1', 'col_2', 'col_3', 'col_4', 'col_5', 'col_6', 'col_7', 'col_8', 'col_9', 'col_10', 'col_11']\nQuestion: What's the sum of the last 2 columns?\nExpected return type: number\n\nCode that calculates the answer:\n\n```json\n{\n    \"solution\": \"df.iloc[:,-2:].sum(axis=1).sum()\"\n}\n```\n\nInput DataFrame columns: ['test_1', 'test_2', 'test_3', 'test_4', 'test_5', 'test_6', 'test_7', 'test_8', 'test_9', 'test_10', 'test_11', 'test_12', 'test_13', 'test_14', 'test_15', 'test_16']\nQuestion: What's the standard deviation of the 1st 8 columns? Round to 2 decimal places.\nExpected return type: number (float)\n\nCode that calculates the answer:\n\n```json\n{\n    \"solution\": \"round(df.iloc[:,0:8].std().values.mean(), 2)\"\n}\n```\n\nInput DataFrame columns: ['name', 'age', 'city', 'address', 'income', 'gender', 'is_graduated', 'is_employed', 'year_graduated']\nQuestion: What's the count of people that graduated in 2013?\nExpected return type: number",
    "```json\n{\n    \"solution\": \"df[(df['kind'] == 'S1') | (df['kind'] == 'B2')]['num_claims'].median()\"\n}\n```\n#### Getting started\n\nRun the following commands to get started:\n\n```console\nconda create --yes -n isabelle_homework python=3.7\nsource activate isabelle_homework\nconda install --yes jupyter notebook pandas nltk wordcloud\n```\n\nAbove commands will install [Anaconda](https://www.anaconda.com/distribution/) which has the Python 3.7 environment and Jupyter notebook preinstalled.\n\n### Step 1: Cleaning Data\n1. Run the notebook `hw_isabelle.ipynb` to answer the homework questions.\n2. Answer the questions in the notebook by filling in the following JSON objects:\n\n```json\n{\n    \"solution\": \"1. the value you calculated\"\n}\n```\n\nThe correct answers are:\n\n```json\n{\n    \"solution\": \" 1.    \"\n}\n```\n\n### Step 2: Debugging the data\n1. Run the notebook `debug_isabelle.ipynb`.\n2. Find and fix the ingenious bug in the `get_most_recent_date` function; the data has already been loaded as `df`.\n3. The function should return the date of the most recent date in the `date` field.\n\n### Step 3: Debugging a function\n1. Run the notebook `debug_isabelle.ipynb`.\n2. Find and fix the ingenious bug in the `create_column` function that creates the column `flag`.\n3. The function should return a column where each row is 1 if the argument is the value of the row's `kind` column and 0 otherwise.\n\n## Part II: Machine Learning\n\n### Step 4: Classification\n1. Run the notebook `classification_isabelle.ipynb` to answer the homework questions.\n2. Answer the questions in the notebook by filling in the following JSON objects:\n\n```json\n{\n    \"solution\": \"1. the value you calculated\"\n}\n```\n\nThe correct answers are:\n```json\n{\n    \"solution\": \" 1. 0",
    "```json\n{\n    \"solution\": \"df['ID'].sort_values()[-3:].tolist()\"\n}\n```\n\n```python\ndef solution(df):\n    #your code\n\nassert solution(df) == expected_return_type\n```\n\n```python\ndef solution(df):\n    #your code\n\nassert solution(df) == expected_return_type\n```\n\n```python\ndef solution(df):\n    #your code\n\nassert solution(df) == expected_return_type\n```\n\n```python\ndef solution(df):\n    #your code\n\nassert solution(df) == expected_return_type\n```\n\n\n# coding: utf-8\n\n# # Introduction\n# \n# In this case study, we will analyze data about terrorism. We will use the data to find patterns that could help predict future terrorist attacks.\n# \n# When we open the data file, we find that each row is a terrorist incident. Each column represents information about an incident, including the terrorist group that committed it, the number of people it affected, the number of casualties (including injuries and deaths), the location, and the date. The details of each column are in the data dictionary below.\n# \n# ![dataset_image](https://dq-content.s3.amazonaws.com/251/terrorism_data_dictionary.png)\n# \n# # Understanding the data\n# \n# We'll begin by loading the terrorism data set into pandas and exploring it, to see the initial structure of the data and get a feel for the important columns.\n\n# In[2]:\n\n\nimport pandas as pd\nimport numpy as np\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\n\n# In[3]:\n\n\nterrorism_data = pd.read_csv('global_terrorism.csv',low_memory=False)\n\n\n# In[4]:\n\n\nterrorism_data.sample(10)\n\n\n# In[5]:\n\n\nterrorism_data.shape\n\n\n# # Which columns are numeric and which are categorical?\n# \n# We'll need to figure out which columns in the data set",
    "```json\n{\n    \"solution\": \"df[df['user_followers_count'].idxmax()]['user_verified']\"\n}\n\nInput DataFrame columns: ['url<gx:url>', 'id<gx:category>', 'event_name<gx:text>', 'date<gx:date>', 'status<gx:category>', 'user_id<gx:category>', 'user_name<gx:category>', 'user_screen_name<gx:text>', 'user_location<gx:text>', 'user_description<gx:text>', 'user_url<gx:url>', 'user_followers_count<gx:number>', 'user_friends_count<gx:number>', 'user_listed_count<gx:number>', 'user_created_at<gx:date>', 'user_verified<gx:boolean>', 'user_favourites_count<gx:number>', 'user_statuses_count<gx:number>', 'user_lang<gx:category>', 'retweet_count<gx:number>', 'favorite_count<gx:number>', 'entities_urls_count<gx:number>', 'in_reply_to_user_id<gx:category>', 'in_reply_to_status_id<gx:category>', 'in_reply_to_screen_name<gx:text>', 'source<gx:category>', 'text<gx:text>', 'geo<gx:category>', 'coordinates<gx:list[number]>', 'place<gx:category>', 'retweeted_status_id<gx:category>', 'retweeted_status_user_id<gx:category>', 'retweeted_status_user_screen_name<gx:text>', 'retweeted_status_tweet_created_at<gx:date>', 'retweeted_status_tweet_id<gx:category>', 'retweeted_status_tweet_source<gx:category>', 'retweeted_status_tweet_text<gx:text>', 'retweeted_status_tweet_lang<gx:category>', 'sentiment<gx:category>', 'event_id<gx:number>']\nQuestion: What was the average sentiment of all tweets in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json",
    "```json\n{\n    \"solution\": \"df.loc[df['author_favourites_count'].idxmax(), 'author_retweet_count'] == df.loc[df['author_favourites_count'].idxmax(), 'author_favourites_count']\"\n}\n```\n\n\n## 3) Matrix multiplication\n\nThe function must only be a single line long and use element-wise operations, vectorized operations and dot product.\n\nInput DataFrame columns: ['matrix']\nQuestion: Calculate the element-wise multiplication between the matrices\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df.loc[0, 'matrix'].values * (df.loc[1, 'matrix'].values.T)).ravel().astype(int)\"\n}\n```\n\nInput DataFrame columns: ['matrix']\nQuestion: Calculate the element-wise multiplication between the matrices\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df.loc[0, 'matrix'].values * (df.loc[1, 'matrix'].values.T)).ravel().astype(int)\"\n}\n```\n\n## 4) Matrix multiplication\n\nCalculate the dot product between the two matrices.\n\nInput DataFrame columns: ['matrix1', 'matrix2']\nQuestion: Calculate the dot product between the matrices\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df.loc[0, 'matrix1'].values @ df.loc[0, 'matrix2'].values)\"\n}\n```\n\n## 5) Matrix multiplication\n\nCalculate the dot product between the two matrices.\n\nInput DataFrame columns: ['matrix1', 'matrix2']\nQuestion: Calculate the dot product between the matrices\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df.loc[0, 'matrix1'].values @ df.loc[0, 'matrix2'].values)\"\n}\n```\n\n## 6) Chess board\n\nThe function must only be a single line long and use element-wise operations, vectorized operations and dot product.\n\nInput DataFrame columns: ['row', 'col']\nQuestion: Generate a",
    "```json\n{\n    \"solution\": \"df.groupby('mention_names').sum()['retweets'].idxmax() == df.groupby('mention_names').sum()['retweets'].max()\"\n}\n```\n\n\n## Notes:\n\n### Python Resources:\n\n* [Python 3](https://realpython.com/installing-python/)\n* [Python packages](https://packaging.python.org/tutorials/installing-packages/)\n* [Python Pandas](https://pandas.pydata.org/)\n/js_solutions/js_solutions.py\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.cnet.com/windows/'\n\nheaders = {\n    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36',\n    'referrer': 'https://google.com'\n}\n\npage = requests.get(url, headers=headers)\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n\ndef get_content(category):\n    \"\"\"\n    This function returns the first content of a given category \n    \"\"\"\n    if category == \"latest news\":\n        try:\n            content = soup.find('section', class_='LatestNews_a32a-4wXQR2').find('article')\n        except AttributeError:\n            content = \"No latest news\"\n            return content\n\n    if category == \"reviews\":\n        try:\n            content = soup.find('section', class_='Reviews_f3e2-4xU78O').find('article')\n        except AttributeError:\n            content = \"No reviews\"\n            return content\n\n    if category == \"trending\":\n        try:\n            content = soup.find('section', class_='Trending_c5d7-4R4f0p').find('article')\n        except AttributeError:\n            content = \"No trending\"\n            return content\n\n    content_el = content.find_all('div', recursive=False)[0]\n\n    return content_el\n\n\ndef get_content_token(category):\n    \"\"\"\n    This function returns the first token of a given category",
    "```json\n{\n    \"solution\": \"df.loc[df['retweets'].idxmax(), 'replies'] > df.loc[df['replies'].idxmax(), 'replies']\"\n}\n```\n\nInput DataFrame columns: ['x', 'y', 'z']\nQuestion: What is the sum of all values in the 'x' column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['x'].sum()\"\n}\n```\n\nInput DataFrame columns: ['x', 'y', 'z']\nQuestion: What is the mean of the 'x' column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['x'].mean()\"\n}\n```\n\nInput DataFrame columns: ['x', 'y', 'z']\nQuestion: What is the index of the row with the largest value in the 'z' column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['z'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['x', 'y', 'z']\nQuestion: What is the difference between the mean and standard deviation of the 'z' column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['z'].mean() - df['z'].std()\"\n}\n```\n\nInput DataFrame columns: ['x', 'y', 'z']\nQuestion: What is the index of the row with the second largest value in the 'z' column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"s = sorted(df['z'])\\nindex = s.index(s[-2])\"\n}\n```\n\nInput DataFrame columns: ['x', 'y', 'z']\nQuestion: What is the value in the 'z' column of the row with the second largest value in the 'z' column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"s = sorted(df['z'])\\nvalue = s[-2]\"\n}\n```\n    return res",
    "```json\n{\n    \"solution\": \"df['user_followers_count'].max()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>', 'search<gx:category>']\nQuestion: How many unique languages are there in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['lang'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_",
    "```json\n{\n    \"solution\": \"len(df.loc[df['favorites'] > 10000, 'author_id'].unique())\"\n}\n```\n\nInput DataFrame columns: ['day_of_week', 'release_date', 'release_year', 'movie', 'color', 'director', 'actor_1_name', 'actor_2_name', 'actor_3_name', 'genres', 'duration_minutes', 'country', 'content_rating', 'budget', 'title_year', 'imdb_score', 'gross']\nQuestion: What is the most common country for a movie with a budget of more than $100,000,000?\nExpected return type: text\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['budget'] > 100000000, 'country'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:",
    "```json\n{\n    \"solution\": \"df[df['retweets'] == df['retweets'].max()]['retweets'].iloc[0]\"\n}\n```\n\n\nThe function should return the requested information in the expected type.\n\nYou should use the following code to evaluate your function for a single test.\n```\nimport pandas as pd\nfrom functions import pandas_function\n\ndef test_pandas(df, function, question, expected_type):\n    \"\"\"Test pandas function for assigment.\"\"\"\n    try:\n        answer = function(df, question)\n        assert answer == expected_type, \"Expected {} for question, got {}: {}\".format(expected_type, type(answer), answer)\n        print(f\"\\033[92m{question} - Correct!\")\n    except AssertionError:\n        print(f\"\\033[91m{question} - Incorrect!\")\n\n    return answer\n\ndf = pd.read_csv('data/pandas_example.csv')\ndf = df.astype('category')\ntest_pandas(df, pandas_function, \"Is the person with the highest net worth self-made?\", bool)\ntest_pandas(df, pandas_function, \"Which passenger class has the highest number of survivors?\", 'category')\ntest_pandas(df, pandas_function, \"How many retweets does the most retweeted tweet have?\", int)\n```\n\n# Challenge 2\n\nYou are a data scientist at a large firm working for a large company. You are given the following dataset:\n```\npd.read_csv('data/employee_attrition.csv')\n```\n\nYour goal is to understand what makes an employee leave and to create a function that returns a \"risk score\" for each employee.\n\nThis \"risk score\" should be calculated as follows:\n\n- If an employee has any of the following attributes: Is the employee an active veteran? Is the employee a sexual harasser? Does the employee have a disability? Does the employee have a criminal record? Does the employee have a mental health issue? Is the employee a physical dependable? Is the employee an arrested felon? Is the employee a military dependent? Is the employee a spamming/scamming employee? Is the employee a smo",
    "```json\n{\n    \"solution\": \"df.groupby('mention_ids').count()['mentions'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>', 'search<gx:category>']\nQuestion: How many times has the user 'YogiBear' been mentioned?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['mention_names'].str.contains('YogiBear')]['mention_names'].count()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:",
    "```json\n{\n    \"solution\": \"df.loc[:, 'author_followers_count'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>', 'search<gx:category>']\nQuestion: Which Twitter user has the most linked to Wikipedia article?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['links'].map(len).idxmax(), 'user_handler']\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: What is the average age of self-made billionaires?\nExpected return type: number",
    "```json\n{\n    \"solution\": \"df[df['user_favourites_count'].idxmax()]['author_name']\"\n}\n```import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\ndef get_first_name(string):\n    #split string at spaces and return the first item\n    return string.split(\" \")[0]\n\ndef get_last_name(string):\n    #split string at spaces and return the last item\n    return string.split(\" \")[-1]\n\n#get first and last names\ndf['first_name'] = df['Name'].apply(get_first_name)\ndf['last_name'] = df['Name'].apply(get_last_name)# Python Bootcamp\n\nThe following list contains exercises that can be solved using the Python programming language.\n\nExercise ticket: https://app.ticketmatic.com/event/python-bootcamp-1\n\nPresentation: https://slides.com/mikeelliott777/deck-1/live\n\n## Setup\n\nThese exercises are created with Python version 3.8.0.\n\nThe packages that are used in this bootcamp are:\n\n`pandas` version 1.0.5\n\n`scikit-learn` version 0.23.1\n\n`matplotlib` version 3.2.1\n\n`seaborn` version 0.10.1\n\nYou can download all these packages with the following command:\n\n`python -m pip install pandas scikit-learn matplotlib seaborn`\n\nIf you do not have Python installed, download it here: https://www.python.org/downloads/\n\n## Exercises\n\nThe following exercises will be solved in the following files:\n\n| Exercise | File Name |\n| ---- | ----------- |\n| Exercise 1 | [00_exercise_1.py](00_exercise_1.py) |\n| Exercise 2 | [00_exercise_2.py](00_exercise_2.py) |\n| Exercise 3 | [00_exercise_3.py](00_exercise_3.py) |\nimport pandas as pd\n\ndf = pd.read_csv('data.csv",
    "```json\n{\n    \"solution\": \"df['author_name'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'license', 'license_start_date', 'county', 'state', 'city', 'location', 'location_type', 'location_lat', 'location_long', 'location_accuracy', 'address', 'apt', 'street', 'cross_street', 'zip', 'phone', 'website', 'hours_open', 'hours_closed', 'todays_hours', 'todays_hours_24hr', 'todays_hours_notes', 'todays_hours_restrictions', 'todays_hours_restrictions_notes', 'todays_hours_sunday', 'todays_hours_sunday_24hr', 'todays_hours_sunday_notes', 'todays_hours_sunday_restrictions', 'todays_hours_sunday_restrictions_notes', 'todays_hours_monday', 'todays_hours_monday_24hr', 'todays_hours_monday_notes', 'todays_hours_monday_restrictions', 'todays_hours_monday_restrictions_notes', 'todays_hours_tuesday', 'todays_hours_tuesday_24hr', 'todays_hours_tuesday_notes', 'todays_hours_tuesday_restrictions', 'todays_hours_tuesday_restrictions_notes', 'todays_hours_wednesday', 'todays_hours_wednesday_24hr', 'todays_hours_wednesday_notes', 'todays_hours_wednesday_restrictions', 'todays_hours_wednesday_restrictions_notes', 'todays_hours_thursday', 'todays_hours_thursday_24hr', 'todays_hours_thursday_notes', 'todays_hours_thursday_restrictions', 'todays_hours_thursday_restrictions_notes', 'todays_hours_friday', 'todays_hours_friday_24hr', 'todays_hours_friday_notes', 'todays_hours_friday_restrictions', 'tod",
    "```json\n{\n    \"solution\": \"df[df['retweets'].idxmax()]['author_name']\"\n}\n```\n\n\n### 2. Data extraction - 150 points\n\nIn this problem, you will be working with the olympic medals dataset from Kaggle: https://www.kaggle.com/the-guardian/olympic-games.\n\nThe dataset contains data from the medallist at every edition of the olympic games, from Athens 1896 to Rio 2016.\n\nThis dataset contains 28129 relevant records (28128 rows and 14 columns).\n\nEach row in the dataset has information about an individual medal win. \nThe columns are:\n1. City - City where the olympic games took place\n2. Edition - Year the games took place\n3. Sport - Sport the player participated in\n4. Discipline - Category of the sport\n5. Athlete - Athlete's full name\n6. Country - Country the athlete represents\n7. Gender - Gender of the athlete\n8. Event - Event in which the athlete participated\n9. Medal - Type of medal (\"Gold\", \"Silver\", \"Bronze\")\n\n\nIn the problems below, find the requested information using the dataset and pandas operations ONLY. If the requested information cannot be obtained in one line, it's fine to use multiple.\n\nE.g.\n```py\n# In the code below, calculate the number of silver medalists in 100m hurdles in 1920 Athens.\n# The solution should ONLY require one line of code (unless there's a tricky way to do it that I forgot).\n\n# Code that calculates the number of silver medalists in 100m hurdles in 1920 Athens:\n```json\n{\n    \"solution\": \"df[(df['Edition'] == 1920) & (df['Sport'] == 'Athletics') & (df['Discipline'] == '100m hurdles') & (df['Medal'] == 'Silver')].shape[0]\"\n}\n\n# Code",
    "```json\n{\n    \"solution\": \"df['author_name'].value_counts().head(3).index.tolist()\"    \n}\n```\n\n# For a short code challenge, you are tasked with completing a function that takes in a string as input and returns a df of the frequencies of each word in the string.\n\n```python\nimport pandas as pd\nimport numpy as np\n\ndef word_frequency(input_str):\n    \"\"\"\n    Simple function that takes in a string and returns a df of the frequencies of each word in the string.\n\n    Input:\n        input_str: the string to analyze\n\n    Output:\n        word_freq: a df with columns [\"word\", \"frequency\"]\n    \"\"\"\n    # TODO: Your code goes here\n\n    return word_freq\n\n# Example use\ninput_str = \"The New York Times is an American daily news website with a focus on international news. The Times has been based in New York City since 1851. The Times is well known for its investigative journalism and for its journalistic statements in support of free speech.\"\nword_freq = word_frequency(input_str)\nprint(word_freq)\n```\n\n## Expected Output\n![Expected Output](example_1.png)\n\n# In a second short code challenge, you are tasked with completing a function that calculates the distance between two pairs of points and returns a dict of the unique distances between the pairs.\n\n```python\nimport pandas as pd\nimport numpy as np\n\ndef get_unique_distances(a, b):\n    \"\"\"\n    Function that calculates the distance between two pairs of points and returns a dict of the unique distances between the pairs.\n\n    Input:\n        a: a df of points with columns [\"x\", \"y\"]\n        b: a df of points with columns [\"x\", \"y\"]\n\n    Output:\n        unique_distances: a dict of the unique distances between the pairs of points\n    \"\"\"\n    # TODO: Your code goes here\n    return unique_distances\n\n# Example use\na = pd.DataFrame(data=[[0,0], [1,0], [0,1], [0.5,0.5]], columns=['x', 'y'])\nb = pd.DataFrame(data=[[1,1], [1,0], [0,1], [1",
    "```json\n{\n    \"solution\": \"df[['author_id', 'favorites']].groupby('author_id').sum().nlargest(4, 'favorites')['author_id'].values\"\n}\n```\n\nInput DataFrame columns: ['id<gx:number>', 'lat<gx:number>', 'lng<gx:number>', 'city<gx:text>', 'state_code<gx:category>', 'country_code<gx:category>', 'state<gx:text>', 'country<gx:text>', 'wiki_link<gx:url>', 'web_link<gx:url>', 'county<gx:text>']\nQuestion: What is the country code of the state with the most inhabitants?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['state_code'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['id<gx:number>', 'name<gx:text>', 'type<gx:category>', 'location_id<gx:number>', 'location_name<gx:text>', 'location<gx:text>', 'code<gx:text>', 'continent_code<gx:category>', 'country_code<gx:category>', 'country_name<gx:text>', 'state_code<gx:category>', 'state_name<gx:text>', 'county<gx:text>', 'postal_code<gx:text>', 'date_created<gx:date>', 'date_updated<gx:date>', 'date_certified<gx:date>', 'web_link<gx:url>', 'wiki_link<gx:url>']\nQuestion: What is the country code of the country with the most cities?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['country_code'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['region<gx:category>', 'blog_url<gx:url>', 'blog_name<gx:text>', 'email<gx:text>', 'hireable<gx:boolean>', 'location<gx:text>', 'name<gx:text>', 'twitter_username<gx:text>', 'phone<gx:text>',",
    "```json\n{\n    \"solution\": \"df['mention_names'].explode().value_counts()[df['mention_names'].explode().value_counts() == df['mention_names'].explode().value_counts().max()].index.tolist()[:4]\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'text', 'language', 'retweet_count', 'favorite_count', 'user_id', 'user_name', 'created_at', 'mentioned_user_count', 'mentioned_user_ids', 'location', 'retweet_tweet_ids', 'quote_tweet_ids']\nQuestion: What are the 10 most frequently used hashtags?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['text'].str.extractall(r'\\\\#([^\\\\s]+)').groupby(0).count().nlargest(10, 1).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'text', 'language', 'retweet_count', 'favorite_count', 'user_id', 'user_name', 'created_at', 'mentioned_user_count', 'mentioned_user_ids', 'location', 'retweet_tweet_ids', 'quote_tweet_ids']\nQuestion: Which tweet has the most mentioned users?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['mentioned_user_count'].max()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'text', 'language', 'retweet_count', 'favorite_count', 'user_id', 'user_name', 'created_at', 'mentioned_user_count', 'mentioned_user_ids', 'location', 'retweet_tweet_ids', 'quote_tweet_ids']\nQuestion: What is the average retweet count?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['retweet_count'].mean()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'text', 'language', 'retweet_count', 'favorite_count',",
    "```json\n{\n    \"solution\": \"df.groupby('author_id')['retweets'].sum().sort_values(ascending=False).head(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'step<gx:number>', 'timestamp<gx:date>', 'nodeid<gx:category>', 'infected<gx:boolean>']\nQuestion: Which node has the highest infected score at the start of the simulation?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['step'] == 0].groupby('nodeid')['infected'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'start_lat<gx:number>', 'start_lng<gx:number>', 'end_lat<gx:number>', 'end_lng<gx:number>', 'distance<gx:number>', 'duration<gx:number>']\nQuestion: Which route has the longest duration?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('id')['duration'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'start_lat<gx:number>', 'start_lng<gx:number>', 'end_lat<gx:number>', 'end_lng<gx:number>', 'distance<gx:number>', 'duration<gx:number>']\nQuestion: Which route has the longest distance?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('id')['duration'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Personality I', 'Personality E', 'Personality N', 'Personality S', 'Personality T', 'Personality J', 'Personality P', 'Personality Status']\nQuestion: Are there more 'extroverts' on the data than 'introverts'?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.Personality.value_counts().index.tolist() == ['E', 'I']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.sort_values(by='user_followers_count', ascending=False)['user_followers_count'].iloc[:3].tolist()\"\n}\n```\n\nInput DataFrame columns: ['text<gx:text>', 'Hashtags<gx:list[category]>']\nQuestion: What are the top 3 most popular hashtags in the dataset?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.explode('Hashtags')['Hashtags'].value_counts(ascending=False).index[:3].tolist()\"\n}\n```\n```\nfrom typing import List, Union, Tuple, Dict\nimport pandas as pd\nimport math\n\n\ndef weighted_mean(series: pd.Series) -> pd.Series:\n    \"\"\"\n    Returns the weighted mean of a series taking into account the number of observations.\n\n    :param series: The series containing the values for which the weighted mean is calculated.\n    :return: The weighted mean of the values in the given series.\n    \"\"\"\n    weight = series.shape[0] / series.count()\n    return series.sum() * weight\n\n\ndef weighted_median(series: pd.Series) -> pd.Series:\n    \"\"\"\n    Returns the weighted median of a series taking into account the number of observations.\n\n    :param series: The series containing the values for which the weighted median is calculated.\n    :return: The weighted median of the values in the given series.\n    \"\"\"\n    if series.count() == 0:\n        return math.nan\n    weight = series.shape[0] / series.count()\n    sorted_series = series.sort_values()\n    lower_index = math.floor(weight / 2) - 1\n    upper_index = math.ceil(weight / 2) - 1\n    if upper_index < 0 or lower_index >= series.shape[0]:\n        return math.nan\n    elif upper_index == lower_index:\n        return sorted_series.iloc[lower_index]\n    else:\n        return (sorted_series.iloc[upper_index] + sorted_series.iloc[lower_index]) / 2\n\n\ndef weighted_percentile(series: pd.Series, percentile: Union[Tuple[int",
    "```json\n{\n    \"solution\": \"df['favorites'].nlargest(3)\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>', 'search<gx:category>']\nQuestion: What are the top 5 urls in the dataset that are of type image?\nExpected return type: list[url]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['type'] == 'image', 'image_links_first']\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count",
    "```json\n{\n    \"solution\": \"df.iloc[:, 15:19].dropna().astype(int).sum(axis=1).nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Title', 'Duration', 'Production Budget', 'Worldwide Gross', 'Discipline', 'Release Year', 'Link to IMDb Page', 'Language', 'Country', 'Link to FreeFull Movie Page', 'Original Language', 'Rating', 'Votes', 'Gross USA', 'Gross Canada', 'Gross Other Countries', 'Gross Worldwide', 'Link to Wikipedia', 'Genre', 'Directors', 'Stars', 'Runtime']\nQuestion: How many movies do not have a rating?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Rating'].isna().sum()\"\n}\n```\n\nInput DataFrame columns: ['f1_cat', 'f2_cat', 'f3_cat', 'f4_cat', 'f5_cat', 'f6_cat', 'f7_cat', 'f8_cat', 'f9_cat', 'f10_cat', 'f11_cat', 'f1_num', 'f2_num', 'f3_num', 'f4_num', 'f5_num', 'f6_num', 'f7_num', 'f8_num', 'f9_num', 'f10_num', 'f11_num', 'f12_cat', 'f13_cat', 'f14_cat', 'f15_cat', 'f16_cat', 'f17_cat', 'f18_cat', 'f19_cat', 'f20_cat', 'f21_cat', 'f22_cat', 'f23_cat', 'f24_cat', 'f25_cat', 'f1_num_2', 'f2_num_2', 'f3_num_2', 'f4_num_2', 'f5_num_2', 'f6_num_2', 'f7_num_2', 'f8_num_",
    "```json\n{\n    \"solution\": \"df['retweets'].sort_values(ascending=False).head(2).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'user_created_at', 'user_description', 'user_favourites_count', 'user_followers_count', 'user_following_count', 'user_listed_count', 'user_tweets_count', 'user_verified', 'user_location', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'replies', 'quotes', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'source', 'search']\nQuestion: What are the top 2 lowest numbers of favorites a tweet in the dataset has?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['favorites'].sort_values().head(2).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: What is the total number of survivors?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Survived'].count()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: What is the percentage of people who did not survive?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 0]['Survived'].count() / df['Survived'].count()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id',",
    "```json\n{\n    \"solution\": \"df.loc[df['Loan Amount'].idxmax(), 'Loan Duration - Months']\"\n}\n\nInput DataFrame columns: ['Gender', 'Age', 'Income', 'Education Level', 'Location', 'Signs of Depression', 'Observed OCD', 'Anhedonia', 'Acute Stress Injections', 'Previous Depression Treatment', 'Anxiety', 'Psychosis', 'Schizophrenia', 'Single Parent', 'Bipolar', 'Hallucinations', 'Severe Mood Swings', 'Sleeping Disorder', 'Panic Disorder', 'Social Anxiety', 'Social Phobia', 'Depression', 'Anger']\nQuestion: Does an individual have more than one mental health disorder?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.iloc[df.index[df.loc[:, 'Gender'].notna()]].shape[0] - df.iloc[df.index[df.loc[:, 'Gender'].isna()]].shape[0]\"\n}\n\nInput DataFrame columns: ['Duration', 'Attempt', 'Correct', 'First Attempt', 'Session Number', 'Screen View', 'Lapse', 'Answered Correctly', 'How many times?']\nQuestion: Which quiz question was most frequently attempted by all students?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.iloc[df.index[df.loc[:, 'Attempt'] == 1]].index[df.iloc[df.index[df.loc[:, 'Attempt'] == 1]].index.repeat(df.iloc[df.index[df.loc[:, 'Attempt'] == 1]]['How many times?'])]\"\n}\n\nInput DataFrame columns: ['Year', 'Country', 'Sex', 'Age', 'Sketch', 'Art', 'Politics', 'History', 'Religion', 'Science', 'Math', 'Music', 'Film', 'Games', 'Internet', 'Sinking Ship', 'Sailing', 'Candle', 'Water', 'Internet Usage']\nQuestion: Which country has the most students who play the most online games?\nExpected return type: category\n\nCode that",
    "```json\n{\n    \"solution\": \"df.sort_values('Number of Existing Loans', ascending=False).iloc[0].loc['Loan Amount'] > df['Loan Amount'].max()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Delivery Number', 'Delivery Type', 'Shelter Name', 'Animal Id', 'Animal', 'Sex', 'Age', 'Breed', 'Color', 'Primary Key', 'Cross', 'Treatment', 'Breed 2', 'State', 'City', 'Zip Code', 'Outcome Type', 'Outcome Subtype', 'Animal Type', 'Animal Status', 'Relationship to Owner', 'Date of Birth', 'Date Received', 'Age upon Outcome', 'Ear Tag Number', 'Name', 'Found Location', 'Est. Intake Age', 'Est. Intake Weight', 'Intake Type', 'Intake Condition', 'Intake Year', 'Intake Month', 'Intake Day of Week', 'Intake Time', 'Intake Situation', 'Intake Time of Day', 'Intake Zip Code', 'Intake County', 'Outcome Year', 'Outcome Month', 'Outcome Day of Week', 'Outcome Time', 'Outcome Time (12Hr)', 'Outcome Location', 'Outcome Zip Code', 'Outcome County', 'Intake Time Frame', 'Month Year', 'Day Year', 'Outcome Age Group']\nQuestion: What is the location that sees the most animals into shelters?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Found Location'].value_counts().sort_values(ascending=False).keys()[0]\"\n}\n```\n\nInput DataFrame columns: ['Sex', 'Age', 'Breed', 'Color', 'Primary Key', 'Cross', 'Treatment', 'Breed 2', 'State', 'City', 'Zip Code', 'Outcome Type', 'Outcome Subtype', 'Animal Type', 'Animal Status', 'Relationship to Owner', 'Date of Birth', 'Date Received', 'Age upon Outcome', 'Ear Tag Number', 'Name', 'Found Location', 'Est. Intake Age', 'Est. Intake Weight', 'Intake Type', 'Intake Condition', 'Intake Year', 'Intake Month', 'Intake Day of Week",
    "```json\n{\n    \"solution\": \"df.loc[df['Loan Duration - Months'].idxmax(), 'Number of Existing Loans'] == df['Number of Existing Loans'].max()\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: What is the median worth of women?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['gender'] == 'Female']['finalWorth'].median()\"\n}\n```\n\nInput DataFrame columns: ['gender', 'age', 'selfMade']\nQuestion: What is the average age of self-made men?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['selfMade'] == True) & (df['gender'] == 'Male')]['age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Which gender has the most self-made people?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('gender')['selfMade'].sum().sort_values(ascending=False).index[0]\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Which organization has the most self-made people in their 30s?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df[df['age'] <= 30]",
    "```json\n{\n    \"solution\": \"df['Age'].max() == df['Loan Amount'].max()\"\n}\n```\n\nInput DataFrame columns: ['country', 'date', 'new_vaccinations', 'total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated', 'new_deaths', 'total_deaths', 'population']\nQuestion: Does the highest number of new vaccinations occur on the same day in the United States and Canada?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['country'] == 'United States') & (df['country'] == 'Canada')]['new_vaccinations'].max()\"\n}\n```\n\nInput DataFrame columns: ['Sex', 'Number of Times Seen', 'Number of Times Crossed']\nQuestion: Does the highest number of times a male rose passerby crossed the bridge occur on the same day that the highest number of females crossed the bridge?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Sex'] == 'male']['Number of Times Seen'].max() == df[df['Sex'] == 'female']['Number of Times Crossed'].max()\"\n}/DataCamp/Introduction to Data Science in Python/2. Intermediate Python and Pandas/4. Dates and timestamps.md\n# Dates and timestamps\n\n- Reading and writing date and time data is a common task.\n- Pandas has the following data types for working with dates:\n\t- Timestamp \u2013 A single timestamp.\n\t- DatetimeIndex \u2013 A sequence of timestamps.\n\t- Period \u2013 A time span.\n\t- PeriodIndex \u2013 A sequence of periods.\n\n## Timestamp\n\n- Pandas provides the Timestamp type.\n- Timestamp attempts to convert any argument into a single Timestamp.\n- If the data is not a valid timestamp, it will raise an exception.\n- There are also methods that create Timestamps from the UNIX epoch or Windows.\n- You can convert a Series of datetime64 objects into a DatetimeIndex for easier slicing and manipulation.\n\n## DatetimeIndex\n\n- The DatetimeIndex is an ndarray of Timestamps.\n-",
    "```json\n{\n    \"solution\": \"df['Loan Amount'].max()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: What is the age of the youngest person that survived?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Survived'] == 1]['Age'].min()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: What is the age of the oldest person that died?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Survived'] == 0]['Age'].max()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: What is the average age of the people who survived?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Survived'] == 1]['Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: What is the average age of the people who did not survive?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Survived'] == 0]['Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: What is the average age of males who surv",
    "```json\n{\n    \"solution\": \"len(df.loc[df['Number of Existing Loans'] > 1])\"\n}\n```\n\nInput DataFrame columns: ['Overall_Score', 'Very_Confident', 'Fairly_Confident', 'Not_Very_Confident', 'Not_At_All_Confident', 'I_Am_Not_Very_Confident', 'I_Am_Fairly_Confident', 'I_am_Not_At_All_Confident', 'I_Am_Not_Confident_In_Anything', 'Percentage_of_Time_Confident', 'Number_of_Times_Confident', 'I_Am_Very_Confident', 'I_Am_Not_Very_Confident', 'I_Am_Not_At_All_Confident', 'Number_of_Times_Not_Confident', 'I_am_Not_At_All_Confident', 'I_Am_Not_Confident_In_Anything', 'Percentage_of_Time_Not_Confident', 'Number_of_Times_Not_Confident', 'I_Am_Very_Confident', 'I_Am_Fairly_Confident', 'Very_Confident', 'Fairly_Confident', 'Not_Very_Confident', 'Not_At_All_Confident', 'I_Am_Not_Very_Confident', 'I_Am_Fairly_Confident', 'I_am_Not_At_All_Confident', 'I_Am_Not_Confident_In_Anything', 'Percentage_of_Time_Confident', 'Number_of_Times_Confident', 'I_Am_Very_Confident', 'I_Am_Not_Very_Confident', 'I_Am_Not_At_All_Confident', 'Number_of_Times_Not_Confident', 'I_am_Not_At_All_Confident', 'I_Am_Not_Confident_In_Anything', 'Percentage_of_Time_Not_Confident', 'Number_of_Times_Not_Confident', 'I_Am_Very_Confident', 'I_Am_Fairly_Confident', 'Very_Confident",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].max()\"\n}\n```\n\nInput DataFrame columns: ['Class', 'Sex', 'Age', 'Survived']\nQuestion: What is the average age of a first class female passenger that survived?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df.Class == 1) & (df.Survived == 1) & (df.Sex == 'female')]['Age'].mean()\"\n}\n\nInput DataFrame columns: ['Rank', 'Name', 'Team', 'Games Played', 'Games Started', 'Minutes Played', 'Field Goals Made', 'Field Goal Attempts', 'Percentage of Field Goals', '3-Point Field Goals Made', '3-Point Field Goal Attempts', 'Percentage of 3-Point Field Goals', '2-Point Field Goals Made', '2-Point Field Goal Attempts', 'Percentage of 2-Point Field Goals', 'Effective Field Goal Percentage', 'Free Throws Made', 'Free Throw Attempts', 'Percentage of Free Throws', 'Offensive Rebounds', 'Defensive Rebounds', 'Total Rebounds', 'Assists', 'Steals', 'Blocks', 'Turnovers', 'Personal Fouls', 'Points']\nQuestion: Which player has the most blocks in a single game?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Blocks'].idxmax(), 'Name']\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Time', 'Attendance', 'Year', 'Month', 'Day', 'Day_of_Week', 'Game_Result', 'Game_Type', 'League', 'Division', 'Venue', 'Attend_Type', 'Attend_Type_Detail', 'game', 'Game', 'Game Number', 'Winner', 'Winner_Name', 'Loser', 'Loser_Name', 'Victory', 'Match_ID', 'Match_ID_Type', 'Half', 'Game_Minutes']\nQuestion: What division was that hockey game played in?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{",
    "```json\n{\n    \"solution\": \"df[df['Age'] > 50]['Age'].count()\"\n}\n```\n\nInput DataFrame columns: ['Region_A', 'Region_B', 'Region_C', 'Region_D', 'Region_E', 'Region_F', 'Region_G']\nQuestion: Which region has the highest average Region_G value?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Region_G'].idxmax(), 'Region_G']\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Time', 'Temperature', 'Humidity', 'Pressure']\nQuestion: How many times did the temperature fall below 20 degrees?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Temperature'] < 20]['Temperature'].count()\"\n}\n```\n\nInput DataFrame columns: ['A', 'B', 'C', 'D', 'E', 'F', 'G']\nQuestion: The minimum value of column 'G' is 1. What is column 'B' value corresponding to column 'G' minimum value?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['G'].idxmin(), 'B']\"\n}\n```\n\nInput DataFrame columns: ['A', 'B', 'C', 'D', 'E', 'F']\nQuestion: What is the maximum value of column 'A' minus column 'B'?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"round(df['A'].max() - df['B'].max() , 3)\"\n}\n```\n\nInput DataFrame columns: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\nQuestion: What is the minimum value of column 'G' minus column 'F'?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['G'].min() - df['F'].min()\"\n}\n```\n\nInput DataFrame columns: ['A",
    "```json\n{\n    \"solution\": \"df['Purpose of Loan'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['LoanDuration', 'CreditHistory', 'LoanPurpose', 'LoanAmount', 'SavingsAccount', 'LengthOfCurrentEmployment', 'InstallmentRate', 'Guarantors', 'LengthOfCurrentPropertyResidence', 'Age', 'Housing', 'NumberOfExistingLoans', 'Job', 'NumberOfDependants', 'ForeignWorker', 'Risk', 'Sex', 'Status']\nQuestion: What is the mean length of employed loans based on the loan's sex?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Sex'] == 'Female']['LengthOfCurrentEmployment'].mean()\"\n}\n``````\n\nInput DataFrame columns: ['LoanDuration', 'CreditHistory', 'LoanPurpose', 'LoanAmount', 'SavingsAccount', 'LengthOfCurrentEmployment', 'InstallmentRate', 'Guarantors', 'LengthOfCurrentPropertyResidence', 'Age', 'Housing', 'NumberOfExistingLoans', 'Job', 'NumberOfDependants', 'ForeignWorker', 'Risk', 'Sex', 'Status']\nQuestion: What is the mean length of employed loans based on the loan's sex?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Sex'] == 'Female']['LengthOfCurrentEmployment'].mean()\"\n}\n```\n\nInput DataFrame columns: ['LoanDuration', 'CreditHistory', 'LoanPurpose', 'LoanAmount', 'SavingsAccount', 'LengthOfCurrentEmployment', 'InstallmentRate', 'Guarantors', 'LengthOfCurrentPropertyResidence', 'Age', 'Housing', 'NumberOfExistingLoans', 'Job', 'NumberOfDependants', 'ForeignWorker', 'Risk', 'Sex', 'Status']\nQuestion: What is the mean length of employed loans based on the loan's sex?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Sex'] == 'Female']['LengthOfCurrentEmployment'].mean()\"\n}\n```\n\nInput DataFrame columns: ['LoanDuration', 'CreditHistory',",
    "```json\n{\n    \"solution\": \"df['Job'].mode().iloc[0]\"\n}\n```\n\"\"\"\n\n# text = \"Input DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\\nQuestion: Is the person with the highest net worth self-made?\\nExpected return type: boolean\\n\\nCode that calculates the answer:\\n{    \\\"solution\\\": \\\"df.loc[df['finalWorth'].idxmax(), 'selfMade']\\\"}\\n\\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\\nQuestion: Which passenger class has the highest number of survivors?\\nExpected return type: category\\n\\nCode that calculates the answer:\\n{    \\\"solution\\\": \\\"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\\\"}\\n\\nInput DataFrame columns: ['Loan Duration - Months', 'Credit History', 'Purpose of Loan', 'Loan Amount', 'Savings Account', 'Length of Current Employment', 'Installment Rate as % of Income', 'Guarantors', 'Length of Current Property Residence', 'Age', 'Housing', 'Number of Existing Loans', 'Job', 'Number of Dependants', 'Foreign Worker', 'Risk', 'Sex', 'Status']\\nQuestion: What is the most common job category for borrowers?\\nExpected return type: category\\n\\nCode that calculates the answer:\\n{    \\\"solution\\\": \\\"df['Job'].mode().iloc[0]\\\"}\\n\"\n# text = \"Input DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\\nQuestion: Is the person with the highest net worth self-made?\\nExpected",
    "```json\n{\n    \"solution\": \"df['Credit History'].mode().iloc[0]\"\n}\n```\n\n\nInput DataFrame columns: ['Loan Duration - Months', 'Credit History', 'Purpose of Loan', 'Loan Amount', 'Savings Account', 'Length of Current Employment', 'Installment Rate as % of Income', 'Guarantors', 'Length of Current Property Residence', 'Age', 'Housing', 'Number of Existing Loans', 'Job', 'Number of Dependants', 'Foreign Worker', 'Risk', 'Sex', 'Status']\nQuestion: What is the mean duration of loans? (round to nearest whole number)\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Loan Duration - Months'].mean().round().astype('int').iloc[0]\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Savings Account'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['age', 'job', 'marital', 'education', 'default', 'balance', 'housing', 'loan', 'contact', 'day', 'month', 'duration', 'campaign', 'previous', 'poutcome', 'y', 'campaign', 'pdays', 'previous', 'poutcome']\nQuestion: What is the most common campaign outcome for the job called blue-collar?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['job'] == 'blue-collar')]['poutcome'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: What is the percentage of diabetics (outcome of 1)?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Outcome'] == 1].shape[0] / df.shape[0]\"\n}\n```\n\nInput DataFrame columns: ['age', 'job', 'marital', 'education', 'default', 'balance', 'housing', 'loan', 'contact', 'day', 'month', 'duration', 'campaign', 'previous', 'poutcome', 'y', 'campaign', 'pdays', 'previous', 'poutcome']\nQuestion: What is the percentage of working people who subscribed?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['job'] == 'services') & (df['y'] == 'yes')].shape[0] / df.loc[(df['job'] == 'services')].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Sex', 'Brain Weight(grams)', 'Body Weight(kg)', 'Head Size(cm^3)', 'Brain Weight(grams)']\nQuestion: What is the weighted average brain weight of males with a head size above",
    "```json\n{\n    \"solution\": \"df.sort_values(by=['Loan Amount'], ascending=False).head(3)['Job'].tolist()\"\n}\n```import pandas as pd\nimport json\n\ndef get_information(df, question, expected_return_type):\n    answer = eval(json.loads(question)['solution'])\n    if not isinstance(answer, expected_return_type):\n        raise TypeError(f\"Wrong type of answer: {type(answer)} instead of {expected_return_type}.\")\n    return answer\n\ndf = pd.read_csv('https://raw.githubusercontent.com/Codecademy/recipes-data-science/master/visualize-data-wrangling-pandas/credit_history_raw.csv')# Visualize data with Seabornimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nloans = pd.read_csv('https://raw.githubusercontent.com/Codecademy/recipes-data-science/master/visualize-data-wrangling-pandas/credit_history_raw.csv')\nloans.head()\n\n# Code to plot the histogram of loans\nsns.set()\nplt.figure(figsize=(10, 8))\nsns.countplot(loans['Job'], order = loans['Job'].value_counts().index)\nplt.xticks(rotation=90)\nplt.show()\n\n# Code to plot the barplot of loan amounts\nsns.set()\nplt.figure(figsize=(10, 8))\nsns.barplot(x = 'Amount', y = 'Job', data = loans, ci=None, order = loans['Job'].value_counts().index)\nplt.show()# Handle missing dataimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Code to identify missing values\nloans = pd.read_csv('https://raw.githubusercontent.com/Codecademy/recipes-data-science/master/visualize-data-wrangling-pandas/credit_history_raw.csv')\nprint(loans.isnull().sum())\n\n# Code to drop all rows with missing values\nloans = loans.dropna().copy()",
    "```json\n{\n    \"solution\": \"df.loc[df['Loan Duration - Months'] >= 24, 'Job'].value_counts().index.to_list()[:4]\"\n}\n```\n\nInput DataFrame columns: ['Number of Instances', 'Number of Attributes', 'Year of Record', 'Gender', 'Age', 'Country of Last Schooling', 'Education Level', 'Income', 'Profession', 'University Degree', 'Hair Color', 'Height', 'Weight', 'Body Type', '15 to 25', '25 to 35', '35 to 45', '45 to 55', '56 to 60', '60 or Above', 'Number of Siblings or Spouses', 'Number of Children', 'Country of Current Location', 'Gasoline Price', 'Engine Power', 'Trade Price', 'Professional', 'Political Leadership', 'Photo', 'Music', 'Adventure Travel', 'Fashion', 'Television', 'Art', 'Movies', 'Health and Beauty', 'Celebrity', 'Reading', 'Sports', 'History', 'Theatre', 'Comedy', 'Horror', 'Arts', 'Science', 'Hobbies', 'Security', 'Food', 'Law Enforcement', 'Military', 'Journalism', 'Architecture', 'Photography', 'In-Person Activities', 'Internet', 'Computer Science', 'Tourism', 'Writing', 'Teaching', 'Science and Engineering', 'Magazines', 'Photography and Videography', 'Cars and Motorcycles', 'Sports and Fitness', 'Religion', 'Computers', 'Hobbies and Interests', 'Athletics', 'Musicians and Podcasts', 'Advertising and Marketing', 'Engineering', 'Dance', 'Government Services and Politics', 'Arts and Culture', 'Renting and Leasing', 'Sales and Marketing', 'Medicine and Pharmaceuticals', 'Painting', 'Writing', 'Language', 'Warfare', 'Military and Politics', 'Multi-Media Production', 'Online Gaming', 'Government and Military', 'Sci-Fi and Fantasy', 'Machines', 'Food and Drink', '",
    "```json\n{\n    \"solution\": \"df[df['Number of Existing Loans'] == df['Number of Existing Loans'].max()]['Job'].value_counts().head().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['loan_id', 'member_id', 'loan_amnt', 'funded_amnt', 'funded_amnt_inv', 'term', 'int_rate', 'installment', 'grade', 'sub_grade', 'emp_title', 'emp_length', 'home_ownership', 'annual_inc', 'verification_status', 'issue_d', 'loan_status', 'pymnt_plan', 'url', 'desc', 'purpose', 'title', 'zip_code', 'addr_state', 'dti', 'delinq_2yrs', 'earliest_cr_line', 'inq_last_6mths', 'mths_since_last_delinq', 'mths_since_last_record', 'open_acc', 'pub_rec', 'revol_bal', 'revol_util', 'total_acc', 'initial_list_status', 'out_prncp', 'out_prncp_inv', 'total_pymnt', 'total_pymnt_inv', 'total_rec_prncp', 'total_rec_int', 'total_rec_late_fee', 'recoveries', 'collection_recovery_fee', 'last_pymnt_d', 'last_pymnt_amnt', 'next_pymnt_d', 'last_credit_pull_d', 'collections_12_mths_ex_med', 'mths_since_last_major_derog', 'policy_code', 'application_type', 'annual_inc_joint', 'dti_joint', 'verification_status_joint', 'acc_now_delinq', 'tot_coll_amt', 'tot_cur_bal', 'open_acc_6m', 'open_act_il', 'op_il_pf', 'mths_since_rcnt_il', 'total_bal_il', 'il_util', 'open_rv_12m', 'open_rv_24m', 'max_bal",
    "```json\n{\n    \"solution\": \"sorted(df.sort_values(by='Age', ascending=False)['Job'][:5].unique().tolist())\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Sex', 'Age', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Group', 'Family Size', 'Is Alone', 'Title', 'Deck', 'Survived']\nQuestion: What is the median family size of survivors?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Survived'] == 1,'Family Size'].median()\"\n}\n```\n\nInput DataFrame columns: ['Expenditure', 'Income', 'Age', 'Education', 'Marital Status', 'Occupation', 'Relationship', 'Race', 'Sex', 'Capital Gain', 'Capital Loss', 'Hours worked per week', 'Native Country', 'Income Group']\nQuestion: What is the max income of females over 40 with a capital gain?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['Age'] > 40) & (df['Sex'] == 'Female') & (df['Capital Gain'] > 0), 'Income'].max()\"\n}\n```\nimport os\nimport sqlite3\n\nimport pandas as pd\n\nconn = sqlite3.connect(\"./data/us_accidents.db\")\ncursor = conn.cursor()\n\nquery = \"\"\"\nSELECT *\nFROM 'accidents_2019'\n\"\"\"\n\ndf = pd.read_sql(query, con=conn)\n\nprint(df.head())\n\nconn.close()\nimport fsspec\nfrom fastparquet import ParquetFile\nfrom pandas import DataFrame\n\ns3 = fsspec.filesystem(\"s3\")\n\ns3.ls(\"dap-data-science/data/nasa/\")\n\n# list all the files\ns3.ls(\"dap-data-science/data/nasa/part_1\")\n\n# Only show the file sizes\ns3.du(\"dap-data-science/data/nasa/part_1\")",
    "```json\n{\n    \"solution\": \"df['Loan Amount'].sort_values(ascending=False).head(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Loan Duration - Months', 'Credit History', 'Purpose of Loan', 'Loan Amount', 'Savings Account', 'Length of Current Employment', 'Installment Rate as % of Income', 'Guarantors', 'Length of Current Property Residence', 'Age', 'Housing', 'Number of Existing Loans', 'Job', 'Number of Dependants', 'Foreign Worker', 'Risk', 'Sex', 'Status']\nQuestion: What is the average of the installment rate as % of income?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Installment Rate as % of Income'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Loan Duration - Months', 'Credit History', 'Purpose of Loan', 'Loan Amount', 'Savings Account', 'Length of Current Employment', 'Installment Rate as % of Income', 'Guarantors', 'Length of Current Property Residence', 'Age', 'Housing', 'Number of Existing Loans', 'Job', 'Number of Dependants', 'Foreign Worker', 'Risk', 'Sex', 'Status']\nQuestion: What is the most common purpose of loan?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Purpose of Loan'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Loan Duration - Months', 'Credit History', 'Purpose of Loan', 'Loan Amount', 'Savings Account', 'Length of Current Employment', 'Installment Rate as % of Income', 'Guarantors', 'Length of Current Property Residence', 'Age', 'Housing', 'Number of Existing Loans', 'Job', 'Number of Dependants', 'Foreign Worker', 'Risk', 'Sex', 'Status']\nQuestion: What are the unique values of the credit history column?\nExpected return type: list[string]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Credit History'].unique().tolist()\"\n}\n```\n\nInput DataFrame columns:",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].value_counts().head(4).index.to_list()\"\n}\n```\n\nInput DataFrame columns: ['Loan Duration - Months', 'Credit History', 'Purpose of Loan', 'Loan Amount', 'Savings Account', 'Length of Current Employment', 'Installment Rate as % of Income', 'Guarantors', 'Length of Current Property Residence', 'Age', 'Housing', 'Number of Existing Loans', 'Job', 'Number of Dependants', 'Foreign Worker', 'Risk', 'Sex', 'Status']\nQuestion: What are the top 4 loan durations in the dataset?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Loan Duration - Months'].value_counts().head(4).index.to_list()\"\n}\n```### 11. An investment firm needs to buy a 500 carat diamond for its head of operations. It has a dataset of all the prices of diamonds with other properties in the market for that day. Using the data, write a cleaning function that returns the data as a pandas DataFrame with only the 500 carat diamond and the other properties.import pandas as pd\nimport numpy as np\n\n# Load the data\ndf = pd.read_csv(\"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/inst/extdata/penguins.csv\")\ndf.head()\n\n# Write a function to clean the data\ndef clean_df(df):\n    return df[(df[\"species\"] == \"Adelie\") & (df[\"island\"] == \"Biscoe\") & (df[\"sex\"] == \"male\") & (df[\"body_mass_g\"] == 5150)]\n    \n\n# Write a function to clean the data using just pandas operations\ndef clean_df_pandas(df):\n    return df.loc[(df[\"species\"] == \"Adelie\") & (df[\"island\"] == \"Biscoe\") & (df[\"sex\"] == \"male\") & (df[\"body_mass_g\"] == 5150)]\n\n\n#",
    "```json\n{\n    \"solution\": \"existing_loans = df['Number of Existing Loans']\\nthree_max = existing_loans.nlargest(3)\\nthree_max.reset_index(drop=True, inplace=True)\\nreturn list(three_max)\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: How many female passengers of class 1 and class 2 survived?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Sex'] == 'female') & (df['Pclass'].isin([1, 2])) & (df['Survived'] == 1)].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Sex', 'Age', 'Siblings/Spouses Aboard', 'Parents/Children Aboard', 'Fare']\nQuestion: What is the percentage of survival based on gender, passenger class, and ticket class?\nExpected return type: pd.DataFrame (index: gender, columns: passenger class, ticket class, values: survival percentage)\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['Sex', 'Pclass']).apply(lambda grp: grp['Survived'].mean())\"\n}\n```\n/AI-track/Ethereum/js/data.js\nfunction mapData(data) {\r\n    console.log(data);\r\n    let time = [];\r\n    let price = [];\r\n    let volume = [];\r\n    let marketCap = [];\r\n\r\n    for (let i = 0; i < data.data.length; i++) {\r\n        time.push(data.data[i][0]);\r\n        price.push(data.data[i][4]);\r\n        volume.push(data.data[i][6]);\r\n        marketCap.push(data.data[i][8]);\r\n    }\r\n\r\n    console.log(time);\r\n\r\n    let series = {\r\n        name: \"Price\",\r\n        type: \"line\",\r\n        data: price\r\n    };\r\n\r\n    let markCapSeries = {\r\n        name",
    "```json\n{\n    \"solution\": \"list(df.sort_values('Age', ascending=False).iloc[:2, 10])\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']\nQuestion: What is the percentage increase in the price on the day of 12/10?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n  \"solution\": \"100*((df.loc[df['Date'] == '12/10']['Close'].values[0] - df.loc[df['Date'] == '12/9']['Close'].values[0])/df.loc[df['Date'] == '12/9']['Close'].values[0])\"\n}\n```\n\nInput DataFrame columns: ['Days', 'Money', 'Food', 'Jobs', 'Health']\nQuestion: What was the most money spent in a single day?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n  \"solution\": \"df.groupby('Days')['Money'].sum().max()\"\n}\n```\n\nInput DataFrame columns: ['Year', 'School (s) hosted', 'State (s) hosted', 'Capital (s) hosted', 'City (s) hosted']\nQuestion: What event was held in the largest city?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n  \"solution\": \"df.groupby('City (s) hosted')['Year'].count().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Rank', 'Name', 'Country', 'Tourism revenue (millions in 2002 PPP)', 'Continent', 'Inflation', 'Life expectancy at birth (years)', 'Road transport (passenger cars / 1000 people)', 'Income per person (GDP/capita, PPP in USD)', 'Reported HIV/AIDS cases', 'Population (2000)', 'Military expenditure (% of GDP)']\nQuestion: Is the correlation between life expectancy and tourism revenue negative or positive (Hint: another way of asking this question is is the life expectancy increasing or decreasing",
    "```json\n{\n    \"solution\": \"df['Calories (kcal)'].any()\"\n}\n```\n\nInput DataFrame columns: ['name', 'emoji', 'Calories (kcal)', 'Carbohydrates (g)', 'Total Sugar (g)', 'Protein (g)', 'Total Fat (g)', 'Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)', 'Total Fiber (g)', 'Cholesterol (mg)', 'Vitamin B6 (mg)', 'Vitamin A (IU)', 'Vitamin B12 (ug)', 'Vitamin C (mg)', 'Vitamin D (IU)', 'Vitamin E (IU)', 'Vitamin K (ug)', 'Thiamin (mg)', 'Riboflavin (mg)', 'Niacin (mg)', 'Folate (ug)', 'Pantothenic Acid (mg)', 'Choline (mg)', 'Calcium (g)', 'Copper (mg)', 'Iron (mg)', 'Magnesium (mg)', 'Manganese (mg)', 'Phosphorus (g)', 'Potassium (g)', 'Selenium (ug)', 'Sodium (g)', 'Zinc (mg)']\nQuestion: How many foods have at least a 150 calorie intake?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Calories (kcal)'] >= 150]['Calories (kcal)'].count()\"\n}\n```### BEGIN SOLUTION\nimport pandas as pd\nimport json\n\ndef df_problems(df, question):\n    solution = json.loads(question)['solution']\n    return eval(solution)\n### END SOLUTION\ntest_df = pd.DataFrame({'rank':[0,1,2,3,4,5,6,7,8,9], 'personName':[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"], 'age':[30,35,28,42,28,47,47,21,61,37], '",
    "```json\n{\n    \"solution\": \"df['Total Sugar (g)'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Id', 'Age', 'Fare']\nQuestion: Who is the youngest passenger on the titanic that paid more than the average fare?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Age'] < df['Age'].mean()) & (df['Fare'] > df['Fare'].mean())]['Name'].min()\"\n}\n```### Dataframe\n\nOur data is a pandas DataFrame with a set of columns.\n\n| Column    | Description |\n|-----------|-------------|\n| index     | Index of the word |\n| word      | The word itself |\n| frequency | Frequency of the word in the book (the number of times the word is used in the book) |\n| count     | Total number of words in the book |\n| rank      | Rank of the word, based on the frequency |\n| percent   | Frequency expressed as percentage of the total word count |\n| error     | Error in the word count. This is explained below |\n| accuracy  | The accuracy of the word. This is explained below |import pandas as pd\n\ndf = pd.read_csv('data/word-frequency.csv', index_col='index', sep=',')\ndf.head()What does the `percent` column show?\n\nThe percentage is the same as the `frequency` column divided by the total number of words.df['word'][0]### Error\n\nThere's an error in the word count in the book.\n\nIt's possible to calculate the error of the word count by subtracting that from the percent error.df['error'] = df['percent'] - df['error']\ndf.head()### Accuracy of the word\n\nThe accuracy of a word is a measure of how close the word frequency is to the actual percentage of the word in the book.\n\nThe accuracy of a word is calculated by dividing the number of times that the word appears in the book by the total number of times that the word appears in the book.df['accuracy'] = df['frequency'] / df['count",
    "```json\n{\n    \"solution\": \"df['Total Fat (g)'].eq(0).any()\"\n}\n```\n\nInput DataFrame columns: ['fertilityRate', 'lifeExpectancy', 'population', 'under15', 'over65', 'under5', 'over75', 'under18', 'over60', 'under65', 'over85']\nQuestion: Which of the categories have the highest number of countries?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['population'] > 0].groupby('population')[['under15', 'under5', 'under18', 'under65', 'under75', 'under85', 'over5', 'over60', 'over65', 'over75', 'over85']].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['score', 'category', 'title', 'grade', 'weights', 'value', 'problem_id']\nQuestion: What is the highest weighted category score?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['weights'].idxmax(), 'score']\"\n}\n```\n```\n```\n/2021/winter/csc-442/project-3/src/main.cpp\n#include <iostream>\n#include <vector>\n#include <iterator>\n#include <set>\n#include <unordered_map>\n#include <limits>\n\n// #include \"asio.hpp\"\n#include \"tcp_client.h\"\n#include \"tcp_connection_base.h\"\nusing std::cout;\nusing std::cerr;\nusing std::cin;\n\nusing asio::ip::tcp;\n\nint main() {\n\ttry {\n\t\ttcp::resolver resolver(asio::io_context::get_executor());\n\t\ttcp::resolver::results_type endpoints = resolver.resolve(\"127.0.0.1\", \"3490\");\n\t\tstd::vector<std::string> args{\"client\"};\n\t\ttcp_client client(asio::io_context::get_",
    "```json\n{\n    \"solution\": \"df['Protein (g)'].isna().all()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: Which passenger class has the highest number of children?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Pclass')['SibSp'].max().max()\"\n}\n```\n\nInput DataFrame columns: ['country','year','Value']\nQuestion: For every country, what was the year with the highest value?\nExpected return type: Series\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('country')['Value'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: What is the philanthropy score of the person with the highest net worth?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'philanthropyScore']\"\n}\n```\n\nInput DataFrame columns: ['SibSp','Pclass','Survived']\nQuestion: Are there people that have a high sibling count and were not a passenger of higher class?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df['SibSp'] > 2) & (df['Pclass'] != 1) & (df['Survived'] == 0)\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: What is the minimum age of",
    "```json\n{\n    \"solution\": \"len(df[df['Calories (kcal)'] > 500])\"\n}\n```\n\nInput DataFrame columns: ['name', 'emoji', 'Calories (kcal)', 'Carbohydrates (g)', 'Total Sugar (g)', 'Protein (g)', 'Total Fat (g)', 'Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)', 'Total Fiber (g)', 'Cholesterol (mg)', 'Vitamin B6 (mg)', 'Vitamin A (IU)', 'Vitamin B12 (ug)', 'Vitamin C (mg)', 'Vitamin D (IU)', 'Vitamin E (IU)', 'Vitamin K (ug)', 'Thiamin (mg)', 'Riboflavin (mg)', 'Niacin (mg)', 'Folate (ug)', 'Pantothenic Acid (mg)', 'Choline (mg)', 'Calcium (g)', 'Copper (mg)', 'Iron (mg)', 'Magnesium (mg)', 'Manganese (mg)', 'Phosphorus (g)', 'Potassium (g)', 'Selenium (ug)', 'Sodium (g)', 'Zinc (mg)']\nQuestion: What is the average Cholesterol (mg) in the database?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Cholesterol (mg)'].mean()\"\n}\n```\n\nInput DataFrame columns: ['name', 'emoji', 'Calories (kcal)', 'Carbohydrates (g)', 'Total Sugar (g)', 'Protein (g)', 'Total Fat (g)', 'Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)', 'Total Fiber (g)', 'Cholesterol (mg)', 'Vitamin B6 (mg)', 'Vitamin A (IU)', 'Vitamin B12 (ug)', 'Vitamin C (mg)', 'Vitamin D (IU)', 'Vitamin E (IU)', 'Vitamin",
    "```json\n{\n    \"solution\": \"df['Total Fat (g)'].mean()\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'x', 'y', 'z']\nQuestion: What is the sum of the acceleration values across all trials?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['x', 'y', 'z']].sum().sum()\"\n}\n```\n\nInput DataFrame columns: ['Months', 'Sales', 'Income', 'Returns', 'Expenses', 'Profit', 'Marg_Profit']\nQuestion: What is the sum of the profit values across all months?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Profit'].sum()\"\n}\n```\n\nInput DataFrame columns: ['name', 'price_in_dollars']\nQuestion: What is the difference between the mean price and the median price?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['price_in_dollars'].mean() - df['price_in_dollars'].median()\"\n}\n```\n\nInput DataFrame columns: ['name', 'age', 'score']\nQuestion: Which name has the highest score and the oldest person?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['score'].idxmax()]['name']\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Birthplace', 'Position', 'Points', 'Games', 'Minutes', 'FG%', 'FG3%', 'FT%', 'TRB', 'AST', 'STL', 'BLK', 'PF']\nQuestion: Which player has the most points per minute?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Points'].idxmax()]['Name']\"\n}\n```\n\nInput DataFrame columns: ['name', 'age', 'score', 'gender']\nQuestion: How many females are younger than 20 years old?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"",
    "```json\n{\n    \"solution\": \"df[df['Sodium (g)'] > 1].shape[0]\"\n}\n```# Your code here",
    "```json\n{\n    \"solution\": \"df.loc[df['Protein (g)'].idxmax(), 'Protein (g)']\"\n}\n```\n\nInput DataFrame columns: ['Year', 'Month', 'City', 'City Type', 'State']\nQuestion: Which city has the highest number of entries in 2012?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Year'] == 2012) & (df['Entries'] == df['Entries'].max())]['City'].iloc[0]\"\n}\n```\n```\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Adj Close']\nQuestion: Which day had the largest mean volume?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Volume'].idxmax(), 'Date']\"\n}\n```\n\n/src/styles/colors.ts\nexport const colors = {\n  black: '#000',\n  white: '#fff',\n\n  gray: '#f5f5f5',\n  light: '#f7f7f7',\n  dark: '#111',\n  lighter: '#eee',\n  lightest: '#fafafa',\n  darker: '#333',\n  darkest: '#080808',\n  red: '#f00',\n};\n/src/components/Editor/types.ts\nexport interface Component {\n  type: string;\n  props: {\n    id: string;\n    name: string;\n    disabled?: boolean;\n    placeholder?: string;\n    component?: string;\n    items?: any[];\n    type: string;\n  };\n  children: any[];\n}\n\nexport interface EditorProps {\n  onChange: (value: string) => void;\n  editorValue: string;\n  editorMode: string;\n  correct?: string;\n  feedback?: string;\n  error?: string;\n}\n\nexport interface Property {\n  type: string;\n  name: string;\n  value: string;\n  id: string;\n  placeholder?: string;\n  component?: string;\n  items?: any[];\n  disabled?: boolean;\n  index?: number;\n  depth?: number;\n  error?:",
    "```json\n{\n    \"solution\": \"df['Calories (kcal)'].idxmax()\"\n}\n```def get_answer(df: pd.DataFrame, question: str, return_type: str) -> np.ndarray:\n    \"\"\"\n        Function that calculates the solution. \n    \"\"\"\n    possible_answers = {\n        \"Is the person with the highest net worth self-made?\": df.loc[df['finalWorth'].idxmax(), 'selfMade'],\n        \"Which passenger class has the highest number of survivors?\": df[df['Survived'] == 1]['Pclass'].mode().iloc[0],\n        \"What food has the highest calorie content?\": df['Calories (kcal)'].idxmax()\n    }\n    return possible_answers[question]\n# test on provided example\ntest = pd.DataFrame(\n   {\n       'rank': [1, 2, 3, 4, 5], \n       'personName': ['Ricardo', 'Clara', 'Colin', 'Kyle', 'Brad'],\n       'age': [31, 34, 32, 28, 42], \n       'finalWorth': [40000, 100000, 80000, 25000, 20000],\n       'category': ['Business', 'Politics', 'Politics', 'Health', 'Health'],\n       'source': ['Popsicle Stall', 'Facebook', 'Twitter', 'Lebenstein', 'Lebenstein'],\n       'country': ['US', 'US', 'US', 'RU', 'RU'],\n       'state': ['CA', 'NY', 'WA', 'RU', 'RU'],\n       'city': ['Santa Clara', 'New York', 'Seattle', 'Moscow', 'Moscow'],\n       'organization': ['Blue Scaffold', 'Real', 'Real', 'Lebenstein', 'Lebenstein'],\n       'selfMade': [False, True, False, True, True],\n       'gender': ['Male', 'Female', 'Female', 'Male', 'Female'],\n       'birthDate': ['1988/07/01', '1986/08/03",
    "```json\n{\n    \"solution\": \"df.loc[df['Total Sugar (g)'].idxmax(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Sex', 'Age', 'Team', 'Career', 'Weight', 'Height', 'Position', 'GP', 'GS', 'MIN', 'FGM', 'FGA', 'FG%', '3PM', '3PA', '3P%', 'FTM', 'FTA', 'FT%', 'ORB', 'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PF', 'PTS']\nQuestion: Which NBA player scored the most points in a single season?\nExpected return type: str\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['PTS'].idxmax(), 'Name']\"\n}\n```\n\nInput DataFrame columns: ['name', 'index', 'age', 'year', 'country', 'economy', 'income', 'life', 'trust', 'freedom', 'generosity', 'score', 'continent']\nQuestion: What is the average life expectancy of countries in the Americas?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['continent'] == 'Americas']['life'].mean()\"\n}\n```\n\nInput DataFrame columns: ['title', 'salary']\nQuestion: What is the maximum salary?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['salary'].max()\"\n}\n```\n\nInput DataFrame columns: ['number', 'title']\nQuestion: What is the mean salary?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['salary'].mean()\"\n}\n```\n\nInput DataFrame columns: ['name', 'count', 'pct']\nQuestion: Which state has the highest proportion of people on Facebook?\nExpected return type: str\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['pct'].idxmax(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['",
    "```json\n{\n    \"solution\": \"df.loc[df['Total Fat (g)'].idxmin(), 'name']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Protein (g)'].idxmax(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']\nQuestion: What is the date that had the highest closing price?\nExpected return type: date\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Close'].idxmax(), 'Date']\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Age', 'Height', 'Weight', 'Team', 'Occupation']\nQuestion: The average age of the players on the US women\u2019s soccer team is roughly 22.8 years old. Is this team mostly of college or high school students?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Age'] >= 22]['Occupation'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['medication', 'administered', 'days_since_first_dose', 'days_since_last_dose', 'dose_interval', 'type']\nQuestion: Which medication has the shortest time between doses?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['type'] == 'administered']['days_since_last_dose'].min()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Position', 'Height', 'Weight']\nQuestion: Is this pitcher taller than the average pitcher?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Position'] == 'Pitcher', 'Height'].mean() > df['Height']\"\n}\n```\n\nInput DataFrame columns: ['company', 'name', 'title', 'city', 'state', 'country', 'category', 'latitude', 'longitude', 'area', 'industry', 'start_date', 'status', 'website', 'revenue_range', 'headquarters', 'type', 'last_funding_round', 'last_funding_amount",
    "```json\n{\n    \"solution\": \"df['name'].nlargest(5).tolist()\"\n}\n```import pandas as pd\npeople_df = pd.read_csv('people_dataset.csv')\npeople_df.head()\nsnack_df = pd.read_csv('snack_dataset.csv')\nsnack_df.head()\n# Does the person with the highest net worth self-made?\n# True\n# Which passenger class has the highest number of survivors?\n# 1\n# Top 5 foods with the most calories\n# ['candy','cookies','pastries','chocolate','nuts']\npeople_df.columns```python\n#------------------------\n#| SOLO JUSTIFICATION |\n#------------------------\n{'solution': 'df.loc[df['finalWorth'].idxmax(), 'selfMade']'}\n{'solution': \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"}\n```# Does the person with the highest net worth self-made?\npeople_df[people_df['finalWorth'].idxmax()]['selfMade']\n# Which passenger class has the highest number of survivors?\npeople_df[people_df['Survived'] == 1]['Pclass'].mode().iloc[0]\n# Top 5 foods with the most calories\nsnack_df['Calories (kcal)'].nlargest(5).index\nsnack_df.index\nsnack_df['name'].nlargest(5).index\nsnack_df['name'].nlargest(5).index.tolist()\nsnack_df['name'].nlargest(5).tolist()\nmust_eat_df = snack_df[(snack_df['Calories (kcal)'] > 0) & (snack_df['Total Sugar (g)'] == 0) & (snack_df['Carbohydrates (g)'] == 0)]\nmust_eat_df\nmust_eat_df['name'].nlargest(5).index.tolist()```python\n#------------------------\n#| SOLO JUSTIFICATION |\n#------------------------\n{'solution': 'df['name",
    "```json\n{\n    \"solution\": \"df.nsmallest(3, 'Total Sugar (g)')['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['date', 'confirmed', 'deaths', 'recovered']\nQuestion: What was the number of daily cases in the US in January?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['date'].str.contains('January')]['confirmed'].diff().sort_values(ascending=False).iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['name', 'price', 'year', 'company', 'kind', 'material']\nQuestion: Which food item is the least expensive?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.nsmallest(1, 'price')['name'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['rank', 'country', 'continent', 'city', 'pop', 'province', 'district', 'subdistrict', 'community', 'latitude', 'longitude', 'population']\nQuestion: How many communities are in the United States?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['country'] == 'United States'])\"\n}\n```\n\nInput DataFrame columns: ['name', 'age']\nQuestion: How many people are over 80 years old?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['age'] > 80])\"\n}\n```\n\nInput DataFrame columns: ['name', 'race', 'state_or_territory', 'lat', 'lng']\nQuestion: What was the average where on earth the bounty hunters were supposed to be?\nExpected return type: tuple\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df['lat'].mean(), df['lng'].mean())\"\n}\n```\nexplanation>\n    <string>Sum</string>\n    <string>keyword</string>\n  </dict>\n  <dict>\n    <key>columnName</key>",
    "```json\n{\n    \"solution\": \"df[df.columns[7:16].tolist() + ['name']].idxmax(axis=1).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Culprit', 'Fraud', 'Defendant', 'Judge', 'Court', 'Sentence', 'Acquitted', 'Category']\nQuestion: Return a list of sentences where defendants were acquitted.\nExpected return type: list[str]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"list(df[df['Acquitted'] == 1]['Sentence'])\"\n}\n```\n\nInput DataFrame columns: ['Category', 'Name', 'Amount', 'Currency', 'Time', 'Link', 'Location', 'Latitude', 'Longitude', 'Display Location', 'Business Name', 'Phone Number', 'Display Phone Number', 'Display Address', 'Is Closed']\nQuestion: Return the most expensive event.\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Category'] == 'Event']['Amount'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Category', 'Name', 'Rating']\nQuestion: How many restaurants have a rating of more than 4?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['Rating'] > 4]['Category'])\"\n}\n```\n\nInput DataFrame columns: ['Model', 'Horsepower', 'Miles Per Gallon', 'Cylinders', 'Displacement', 'Weight', 'Acceleration', 'Year', 'Origin']\nQuestion: What is the mean horsepower of American cars?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Origin'] == 'USA']['Horsepower'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Model', 'MPG', 'Cylinders', 'Displacement', 'Horsepower', 'Weight', 'Acceleration', 'Year', 'Origin']\nQuestion: What is the highest MPG of all cars?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{",
    "```json\n{\n    \"solution\": \"df[df['Protein (g)'] < 1]['name'].tolist()[:6]\"\n}\n```\n\n### Pandas DataFrame File\n\nA DataFrame has been saved to a file in the `data/interview/pandas_dataframe.csv` directory. The data is separated by commas and contains the following columns:\n* `rank` - a numerical rank of the person's net worth\n* `personName` - the person's name\n* `age` - the person's age\n* `finalWorth` - the person's final net worth\n* `category` - a category that the person is a member of\n* `source` - the source of the person's net worth\n* `country` - the person's country of origin\n* `state` - the person's state of origin\n* `city` - the person's city of origin\n* `organization` - the person's employment or education\n* `selfMade` - whether the person is self-made or not\n* `gender` - the person's gender\n* `birthDate` - the person's date of birth\n* `title` - the person's title\n* `philanthropyScore` - the person's philanthropy score\n* `bio` - the person's biography\n* `about` - a description of the person\n\nThe following columns have already been imported as a DataFrame:\n```py\ndf = pd.read_csv('data/interview/pandas_dataframe.csv')\n```\n\n### Example Input\n\n```json\n{\n    \"columns\": ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about'],\n    \"question\": \"Is the person with the highest net worth self-made?\",\n    \"expected_type\": \"boolean\"\n}\n```\n\n### Example Response\n\n```json\n{\n    \"solution\": \"True\"\n}\n```\n\n### Example Input\n\n```json\n{\n    \"columns\": ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses A",
    "```\n{\n    \"solution\": \"df['Calories (kcal)'].nlargest(5).to_list()\"\n}\n```\n\n```json\n{\n    \"solution\": \"df.loc[(df['state'] == 'CA') | (df['state'] == 'TX')]['selfMade'].value_counts().to_dict()\"\n}\n```\n\n```json\n{\n    \"solution\": \"df.groupby(['state', 'selfMade']).count().sort_values('rank', ascending=False).head(5).index.to_list()\"\n}\n```\n\n```json\n{\n    \"solution\": \"df.loc[(df['state'] == 'CA') | (df['state'] == 'TX')]['selfMade'].value_counts().to_dict()\"\n}\n```\n```json\n{\n    \"solution\": \"df.groupby(['country', 'selfMade']).count().sort_values('rank', ascending=False).head(5).index.to_list()\"\n}\n```\n\n```json\n{\n    \"solution\": \"df.loc[(df['state'] == 'CA') | (df['state'] == 'TX')].groupby('selfMade').sum()[['finalWorth', 'philanthropyScore']].max(axis=1).to_dict()\"\n}\n```\n\n```json\n{\n    \"solution\": \"df.loc[(df['state'] == 'CA') | (df['state'] == 'TX')].groupby(['state', 'selfMade']).sum()[['finalWorth', 'philanthropyScore']].max(axis=1).sort_values(ascending=False).head(5).index.to_list()\"\n}\n```\n```json\n{\n    \"solution\": \"df.groupby(['selfMade', 'state']).count().sort_values('rank', ascending=False).head(5).index.to_list()\"\n}\n```\n\n```json\n{\n    \"solution\": \"df.groupby(['state', 'selfMade']).count().sort_values('rank', ascending=False).head(5).index.to_list()\"\n}\n```\n\n```json\n{\n    \"solution\": \"df.groupby('state').count().sort_values('rank', ascending=False).head(5).",
    "```json\n{\n    \"solution\": \"df['Total Sugar (g)'].sort_values().head(3).values\"\n}\n```\n\nInput DataFrame columns: ['name', 'attr1', 'attr2', 'attr3', 'attr4', 'attr5', 'attr6']\nQuestion: How many rows have the value 'foo' in the first column?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['name'] == 'foo'])\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'price', 'category', 'color', 'memory', 'storage']\nQuestion: Calculate the average price of the products for each category?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('category')['price'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'price', 'category', 'color', 'memory', 'storage']\nQuestion: Calculate the average price of the products for each category?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('category')['price'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Age', 'Team']\nQuestion: What is the average age of a professional soccer player per team?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Team')['Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Age', 'Team']\nQuestion: What is the average age of a professional soccer player per team?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Team')['Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Age', 'Team']\nQuestion: What is the average age of a professional soccer player per team?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Team')['Age'].mean()\"\n}\n```\n/sql/basics/05",
    "```json\n{\n    \"solution\": \"df[['Total Fat (g)', 'Total Fat (%DV)']].sort_values('Total Fat (%DV)', ascending=False).head(4)['Total Fat (g)'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'Calories (kcal)', 'Carbohydrates (g)', 'Total Sugar (g)', 'Protein (g)', 'Total Fat (g)', 'Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)', 'Total Fiber (g)', 'Cholesterol (mg)', 'Sodium (g)', 'Potassium (g)', 'Calcium (g)']\nQuestion: Add a new column to the DataFrame called 'fats' that calculates the total amount of fats in grams. \nExpected return type: DataFrame\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['fats'] = df[['Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)']].sum(axis=1)\"\n}\n```\n\nInput DataFrame columns: ['item_id', 'item_name', 'category_id', 'category_name']\nQuestion: How many category names are not 'Wine'?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['category_name'].value_counts().loc['Wine']\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'age', 'married', 'children']\nQuestion: What is the max age of the single individuals?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['married'] == False]['age'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'age', 'married', 'children']\nQuestion: What is the average age of the single individuals?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['married'] == False]['age'].mean()\"",
    "```json\n{\n    \"solution\": \"df.nsmallest(6, 'Protein (g)')[['Name', 'Protein (g)']].values.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Drug', 'A', 'B', 'C', 'D']\nQuestion: Which drug in the dataset is the most similar to 'B'?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['B'].idxmax(), 'Drug']\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'username', 'text']\nQuestion: Which user has the most unique words?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('username')['text'].apply(lambda x: len(set(x.str.split().sum()))).idxmax()\"\n}\n```\n\nInput DataFrame columns: ['date', 'Close', 'Open', 'High', 'Low']\nQuestion: What is the average high price of the day with the highest low price?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Low'] == df['Low'].max()]['High'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Date of Purchase', 'Description', 'High',  'Low', 'Open', 'Volume']\nQuestion: What is the ratio between the average low and high prices on Sundays?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Date of Purchase'].dt.dayofweek == 6]['High'].mean() / df[df['Date of Purchase'].dt.dayofweek == 6]['Low'].mean()\"\n}\n```\n\nInput DataFrame columns: ['time', 'duration_s']\nQuestion: What is the average duration of the longest call?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['duration_s'].max()\"\n}\n```\n\n\nInput DataFrame columns: ['city', 'country', 'gender', 'user_id', 'age', 'signup_date',",
    "```json\n{\n    \"solution\": \"df.loc[df['edu'] == 'No primary', 'const']\"\n}\n```\n\nInput DataFrame columns: ['age', 'sex', 'religion', 'voted', 'edu', 'automation', 'vote', 'politicalInterest', 'maritalStatus', 'race', 'income', 'party', 'province', 'region']\nQuestion: Is the average age of the non-religious male voters lower than the average age of the religious female voters who voted in the 2004 presidential election?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['religion'] == 'No') & (df['voted'] == 'Voted') & (df['sex'] == 'Male')]['age'].mean() < df[(df['religion'] == 'Yes') & (df['voted'] == 'Voted') & (df['sex'] == 'Female')]['age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Sex', 'Age', 'City', 'Political Party', 'Economic party', 'Annealing', 'Austerity', 'Growth', 'War', 'Illiberalism', 'Terrorist', 'Corruption', 'Constitutional', 'Defense', 'Trade', 'Citizenship', 'Immigration', 'Stability', 'Rule of law', 'Democracy', 'Proportional', 'Pragmatism', 'Civil rights', 'Women', 'Nationalism', 'Reforms', 'Corruption', 'EU', 'Illuminism', 'Reconciliation', 'Freedom', 'Libertarianism']\nQuestion: Is there a statistically significant difference between the age of the average male and female Spanish voters?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"stats.ttest_ind(df.query('Sex == \\'Male\\')['Age'], df.query('Sex == \\'Female\\')['Age']).pvalue < 0.05\"\n}\n```\n\n```\nInput DataFrame columns: ['personName', 'age', 'finalWorth', 'category',",
    "```json\n{\n    \"solution\": \"df.polInterest.value_counts().max() == df.shape[0]\"\n}\n```\n\nSolution:\n\n```py\n# input DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\n# Question: Is the person with the highest net worth self-made?\n# Expected return type: boolean\ndf.loc[df['finalWorth'].idxmax(), 'selfMade']\n\n# input DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\n# Question: Which passenger class has the highest number of survivors?\n# Expected return type: category\ndf[df['Survived'] == 1]['Pclass'].mode().iloc[0]\n\n# input DataFrame columns: ['Vote Intention', 'Age', 'const', 'edu', 'gender', 'lang', 'partyId', 'polInterest', 'prevVote', 'prevVoteCat', 'prov', 'Austerity politics are needed in order to overcome the crisis', 'The growth of Islam is a threat to the security of Spain', 'The church must pay the IBI', 'The fact that gay couples can adopt children is positive for society', 'Women should choose freely on issues of abortion', 'The immigration detention centres (CIES) should be closed', 'Schools segregated by sex should also be subsidized by the state', 'Spain must tighten its immigration policy', 'Bullfights in Spain should be banned', \"The 'gag law' is necessary to avoid social unrest\", 'In order to fight organized crime, restrictions on civil rights and liberties must be accepted', 'Efficiency in the delivery of public services will be improved with private sector participation', 'Negotiations with ETA weaken the state', 'The political party that receives the most votes should govern', 'Decentralizati on in Sp",
    "```json\n{\n    \"solution\": \"vote_reason.str.contains('vote').any()\"\n}\n```\n\nInput DataFrame columns: ['v1', 'v2', 'v3', 'v4', 'v5', 'v6', 'v7', 'v8', 'v9', 'v10', 'v11', 'v12', 'v13', 'v14', 'v15', 'v16', 'v17', 'v18', 'v19', 'v20', 'v21', 'v22', 'v23', 'v24', 'v25', 'v26', 'v27', 'v28', 'v29', 'v30', 'v31', 'v32', 'v33', 'v34', 'v35', 'v36', 'v37', 'v38', 'v39', 'v40', 'v41', 'v42', 'v43', 'v44', 'v45', 'v46', 'v47', 'v48', 'v49', 'v50', 'v51', 'v52', 'v53', 'v54', 'v55', 'v56', 'v57', 'v58', 'v59', 'v61', 'v62', 'v63', 'v64', 'v65', 'v66', 'v67', 'v68', 'v69', 'v70', 'v71', 'v72', 'v73', 'v74', 'v75', 'v76', 'v77', 'v78', 'v79', 'v80', 'v81', 'v82', 'v83', 'v84', 'v85', 'v86', 'v87', 'v88', 'v89', 'v90', 'v92', 'v93', 'v95', 'v96', 'v97', 'v98', 'v9",
    "```json\n{\n    \"solution\": \"df['User self-placement on Left-Right economic values axis'].max() > df['User self-placement on Progressive-Conservative economic values axis'].max()\"\n}\n```\n\nInput DataFrame columns: ['sex', 'age', 'income', 'race', 'marital-status', 'education', 'affairs']\nQuestion: What is the average age of non-affair male with a bachelor degree?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['affair'] == 0) & (df['sex'] == 'male') & (df['education'] == 'Bachelors')]['age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['religious', 'education', 'age', 'occupation', 'race', 'yrs_married', 'children', 'capital_gain', 'capital_loss', 'hr_per_week', 'country']\nQuestion: How many people are as educated as the average age of married women with at least two children?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['marital-status'] == 'Married-civ-spouse') & (df['children'] >= 2)]['education'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['party', 'hand', 'age', 'religion', 'educ', 'employ']\nQuestion: What is the probability of a woman being in the labour force with an age between 25 and 35?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['employ'] != 'Never-worked') & (df['age'] > 25) & (df['age'] < 35) & (df['party'] == 'Labour')]['party'].count() / df[(df['employ'] != 'Never-worked') & (df['age'] > 25) & (df['age'] < 35)]['party'].count()\"\n}\n```\n\nInput DataFrame columns: ['relig', 'water",
    "```json\n{\n    \"solution\": \"df.value_counts(subset=['User self- placement on Progressive-Conservative economic values axis']).loc[10].values[0]\"\n}\n```\n\nInput DataFrame columns: ['V2', 'V1', 'V18', 'V17', 'V16', 'V15', 'V14', 'V13', 'V12', 'V11', 'V10', 'V9', 'V8', 'V7', 'V6', 'V5', 'V4', 'V3', 'Const', 'edu', 'gender', 'lang', 'partyId', 'polInterest', 'prevVote', 'prevVoteCat', 'prov', 'voteReason', 'Austerity politics are needed in order to overcome the crisis', 'The growth of Islam is a threat to the security of Spain', 'The church must pay the IBI', 'The fact that gay couples can adopt children is positive for society', 'Women should choose freely on issues of abortion', 'The immigration detention centres (CIES) should be closed', 'Schools segregated by sex should also be subsidized by the state', 'Spain must tighten its immigration policy', 'Bullfights in Spain should be banned', \"The 'gag law' is necessary to avoid social unrest\", 'In order to fight organized crime, restrictions on civil rights and liberties must be accepted', 'Efficiency in the delivery of public services will be improved with private sector participation', 'Negotiations with ETA weaken the state', 'The political party that receives the most votes should govern', 'Decentralizati on in Spain is inadequate and should continue to expand', 'Linguistic policy in the autonomous regions discriminates against Spanish language', 'The central government should control the spending of regional governments to limit their indebtedness', 'The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution', 'The 1978 Constitution is the appropriate framework for our society', 'Navarra and the Basque Country should retain their tax system', 'Catalonia must be",
    "```json\n{\n    \"solution\": \"df['Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest average age?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Pclass')['Age'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: What is the average age of the people who survived?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which sex has the highest average age?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Sex')['Age'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: What is the final percentage of people who survived?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Survived'].mean()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What is the average Fare of the people with more than 5 Siblings_Spouses Aboard?\nExpected return type: number",
    "```json\n{\n    \"solution\": \"df[df['voteReason'] == 'It should be more difficult for companies to lay off workers'].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['answer', 'question', 'survey_id', 'time_elapsed', 'timestamp']\nQuestion: How many respondents answered 'bad' to the question 'Which of the following would you rather be: a frog or a peacock?'\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['question'] == 'Which of the following would you rather be: a frog or a peacock?']['answer'] == 'bad'\"\n}\n```\n\nInput DataFrame columns: ['answer', 'question', 'respondent', 'survey_id', 'time_elapsed', 'timestamp']\nQuestion: How many respondents answered 'bad' to the question 'Which of the following would you rather be: a frog or a peacock?'\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['question'] == 'Which of the following would you rather be: a frog or a peacock?']['answer'] == 'bad'\"\n}\n```\n\nInput DataFrame columns: ['respondents_who_voted', 'question', 'survey_id', 'time_elapsed', 'timestamp']\nQuestion: How many respondents answered 'bad' to the question 'Which of the following would you rather be: a frog or a peacock?'\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['question'] == 'Which of the following would you rather be: a frog or a peacock?']['respondents_who_voted'] == 'bad'\"\n}\n```\n\nInput DataFrame columns: ['RespondentID','ID','Sample','ResponseID','StartDate','EndDate','Finished','RecordedDate','RecipientLastName','RecipientFirstName','RecipientEmail','ExternalDataReference','LocationLatitude','LocationLongitude','DistributionChannel','UserLanguage']\nQuestion: What is the most popular distribution channel?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"",
    "```json\n{\n    \"solution\": \"df['Age'].max()\"\n}\n```\n\nInput DataFrame columns: ['adm', 'art', 'bus', 'cit', 'com', 'creat', 'cult', 'ecol', 'edu', 'eco', 'enve', 'fin', 'forex', 'gender', 'gover', 'heal', 'job', 'labo', 'leda', 'lib', 'lit', 'mor', 'net', 'orga', 'part', 'pol', 'pre', 'pro', 'pub', 'ref', 'rel', 'reu', 'sec', 'self', 'tra', 'tran', 'trust', 'unemploy', 'user', 'vote']\nQuestion: What is the age of the youngest person who prefers to self-identify as \"sec\"?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['sec'].idxmax(), 'user']\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: What is the gender of the person with the second-highest net worth?\nExpected return type: category (Male or Female)\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['gender'].iloc[df['finalWorth'].nlargest(2).index.tolist()][1]\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: What is the minimum age group in which 85% of passengers in the first class survived? (To answer this, create an additional column for binning the ages of the passengers based on quartiles)\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['bins'] = pd.qcut(df['Age'], q=",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id_T', 'id_C', 'I1+Q1', 'I2+Q2', 'I3+Q3', 'I4+Q4', 'I5+Q5', 'I6+Q6', 'I7+Q7', 'I8+Q8', 'I9+Q9', 'I10+Q10', 'I11+Q11', 'I12+Q12', 'I13+Q13', 'I14+Q14', 'I15+Q15', 'I16+Q16', 'I17+Q17', 'I18+Q18', 'I19+Q19', 'I20+Q20', 'I21+Q21', 'I22+Q22', 'I23+Q23', 'I24+Q24', 'I25+Q25', 'I26+Q26', 'I27+Q27', 'I28+Q28', 'I28_1+Q28_1', 'I28_2+Q28_2', 'I28_3+Q28_3', 'I28_4+Q28_4', 'I28_5+Q28_5', 'I28_6+Q28_6', 'I29+Q29', 'I30+Q30', 'I31+Q31', 'I32+Q32', 'I33+Q33', 'I34+Q34', 'I35+Q35', 'I36+Q36', 'I37+Q37', 'I38+Q38', 'I39+Q39', 'I40+Q40', 'I41+Q41', 'I42+Q42', 'I43+Q43', 'I44+Q44', 'final_",
    "```json\n{\n    \"solution\": \"df['voteReason'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Party_ID', 'Age', 'Gender_ID', 'Class_ID', 'Income_ID', 'Education_ID', 'Income_ID', 'Employment_Value', 'N_Working_Hours', 'N_Hours_Week', 'Weekends_Home', 'At_Home_24hrs', 'Quadrimester', 'Canceled_Trimester', 'Spatial_Info', 'Daily_Trimester', 'Daily_Area', 'Daily_Time', 'Taxi_Daily', 'Taxi_Monthly', 'Daily_From', 'Daily_To', 'Personal_Info', 'Info_Use', 'Info_Use_Type', 'Info_Use_From', 'Info_Use_To', 'Frequent_Transport', 'Compulsory_Transport', 'New_Transport', 'Transport_Name', 'Transport_Use', 'Transport_Use_Type', 'Transport_Use_from', 'Transport_Use_To', 'Transport_Use_From_To', 'Use_Transport_from', 'Use_Transport_To', 'Use_Transport_From_To', 'Source_Use_Transport', 'Source_Info', 'Source_Use_Info', 'User_Values', 'User_Values_Type', 'User_Values_From', 'User_Values_To', 'User_Stance', 'User_Stance_Type', 'User_Stance_From', 'User_Stance_To', 'User_Stance_From_To', 'Party_ID', 'Age', 'Gender_ID', 'Class_ID', 'Income_ID', 'Education_ID', 'Income_ID', 'Employment_Value', 'N_Working_Hours', 'N_Hours_Week', 'Weekends_Home', 'At_Home_24hrs', 'Quadrimester', 'Canceled_Trimester', 'Spatial_Info', 'Daily_Trimester', 'Daily_Area', 'Daily_Time', 'Taxi_Daily', 'Taxi_Monthly', 'Daily_From', 'Daily_To', 'Personal_Info', 'Info_Use', 'Info_Use_Type', 'Info_Use_From', 'Info",
    "```json\n{\n    \"solution\": \"df['partyId'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['sex', 'age', 'survived', 'pclass', 'embarked', 'boat', 'body', 'home.dest']\nQuestion: Number of men/women on the Titanic that survived?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('sex')['survived'].sum().iloc[0]\"\n}\n```\n\n\nInput DataFrame columns: ['sex', 'age', 'class', 'sn', 'parch', 'fare', 'embarked', 'survived']\nQuestion: Percentage of the passengers in the first class that survived?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('class')['survived'].mean().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Sex', 'Age', 'Fare', 'Survived']\nQuestion: What is the average age of the females that survived?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Sex'] == 'female'][df['Survived'] == 1]['Age'].mean().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['sex', 'age', 'survived', 'embarked']\nQuestion: Number of females that embarked at C that survived?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['sex'] == 'female') & (df['embarked'] == 'C')]['survived'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Sex', 'Pclass', 'Age', 'SibSp', 'Parch', 'Embarked']\nQuestion: Number of females in the third class that left Southampton?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Sex'] == 'female') & (df['Pclass'] == 3) & (",
    "```json\n{\n    \"solution\": \"df['lang'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['REF_DATE', 'GEO', 'DGUID', 'UOM', 'UOM_ID', 'SCALAR_FACTOR', 'SCALAR_ID', 'VECTOR', 'COORDINATE', 'STATUS', 'SYMBOL', 'TERMINATED', 'DECIMALS']\nQuestion: How many rows does the input DataFrame have?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df.index)\"\n}\n```\n\nInput DataFrame columns: ['REF_DATE', 'GEO', 'DGUID', 'UOM', 'UOM_ID', 'SCALAR_FACTOR', 'SCALAR_ID', 'VECTOR', 'COORDINATE', 'STATUS', 'SYMBOL', 'TERMINATED', 'DECIMALS', 'CUST_ORDINAL', 'CUST_FISCAL_YEAR_FINAL']\nQuestion: For the row with the maximum value in the CUST_ORDINAL column, what is the value in the CUST_FISCAL_YEAR_FINAL column?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.iloc[df['CUST_ORDINAL'].idxmax(), 'CUST_FISCAL_YEAR_FINAL']\"\n}\nExample input DataFrame:\n```py\n>>> import pandas as pd\n>>> df = pd.read_table(\"https://data.cdrom.ca/opendata/2015-09-01/CUST_ORDINAL/CUST_ORDINAL.DAT\", sep='\\s+')\n>>> df.query(\"GEO == 'Canada'\")['CUST_ORDINAL'].idxmax()\n58\n>>> df.iloc[58]\nREF_DATE               1983-01-01\nGEO                             Canada\nDGUID       5/1/1983/6919.0110.002-000\nUOM                                     D.\nUOM_ID                             .002\nSCALAR_FACTOR                           1\nSCALAR_ID           1/1/1983/691",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].value_counts().iloc[:5].index.tolist()\"\n}\n```\n\n\n### 3) Unit Tests\nUnit tests are combinations of code and a description of what it is expected to return. \nThey are very important as it ensures that the code you write will work as intended.\n\nFor example, if you write a function such as \n```json\n{\n    \"input\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\",\n    \"expected\": \"bool\"\n}\n```\nThe description says that the input is a line of code and it is expected to return a value of type bool. It is a good idea to add more unit tests to cover more possibilities. \nIn general, you should not write unit tests that are too complicated. \nIt is also important to make sure that the code that you write is as readable as possible. \nHaving some extra space between function arguments is good practice. \n\n**NOTE: Unit tests should not be the only method that you check if your answers are correct. Your solutions should of course be correct but please do not write answers that are so complicated that you're not sure if they are actually correct. This goes for any questions before the first one as well.**\n\n### 4) How to get the points?\nYou will get 4 points for each question in the challenge. Each question will have 4 unit tests. \nThe grade is given by how many units tests pass.\n\n#### Important note:\nThe unit tests check for the type of the returned value.\nHowever, the unit tests will not check for correctness. \nIf you write a function that says the input should be a DataFrame and returns a DataFrame for example, the unit tests will fail since your function will return the input. \nThe unit tests will also fail if you return a value that is not of the type you expect. \nIt is important to first write unit tests that fail and then make them pass. \n/data/2021/Jul/Jul 03/challenge.md\n## Challenge #17\n\nWelcome to the 17th week of this challenge!\n\n### 1) Asking questions...\nThis week, we'll ask you to write code that answers questions",
    "```json\n{\n    \"solution\": \"df[['Vote Intention', 'Age', 'const', 'edu', 'gender', 'lang', 'partyId', 'polInterest', 'prevVote', 'prevVoteCat', 'prov', 'Austerity politics are needed in order to overcome the crisis', 'The growth of Islam is a threat to the security of Spain', 'The church must pay the IBI', 'The fact that gay couples can adopt children is positive for society', 'Women should choose freely on issues of abortion', 'The immigration detention centres (CIES) should be closed', 'Schools segregated by sex should also be subsidized by the state', 'Spain must tighten its immigration policy', 'Bullfights in Spain should be banned', \"The 'gag law' is necessary to avoid social unrest\", 'In order to fight organized crime, restrictions on civil rights and liberties must be accepted', 'Efficiency in the delivery of public services will be improved with private sector participation', 'Negotiations with ETA weaken the state', 'The political party that receives the most votes should govern', 'Decentralizati on in Spain is inadequate and should continue to expand', 'Linguistic policy in the autonomous regions discriminates against Spanish language', 'The central government should control the spending of regional governments to limit their indebtedness', 'The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution', 'The 1978 Constitution is the appropriate framework for our society', 'Navarra and the Basque Country should retain their tax system', 'Catalonia must be recognized as a nation', 'The government should take a tougher line against the persecution of opposition leaders in Venezuela', 'The number of public sector workers should be increased', 'The European Union must do more to support the Greek economy', 'It should be more difficult for companies to lay off workers', 'Bailing out banks is needed in order to restore economic stability', 'Increasing university fees is necessary for the sustainability of the university system', 'The government should subsidize clean energy in order to",
    "```json\n{\n    \"solution\": \"df['partyId'].value_counts().head(3).index.tolist()\"\n}\n```df = pd.read_csv(\"data/simple_dataset.csv\")\ndf.head()",
    "```json\n{\n    \"solution\": \"df['edu'].value_counts().head(3).index\"\n}\n```\n\nInput DataFrame columns: ['IDEO_5','PARTY_ID','AGE','GENDER']\nQuestion: How many females voted in 1998 and 2004?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['GENDER']==2) & (df['IDEO_5'].isin([1,9]))]['PARTY_ID'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Sex', 'Age', 'Occupation', 'Hobby', 'Country', 'Marital status', 'Education level', 'Degree', 'Occupation group', 'Education group', 'Happiness', 'Anxiety', 'Sadness', 'Ennui', 'Gender', 'Generation', 'The percentage of participants that have read the book series \"Becoming\" was recorded.', 'The percentage of participants that have read the book series \"Ender's game\" was recorded.', 'The percentage of participants that have read the book series \"The Hunger Games\" was recorded.', 'The percentage of participants that have read the book series \"Northern Lights\" was recorded.', 'The percentage of participants that have read the book series \"The Chronicles of Narnia\" was recorded.', 'The percentage of participants that have read the book series \"The War of the Worlds\" was recorded.', 'The percentage of participants that have read the book series \"The Hobbit\" was recorded.', 'The percentage of participants that have read the book series \"The Lord of the Rings\" was recorded.', 'The percentage of participants that have read the book series \"The Lord of the Rings\" was recorded.', 'The percentage of participants that have read the book series \"The Lord of the Rings\" was recorded.', 'The percentage of participants that have read the book series \"The Lord of the Rings\" was recorded.', 'The percentage of participants that have read the book series \"The Lord of the Rings\" was recorded.', 'The percentage of participants that have read the book series \"The Lord of the Rings\" was recorded.', 'The percentage of participants that have read the book series \"",
    "```json\n{\n    \"solution\": \"list(df['Age'].value_counts(dropna=False).head(3).index)\"\n}\n```\n\nInput DataFrame columns: ['account_type', 'anon_id', 'be_anonymized', 'comment_count', 'content_type', 'created', 'created_window', 'country_code', 'country_name', 'country_name_uk_region', 'country_name_us_state', 'flagged', 'flagged_for_spam', 'group_id', 'group_name', 'group_other_account_type', 'group_other_anonymized', 'group_other_be_anonymized', 'group_other_flagged', 'group_other_flagged_for_spam', 'group_other_group_id', 'group_other_group_name', 'group_other_group_other_account_type', 'group_other_group_other_anonymized', 'group_other_group_other_be_anonymized', 'group_other_group_other_flagged', 'group_other_group_other_flagged_for_spam', 'group_other_group_other_group_id', 'group_other_group_other_group_name', 'group_other_group_other_group_other_account_type', 'group_other_group_other_group_other_anonymized', 'group_other_group_other_group_other_be_anonymized', 'group_other_group_other_group_other_flagged', 'group_other_group_other_group_other_flagged_for_spam', 'group_other_group_other_group_other_group_id', 'group_other_group_other_group_other_group_name', 'group_other_group_other_group_other_group_other_account_type', 'group_other_group_other_group_other_group_other_anonymized', 'group_other_group_other_group_other_group_other_be_anonymized', 'group_other_group_other_group_other_group_other_flagged', 'group_other_",
    "```json\n{\n    \"solution\": \"df.groupby(['voteReason'])['User self-placement on Left-Right economic values axis'].mean().sort_values().iloc[-3:].index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Page ID', 'Page Title', 'Primacy', 'Relevance', 'Article ID', 'Article Title', 'Article Text', 'Article Excerpts', 'Article References', 'Article Images', 'Article URL', 'Article URL Title', 'Article URL Description', 'Article URL Domain', 'Article URL Domains', 'Article URL Last Modified', 'Article URL Expiry', 'Article URL Author', 'Article URL Access', 'Article URL Editor', 'Article URL Owner', 'Article URL Root', 'Article URL Content', 'Article URL Store', 'Article URL Type', 'Article URL Category']\nQuestion: Which URL is the most relevant?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['Article URL'])[df.columns[4:13]].count()[df.columns[3]].idxmax()\"\n}\n\nInput DataFrame columns: ['Page ID', 'Page Language']\nQuestion: Which language is used most?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Page Language'].mode().iloc[0]\"\n}\n```\n/tests/test_errors.py\nimport os\nimport pytest\nfrom pathlib import Path\nfrom solutions import completely_wrong\nfrom solutions import no_answer\nfrom solutions import wrong\n\nDATA_PATH = Path(os.getenv(\"DATA_PATH\", \"../data\"))\n\n\n@pytest.mark.parametrize(\n    \"filename, expected_errors\", [(\"42\", \"42\"), (\"41\", \"51\"), (\"43\", \"34\")]\n)\ndef test_completely_wrong_answer(filename, expected_errors):\n    assert completely_wrong(DATA_PATH / filename) == expected_errors\n\n\n@pytest.mark.parametrize(\n    \"filename, expected_errors\", [(\"42\", \"No answer found\"), (\"41\", \"No answer found\")]\n)\ndef test_no_answer(filename, expected_errors):\n    assert no_answer(",
    "```json\n{\n    \"solution\": \"df[(df['voteReason'] == 'User self- placement on Progressive-Conservative economic values axis')]['voteIntention'].value_counts()[:4].index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Vote Intention', 'Age', 'const', 'edu', 'gender', 'lang', 'partyId', 'polInterest', 'prevVote', 'prevVoteCat', 'prov', 'Austerity politics are needed in order to overcome the crisis', 'The growth of Islam is a threat to the security of Spain', 'The church must pay the IBI', 'The fact that gay couples can adopt children is positive for society', 'Women should choose freely on issues of abortion', 'The immigration detention centres (CIES) should be closed', 'Schools segregated by sex should also be subsidized by the state', 'Spain must tighten its immigration policy', 'Bullfights in Spain should be banned', \"The 'gag law' is necessary to avoid social unrest\", 'In order to fight organized crime, restrictions on civil rights and liberties must be accepted', 'Efficiency in the delivery of public services will be improved with private sector participation', 'Negotiations with ETA weaken the state', 'The political party that receives the most votes should govern', 'Decentralizati on in Spain is inadequate and should continue to expand', 'Linguistic policy in the autonomous regions discriminates against Spanish language', 'The central government should control the spending of regional governments to limit their indebtedness', 'The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution', 'The 1978 Constitution is the appropriate framework for our society', 'Navarra and the Basque Country should retain their tax system', 'Catalonia must be recognized as a nation', 'The government should take a tougher line against the persecution of opposition leaders in Venezuela', 'The number of public sector workers should be increased', 'The European Union must do more to support the Greek economy', 'It should be more difficult for companies to lay",
    "```json\n{\n    \"solution\": \"df['Constitutional organisation of the country (More Descentralization)'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Vote Intention', 'Age', 'const', 'Fairness', 'full', 'gender', 'lang', 'partyId', 'polInterest', 'prevVote', 'prevVoteCat', 'prov', 'Education is the key to sustaining a prosperous society', 'The country must take a stronger stance against racism and xenophobia', 'The use of user generated content should be prohibited', 'Linguistic policy in the autonomous regions discriminates against Spanish language', 'The participation of companies in the state budget should be enhanced', 'Being a member of a trade union is the right of all citizens', 'The state should be more responsive to the voices of youth and the poor', 'Freedom of religion should be guaranteed', 'The tax collection process should be more transparent', 'Austerity politics are needed in order to overcome the crisis', 'Citizens who live in poverty must be supported', 'The Church should remain the guardian of the faith', 'The work of teachers and the state must be more integrated', 'The right to privacy should be guaranteed', 'The right to food should be guaranteed', 'The right to housing should be guaranteed', 'The right to health care should be guaranteed', 'The right to education should be guaranteed', 'The right to a fair trial should be guaranteed', 'The right to civil rights should be guaranteed', 'The right to an effective police force should be guaranteed', 'The right to adequate housing should be guaranteed', 'The right to adequate health care should be guaranteed', 'The right to adequate food should be guaranteed', 'The right to adequate shelter should be guaranteed', 'The right to adequate electricity should be guaranteed', 'The right to adequate education should be guaranteed', 'The right to adequate culture should be guaranteed', 'The right to adequate public transport and public spaces should be guaranteed', 'The right to adequate proper sanitation should be guaranteed', '"
]