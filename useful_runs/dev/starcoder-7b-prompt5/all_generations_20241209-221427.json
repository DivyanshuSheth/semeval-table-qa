[
    "```json\n{\n    \"solution\": \"df[df['lang'].eq('es')]['favorites'].max() == df[df['lang'].ne('es')]['favorites'].max()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Start Time', 'Location', 'Start Latitude', 'Start Longitude', 'End Location', 'End Latitude', 'End Longitude', 'Miles', 'Minutes', 'Start City', 'Start Country', 'End City', 'End Country', 'Type', 'Start State', 'End State', 'Start Address', 'End Address', 'Gender', 'Age', 'Stolen?', 'Make', 'Color', 'State', 'Make', 'Make', 'Make', 'Make']\nQuestion: Is there any vehicle that has been stolen more than 10 times?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Stolen?'].value_counts().loc['Yes'] > 10\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What is the most common mention?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['mention_ids'].str.split().explode().value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: Which handler was the most mentioned?\nExpected return type",
    "```json\n{\n    \"solution\": \"df['author_name'].str.len().max() == len(df.loc[df['author_name'].str.len().idxmax(), 'text'])\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: Is there any tweet with empty author name?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['author_name'].isna().any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: Does the author with the newest first tweet exist?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['date'].idxmin() in df['author_id'].unique()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many tweets have been sent by the user with the longest name that contains the \u201c#python\u201d hashtag?\nExpected return type: number",
    "```json\n{\n    \"solution\": \"df['retweets'].eq(0).all()\"\n}\n```\n\nInput DataFrame columns: ['title', 'text', 'tokenized_title', 'tokenized_text', 'tokenized_hashtags']\nQuestion: What are the top 3 most common words that are used in the titles of the tweets?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"import nltk\\nfrom itertools import chain\\nfrom collections import Counter\\nfrom sklearn.feature_extraction.text import TfidfVectorizer\\n\\ntokenized_titles = df['tokenized_title']\\n\\ndictionary = Counter(chain.from_iterable(tokenized_titles))\\n\\nvectorizer = TfidfVectorizer()\\n\\nterm_freq_matrix = vectorizer.fit_transform(map(lambda x: x.strip(), tokenized_titles)).todense()\\n\\nterm_freq = pd.DataFrame(term_freq_matrix, columns=vectorizer.get_feature_names(), index=df.index)\\n\\nreturn term_freq.sum(0).sort_values(ascending=False)[:3].index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['topic', 'title', 'text', 'tokenized_title', 'tokenized_text', 'tokenized_hashtags']\nQuestion: What are the top 3 most common words that are used in the titles of the tweets?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"import nltk\\nfrom itertools import chain\\nfrom collections import Counter\\nfrom sklearn.feature_extraction.text import TfidfVectorizer\\n\\ntokenized_titles = df['tokenized_title']\\n\\ndictionary = Counter(chain.from_iterable(tokenized_titles))\\n\\nvectorizer = TfidfVectorizer()\\n\\nterm_freq_matrix = vectorizer.fit_transform(map(lambda x: x.strip(), tokenized_titles)).todense()\\n\\nterm_freq = pd.DataFrame(term_freq_matrix, columns=vectorizer.get_feature_names(),",
    "```json\n{\n    \"solution\": \"return list(df['links_first'].isna()).count(True) == len(df['links_first'])\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What's the average number of characters in a tweet, if the text is less than 20, 20 and more than 20?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['text'].str.len().agg(['mean', lambda x: sum(x < 20), lambda x: sum(x >= 20)])\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What are the top 10 most mentioned URLs?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['links'].str.split(' ').explode().value_counts().nlargest(10).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds',",
    "```json\n{\n    \"solution\": \"pd.unique(df['author_name']).shape[0]\"\n}\n```\n\nInput DataFrame columns: ['agent_id', 'case_id', 'case_opened_date', 'case_closed_date', 'case_due_date', 'case_closed', 'case_late', 'num_days_late', 'case_zone', 'case_lat', 'case_lon', 'council_district', 'police_district']\nQuestion: How many non-null values are there in the 'case_zone' column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['case_zone'].count()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'community_area_name', 'ward', 'police_district', 'zip_code', 'latitude', 'longitude', 'location', 'created_by', 'created_date', 'updated_date', 'status', 'close_reason', 'resolution_description', 'resolution_action_updated_date', 'resolution_action_updated_by', 'latitude_longitude', 'x_coordinate_state_plane', 'y_coordinate_state_plane', 'police_district_id', 'community_area', 'community_area_number', 'fbi_code', 'police_division', 'police_district_name', 'police_station_name', 'zip_code_of_incident', 'neighborhood_of_incident', 'police_district_current', 'were_alcohol_involved']\nQuestion: How many reports are there for alcohol involvement?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['were_alcohol_involved'].sum()\"\n}\n```\n\nInput DataFrame columns: ['INCIDENT_NUMBER', 'CASE_NUMBER', 'DATE', 'BLOCK', 'IUCR', 'Primary Type', 'Description', 'Location Description', 'Arrest', 'Domestic', 'Beat', 'District', 'Ward', 'Community Area', 'FBI Code', 'Latitude', 'Longitude', 'Location']\nQuestion: What is the maximum number",
    "```json\n{\n    \"solution\": \"df['text'].str.split(' ').str.len().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'body', 'url', 'score', 'comms_num', 'created', 'published', 'author', 'author_kudos_count', 'author_created', 'author_url', 'parent_id', 'created_utc', 'permalink', 'num_comments', 'visit_url', 'thread_id', 'tags', 'over_18', 'media', 'spoiler', 'locked', 'stickied', 'gildings', 'collapsed', 'collapsed_reason', 'saved', 'subreddit_type', 'url_overridden_by_dest', 'is_self', 'thumbnail', 'edited', 'link_flair_css_class', 'author_flair_css_class', 'author_flair_text', 'quarantine', 'subreddit_id', 'distinguished', 'author_cakeday', 'domain', 'author_premium', 'likes', 'hidden', 'link_flair_richtext', 'link_flair_text', 'link_flair_type', 'removal_reason', 'link_flair_template_id', 'author_flair_text_color', 'author_flair_type', 'author_flair_type_name', 'author_flair_background_color', 'post_hint', 'content_categories', 'link_id', 'secure_media', 'secure_media_embed', 'link_author', 'link_title', 'link_selftext', 'selftext', 'link_selftext_html', 'selftext_html', 'likes_num', 'secure_media_type', 'media_embed', 'thumbnail_width', 'thumbnail_height', 'author_flair_richtext', 'post_categories', 'link_author_flair_background_color', 'link_author_flair_template_id', 'link_author_flair_css_class', 'link_target', 'post_title_html_removed', 'url_overridden_by_dest']\nQuestion: What is the length of the longest post (based on the",
    "```json\n{\n    \"solution\": \"df['retweets'].sum()\"\n}\n```\n\nInput DataFrame columns: ['reg_date', 'reg_time', 'reg_ip', 'reg_address', 'reg_link', 'reg_lang', 'login_date', 'login_time', 'login_ip', 'login_address', 'login_url', 'login_link', 'login_lang', 'logout_time', 'logout_date', 'logout_ip', 'logout_address', 'logout_link', 'logout_lang', 'client_id', 'country', 'device', 'os', 'browser', 'version', 'gender', 'timezone', 'age', 'language', 'country_code', 'post_id', 'post_title', 'post_category', 'post_published', 'post_text', 'post_url', 'post_video', 'post_image', 'post_images', 'post_parent', 'post_author', 'post_author_name', 'post_author_link', 'post_author_profile', 'post_likes', 'post_comments']\nQuestion: How many people used the same browser more than once in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('browser').client_id.nunique().gt(1).sum()\"\n}\n```\n\nInput DataFrame columns: ['entry_date', 'entry_time', 'entry_format', 'entry_ip', 'entry_link', 'entry_lang', 'entry_country', 'entry_city', 'entry_state', 'entry_region', 'entry_datetime', 'exit_date', 'exit_time', 'exit_format', 'exit_ip', 'exit_link', 'exit_lang', 'exit_country', 'exit_city', 'exit_state', 'exit_region', 'exit_datetime', 'information_date', 'information_time', 'information_format', 'information_ip', 'information_link', 'information_lang', 'information_country', 'information_city', 'information_state', 'information_region', 'information_datetime', 'click_id', 'click_date', 'click_time', 'click_format', '",
    "```json\n{\n    \"solution\": \"df['mention_ids'].isna().sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many tweets mention the user with the name ''?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['mention_names'].str.contains('').sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many tweets (both replies and non-replies) contain a link?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['links'].notna().sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many tweets link to the .ca domain?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['links'].str.endswith('.ca').sum()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['retweets'].idxmax(), 'author_name']\"\n}\n```\n\nInput DataFrame columns: ['gender', 'age', 'weight', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio']\nQuestion: What is the gender who has the biggest ap_hi?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['ap_hi'].idxmax(), 'gender']\"\n}\n```\n\nInput DataFrame columns: ['sex', 'disease', 'diuresis', 'heartrate', 'systolic', 'diastolic', 'respiration', 'map', 'co', 'hco3', 'so2', 'pot', 'paco2', 'fio2', 'a_-aot', 'p_-pao2', 'ph', 'total', 'hematocrit', 'd_bilirubin', 'd-bili', 'blood_gas_an(b_gao', 'blood_gas_aheartrate', 'blood_gas_bilirubin', 'blood_gas_concentration', 'blood_gas_pco2', 'blood_gas_po2', 'blood_gas_ph', 'blood_gas_phemoglobin', 'blood_gas_pao2', 'blood_gas_pco2', 'blood_gas_total', 'blood_gas_hco3', 'blood_gas_baseexcess', 'blood_gas_be', 'blood_gas_lacticdehydrogenase', 'blood_gas_ph']\nQuestion: What is the average hematocrit of patients who suffer from diabetes?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['diabetes'] == 1, 'hematocrit'].mean()\"\n}\n```\n\nInput DataFrame columns: ['area', 'decision', 'safety_rating', 'hazardous', 'activity_class', 'environment_class', 'reading_level', 'risk_",
    "```json\n{\n    \"solution\": \"df.loc[df['favorites'].idxmax(), 'lang']\"\n}\n```\n\nInput DataFrame columns: ['sex', 'age', 'alcohol-use', 'alcohol-frequency', 'smoking', 'desire-to-pray', 'religion', 'church-goers', 'political-views', 'political-affiliation', 'war-experienced', 'self-hate', 'environment-toxicity', 'race', 'racial-supremacy', 'economic-opportunity', 'criticism', 'irreligion', 'death-risk', 'all-pundits', 'cause-right', 'family-support', 'parent-support', 'politics-support', 'hate-crime', 'uneducated', 'informed-populace', 'secular-beliefs', 'secular-society', 'media-race', 'media-religion', 'media-freedom', 'media-conservatism', 'media-progress', 'media-liberalism', 'media-demagoguery', 'media-hate', 'media-hate_race', 'media-hate_sexual', 'media-hate_religion', 'media-hate_discrimination', 'media-hate_freedom', 'media-hate_other', 'media-hate_gaming', 'media-hate_sentimentalization', 'media-hate_dehumanization', 'media-hate_cyberbullying', 'media-hate_bullying', 'media-hate_racism', 'media-hate_patriarchy', 'media-hate_homophobia', 'media-hate_xenophobia', 'media-hate_transphobia', 'media-hate_antisemitism', 'media-hate_islamophobia', 'media-hate_extremism', 'media-hate_intolerance', 'media-hate_racial', 'media-hate_nationalism', 'media-hate_other-targeted', 'media-hate_discrimination-targeted",
    "```json\n{\n    \"solution\": \"df.loc[df['text'].str.split().apply(len).idxmax(), 'author_name']\"\n}\n```\n\nInput DataFrame columns: ['time', 'text', 'hashtags', 'mentions', 'permalink', 'urls', 'media', 'media_links', 'lat', 'lng', 'cashtags', 'source', 'is_retweet', 'retweet_id', 'retweet_date']\nQuestion: What are the top 3 words used in tweets?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['text'].str.split(expand=True).stack().str.lower().str.strip(',').str.replace('[^a-z0-9 ]', '').value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['track_uri', 'track_name', 'album_uri', 'album_name', 'album_release_date', 'artist_uri', 'artist_name', 'explicit', 'popularity']\nQuestion: What is the popularity of the most popular artist?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['artist_name'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'Uniq_ID', 'Name', 'BUSI', 'Status_Material', 'Date_create', 'Date_Status_Material', 'Status_Recource', 'Date_Status_Resource', 'Type_Resource', 'Date_Type_Resource', 'Date_complete_check', 'Date_complete_recup', 'ID_Equi', 'Name_Equi', 'Model_Equi', 'Status_Equi', 'Date_status_recup', 'Date_Status_Booking', 'Status_Booking', 'Date_Status_Booking', 'ID_User_Booking', 'Na_User_Booking', 'Nom_User_Booking', 'Pren_User_Booking', 'Mail_User_Booking', 'Tel1_User_Booking', 'Tel2_User_Booking', 'Date_User_Booking', 'Date_P",
    "```json\n{\n    \"solution\": \"df['type'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response', 'age', 'ltv', 'total_order_amt', 'total_discount_amt']\nQuestion: What is the most commonly used education level among the customer?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Education'].value_counts().nlargest(1).index.tolist()[0]\"\n}\n```\n\nInput DataFrame columns: ['Year', 'Month', 'Day', 'Hour', 'Minute', 'Second', 'Timezone', 'Airport', 'Source', 'lat', 'lon', 'Altitude', 'Speed', 'Wind Direction', 'Wind Speed', 'Wind Gust', 'Precipitation', 'Pressure', 'Cloud Cover', 'Conditions', 'Humidity', 'Dew Point', 'Temperature']\nQuestion: What is the correlation coefficient between the total number of precipitations and the average temperature?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.corr().iloc[19, 11]\"\n}\n```\n\nInput DataFrame columns: ['brands_and_products', 'county_name', 'location_id', 'city_name', 'modified_date', 'name', 'postal_code', 'region_id', 'region_name', 'state_id', 'state_name', 'country_id', 'country_name', 'created_date', 'brand_id', 'brand_",
    "```json\n{\n    \"solution\": \"df.nlargest(3, 'retweets').author_name.tolist()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'user_name', 'user_screen_name', 'date', 'time', 'source', 'retweet_count', 'favorite_count', 'is_retweet', 'lang', 'content', 'hashtags', 'mentions']\nQuestion: What is the user name of the user who posted the first tweet?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[0, 'user_name']\"\n}\n```\n\nInput DataFrame columns: ['id', 'product_name', 'aisle', 'department', 'aisle_id', 'department_id', 'user_id']\nQuestion: How many unique department id values are there in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.department_id.unique().size\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'weight', 'unit', 'price', 'discount', 'DIY', 'households_id', 'aisle_id']\nQuestion: What is the sum of the price of all DIY items?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['DIY'] == True, 'price'].sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'weight', 'unit', 'price', 'discount', 'DIY', 'households_id', 'aisle_id']\nQuestion: What is the maximum price of the items with a promo code?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['discount'] > 0, 'price'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'weight', 'unit', 'price', 'discount', 'DIY', 'households_id', 'aisle_id']\nQuestion: What is the name of the item with the highest price?\nExpected return type",
    "```json\n{\n    \"solution\": \"df['lang'].value_counts().nsmallest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['pub_date', 'article_id', 'section_name', 'headline', 'short_description', 'date', 'link', 'city', 'state', 'type', 'source', 'id']\nQuestion: Since 2015, how many articles were published in California in January?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['city'] == 'California'][df['pub_date'].dt.year.ge(2015)].groupby([df['pub_date'].dt.year, df['pub_date'].dt.month]).size()[2015, 1]\"\n}\n```\n\nInput DataFrame columns: ['inning_topbottom', 'inning', 'bat_team', 'bowl_team', 'batsman', 'batsman_runs', 'extra_runs', 'total', 'non-boundary', 'is_super_over', 'bowler', 'wide_runs', 'bye_runs', 'legbye_runs', 'noball_runs', 'penalty_runs', 'batsman_runs_total', 'extra_runs_total', 'total_runs_total', 'player_dismissed', 'dismissal_kind', 'fielder', 'dismissal_info', 'match_id', 'match_date']\nQuestion: How many matches were played in India in 2019?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['bat_team'] == 'India'][df['match_date'].dt.year == 2019].groupby(df['match_id']).size().value_counts()[1]\"\n}\n```\n\nInput DataFrame columns: ['venue', 'city', 'team1', 'team2', 'toss_winner', 'toss_decision', 'winner', 'result', 'eliminator', 'method', 'date', 'time', 'dl_applied', 'winner_batting', 'winner_bowling', 'win_by_runs",
    "```json\n{\n    \"solution\": \"df['text'].str.split().str.len().nsmallest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'content', 'author', 'tags', 'author_url', 'author_image_url', 'createdAt', 'updatedAt']\nQuestion: What is the title of the post with the highest number of words in its title?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['title'].str.split().str.len().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'age', 'salary', 'department', 'education']\nQuestion: What is the highest salary?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['salary'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'email', 'phone', 'gender', 'role', 'department', 'salary']\nQuestion: What is the highest salary for a manager?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['role'].str.contains(r'manager')]['salary'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'email', 'phone', 'gender', 'role', 'department', 'salary']\nQuestion: How many employees are in the engineering department?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['department'].str.contains(r'eng')]['id'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'email', 'phone', 'gender', 'role', 'department', 'salary']\nQuestion: Which manager is the one who received the most bonus?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['role'].str.contains(r'manager')]['bonus'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'email', 'phone', 'gender', 'role', 'department",
    "```json\n{\n    \"solution\": \"df['type'].value_counts().nlargest(6).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Time', 'Area_Name', 'Number', 'Type', 'Location', 'Count', 'Count_1', 'Count_2']\nQuestion: Is there any count greater than 200?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Count'].gt(200).any()\"\n}\n```\n\nInput DataFrame columns: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q10', 'Q11', 'Q12', 'Q13', 'Q14', 'Q15', 'Q16', 'Q17', 'Q18', 'Q19', 'Q20', 'ID']\nQuestion: Is there any score greater than 80?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[:, 'Q1':'Q20'].apply(lambda row: row.gt(80).any(), axis=1).any()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'city', 'country', 'gender', 'age', 'education', 'job', 'hospital', 'submit_date', 'score']\nQuestion: Is there any score less than 60?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['score'].lt(60).any()\"\n}\n```\n\nInput DataFrame columns: ['Due date', 'Days late', 'Source', 'Status', 'Benefit', 'Description', 'Responsible', 'Ship date', 'Mode', 'Category', 'Total cost', 'Total cost - expected']\nQuestion: What are the top 3 description of total cost - expected?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Description'].value_counts().nlargest(3).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['favorites'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'created_at', 'full_text', 'user_id', 'user_name', 'user_screen_name', 'user_location', 'user_description', 'user_created_at', 'user_n_posts', 'user_follows', 'user_status_count', 'user_has_media', 'user_is_verified', 'user_is_private', 'in_reply_to_user_id', 'in_reply_to_user_name', 'in_reply_to_user_screen_name', 'in_reply_to_user_is_private', 'in_reply_to_user_status_count', 'in_reply_to_user_has_media', 'in_reply_to_user_is_verified', 'quoted_tweet_id', 'quoted_tweet_created_at', 'quoted_tweet_full_text', 'quoted_tweet_user_id', 'quoted_tweet_user_name', 'quoted_tweet_user_screen_name', 'quoted_tweet_user_location', 'quoted_tweet_user_description', 'quoted_tweet_user_created_at', 'quoted_tweet_user_n_posts', 'quoted_tweet_user_follows', 'quoted_tweet_user_status_count', 'quoted_tweet_user_has_media', 'quoted_tweet_user_is_verified', 'quoted_tweet_user_is_private', 'quoted_tweet_in_reply_to_user_id', 'quoted_tweet_in_reply_to_user_name', 'quoted_tweet_in_reply_to_user_screen_name', 'quoted_tweet_in_reply_to_user_is_private', 'quoted_tweet_in_reply_to_user_status_count', 'quoted_tweet_in_reply_to_user_has_media', 'quoted_tweet_in_reply_to_user_is_verified', 'retweet_id', 'retweet_created_at', 'retweet_full_text', 'retweet_user_id', 'ret",
    "```json\n{\n    \"solution\": \"df['text'].str.strip().str.split().apply(len).nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['importance', 'org_activity', 'who_met', 'country_met', 'org_name', 'partner_org_name', 'org_name_met', 'partner_org_name_met', 'company_size', 'capacity_needed', 'workload', 'activity', 'outcome_1', 'outcome_2', 'outcome_3', 'outcome_4', 'outcome_5', 'outcome_6', 'outcome_7', 'outcome_8', 'outcome_9', 'outcome_10', 'outcome_11', 'outcome_12', 'outcome_13', 'outcome_14', 'outcome_15', 'outcome_16', 'outcome_17', 'agency_1', 'agency_2', 'agency_3', 'agency_4', 'agency_5', 'agency_6', 'agency_7', 'source', 'outcome_category', 'outcome_3', 'outcome_4', 'outcome_5', 'outcome_6', 'outcome_7', 'outcome_8', 'outcome_9', 'outcome_10', 'outcome_11', 'outcome_12', 'outcome_13', 'outcome_14', 'outcome_15', 'outcome_16', 'outcome_17', 'agency', 'date_of_outcome', 'result_of_outcome', 'disposition_of_outcome', 'date_of_outcome_year_month_date']\nQuestion: Which agency has close to 20000 outocmes in 2021?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['date_of_outcome_year_month_date'] > '2021-01-01') & (df['date_of_outcome_year_month_date'] < '2021-12-31')]['agency'].value_counts().nlargest(1).index[0]\"\n}\n```\n\nInput DataFrame columns: ['code', 'name',",
    "```json\n{\n    \"solution\": \"df['retweets'].nsmallest(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['uri', 'id', 'id_str', 'name', 'screen_name', 'location', 'description', 'url', 'entities', 'protected', 'followers_count', 'friends_count', 'listed_count', 'created_at', 'favourites_count', 'utc_offset', 'time_zone', 'geo_enabled', 'verified', 'statuses_count', 'lang', 'contributors_enabled', 'is_translator', 'is_translation_enabled', 'profile_background_color', 'profile_background_image_url', 'profile_background_image_url_https', 'profile_background_tile', 'profile_image_url', 'profile_image_url_https', 'profile_banner_url', 'profile_link_color', 'profile_sidebar_border_color', 'profile_sidebar_fill_color', 'profile_text_color', 'profile_use_background_image', 'has_extended_profile', 'default_profile', 'default_profile_image', 'following', 'follow_request_sent', 'notifications', 'translator_type', 'id_user', 'id_str_user', 'name_user', 'screen_name_user', 'location_user', 'description_user', 'url_user', 'entities_user', 'protected_user', 'followers_count_user', 'friends_count_user', 'listed_count_user', 'created_at_user', 'favourites_count_user', 'utc_offset_user', 'time_zone_user', 'geo_enabled_user', 'verified_user', 'statuses_count_user', 'lang_user', 'contributors_enabled_user', 'is_translator_user', 'is_translation_enabled_user', 'profile_background_color_user', 'profile_background_image_url_user', 'profile_background_image_url_https_user', 'profile_background_tile_user', 'profile_image_url_user', 'profile_image_url_https_user', 'profile_banner_url_user', 'profile_link_color_user', 'profile",
    "```json\n{\n    \"solution\": \"df['text'].str.split(' ').apply(len).nsmallest(6).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What is the maximum length of a post?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['text'].str.split(' ').apply(len).max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What is the average number of words in a post?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['text'].str.split(' ').apply(len).mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many posts have more than 50 words?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['text'].str.split",
    "```json\n{\n    \"solution\": \"df['name'].str.contains('Pikachu', case=False, regex=False).any()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Weekend_flag', 'Visitors', 'Week_Number', 'Year', 'Month', 'Day', 'Day_Name', 'Day_No', 'Day_Type', 'Visitors_Weekday', 'Visitors_Weekend', 'Visitors_Trend', 'Holiday', 'Holiday_Type', 'Holiday_Name', 'Holiday_Country', 'Holiday_State', 'Business_Day', 'Is_Business_Day', 'Is_Super_Bowl', 'Is_Presidents_Day', 'Is_Labour_Day', 'Is_Memorial_Day', 'Is_Independence_Day', 'Is_Colonial_Day', 'Is_Good_Friday', 'Is_Easter', 'Is_Halloween', 'Is_Thanksgiving_Day', 'Is_Christmas', 'Is_New_Years_Day', 'Is_Black_Friday', 'Is_Cyber_Monday', 'Is_Friday_13', 'Is_Boxing_Day', 'Is_Monday_after_Xmas', 'Is_First_Monday_in_March', 'Is_First_Monday_in_June', 'Is_First_Monday_in_September', 'Is_International_Women_Day', 'Is_First_Monday_in_November', 'Is_First_Monday_in_October', 'Is_First_Monday_in_July', 'Is_First_Monday_in_April', 'Is_First_Monday_in_May', 'Is_First_Monday_in_August', 'Year_2010', 'Year_2011', 'Year_2012', 'Year_2013', 'Year_2014', 'Year_2015', 'Year_2016', 'Year_2017', 'Year_2018', 'Year_2019', 'Year_2020', 'Year_2021', 'Month_1', 'Month_10', 'Month_",
    "```json\n{\n    \"solution\": \"return df['total'].gt(700).any()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: How many passengers embarked from Southampton?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['Embarked'].eq('S').sum()\"\n}\n```\n\nInput DataFrame columns: ['ticker', 'date', 'open', 'high', 'low', 'close', 'volume', 'adj_close']\nQuestion: What are the top 10 peaks in the JPM stock value?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['close'].nlargest(10).tolist()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'item_id', 'rating', 'timestamp']\nQuestion: What are the top 3 most frequently rated movies?\nExpected return type: list\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['item_id'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Year', 'Month', 'DayofMonth', 'DayOfWeek', 'DepTime', 'CRSDepTime', 'ArrTime', 'CRSArrTime', 'UniqueCarrier', 'FlightNum', 'TailNum', 'ActualElapsedTime', 'CRSElapsedTime', 'AirTime', 'ArrDelay', 'DepDelay', 'Origin', 'Dest', 'Distance', 'TaxiIn', 'TaxiOut', 'Cancelled', 'CancellationCode', 'Diverted', 'CarrierDelay', 'WeatherDelay', 'NASDelay', 'SecurityDelay', 'LateAircraftDelay']\nQuestion: How many flights have a negative delay?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['ArrDelay'].lt(0).sum()\"\n}\n```\n\nInput DataFrame columns: ['X",
    "```json\n{\n    \"solution\": \"df.loc[df['generation'] == 1]['legendary'].all()\"\n}\n```\n\nInput DataFrame columns: ['date', 'total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated', 'daily_vaccinations_raw', 'daily_vaccinations', 'total_vaccinations_per_hundred', 'people_vaccinated_per_hundred', 'people_fully_vaccinated_per_hundred', 'daily_vaccinations_per_million', 'vaccines', 'source_name', 'source_website']\nQuestion: Which vaccine is given most often?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['vaccines'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Total Cases', 'New Cases', 'Total Deaths', 'New Deaths', 'Total Recovered', 'Active Cases', 'Serious Cases', 'Tot Cases/1M pop', 'Serious/Critical', 'Tot Cases/1M pop', 'Deaths/1M pop', 'Total Tests', 'Tests/1M pop', 'Population', 'Continent', 'Location', 'Source']\nQuestion: What is the Total Cases/1M pop in Western Sahara?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"float(df[df['Location'] == 'Western Sahara']['Total Cases/1M pop'])\"\n}\n```\n\nInput DataFrame columns: ['index', 'url', 'name', 'details', 'owner_id', 'owner_username', 'num_comments', 'created_utc']\nQuestion: What is the username of the user that posted the most recent comment?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['owner_username'].max()\"\n}\n```\n\nInput DataFrame columns: ['day', 'count', 'perc']\nQuestion: What is the percentage of users that added the current day?\nExpected return type: number",
    "```json\n{\n    \"solution\": \"df['speed'].gt(150).any()\"\n}\n```\n\nInput DataFrame columns: ['green_table', 'red_table', 'yellow_table', 'blue_table', 'purple_table']\nQuestion: How many tables are in the green room?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['green_table'].sum()\"\n}\n```\n\nInput DataFrame columns: ['cohort', 'user_id', 'course', 'day', 'dayOfWeek', 'user_session', 'module', 'page_name', 'timestamp', 'hour', 'ip_address', 'user_agent', 'gmt_offset', 'country', 'region', 'city']\nQuestion: Which country has the most number of session per day?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('day').ngroups\"\n}\n```\n\nInput DataFrame columns: ['id', 'iso2', 'iso3', 'name', 'iso_numeric', 'fips', 'country_code', 'wmo', 'capital', 'area_km2', 'population', 'population_proper', 'calling_code', 'currency', 'currency_name', 'currency_symbol', 'latlng', 'demonym', 'area_sq_mi', 'native_name', 'numeric_code', 'continent']\nQuestion: In which European country does the lowest population live?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['continent'] == 'Europe']['population'].idxmin()\"\n}\n```\n\nInput DataFrame columns: ['country', 'city', 'user_name', 'age', 'gender', 'htmcp', 'wt', 'ht', 'waist', 'hip', 'time']\nQuestion: What is the average age of people with hip of 42cm?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['hip'] == 42) & (df['gender'] == 'Male')]['age'].mean()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['type1'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['name', 'type1', 'type2', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary']\nQuestion: What is the 7th Pokemon's type1?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[6, 'type1']\"\n}\n```\n\nInput DataFrame columns: ['id', 'species', 'category', 'gender', 'age', 'coat', 'hair', 'pixels', 'skin', 'x_coordinate', 'y_coordinate', 'still_picture', 'celebrity', 'adult', 'profile', 'image_base64', 'image_url', 'status', 'message']\nQuestion: Is there any image with more than 5000 pixels?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['pixels'].gt(5000).any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'species', 'category', 'gender', 'age', 'coat', 'hair', 'pixels', 'skin', 'x_coordinate', 'y_coordinate', 'still_picture', 'celebrity', 'adult', 'profile', 'image_base64', 'image_url', 'status', 'message']\nQuestion: What is the lowest number of pixels for a female?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['pixels'].nsmallest(1).iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['PostalCode', 'Borough', 'Neighborhood', 'Latitude', 'Longitude']\nQuestion: What is the number of rows and columns in the dataset?\nExpected return type: tuple\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.shape\"\n}\n```\n\nInput DataFrame columns: ['PostalCode', 'Borough', 'Neighborhood', 'Latitude', 'Longitude']\nQuestion: What are the names of",
    "```json\n{\n    \"solution\": \"df['total'].max()\"\n}\n```\n\nInput DataFrame columns: ['#', 'Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary', 'color', 'pre-evolution', 'evolution']\nQuestion: How many times did Charizard evolve into Charizard X and Y?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Name'].isin(['Charizard', 'Charizard X', 'Charizard Y']), 'evolution'].count()\"\n}\n```\n\nInput DataFrame columns: ['#', 'Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary', 'color', 'pre-evolution', 'evolution']\nQuestion: How many pokemon have evolved into Charizard (Charmander)?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df.loc[df['pre-evolution'].str.contains('Charmander'), 'evolution'].unique())\"\n}\n```\n\nInput DataFrame columns: ['#', 'Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary', 'color', 'pre-evolution', 'evolution']\nQuestion: How many pokemon have evolved into Charizard (Charmander) and Electabuzz?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df.loc[(df['pre-evolution'].str.contains('Charmander') & df['evolution'].str.contains('Electabuzz')), 'evolution'].unique())\"\n}\n```\n\nInput DataFrame columns: ['#', 'Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp.",
    "```json\n{\n    \"solution\": \"df.loc[(df['generation'] == 3), 'number'].count()\"\n}\n```\n\nInput DataFrame columns: ['Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: What are the most common ticket types?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Ticket'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'released', 'ret_point', 'retail_price', 'price', 'size', 'color', 'flavor', 'origin', 'description', 'quantity', 'invoice_no', 'order_id', 'brand_id', 'product_id', 'sku_id', 'vendor_id']\nQuestion: Which product has the highest retail price?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['retail_price'].idxmax(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['time', 'code', 'description', 'tz', 'utc_offset', 'local_datetime', 'local_time', 'local_timezone', 'utc_datetime', 'year', 'month', 'day', 'hour', 'minute', 'second', 'datetime', 'day_of_week', 'quarter_of_year', 'weekend']\nQuestion: What is the earliest timestamp recorded in the dataset?\nExpected return type: object\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['time'].min()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'id', 'userId', 'movieId', 'rating', 'timestamp']\nQuestion: Which movie has the highest average rating?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('movieId')['rating'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'cast', 'crew']\nQuestion: Which movie has the highest number",
    "```json\n{\n    \"solution\": \"df['attack'].mean()\"\n}\n```\n\nInput DataFrame columns: ['battleNumber', 'gameTime', 'gameDate', 'airDmgToPlayer', 'groundDmgToPlayer', 'flyingDmgToPlayer', 'totalDmgToPlayer', 'airDmgToChar', 'groundDmgToChar', 'flyingDmgToChar', 'totalDmgToChar', 'kills', 'teamKills', 'deaths', 'assists', 'airAssists', 'groundAssists', 'flyingAssists', 'totalAssists', 'airDmgDone', 'groundDmgDone', 'flyingDmgDone', 'totalDmgDone', 'killsPerDeath', 'playerClass', 'playerLevel', 'character', 'characterLevel', 'characterClass', 'characterRarity', 'gamemodeClass']\nQuestion: How many characters died in the first 5 battles of the game?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.query('battleNumber <= 5')['deaths'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Type1', 'Type2', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation']\nQuestion: What Pok\u00e9mon has the highest attack stat which is not higher than 200?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.query('Attack <= 200')['Type1'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['order', 'operation_name', 'document_id', 'operation_type', 'amount_currency', 'amount_in_usd', 'amount_total', 'shop_id', 'date']\nQuestion: How many daily orders were done in the train dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('date').get_group('train')['order'].count()\"\n}\n```\n\nInput DataFrame columns: ['Sta_num', 'Sta_name', 'Sta_descript', 'Sta",
    "```json\n{\n    \"solution\": \"df.loc[df['defense'].idxmax(), 'type1']\"\n}\n```\n\nInput DataFrame columns: ['id', 'species', 'island', 'capture', 'weight', 'sex', 'time']\nQuestion: How many male vs female wild pokemon out of the total number of wild pokemon?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"rows = df.groupby(['island', 'sex'])['id'].count()\ntotal = rows['Biscove', 'M'].sum() + rows['Biscove', 'F'].sum() + rows['Dreamland', 'M'].sum() + rows['Dreamland', 'F'].sum()\nreturn total\"\n}\n```\n\nInput DataFrame columns: ['id', 'species', 'capture', 'weight', 'sex', 'time']\nQuestion: What is the percentage of male vs female wild pokemon out of the total number of wild pokemon?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"rows = df.groupby(['species', 'sex'])['id'].count()\ntotal = rows['Braviary', 'M'].sum() + rows['Braviary', 'F'].sum() + rows['Hippopotas', 'M'].sum() + rows['Hippopotas', 'F'].sum() + rows['Kadabra', 'M'].sum() + rows['Kadabra', 'F'].sum() + rows['Mareep', 'M'].sum() + rows['Mareep', 'F'].sum() + rows['Pikachu', 'M'].sum() + rows['Pikachu', 'F'].sum() + rows['Paras', 'M'].sum() + rows['Paras', 'F'].sum() + rows['Pidgeotto', 'M'].sum() + rows['Pidgeotto', 'F'].sum() + rows['Pidgeot', 'M'].sum() + rows['Pidgeot', 'F'].sum() + rows['Pinsir', 'M'].sum() + rows['Pinsir', 'F'].sum() + rows['Psyduck', 'M'].sum() + rows['",
    "```json\n{\n    \"solution\": \"df['name'][df['speed'].idxmin()]\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'type1', 'type2', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary']\nQuestion: What is the average weight of all Pok\u00e9mon with type 'dragon'?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['type1'] == 'dragon']['weight_kg'].mean()\"\n}\n```\n\nInput DataFrame columns: ['release_date', 'month', 'name', 'type', 'subtype', 'level', 'status', 'species', 'gender', 'ability', 'nature', 'item', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'evs', 'hp_iv', 'attack_iv', 'defense_iv', 'sp_attack_iv', 'sp_defense_iv', 'speed_iv', 'total_iv', 'hp_ev', 'attack_ev', 'defense_ev', 'sp_attack_ev', 'sp_defense_ev', 'speed_ev', 'total_ev', 'hp_stat', 'attack_stat', 'defense_stat', 'sp_attack_stat', 'sp_defense_stat', 'speed_stat', 'total_stat', 'catch_rate', 'base_friendship', 'base_experience', 'growth_rate', 'egg_type_list', 'egg_group_list', 'gender_rate', 'has_gender_differences', 'other_forms', 'form_order', 'order', 'is_baby', 'is_mega', 'is_mythical', 'is_legendary', 'is_ultra_beast', 'is_dynamax', 'is_b2w2', 'is_sun_moon', 'is_shadow', 'is_primal', 'has_me_ga', 'has_mega_evolution', 'is_pioneer_form', 'is_pioneer_starter', 'is_eriko_base', 'has_cryogonal', '",
    "```json\n{\n    \"solution\": \"df[df['legendary']]['type1'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['0.14230769230769232', '0.3333333333333333', '0.35294117647058826', '0.03225806451612903', '0.4444444444444444', '0.23076923076923078', '0.4838709677419355', '0.041666666666666664', '0.125', '0.7272727272727273', '0.05263157894736842', '0.05555555555555555', '0.16666666666666666', '0.1', '0.2727272727272727', '0.1111111111111111', '0.18181818181818182', '0.08333333333333333', '0.20000000000000004', '0.0625', '0.7777777777777778', '0.25', '0.2', '0.2222222222222222', '0.6', '0.14285714285714285', '0.117647058823",
    "```json\n{\n    \"solution\": \"df[df['sp_attack'].gt(df['sp_attack'].max())]['name'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Pokedex#', 'Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary']\nQuestion: Which Pok\u00e9mon has the highest defense?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Defense'].gt(df['Defense'].max())]['Name'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['name', 'species', 'type1', 'type2', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary']\nQuestion: Which Pok\u00e9mon has the lowest attack?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['attack'].lt(df['attack'].min())]['name'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary']\nQuestion: Which Pok\u00e9mon has the highest speed?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Speed'].gt(df['Speed'].max())]['Name'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Speed', 'Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Generation', 'Legendary']\nQuestion: Which Pok\u00e9mon has the highest special defense?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Sp. Def'].gt(df['Sp. Def'].max())]['Name'].iloc[0",
    "```json\n{\n    \"solution\": \"df.nlargest(3, 'total')['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Is diabetes present in more than half of the dataset?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['Outcome'].eq(1).sum() > df.shape[0] // 2\"\n}\n```\n\nInput DataFrame columns: ['elevation', 'slope', 'rainfall', 'wrf_pbltop', 'wrf_sbl', 'wrf_hfx', 'wrf_hfds', 'wrf_hfns', 'wrf_clw', 'wrf_cli', 'wrf_ts', 'wrf_dlwrf', 'wrf_dlclw', 'wrf_dlw', 'wrf_dlcape', 'wrf_dlcape', 'wrf_phis', 'wrf_tcdc', 'wrf_tsk', 'wrf_ttr', 'wrf_q2', 'wrf_q2_tend', 'wrf_ucnd', 'wrf_ugrd', 'wrf_vgrd', 'wrf_vpra', 'wrf_vrdz', 'wrf_rdsp', 'wrf_vp', 'wrf_wspd']\nQuestion: Which of the following variables contains only integers?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return ['wrf_pbltop', 'wrf_sbl', 'wrf_hfx', 'wrf_hfds', 'wrf_hfns', 'wrf_clw', 'wrf_cli', 'wrf_ts', 'wrf_dlwrf', 'wrf_dlclw', 'wrf_dlw', 'wrf_dlcape', 'wrf_dlcape', 'wrf_phis', 'wrf_tcdc', '",
    "```json\n{\n    \"solution\": \"df.loc[df['hp'].nsmallest(5).index]['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['city', 'data', 'state', 'country', 'user_id', 'product_id', 'day']\nQuestion: What are the 5 cities with the most total number of purchases?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('city')['user_id'].sum().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['species', 'sex', 'length', 'diameter', 'height', 'weight', 'shucked weight', 'viscera weight', 'shell weight', 'rings']\nQuestion: What are the 5 most common species of sharks?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['species'].value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'type', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'is_legendary', 'abilities', 'weight', 'special-attack', 'special-defense', 'hitpoints', 'total', 'hp_f', 'attack_f', 'defense_f', 'sp_attack_f', 'sp_defense_f', 'speed_f', 'height_m', 'catch_rate', 'base_experience', 'population', 'japanese_name', 'type_1', 'type_2', 'debut', 'color', 'body_style', 'shape', 'gender', 'habitat', 'base_happiness', 'base_total', 'capture_rate', 'egg_type_1', 'egg_type_2', 'egg_group_1', 'egg_group_2', 'hasgender', 'hasgendernote', 'growthrate', 'hatch_counter', 'gender_rate', 'forms_switchable', 'gender_desc', 'has_gender_differences', 'percentage_male', 'egg_cycles', 'friend",
    "```json\n{\n    \"solution\": \"df[['type1','type2']].melt().value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'main_img', 'img', 'side_img', 'base_total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'type1', 'type2', 'abilities', 'height_m', 'weight_kg', 'classfication', 'egg_type', 'egg_count', 'experience_growth', 'base_happiness', 'capture_rate', 'abilities_hidden', 'total', 'hp_avg', 'attack_avg', 'defense_avg', 'sp_attack_avg', 'sp_defense_avg', 'speed_avg', 'hp_growth', 'attack_growth', 'defense_growth', 'sp_attack_growth', 'sp_defense_growth', 'speed_growth', 'p1', 'pokes_num']\nQuestion: Which is the most common ability of 100 randomly selected Pok\u00e9mon?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['abilities'].str.split(', ').explode().value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['title', 'age', 'text', 'title_lem', 'text_lem', 'age_bin', 'noun_count', 'verb_count', 'adj_count', 'adv_count', 'noun_adj_count', 'noun_verb_count', 'noun_adv_count', 'verb_adj_count', 'verb_adv_count', 'adj_adv_count', 'body_size']\nQuestion: What is the average number of nouns, verbs, adjectives and adverbs in the body of a CM post?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"[df[['noun_count', 'verb_count', 'adj_count', 'adv_count']].mean().tolist()]\"\n}\n```\n\nInput DataFrame columns: ['COUNT']\nQuestion: How many different authors",
    "```json\n{\n    \"solution\": \"df[df['generation'] == 2]['name'].nlargest(6).tolist()\"\n}\n```\n\nInput DataFrame columns: ['CustomerID', 'InvoiceDate', 'InvoiceNo', 'StockCode', 'Description', 'Quantity', 'UnitPrice', 'InvoiceNo', 'Country']\nQuestion: Which country sold the most quantity of products?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Country'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['index', 'freq', 'unique_values', 'unique_values_count', 'missing_values_count', 'frequency_of_most_frequent_value(s)', 'mode_(s)', 'mode_frequency', 'median', 'median_absolute_deviation', 'mean', 'skew', 'kurtosis', 'minimum', 'q1', 'q2', 'q3', 'maximum', 'variance', 'standard_deviation', 'range', 'interquartile_range']\nQuestion: What is the variance of the unique_values_count column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['unique_values_count'].var()\"\n}\n```\n\nInput DataFrame columns: ['Postal Code', 'Borough', 'Neighbourhood', 'Venue', 'Venue Latitude', 'Venue Longitude', 'Venue Category']\nQuestion: Are there any venues with the word \"park\" in their name?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"any((df['Venue'].str.contains('park')) & ('park' in df['Venue']))\"\n}\n```\n\nInput DataFrame columns: ['Postcode', 'Borough', 'Neighbourhood', 'Building area (ft\u00b2)', 'Land area (ft\u00b2)', 'Density (per km\u00b2)']\nQuestion: What are the top 3 most expensive Boroughs?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.nlargest(3, 'Land area (ft\u00b2)')[['Borough']].to_numpy",
    "```json\n{\n    \"solution\": \"df['sp_defense'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['no', 'name', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation']\nQuestion: What are the top 5 speed stats in the dataset?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['speed'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'type1', 'type2', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'is_legendary']\nQuestion: What are the top 10 legendary Pokemon?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['is_legendary'] == True]['name'].nlargest(10).tolist()\"\n}\n```\n\nInput DataFrame columns: ['no', 'name', 'height', 'weight', 'cp', 'age']\nQuestion: Which dragon in the top 10 by cp has the largest height?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.nlargest(10, 'cp')['height'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['name', 'type1', 'type2', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'is_legendary']\nQuestion: Which Pokemon has the largest base total?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['total'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['name', 'type1', 'type2', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'is_legendary']\nQuestion: Which Pokemon has the largest base hp?\nExpected return type: category\n\nCode that calculates the answer:\n```",
    "```json\n{\n    \"solution\": \"df[(df['legendary'] == True)].sort_values('defense', ascending=True)['defense'].tolist()[:2]\"\n}\n```\n\nInput DataFrame columns: ['number', 'name', 'type1', 'type2', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary']\nQuestion: Are there any legendary Pok\u00e9mon with a defense higher than 200?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['defense'] > 200) & (df['legendary'] == True)].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'type1', 'type2', 'ability1', 'ability2', 'ability_hidden', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation']\nQuestion: List the first 25 Pok\u00e9mon sorted by attack.\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('attack', ascending=True).head(25)['attack'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'type1', 'type2', 'ability1', 'ability2', 'ability_hidden', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation']\nQuestion: Are there any Pok\u00e9mon with more than 200 defense that are not of type Fire?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['defense'] > 200) & (df['type1'] != 'Fire')].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'M",
    "```json\n{\n    \"solution\": \"df.loc[df['generation'] == 4, ['speed']].nlargest(2, 'speed').iloc[:, 0].tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'type', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation']\nQuestion: What is the total HP of all Pok\u00e9mon with the first type as Water?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['type1'] == 'water', 'hp'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Type', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Total', 'Generation', 'Legendary']\nQuestion: What is the total Sp. Atk of non-legendary Pok\u00e9mon?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Legendary'] == False, 'Sp. Atk'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Row #', 'Year', 'Month', 'Day', 'Day of Week', 'Time', 'State', 'State Code', 'Precipitation Type', 'Precipitation Amount', 'Temperature', 'Wind Direction', 'Wind Speed', 'Relative Humidity', 'Dew Point', 'Visibility', 'Pressure', 'Conditions']\nQuestion: Which state has had the lowest relative humidity in the span of 3 years?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['Year', 'State'])['Relative Humidity'].mean().droplevel(0).nsmallest(1).index.get_level_values(1).iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Day', 'Time', 'Temperature', 'Condition', 'Wind Speed', 'Wind Direction', 'Visibility']\nQuestion: What is the median wind speed in Berlin on the first day of the year?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution",
    "```json\n{\n    \"solution\": \"df[df['legendar'] == False][['number', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed']].nsmallest(6, 'total').agg('sum').tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'type1', 'type2', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary']\nQuestion: Which Pok\u00e9mon type has the highest total stats? (include legendary)\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['type1', 'type2', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed']].stack().groupby(level=0).sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['type', 'first_name', 'last_name', 'gender', 'city', 'state', 'zip', 'birth_year', 'birth_month', 'birth_day', 'birth_date', 'death_year', 'death_month', 'death_day', 'death_date', 'age_months', 'age_days', 'age_years', 'age_category']\nQuestion: What is the youngest male?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['gender'] == 'Male']['age_years'].min().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['name', 'time_epoch', 'source', 'text', 'generate_method', 'tweet_id', 'tweet_url', 'conversation_id', 'user_id', 'username', 'name_normalized', 'user_url', 'time', 'created_at', 'created_at_extensions', 'lang', 'country', 'place', 'timezone', 'source_url', 'quoted_tweet_id', 'quoted_tweet_url', 'quoted_tweet_scope', 'is_retweet', 'retweet_id', 'retweet_date', 'quoted_tweet_permalink', 'quoted_tweet_text', 'quoted_tweet_author",
    "```json\n{\n    \"solution\": \"return df['Extraversion'].max() > df['Agreeableness'].max()\"\n}\n```\n\nInput DataFrame columns: ['Store ID', 'Store Name', 'Store Location', 'Store Latitude', 'Store Longitude', 'Source', 'Date', 'Time', 'Temperature', 'Summer', 'Autumn', 'Winter', 'Spring', 'Last Day in Month', 'Day of Week', 'Day of Month', 'Day of Year', 'Month of Year', 'Year', 'Open', 'Promo', 'State Holiday', 'School Holiday', 'Store Type', 'Assortment', 'Competition Distance', 'Competition Open Since Month', 'Competition Open Since Year', 'Promo2', 'Promo2 Since Week', 'Promo2 Since Year', 'Promo Interval']\nQuestion: How much sales has the store with Store ID 101 in the year 2016?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Store ID'] == 101) & (df['Year'] == 2016)]['Sales'].sum()\"\n}\n```\n\nInput DataFrame columns: ['StoreID', 'DayOfWeek', 'Date', 'Open', 'Promo', 'StateHoliday', 'SchoolHoliday', 'Store', 'Sales', 'Customers', 'Promo2', 'Promo2SinceWeek', 'Promo2SinceYear', 'CompetitionDistance', 'CompetitionOpenSinceMonth', 'CompetitionOpenSinceYear', 'PromoInterval']\nQuestion: How many stores were opened on the 1st of December, 2014?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Date'] == '2014-12-01') & (df['Open'] == 1)].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['Store', 'Day', 'Month', 'Year', 'MonthYear', 'Sales', 'Customers', 'Open', 'Promo', 'StateHoliday', 'SchoolHoliday']\nQuestion: How many school holidays are there in the dataset?\nExpected return type: number\n\nCode that calculates the answer:",
    "```json\n{\n    \"solution\": \"return df['Openness'].max().equals(df['Conscientousness'].max()) == False\"\n}\n```\n\nInput DataFrame columns: ['n', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\nQuestion: Which letter of the alphabet has the highest frequency?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['n'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\nQuestion: How many distinct letters are there in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['n'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\nQuestion: What's the fourth letter from the left?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['n'].iloc[-4]\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N",
    "```json\n{\n    \"solution\": \"df['Emotional_Range'].idxmin() == df['Conversation'].idxmin()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: How many men have more than 2 Wines purchases?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df['Income'] > 200000) & (df['NumWines'] > 2)\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Revenue', 'People', 'Market', 'Channel', 'Region', 'Carrier', 'Cost']\nQuestion: What is the maximum cost of the Carrier Channel in September?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Date'].dt.month == 9) & (df['Channel'] == 'Carrier')]['Cost'].max()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Tickets Sold', 'Gross Profit', 'Ticket Price', 'Total Sales', 'Ticket Discount', 'Ticket Revenue', 'Fee', 'Total Gross Margin', 'Ticket % Fe', 'Gross Margin %', 'Net Profit', 'Net Revenue', 'Net Margin', 'Ticket Count', 'Avg Price Per Ticket']\nQuestion: What is the difference between the maximum and minimum number of ticket price?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Ticket Price'].max() - df['Ticket Price'].min()\"",
    "```json\n{\n    \"solution\": \"df[['Openness to Change', 'Hedonism']].mean().gt('Hedonism')\"\n}\n```\n\nInput DataFrame columns: ['Income', 'Age', 'Household Income', 'Household Size', 'Educational Attainment', 'Gender', 'Race', 'Geographic Region']\nQuestion: What is the gender who has the highest household income?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Household Income'].groupby(df['Gender']).idxmax()]['Gender'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'job', 'gender', 'race', 'religion', 'age', 'type_employer', 'income', 'sess_date', 'satis_2']\nQuestion: What is the highest average satisfaction level for a businessman with a professional degree and a bachelor degree?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['job'] == 'Professional degree') & (df['type_employer'] == 'Bachelor degree')]['satis_2'].mean()\"\n}\n```\n\nInput DataFrame columns: ['country', 'post_code', 'state', 'state_region', 'lga', 'ward', 'population', 'households', 'median_age', 'average_income', 'average_household_size', 'cost_of_living', 'rent_or_own', 'rent_cost', 'house_cost', 'household_cost', 'Healthcare_and_hospitals', 'child_care_and_education', 'transport', 'internet', 'financial_services', 'phone', 'safe_water', 'due_to_law', 'due_to_nature', 'average_improvement_cost', 'average_depreciation_cost', 'average_total_cost', 'cost_of_living_rank', 'transport_rank', 'internet_rank', 'financial_services_rank', 'healthcare_and_hospitals_rank', 'child_care_and_education_rank', 'safe_water_rank',",
    "```json\n{\n    \"solution\": \"df[['Profession', 'Self-enhancement']].groupby('Profession').max().max()[0]\"\n}\n```\n\nInput DataFrame columns: ['Gleatheab 1', 'Gleatheab 2', 'Gleatheab 3', 'Gleatheab 4', 'Gleatheab 5', 'Gleatheab 6', 'Gleatheab 7', 'Gleatheab 8', 'Gleatheab 9', 'Gleatheab 10', 'Gleatheab 11', 'Gleatheab 12', 'Gleatheab 13', 'Gleatheab 14', 'Gleatheab 15', 'Gleatheab 16', 'Gleatheab 17', 'Gleatheab 18', 'Gleatheab 19', 'Gleatheab 20', 'Gleatheab 21', 'Gleatheab 22', 'Gleatheab 23', 'Gleatheab 24', 'Gleatheab 25', 'Gleatheab 26', 'Gleatheab 27', 'Gleatheab 28', 'Gleatheab 29', 'Gleatheab 30', 'Gleatheab 31', 'Gleatheab 32', 'Gleatheab 33', 'Gleatheab 34', 'Gleatheab 35', 'Gleatheab 36', 'Gleatheab 37', 'Gleatheab 38', 'Gleatheab 39', 'Gleatheab 40', 'Gleatheab 41', 'Gleatheab 42', 'Gleatheab 43', 'Gleatheab 44', 'Gleatheab 45', 'Gleatheab 46', 'Gleatheab",
    "```json\n{\n    \"solution\": \"df[df['Emotional_Range'] > 0.5]['Profession'].size\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Sex', 'Age', 'Height', 'Weight', '1RndAtt', '1RndDef', '1RndSpd', '1RndOvr', '2RndAtt', '2RndDef', '2RndSpd', '2RndOvr', '3RndAtt', '3RndDef', '3RndSpd', '3RndOvr', '4RndAtt', '4RndDef', '4RndSpd', '4RndOvr', '5RndAtt', '5RndDef', '5RndSpd', '5RndOvr', '6RndAtt', '6RndDef', '6RndSpd', '6RndOvr', '7RndAtt', '7RndDef', '7RndSpd', '7RndOvr', '8RndAtt', '8RndDef', '8RndSpd', '8RndOvr', '9RndAtt', '9RndDef', '9RndSpd', '9RndOvr', '10RndAtt', '10RndDef', '10RndSpd', '10RndOvr', '11RndAtt', '11RndDef', '11RndSpd', '11RndOvr', '12RndAtt', '12RndDef', '12RndSpd', '12RndOvr', '13RndAtt', '13RndDef', '13RndSpd', '13RndOvr', '14RndAtt', '14RndDef', '14RndSpd', '14RndOvr', '15RndAtt', '15RndDef', '15RndSpd', '15RndOvr', '16RndAtt', '16RndDef', '16RndSpd', '16RndOvr', '",
    "```json\n{\n    \"solution\": \"df.groupby('Profession')['Extraversion'].agg(['mean','count']).sort_values('count',ascending=False).head(1)['mean'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Age', 'Gender', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: What is the total number of purchase of household products in the past 2 years?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['Dt_Customer'] <= '2014-02-28') & (df['Dt_Customer'] >= '2013-01-01'), 'NumStorePurchases'].sum()\"\n}\n```\n\nInput DataFrame columns: ['x', 'y', 'country', 'year', 'life_expectancy', 'adult_mortality', 'infant_deaths', 'alcohol', 'percentage_expenditure', 'hepatitis_b', 'measles', 'bmi', 'under_five_deaths', 'polio', 'total_expenditure', 'diphtheria', 'hiv/aids', 'gdp', 'population', 'thinness__1-19_years', 'thinness_5-9_years', 'income_composition_of_resources', 'schooling']\nQuestion: What is the average HIV/AIDS percentage level in South Korea?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['country'] == 'South K",
    "```json\n{\n    \"solution\": \"df['Self-transcendence'].min()\"\n}\n```\n\nInput DataFrame columns: ['M', 'F', 'Ages', 'Location', 'You have', 'You are', 'Sometimes', 'Most of the time', 'Always', 'All of the time', 'Q2_1', 'Q2_2', 'Q2_3', 'Q2_4', 'Q2_5', 'Q2_6', 'Q2_7', 'Q2_8', 'Q2_9', 'Q2_10', 'Q2_11', 'Q2_12', 'Q2_13', 'Q2_14', 'Q2_15', 'Q2_16', 'Q2_17', 'Q2_18', 'Q2_19', 'Q2_20', 'Q2_21', 'Q2_22', 'Q2_23', 'Q2_24', 'Q2_25', 'Q2_26', 'Q2_27', 'Q2_28', 'Q2_29', 'Q2_30', 'Q2_31', 'Q2_32', 'Q2_33', 'Q2_34', 'Q2_35', 'Q2_36', 'Q2_37', 'Q2_38', 'Q2_39', 'Q2_40', 'Q2_41', 'Q2_42', 'Q2_43', 'Q2_44', 'Q2_45', 'Q2_46', 'Q2_47', 'Q2_48', 'Q2_49', 'Q2_50', 'Q2_51', 'Q2_52', 'Q2_53', 'Q2_54', 'Q2_55', 'Q2_56', 'Q2_57', 'Q2_58', 'Q2_59', 'Q2_60', 'Q2_61', 'Q2_62', 'Q2_6",
    "```json\n{\n    \"solution\": \"df.loc[df['Conscientiousness'].idxmax(), 'Profession']\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: What is the minimum Income value?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Income'].min()\"\n}\n```\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'b",
    "```json\n{\n    \"solution\": \"df.loc[df['Hedonism'].idxmin(), 'Profession']\"\n}\n```\n\nInput DataFrame columns: ['Academic', 'Business', 'Energy', 'Entertainment', 'Health', 'Social', 'Technology', 'n']\nQuestion: What is the technology category with the least amount of people having high energy?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Energy'] == 'High']['Technology'].value_counts().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: How many people within this dataset have a 'DiabetesPedigreeFunction' > 0.7?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.loc[df['DiabetesPedigreeFunction'] > 0.7, :].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['x', 'y', 'z', 'year', 'month', 'day', 'hour', 'timestamp']\nQuestion: How many days are there between September 1st, 2012 to October 28th, 2012?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return ((pd.to_datetime('2012-10-28') - pd.to_datetime('2012-09-01')) / pd.Timedelta(1, 'D')).astype(int)\"\n}\n```\n\nInput DataFrame columns: ['Year', 'Month', 'Day', 'WindDirDegrees', 'MaxSpeed', 'MaxGust', 'Precipitation', 'Events', 'WindDirDegrees', 'WindSpeed', 'Temperature']\nQuestion: What is the minimum wind speed in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['WindSpeed'].min()\"",
    "```json\n{\n    \"solution\": \"row = df.loc[df['Emotional_Range'].idxmax()]['Profession']\"\n}\n\nInput DataFrame columns: ['Profession', 'Openness', 'Conscientousness', 'Extraversion', 'Agreeableness', 'Emotional_Range', 'Conversation', 'Openness to Change', 'Hedonism', 'Self-enhancement', 'Self-transcendence', 'n']\nQuestion: Is there any profession with Conscientousness higher than 50?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['Conscientousness'].gt(50).any()\"\n}\n\nInput DataFrame columns: ['Rev', 'Date', 'Item', 'Type', 'Cost', 'Revenue', 'Profit']\nQuestion: Is sum of cost more than 3000?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['Cost'].sum() > 3000\"\n}\n\nInput DataFrame columns: ['Genre', 'Count']\nQuestion: What is the total count per Genre?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['Count'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Genre', 'Count']\nQuestion: Which genre has the highest count?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['Genre'].value_counts().idxmax()\"\n}\n\nInput DataFrame columns: ['Genre', 'Count']\nQuestion: What is the total count per Genre?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['Count'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Genre', 'Count']\nQuestion: Which genre has the highest count?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['Genre'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Rev', 'Date',",
    "```json\n{\n    \"solution\": \"df.groupby('Profession')['n'].count().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['profession', 'openness', 'conscientiousness', 'extraversion', 'agreeableness', 'emotional_range', 'conversation', 'openness to change', 'hedonism', 'self-enhancement', 'self-transcendence']\nQuestion: What is the profession with the greatest average extraversion?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('profession')['extraversion'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['income', 'political_knowledge', 'age', 'anticipatory_behavior', 'conscientiousness', 'extraversion', 'hontestiveness', 'openness', 'resiliance', 'self-consciousness']\nQuestion: What is the income of the person with the highest resiliance?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['resiliance'].idxmax(), 'income']\"\n}\n```\n\nInput DataFrame columns: ['Openness', 'Conscientiousness', 'Extroversion', 'Agreeableness', 'Neuroticism', 'Age', 'Gender', 'Education', 'Country', 'Ethnicity']\nQuestion: What is the education of the person with the highest levels of extraversion?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Extraversion'].idxmax(), 'Education']\"\n}\n```\n\nInput DataFrame columns: ['Country', 'City', 'Age', 'Gender', 'Education', 'Occupation', 'Income', 'Household_Size', 'Ethnicity']\nQuestion: What is the occupation of the person with the highest levels of extraversion, Education and Age?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df[['Extraversion', 'Education', 'Age']].idxmax(), 'Occupation']\"\n}\n```",
    "```json\n{\n    \"solution\": \"top3_openness = df.sort_values(by='Openness', ascending=False)['Profession'].nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Segment', 'RevenueCategory', 'Customer Type', 'Objective', 'Customer_Id', 'Amount', 'CustomerValue']\nQuestion: How many high-value customers were there?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"high_value_customers = df[(df['Customer Type'] == 'High-Value') & (df['Customer Value'] == '$1,000,000 and above')]['Customer_Id'].count()\"\n}\n```\n\nInput DataFrame columns: ['LotArea', 'LandContour', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating', 'HeatingQC', 'CentralAir', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual', 'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC', 'Fence', 'MiscFeature', 'MiscVal', '",
    "```json\n{\n    \"solution\": \"df.sort_values('Agreeableness').iloc[0:4]['Profession'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Car', 'Pet', 'Travel', 'Food', 'Health', 'Music', 'Style', 'Work', 'Touch', 'Diet', 'Sex', 'Improvement', 'Religion', 'Service', 'TV', 'Gifts', 'Dating', 'Children', 'Socializing', 'College', 'Shopping', 'Hobbies', 'Arts', 'Commercial', 'Sports', 'Healthy Living', 'Body', 'None', 'Others', 'Clothing', 'Entertainment', 'None', 'Others', 'Travel', 'Sports', 'None', 'Others', 'Travel', 'Nature', 'None', 'Others', 'Travel', 'Health', 'None', 'Others', 'Health', 'None', 'Others', 'Music', 'None', 'Others', 'Socializing', 'None', 'Others', 'Health', 'None', 'Others', 'Nature', 'None', 'Others', 'Music', 'None', 'Others', 'Sports', 'None', 'Others', 'Health', 'None', 'Others', 'Socializing', 'None', 'Others', 'Sports', 'None', 'Others', 'Music', 'None', 'Others', 'Sports', 'None', 'Others', 'Nature', 'None', 'Others', 'Socializing', 'None', 'Others', 'Music', 'None', 'Others', 'Travel', 'None', 'Others', 'Health', 'None', 'Others', 'Nature', 'None', 'Others', 'Travel', 'Health', 'None', 'Others', 'Socializing', 'None', 'Others', 'Work', 'None', 'Others', 'None', 'Others', 'Travel', 'Nature', 'None', 'Others', 'Health', 'None', 'Others', 'None', 'Others', 'Music', 'None', 'Others', 'Nature', 'None', 'Others', 'None', 'Others', 'Socializing', 'None', 'Others', 'Music', 'None', 'Others', 'Nature', 'None', 'Others', 'Travel', 'None', 'Others', '",
    "```json\n{\n    \"solution\": \"(df['Conversation'].sort_values(ascending=False).head().index.tolist())\"\n}\n```\n\nInput DataFrame columns: ['Domain', 'Raw_scale', 'Sum_scale', 'Avg_scale', 'n']\nQuestion: What is the cross-domain sum scale score for the Conversation domain?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"sum_of_avg_raw_scale/df['Domain'] == 'Conversation'\"\n}\n```\n\nInput DataFrame columns: ['X', 'Y', 'Age', 'Job', 'Marital', 'Education', 'Default', 'Balance', 'Housing', 'Loan', 'Contact', 'Day', 'Month', 'Duration', 'Campaign', 'pdays', 'Previous', 'poutcome', 'Ynew']\nQuestion: What is the (dis)similarity between the first two people from the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['X'].iloc[[0,1]].apply(euclidean)\",\n}\n```\n\nInput DataFrame columns: ['Time', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount', 'Class']\nQuestion: Which feature is most likely to have a negative correlation with the target variable?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.corr().iloc[:,[-1]].sort_values(by='Class', key=lambda x: abs(x)).index.tolist()[0]\"\n}\n```\n\nInput DataFrame columns: ['Time', 'V1', 'V2', 'V3",
    "```json\n{\n    \"solution\": \"df.sort_values('Self-enhancement').iloc[:2]['Profession'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Profession', 'Openness', 'Conscientousness', 'Extraversion', 'Agreeableness', 'Emotional_Range', 'Conversation', 'Openness to Change', 'Hedonism', 'Self-enhancement', 'Self-transcendence', 'n']\nQuestion: Which profession has the lowest Hedonism index?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Hedonism'].idxmin()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: What is the percentage of customers who have given 5 as score for income?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df['Z_Revenue'].eq(5).sum() / len(df)) * 100\"\n}\n```\n\nInput DataFrame columns: ['Assigned', 'In Progress', 'Complete', 'Dropped']\nQuestion: Which type of opportunity has the highest Percentage?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df.columns.str.contains('Perc')].idxmax(axis=1)\"\n}\n```\n\nInput DataFrame columns: ['Job title', 'Job Family', 'Job Function', 'Hiring Organization', 'Job Location', 'Job Posting Date",
    "```json\n{\n    \"solution\": \"df.groupby('Profession')['Openness to Change'].sum().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['prestige', 'admit']\nQuestion: Which prestige has the largest number of students admitted?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('prestige')['admit'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['S.No.', 'Gender', 'Age', 'Institute', 'CGPA', 'Placements']\nQuestion: What is the maximum CGPA scored by a female student?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Gender'] == 'Female', 'CGPA'].max()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Date', 'Gender', 'Age', 'Annual_Income', 'Spending_Score', 'Profession', 'Fees', 'Age_Group', 'Annual_Income_Group', 'Spending_Score_Group', 'Fees_Group']\nQuestion: What is the maximum annual income of a male student?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Gender'] == 'Male', 'Annual_Income'].max()\"\n}\n```\n\nInput DataFrame columns: ['region', 'tip', 'sex', 'smoker', 'day', 'time', 'size', 'day_num', 'time_num']\nQuestion: Do smokers pay more tips than non-smokers?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['smoker'].mean() > df[df['sex'] == 'Female']['smoker'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Time', 'state', 'Location', 'Wind_Direction', 'Wind_Speed', 'Visibility', 'Wind_Chill', 'Humidity', 'Pressure', 'Precipitation', 'Description', 'Temperature']\nQuestion: What is the maximum temperature recorded on January 21?",
    "```json\n{\n    \"solution\": \"df['Emotional_Range'].sort_values(ascending=True).head(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['JobID', 'Title', 'Company', 'CITY', 'Salary', 'Description', 'Requirements', 'Benefits', 'Seniority', 'Industry', 'Location', 'Contact']\nQuestion: Which Company has the most number of Job listings?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Company'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Location Description', 'Block', 'Street Name', 'Arrest', 'Domestic', 'District', 'Beat', 'FBI Code', 'Latitude', 'Longitude', 'Location']\nQuestion: Is there any incident on Jan 1st 2020?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Date'].eq('01/01/20').any()\"\n}\n```\n\nInput DataFrame columns: ['DAY', 'DATE', 'TIME', 'CRIMINAL TYPE', 'WEEKDAY', 'DISTRICT', 'NEIGHBORHOOD', 'WEAPON TYPE', 'LATITUDE', 'LONGITUDE', 'LOCATION']\nQuestion: Are there any arrests in the morning?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['TIME'].str.startswith('morning').any()\"\n}\n```\n\nInput DataFrame columns: ['FIPS', 'State', 'Area_Name', 'Population', 'World_Bank_Name', 'Series_Name', 'Series_Code', 'X1990', 'X1991', 'X1992', 'X1993', 'X1994', 'X1995', 'X1996', 'X1997', 'X1998', 'X1999', 'X2000', 'X2001', 'X2002', 'X2003', 'X200",
    "```json\n{\n    \"solution\": \"df['Extraversion'].nlargest(5).values.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Title', 'Age', 'Hair', 'Height', 'Weight', 'Religion', 'Sex', 'Socialite', 'Time', 'Art', 'Violence', 'Sexuality', 'Hunting', 'Gambling', 'Smoking', 'Alcohol', 'Drugs', 'Love', 'Politics', 'Absinthe', 'Chemistry', 'Friendship', 'Gardening', 'Wine', 'Gambling', 'Cigarettes', 'Literature', 'Sanitation', 'Writing', 'Baking', 'Cooking', 'Housework', 'Cars', 'Cars', 'Musical instruments', 'Lacquerware', 'Musical instruments', 'Jewelry', 'Comic books', 'Prehistoric art', 'Science Fiction', 'Love', 'Nudity', 'Gambling', 'Animals', 'Tobacco', 'Vintage clothing', 'Food', 'Fashion', 'Cars', 'Medicine', 'Music', 'Tobacco', 'Pets', 'Occupied land', 'Tobacco', 'Drugs']\nQuestion: Which professions are classified as Politics?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Religion'] == 'Politics']['Profession'].unique().tolist()\"\n}\n```\n\nInput DataFrame columns: ['Rank', 'Occupation', 'Attributes', 'Years Experience']\nQuestion: What is the occupation with the largest number of years of experience?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Years Experience'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Occupation', 'Experience', 'Pay', 'Duration_in_months']\nQuestion: What is the occupation with the highest average salary?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['Occupation'])['Pay'].mean().idxmax()\"",
    "```json\n{\n    \"solution\": \"df.sort_values('Self-transcendence')[:6]['Profession'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Age', 'Pre-Test Score', 'Post-Test Score', 'n']\nQuestion: Who has the highest pre-test score?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Pre-Test Score'].idxmax(), 'Name']\"\n}\n```\n\nInput DataFrame columns: ['ID', 'AddedOn', 'CaseID', 'JobTitleID', 'OwnerID', 'ManagerID', 'CaseType', 'CaseStatus', 'Priority', 'Severity', 'Category', 'SubCategory', 'SubSubCategory', 'Reference', 'Description', 'Solution', 'AdditionalNotes']\nQuestion: How many entries have the Case Type \"Incident\" and the Case Status \"Completed\"?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Case Type'] == 'Incident') & (df['Case Status'] == 'Completed')].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'word_count', 'flesch_kincaid_grade_level', 'coleman_liau_index', 'smog_index', 'flesch_reading_ease', 'automated_readability_index', 'dale_chall_readability_score', 'difficult_words', 'linsear_write_formula', 'gunning_fog', 'text_standard']\nQuestion: What is the range of values for the automatic readability index?\nExpected return type: dict[number,number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"manual_readability_index_min = df['automated_readability_index'].min()\\nmanual_readability_index_max = df['automated_readability_index'].max()\\nreturn {\\n    'min': manual_readability_index_min,\\n    'max': manual_readability_index_max,\\n}\"\n}\n\nInput DataFrame columns: ['a', 'b', 'c', 'd",
    "```json\n{\n    \"solution\": \"df[df['title'].str.contains('communication')]['title'].any()\"\n}\n```\n\nInput DataFrame columns: ['year', 'day', 'month', 'so2', 'so2_measure', 'so2_units', 'so2_index', 'no2', 'no2_measure', 'no2_units', 'no2_index', 'rspm', 'rspm_measure', 'rspm_units', 'rspm_index', 'spm', 'spm_measure', 'spm_units', 'spm_index', 'co', 'co_measure', 'co_units', 'co_index', 'pm2_5', 'pm2_5_measure', 'pm2_5_units', 'pm2_5_index', 'pm10', 'pm10_measure', 'pm10_units', 'pm10_index', 'vocs', 'vocs_measure', 'vocs_units', 'vocs_index', 'nox', 'nox_measure', 'nox_units', 'nox_index', 'nh3', 'nh3_measure', 'nh3_units', 'nh3_index', 'ozone', 'ozone_measure', 'ozone_units', 'ozone_index', 'qc_so2', 'qc_no2', 'qc_rspm', 'qc_so2_flag', 'qc_no2_flag', 'qc_rspm_flag', 'qc_spm', 'qc_spm_flag', 'qc_pm2_5', 'qc_pm10', 'qc_pm2_5_flag', 'qc_pm10_flag', 'qc_vocs', 'qc_co', 'qc_vocs_flag', 'qc_co_flag', 'qc_nh3', 'qc_nh3_flag']\nQuestion: What is the mean concentration of Nitrogen Dioxide (NO2) in the area?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['no2'].mean()\"\n}\n```\n\nInput DataFrame columns: ['price', 'last_review', '",
    "```json\n{\n    \"solution\": \"return df['organization'].eq('IBM').any()\"\n}\n```\n\nInput DataFrame columns: ['avg_rating', 'avg_vote', 'votes', 'budget', 'usa_gross_income', 'worlwide_gross_income', 'metascore', 'reviews_from_users', 'reviews_from_critics', 'title', 'year', 'genre', 'director', 'country', 'language', 'writer', 'actor1', 'actor2', 'actor3', 'actor4', 'actor5', 'budget_production_feature', 'budget_production_film', 'budget_production_ga', 'budget_distribution', 'budget_release', 'runtime', 'production_company', 'production_country', 'production_companies_count', 'production_countries_count', 'srt_id', 'srt_title', 'srt_year', 'srt_director', 'srt_genres', 'srt_cast', 'srt_company', 'srt_country', 'srt_language', 'srt_writer', 'srt_actors', 'srt_budget_production_feature', 'srt_budget_production_film', 'srt_budget_production_ga', 'srt_budget_distribution', 'srt_budget_release', 'srt_runtime', 'srt_production_company', 'srt_production_country', 'srt_production_companies_count', 'srt_production_countries_count', 'srt_votes', 'srt_avg_rating', 'srt_avg_vote', 'srt_votes_count', 'amount_nominations', 'amount_wins', 'release_date_0', 'release_date_1', 'verified_mps', 'votes_users', 'votes_users_reviews', 'votes_users_mentions', 'votes_users_reviews_mentions', 'votes_critics', 'votes_critics_reviews', 'votes_critics_reviews_mentions', 'votes_critics_mentions', 'votes_critics_reviews_mentions_percent', 'votes_users_reviews_mentions_percent', 'votes_critics_mentions_percent', 'votes_users_mentions_percent', 'votes",
    "```json\n{\n    \"solution\": \"df['abstract'].str.lower().str.contains('software').any()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'title', 'contentx', 'related', 'majorcat', 'category', 'source', 'date', 'pubdate', 'newsfeed', 'id', 'poster', 'user', 'location', 'topicid', 'comments', 'comment_count', 'count', 'content', 'contents']\nQuestion: Could you find a news article mentioning the word 'Apple'?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['content'].str.lower().str.contains('apple').any()\"\n}\n```\n\nInput DataFrame columns: ['name', 'short_name', 'country', 'city', 'latitude', 'longitude', 'population', 'timezone_offset', 'timezone_name', 'type', 'continent', 'currency_code', 'currency_name', 'currency_symbol', 'iso_3166_2', 'name_with_pop', 'capital', 'states']\nQuestion: What is the population of the country with the largest population?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['population'].max()\"\n}\n```\n\nInput DataFrame columns: ['title', 'author', 'text', 'summary']\nQuestion: Does the summary contain the word 'disgust'?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['summary'].str.lower().str.contains('disgust').any()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'title', 'contentx', 'related', 'majorcat', 'category', 'source', 'date', 'pubdate', 'newsfeed', 'id', 'poster', 'user', 'location', 'topicid', 'comments', 'comment_count', 'count', 'content', 'contents']\nQuestion: Which news article has a title containing the word 'Uber'?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['title'][df",
    "```json\n{\n    \"solution\": \"df['target'] == 'design'\"\n}\n```\n\nInput DataFrame columns: ['D_id', 'D_type', 'D_year', 'D_title', 'D_author', 'D_venue', 'D_journal', 'D_volume', 'D_issue', 'D_pages', 'D_year_pub', 'D_cited', 'D_cluster_id', 'D_ref_count', 'D_top_venues', 'D_top_year', 'D_top_authors', 'D_top_journal', 'D_pub_venue', 'D_pub_year', 'P_id', 'P_name', 'P_title', 'P_author', 'P_venue', 'P_journal', 'P_volume', 'P_issue', 'P_pages', 'P_year_pub', 'P_cited', 'P_cluster_id', 'P_ref_count', 'P_top_venues', 'P_top_year', 'P_top_authors', 'P_top_journal', 'P_pub_venue', 'P_pub_year']\nQuestion: How many distinct journal titles do you have?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['D_journal'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'title', 'author', 'venue', 'journal', 'volume', 'issue', 'pages', 'year_pub', 'cited', 'cluster_id', 'ref_count', 'top_venues', 'top_year', 'top_authors', 'top_journal', 'pub_venue', 'pub_year']\nQuestion: What is the maximum value of the 'cited' column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['cited'].max()\"\n}\n```\n\nInput DataFrame columns: ['id_d', 'date_d', 'type_d', 'cluster_id', 'word', 'weight_d', 'id_p', 'date_p', 'type_p', 'cluster_id_p",
    "```json\n{\n    \"solution\": \"len(df['organization'].unique())\"\n}\n```\n\nInput DataFrame columns: ['age', 'name', 'class', 'sex', 'survived']\nQuestion: How many people of age 30 died?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['age']==30]['survived'].sum()\"\n}\n```\n\nInput DataFrame columns: ['year', 'month', 'path', 'image', 'Number', 'Name', 'Latitude', 'Longitude', 'Year', 'Month']\nQuestion: How many images are there in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['image'].count()\"\n}\n```\n\nInput DataFrame columns: ['2010-01-04', 'Finland', 'Kadu', '2010-01-04', 'Finland', 'Ristiina', '49.212838', '28.640258', '2010-01-04', 'Finland', 'Finland', '2010-01-04', 'Finland', 'Saint Petersburg', '2010-01-04', 'Finland', 'Tikkurila', '49.160649', '28.328686', '2010-01-04', 'Finland', 'Kymppi', '49.019066', '28.289086', '2010-01-04', 'Finland', 'Valkeakoski', '49.113628', '28.472181', '2010-01-04', 'Finland', 'Loviisa', '49.285461', '28.664516', '2010-01-04', 'Finland', 'Kokkola', '49.21",
    "```json\n{\n    \"solution\": \"df['num_claims'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Start', 'Start Latitude', 'Start Longitude', 'End', 'End Latitude', 'End Longitude', 'Bike ID', 'Member Type', 'Duration', 'Distance']\nQuestion: Is there any trip that started outside the range of New York City?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Start Latitude'] < 40.50) | (df['Start Latitude'] > 41.00) | (df['Start Longitude'] < -74.17) | (df['Start Longitude'] > -73.70)].any().any()\"\n}\n```\n\nInput DataFrame columns: ['gender', 'age', 'person_id', 'age2', 'age3', 'age4', 'person_type', 'fam_id', 'home_ownership', 'home_ownership2', 'person_id2', 'person_id3', 'person_id4', 'person_id5', 'person_id6', 'person_id7', 'person_id8', 'person_id9', 'person_id10', 'person_id11', 'person_id12', 'person_id13', 'person_id14', 'person_id15', 'person_id16', 'person_id17', 'person_id18', 'person_id19', 'person_id20', 'person_id21', 'person_id22', 'person_id23', 'person_id24', 'person_id25', 'person_id26', 'person_id27', 'person_id28', 'person_id29', 'person_id30', 'person_id31', 'person_id32', 'person_id33', 'person_id34', 'person_id35', 'person_id36', 'person_id37', 'person_id38', 'person_id39', 'person_id40', 'person_id",
    "```json\n{\n    \"solution\": \"df['num_claims'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'related_factors', 'score']\nQuestion: What are the factors with the highest number of papers?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('related_factors')['id'].nunique().sort_values(ascending=False).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['credit_score', 'first_name', 'last_name', 'primary_phone_number', 'birth_date', 'ssn', 'street_address', 'city', 'state', 'zip_code', 'customer_id', 'monthly_income', 'number_of_open_accounts', 'credit_limit', 'total_credit_cards', 'number_of_credit_lines', 'current_balance', 'minimum_payment', 'revolving_balance']\nQuestion: Which customer has the highest balance?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['current_balance'].idxmax(), ['first_name', 'last_name', 'current_balance']]\"\n}\n```\n\nInput DataFrame columns: ['key', 'S', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S_RATIO', 'A_RATIO', 'B_RATIO', 'C_RATIO', 'D_RATIO', 'E_RATIO', 'F_RATIO', 'G_RATIO', 'H_RATIO', 'I_RATIO', 'J_RATIO', 'K_RATIO', 'L_RATIO', 'M_RATIO', 'N_RATIO', 'O_RATIO', 'P_RATIO', 'Q_RATIO', 'R_RATIO', 'SCORE', 'DATE', 'TIME', 'id', 'S_RATIO_CHANGED', 'A_RATIO_",
    "```json\n{\n    \"solution\": \"return df[df['type'] == 'utility']['type'].count()\"\n}\n```\n\nInput DataFrame columns: ['num_claims', 'organization', 'kind', 'type', 'graphext_cluster', 'date', 'abstract', 'title', 'lang', 'abstract_gx_ADJ', 'grp_title', 'abstract_gx_products', 'abstract_gx_organizations', 'abstract_gx_NOUN', 'abstract_gx_ngrams', 'id', 'target', 'weight', 'x', 'y']\nQuestion: What is the most common type of patent?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['type'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['Uber Trips', 'Time', 'Name', 'Country', 'Purpose', 'Distance in KM', 'Time in Seconds', 'Location', 'be_lat', 'be_lng', 'af_lat', 'af_lng', 'city', 'zipcode', 'speed', 'address', 'text', 'tweet_id', 'created_at']\nQuestion: What is the average speed of the uber trips?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['speed'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'landmark', 'location.lat', 'location.lng', 'name', 'address', 'neighborhoods', 'postalCode', 'cc', 'city', 'state', 'country', 'formattedAddress', 'crossStreet', 'neighborhood', 'reference', 'distance']\nQuestion: What is the most common landmark in Los Angeles?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['landmark'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['Landmark', 'Latitude', 'Longitude']\nQuestion: How many landmarks does LA have?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['Landmark'].count()\"\n}",
    "```json\n{\n    \"solution\": \"df[df['num_claims'].idxmax()]['organization']\"\n}\n```\n\nInput DataFrame columns: ['number_of_patents', 'organization', 'kind', 'type', 'graphext_cluster', 'date', 'abstract', 'title', 'lang', 'abstract_gx_ADJ', 'grp_title', 'abstract_gx_products', 'abstract_gx_organizations', 'abstract_gx_NOUN', 'abstract_gx_ngrams', 'id', 'target', 'weight', 'x', 'y']\nQuestion: How many different kinds of patents are there?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df['kind'].unique().tolist())\"\n}\n```\n\nInput DataFrame columns: ['number_of_patents', 'organization', 'kind', 'type', 'graphext_cluster', 'date', 'abstract', 'title', 'lang', 'abstract_gx_ADJ', 'grp_title', 'abstract_gx_products', 'abstract_gx_organizations', 'abstract_gx_NOUN', 'abstract_gx_ngrams', 'id', 'target', 'weight', 'x', 'y']\nQuestion: What is the average number of patents for the same organization?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['number_of_patents'].mean()\"\n}\n```\n\nInput DataFrame columns: ['num_claims', 'organization', 'kind', 'type', 'graphext_cluster', 'date', 'abstract', 'title', 'lang', 'abstract_gx_ADJ', 'grp_title', 'abstract_gx_products', 'abstract_gx_organizations', 'abstract_gx_NOUN', 'abstract_gx_ngrams', 'id', 'target', 'weight', 'x', 'y']\nQuestion: Which patent organization has the highest number of claims?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['num_claims'].idxmax(), 'organization']\"\n}\n```\n\nInput DataFrame columns: ['num_claims', '",
    "```json\n{\n    \"solution\": \"df['kind'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['node_id', 'subject_id', 'subject_type', 'subject_name', 'subject_count', 'object_id', 'object_type', 'object_name', 'object_count', 'predicate', 'edge_id', 'edge_type', 'edge_name', 'edge_count', 'source', 'target']\nQuestion: Which types of subjects are more frequent than other types?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('subject_type').subject_count.sum().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['node_id', 'subject_id', 'subject_type', 'subject_name', 'subject_count', 'object_id', 'object_type', 'object_name', 'object_count', 'predicate', 'edge_id', 'edge_type', 'edge_name', 'edge_count', 'source', 'target', 'description']\nQuestion: Which types of edges are more common?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('edge_type').edge_count.sum().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['COVID-19', 'ASTHMA', 'FLU', 'BREAST CANCER', 'LAND', 'WHEECH', 'NON-CANCER', 'LUNG', 'PNEUMONIA', 'TUBERCULOSIS', 'COPD', 'CHRONIC BLOOD LEVEL', 'PARALYSIS', 'CARDIAC', 'CANCER', 'OTHER', 'BLOOD', 'PROSTATE', 'CROHN DISEASE', 'BONE', 'DIABETES', 'CHRONIC KIDNEY DISEASE', 'NERVOUS SYSTEM', 'HIV', 'HEART FAILURE', 'MIGRAINE', 'HEART', 'HYPERTENSION', 'STEREOTYPIC', 'BLOOD LOSS', 'TECHNI",
    "```json\n{\n    \"solution\": \"df['lang'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Rank', 'Name', 'Age', 'Country', 'Overall', 'Potential', 'Preferred Foot', 'International Reputation', 'Weak Foot', 'Skill Moves', 'Work Rate', 'Body Type', 'Real Face', 'Position', 'Jersey Number', 'Joined', 'Loaned From', 'Contract Valid Until', 'Height', 'Weight', 'LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB', 'Release Clause']\nQuestion: How many players have the name 'Alisson'?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Name'] == 'Alisson']['Name'].count()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What is the survival rate for passenger class 3?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Pclass'] == 3]['Survived'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'date', 'region', 'application', 'text', 'user_id', 'created_at', 'verified', 'followers_count', 'friends_count', 'listed_count', 'favourites_count', 'statuses_count', 'lang', 'source', 'coordinates', 'place_type', 'place_name', 'place_full_name', 'place_country_code', 'place_country', 'hashtags', 'cashtags', 'link', 'urls', 'name', 'user_name', 'user_screen_name',",
    "```json\n{\n    \"solution\": \"df['graphext_cluster'].value_counts().idxmax()\"\n}\n```\n\n\nInput DataFrame columns: ['id', 'name', 'host_id', 'host_name', 'neighbourhood_group', 'neighbourhood', 'latitude', 'longitude', 'room_type', 'price', 'minimum_nights', 'number_of_reviews', 'last_review', 'reviews_per_month', 'calculated_host_listings_count', 'availability_365']\nQuestion: What are the top 5 room types which have the highest price?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('price', ascending = False).groupby('room_type')['price'].head(1).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['day', 'time', 'subject', 'from', 'to', 'main_text', 'date', 'hasSpam', 'isSpam', 'isSpamConfidence']\nQuestion: For what subject did the sender send the most spam email?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('hasSpam', ascending = False).groupby('subject')['subject'].head(1).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Season', 'Date', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG', 'FTR', 'HTHG', 'HTAG', 'HTR', 'Referee', 'HS', 'AS', 'HST', 'AST', 'HF', 'AF', 'HC', 'AC', 'HY', 'AY', 'HR', 'AR', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'WHH', 'WHD', 'WHA', 'VCH', 'VCD', 'VCA', 'Bb1X2', 'BbMxH', 'BbAvH', 'BbMxD",
    "```json\n{\n    \"solution\": \"df.groupby('organization')['id'].nunique().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Square Feet', 'Residential Units', 'Apartments', 'Land Area', 'Year Built', 'Neighborhood', 'Zip Code', 'Council District', 'Residential Building (Apartment) Age', 'Number of Buildings', 'Building Area', 'Exterior Construction Type', 'Site EUI (kBtu/ft^2)', 'ENERGY STAR Score', 'Weather Normalized Site EUI (kBtu/ft^2)', 'Weather Normalized Source EUI (kBtu/ft^2)', 'Source EUI (kBtu/ft^2)', 'Weather Normalized Site Electricity Intensity (kWh/ft^2)', 'Weather Normalized Site Natural Gas Intensity (therms/ft^2)', 'Weather Normalized Site Water Intensity (gal/ft^2)', 'Electricity (kBtu)', 'Natural Gas (therms)', 'District Cooling (kBtu)', 'District Heating (kBtu)', 'Water Use (All Water Sources) (kgal)', 'Weather Normalized Site Electricity (kWh)', 'Weather Normalized Site Natural Gas (therms)', 'Weather Normalized Site Water (gal)', 'Weather Normalized Source Electricity (kWh)', 'Weather Normalized Source Natural Gas (therms)', 'Weather Normalized Source Water (gal)', 'Total GHG Emissions (Metric Tons CO2e)', 'Direct GHG Emissions (Metric Tons CO2e)', 'Indirect GHG Emissions (Metric Tons CO2e)', 'Total GHG Emissions Per Floor Area (Metric Tons CO2e/ft^2)', 'Direct GHG Emissions Per Floor Area (Metric Tons CO2e/ft^2)', 'Indirect GHG Emissions Per Floor Area (Metric Tons CO2e/ft^2)', 'Building Orientation', 'Primary Property Type - Self Selected', 'Neighborhood  - Self Selected', 'United States Postal Service Zone', 'Source EUI (kBtu/ft^2) - building level', 'Weather Normalized Site EUI (kBtu/ft^2) - building level', 'Weather Normalized Source EUI (",
    "```json\n{\n    \"solution\": \"df['kind'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['gender', 'race_ethnicity_combined', 'parent_education_level', 'lunch', 'test_preparation_course', 'math_score', 'reading_score', 'writing_score', 'parental_level_of_education', 'race/ethnicity', 'test_preparation_course', 'race_ethnicity_combined', 'parental_level_of_education', 'race/ethnicity', 'math_score', 'reading_score', 'writing_score', 'parental_level_of_education']\nQuestion: What is the average reading score of Asian-Pacific Islander students?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['race_ethnicity_combined'].isin(['Asian-Pacific Islander']), 'reading_score'].mean()\"\n}\n```\n\nInput DataFrame columns: ['education', 'lunch', 'test_preparation_course', 'parental level of education', 'race/ethnicity', 'parental level of education', 'race/ethnicity', 'gender', 'math score', 'reading score', 'writing score', 'lunch', 'parental level of education', 'race/ethnicity', 'parental level of education', 'race/ethnicity', 'gender', 'math score', 'reading score', 'writing score', 'lunch', 'parental level of education', 'race/ethnicity', 'parental level of education', 'race/ethnicity', 'gender', 'math score', 'reading score', 'writing score']\nQuestion: Which race has the highest average math score?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('race/ethnicity').agg('math score').mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['age', 'race/ethnicity_combined', 'parent_education_level', 'test_preparation_course', 'math_score', 'reading_score', 'writing_",
    "```json\n{\n    \"solution\": \"df['kind'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'PassengerId']\nQuestion: How many men above the age of 50 are in the test set?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[((df.Age > 50) & (df.Sex == 'male'))])\"\n}\n```\n\nInput DataFrame columns: ['id', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'weight_kg', 'is_legendary', 'generation', 'name', 'type1', 'type2', 'abilities', 'base_total', 'against_bug', 'against_dark', 'against_dragon', 'against_electric', 'against_fairy', 'against_fight', 'against_fire', 'against_flying', 'against_ghost', 'against_grass', 'against_ground', 'against_ice', 'against_normal', 'against_poison', 'against_psychic', 'against_rock', 'against_steel', 'against_water', 'against_fight', 'against_psychic', 'against_ghost', 'against_dark', 'against_steel', 'against_grass', 'against_fire', 'against_ice', 'against_fight', 'against_flying', 'against_rock', 'against_poison', 'against_ground', 'against_dragon', 'against_fairy']\nQuestion: How many Pok\u00e9mon have a speed greater than 150?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['speed'] > 150].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'hp', 'attack',",
    "```json\n{\n    \"solution\": \"df.groupby('graphext_cluster')['graphext_cluster'].count().nsmallest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['total_cases', 'new_cases', 'total_deaths', 'new_cases_per_million', 'new_tests', 'total_tests', 'new_tests_per_thousand', 'tests_units', 'population', 'population_density', 'median_age', 'aged_70_older', 'aged_65_older', 'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate', 'diabetes_prevalence', 'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand', 'life_expectancy', 'human_development_index']\nQuestion: Is there a correlation between life expectancy and cardiovasc_death_rate?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df[df['life_expectancy'].notna()]['life_expectancy'].corr(df['cardiovasc_death_rate'].dropna()) > 0\"\n}\n```\n\nInput DataFrame columns: ['sentiment', 'topic', 'source', 'pre_text', 'text']\nQuestion: How many articles from the topic 'coronavirus' have a sentiment score of more than 0.5?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df[(df['topic'] == 'coronavirus') & (df['sentiment'] > 0.5)].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: Which passenger has the most number of siblings/spouses on board?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{",
    "```json\n{\n    \"solution\": \"df[['id', 'num_claims']].groupby('id').first().sort_values('num_claims', ascending=False)['num_claims'].head(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['label', 'message']\nQuestion: What are the most common words in the \"Call Us\" messages?\nExpected return type: category\n```json\n{\n    \"solution\": \".join(df[df['label'] == 'call-us']['message'].str.split(' ').explode().value_counts().head(4).index.tolist())\"\n}\n```\n\nInput DataFrame columns: ['Number', 'Broken', 'GivenName', 'FamilyName', 'Birthday', 'AddressBook']\nQuestion: What is the average number of broken items?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Broken'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Person', 'Birthday', 'AddressBook']\nQuestion: Is there any birthday with one day difference between it and the day after?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Birthday'].apply(lambda x: x.day - pd.to_datetime(x.date()).day).eq(1).any()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Gender', 'Age', 'Height', 'Weight', 'BMI', 'Blood_Type', 'Drinking', 'Smoking', 'Alcohol', 'Physical_Activity', 'Sleeping_Hours', 'Calories_Consumed']\nQuestion: Are there any records with BMI above 35?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['BMI'].gt(35).any()\"\n}\n```\n\nInput DataFrame columns: ['x_coordinate', 'y_coordinate', 'latitude', 'longitude', 'created_date', 'closed_date']\nQuestion: What are the longitude and latitude of the most closed tickets?\nExpected return type: tuple(number, number)\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df",
    "```json\n{\n    \"solution\": \"df.groupby('id')['num_claims'].sum().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['HasDetections', 'ProductName', 'EngineVersion', 'AppVersion', 'OpSystemVer', 'IsSxsPassiveMode', 'AVProductStatesIdentifier', 'AVProductsInstalled', 'AVProductsEnabled', 'HasTpm', 'CountryIdentifier', 'OrganizationIdentifier', 'Platform', 'Processor', 'OsVer', 'OsBuild', 'OsSuite', 'OsPlatformSubRelease', 'OsBuildLab', 'SkuEdition', 'IsProtected', 'AutoSampleOptIn', 'PuaMode', 'SMode', 'IeVerIdentifier', 'SmartScreen', 'Firewall', 'UacLuaenable', 'Census_MDC2FormFactor', 'Census_DeviceFamily', 'Census_OEMNameIdentifier', 'Census_OEMModelIdentifier', 'Census_ProcessorCoreCount', 'Census_ProcessorManufacturerIdentifier', 'Census_ProcessorModelIdentifier', 'Census_ProcessorClass', 'Census_PrimaryDiskTotalCapacity', 'Census_PrimaryDiskTypeName', 'Census_SystemVolumeTotalCapacity', 'Census_HasOpticalDiskDrive', 'Census_TotalPhysicalRAM', 'Census_ChassisTypeName', 'Census_InternalPrimaryDiagonalDisplaySizeInInches', 'Census_InternalPrimaryDisplayResolutionHorizontal', 'Census_InternalPrimaryDisplayResolutionVertical', 'Census_PowerPlatformRoleName', 'Census_InternalBatteryType', 'Census_InternalBatteryNumberOfCharges', 'Census_OSVersion', 'Census_OSArchitecture', 'Census_OSBranch', 'Census_OSBuildNumber', 'Census_OSBuildRevision', 'Census_OSEdition', 'Census_OSSkuName', 'Census_OSInstallTypeName', 'Census_OSInstallLanguageIdentifier', 'Census_OSUILocaleIdentifier', 'Census_OSWUAutoUpdateOptionsName', 'Census_IsPortableOperatingSystem', 'Census_GenuineStateName', 'Census_ActivationChannel', 'Census_IsFlightingInternal', 'Census_IsFlightsDisabled', 'Census_FlightRing', 'Census_ThresholdOptIn', '",
    "```json\n{\n    \"solution\": \"return df.groupby('kind')['num_claims'].median().tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'state', 'area', 'pop2000', 'pop2008', 'pop2013', 'pop2017']\nQuestion: What are the states with the highest population growth between 2000 and 2017?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return (df['pop2017'] / df['pop2000'] - 1).nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['date', 'name', 'birth_count', 'death_count', 'gender', 'age']\nQuestion: Which name has the largest difference between the number of births and deaths?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return (df['birth_count'] - df['death_count']).abs().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Year', 'Month', 'Date', 'Class', 'Segment', 'Length', 'Width', 'Height', 'Girth', 'Pelvic', 'Breast', 'Thigh', 'Knee', 'Ankle', 'Biceps', 'Forearm', 'Wrist', 'Surf', 'Slope', 'Weight', 'Rings', 'Shape']\nQuestion: Which of the following has the largest surface area?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Surf'] == df['Surf'].max(), 'Shape'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['t_0', 'a_0', 't_1', 'a_1', 't_end', 'a_end']\nQuestion: Is the length of the pendulum in the first 1/10th of its motion period greater than the length of the pendulum in the last 1/10th of its motion period?\nExpected return type: boolean\n\nCode that calculates the answer:",
    "```json\n{\n    \"solution\": \"list(df['id'].tail(3))\"\n}\n```\n\nInput DataFrame columns: ['time_in', 'time_out', 'distance_traveled', 'speed_traveled', 'route_to_work', 'from_work', 'dist_from_work', 'w2_total', '_w1_total', 'dist_from_home', 'route_to_home', 'employer', 'age', 'gender', 'location', 'distance_to_work', 'additional_distance_to_work', 'city', 'income', 'miles_per_hour', 'engine', 'vehicle_type', 'car_type', 'car_value', 'car_use', 'car_age', 'car_willingness', 'car_insurance', 'house', 'children', 'education', 'auto_insurance', 'pets', 'car_loan', 'days_since_last_claim', 'days_since_last_policy_renewal', 'accident_count', 'total_claim_count', 'accident_record_not_recorded', 'accident_type', 'accident_severity', 'incident_state', 'incident_city', 'incident_location', 'incident_hour_of_the_day', 'number_of_vehicles_involved', 'property_damage', 'bodily_injuries', 'witnesses', 'police_report_available', 'total_claim_amount', 'injury_claim', 'property_claim', 'vehicle_claim', 'auto_make', 'auto_model', 'auto_year', 'fraud_reported']\nQuestion: Which driver has the highest average speed traveled?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('driver_id')['speed_traveled'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Day', 'Year', 'Month', 'Day of Week', 'Total', 'K-U', 'AT&T', 'T-Mobile', 'Sprint', 'Verizon', 'Other']\nQuestion: Which company had the highest percent change in the phone company's total?\nExpected return type",
    "```json\n{\n    \"solution\": \"df[df['user_favourites_count'].idxmax()]['user_verified'].all()\"\n}\n```\n\nInput DataFrame columns: ['route', 'name', 'description', 'difficulty', 'location', 'length', 'ascent', 'descent', 'high', 'low', 'star_rating', 'average_rating', 'rating_count', 'location_lat', 'location_lng', 'url']\nQuestion: Which route has the highest number of ascents?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['ascent'].idxmax(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['rank', 'category', 'target', 'source', 'pointScore']\nQuestion: What is the average point score in the overall category?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['pointScore'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'text', 'description', 'link', 'rank', 'tipe', 'category', 'target']\nQuestion: Which of the following categories is the least represented?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['category'].value_counts().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['M4b57284511', '4b57284511', 'M4b57284512', '4b57284512', 'M4b57284513', '4b57284513', 'M4b57284514', '4b57284514', 'M4b57284515', '4b57284515', 'M4b57284516', '4b57284516', 'M4b57284517', '4b57284517', 'M4b57",
    "```json\n{\n    \"solution\": \"df['user_favourites_count<gx:number>'].max() == df['retweets<gx:number>'].max()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: How many customers do not have any purchase made by them?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df.loc[:, 'MntWines':'Z_Revenue'].sum(axis=1) == 0].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count",
    "```json\n{\n    \"solution\": \"return df['mention_names'].explode().value_counts().idxmax() == df['rp_user_name'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: Is there any female passenger who survived who was over 40?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.loc[(df['Sex'] == 'female') & (df['Survived'] == 1) & (df['Age'] > 40), 'Survived'].any()\"\n}\n```\n\nInput DataFrame columns: ['month', 'sex', 'age', 'state', 'count']\nQuestion: What is the age of the youngest male in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['sex'] == 'M') & (df['count'] == df['count'].max()), 'age'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['published', 'country', 'state', 'gender', 'age', 'race', 'smokes', 'essay0', 'essay1', 'essay2', 'essay3', 'essay4', 'essay5', 'essay6', 'essay7', 'essay8', 'essay9']\nQuestion: What is the number of unique words in essay1?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['essay1'].str.split().explode().nunique()\"\n}\n```\n\nInput DataFrame columns: ['text_clean', 'target', 'sentiment', 'text_normalized', 'keyword', 'location', 'airline_sentiment', 'airline_sentiment_gold', 'name', 'neg', 'neu', 'pos', 'compound', 'index', 'is_retweet', 'ret",
    "```json\n{\n    \"solution\": \"df['retweets'].max() == df.loc[df['retweets'].idxmax(), 'replies']\"\n}\n```\n\nInput DataFrame columns: ['age_group', 'sex', 'marital_status', 'income_group', 'race_ethnicity', 'prevalent_stroke', 'prevalent_hypertension', 'diabetes_mellitus', 'smoking_status', 'avg_glucose_level', 'bmi', 'heart_disease', 'work_type', 'Residence_type', 'ever_married', 'work_type_Private', 'work_type_Govt_job', 'work_type_Never_worked', 'work_type_Self-employed', 'work_type_children', 'Residence_type_Urban', 'Residence_type_Rural', 'smoking_status_smokes', 'smoking_status_form', 'smoking_status_unknown', 'smoking_status_never smoked', 'stroke']\nQuestion: Assuming stroke is the case_id, how many strokes are considered as low risk and high risk?\nExpected return type: 2-tuple[number, number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['stroke'].value_counts().tolist()\"\n}\n```\n\nInput DataFrame columns: ['Feature 1', 'Feature 2', 'Feature 3', 'Feature 4', 'Feature 5', 'Feature 6', 'Feature 7', 'Feature 8', 'Feature 9', 'Feature 10', 'Feature 11', 'Feature 12', 'Feature 13', 'Feature 14', 'Feature 15', 'Feature 16', 'Feature 17', 'Feature 18', 'Feature 19', 'Feature 20', 'Feature 21', 'Feature 22', 'Feature 23', 'Feature 24', 'Feature 25', 'Feature 26', 'Feature 27', 'Feature 28', 'Feature 29', 'Feature 30', 'Feature 31', 'Feature 32',",
    "```json\n{\n    \"solution\": \"df['user_followers_count<gx:number>'].max()\"\n}\n```\n\nInput DataFrame columns: ['n_clicks', 'n_impressions', 'impressions']\nQuestion: Does the number of impressions stay the same across all the ads?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['impressions'].nunique() == 1\"\n}\n```\n\nInput DataFrame columns: ['id', 'user', 'po', 'st', 'se', 'af', 'at', 'ad', 'cr', 'ci', 'ti', 'di', 'ni', 'dn', 'tm', 'ca', 'ed', 'pu']\nQuestion: What is the highest number of purchases made by the user with the ID 1700657?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['user'] == '1700657']['pu'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'user', 'po', 'st', 'se', 'af', 'at', 'ad', 'cr', 'ci', 'ti', 'di', 'ni', 'dn', 'tm', 'ca', 'ed', 'pu']\nQuestion: Which country has the most purchases made by the user with the ID 1700657?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['user'] == '1700657']['ad'].mode()[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'user', 'po', 'st', 'se', 'af', 'at', 'ad', 'cr', 'ci', 'ti', 'di', 'ni', 'dn', 'tm', 'ca', 'ed', 'pu']\nQuestion: How many purchases were made by the user with the ID 1700657 in the country Norway?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['",
    "```json\n{\n    \"solution\": \"df.groupby('author_id')['favorites'].sum()[df.groupby('author_id')['favorites'].sum() > 10000].count()\"\n}\n```\n\nInput DataFrame columns: ['trip_id', 'pickup_time', 'dropoff_time', 'trip_seconds', 'trip_miles', 'pickup_centroid_latitude', 'pickup_centroid_longitude', 'dropoff_centroid_latitude', 'dropoff_centroid_longitude', 'trip_total', 'fare_amount', 'extra', 'mta_tax', 'improvement_surcharge', 'tip_amount', ' tolls_amount', 'ehail_fee', 'payment_type', 'trip_type', 'store_and_fwd_flag', 'rate_code', 'surcharge', 'total_amount', 'pulocationid', 'dolocationid', 'passenger_count', 'congestion_surcharge']\nQuestion: How much money did the company make from trips in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['total_amount'].sum()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]",
    "```json\n{\n    \"solution\": \"df['retweets'].max()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'screen_name', 'name', 'created_at', 'text', 'hashtags', 'source', 'is_quote_status', 'retweet_count', 'favorite_count', 'reply_count', 'quote_count', 'favorited', 'retweeted', 'user_id', 'user_created_at', 'user_name', 'user_screen_name', 'user_verified', 'user_lang', 'user_location', 'user_followers_count', 'user_friends_count', 'user_listed_count', 'user_favourites_count', 'user_statuses_count', 'user_description', 'user_verified', 'user_followers_count', 'user_friends_count', 'user_listed_count', 'user_favourites_count', 'user_statuses_count', 'user_description', 'user_verified', 'user_followers_count', 'user_friends_count', 'user_listed_count', 'user_favourites_count', 'user_statuses_count', 'user_description', 'user_verified', 'user_followers_count', 'user_friends_count', 'user_listed_count', 'user_favourites_count', 'user_statuses_count', 'user_description', 'user_verified', 'user_followers_count', 'user_friends_count', 'user_listed_count', 'user_favourites_count', 'user_statuses_count', 'user_description', 'user_verified', 'user_followers_count', 'user_friends_count', 'user_listed_count', 'user_favourites_count', 'user_statuses_count', 'user_description', 'user_verified', 'user_followers_count', 'user_friends_count', 'user_listed_count', 'user_favourites_count', 'user_statuses_count', 'user_description', 'user_verified', 'user_followers_count', 'user_friends_count', 'user_listed_count', 'user_favourites_count', 'user_statuses_count', 'user_description",
    "```json\n{\n    \"solution\": \"df['mention_ids<gx:list[category]>\"].explode().value_counts().max()\"\n}\n```\n\nInput DataFrame columns: ['latitude', 'longitude']\nQuestion: What is the average latitude and longitude of the tweets?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['latitude', 'longitude']].mean().tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'retweet_count', 'quote_count', 'reply_count', 'like_count', 'source', 'text', 'tweet_type', 'created_at', 'retweeter', 'user', 'hashtags', 'urls', 'photos']\nQuestion: How many tweets have more than 10 likes?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['like_count'].ge(10).sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'text', 'created_at', 'tweet_type', 'lang', 'user', 'retweet_count', 'quote_count', 'reply_count', 'like_count', 'source']\nQuestion: Two of the tweets have two urls in the text. How many tweets have more than 10 urls?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['text'].str.count('\\shttps?').ge(10).sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'text', 'created_at', 'tweet_type', 'lang', 'user', 'retweet_count', 'quote_count', 'reply_count', 'like_count', 'source']\nQuestion: How many tweets have more than 30 replies?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['reply_count'].ge(30).sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'retweet_count', 'quote_count', 'reply_count', 'like_count', 'source', 'text', 'tweet_type', 'created_at', '",
    "```json\n{\n    \"solution\": \"df['author_name'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'post_created_at<gx:datetime>', 'post_updated_at<gx:datetime>', 'post_published_at<gx:datetime>', 'post_text<gx:text>', 'post_author_id<gx:category>', 'post_lang<gx:category>', 'post_type<gx:category>', 'post_title<gx:text>', 'post_url<gx:url>', 'post_url_domain<gx:text>', 'post_url_display<gx:text>', 'post_latitude<gx:number>', 'post_longitude<gx:number>', 'post_image_link<gx:url>', 'post_num_tags<gx:number>', 'post_num_images<gx:number>', 'repost_count<gx:number>', 'post_mentions<gx:list[category]>', 'post_tags<gx:list[category]>', 'post_hashtags<gx:list[category]>', 'post_urls<gx:list[url]>', 'post_media<gx:list[url]>']\nQuestion: What are the top 5 most mentioned posts?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['post_mentions'].explode().value_counts().index.tolist()[:5]\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'user_name', 'user_avatar', 'user_handle', 'user_location', 'user_created_at', 'user_tweets_count', 'user_verified', 'user_favourites_count', 'user_followers_count', 'user_following_count', 'user_listed_count', 'user_description', 'user_bio', 'user_fields', 'user_media_count', 'user_background_media_count', 'user_fields_values', 'user_fields_values_dynamic', 'user_urls', 'user_timelines', 'user_media', 'user_bio_count', 'user_background_media']\nQuestion: How many users do not",
    "```json\n{\n    \"solution\": \"df['user_favourites_count'].argmax()\"\n}\n```\n\nInput DataFrame columns: ['Datetime', 'City', 'Country', 'Shape', 'Duration', 'Report_Status']\nQuestion: Which country has the most reports with the \"Invalid\" status?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Report_Status'] == 'Invalid']['Country'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'T', 'TM', 'S', 'V', 'VV', 'W', 'G', 'I', 'H', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'U', 'V', 'W', 'X', 'Y', 'SM', 'RMM', 'RMX', 'RMMX', 'D', 'F', 'Z', 'ZR', 'PO', 'SS', 'CI', 'RO', 'MO', 'MF', 'SR', 'NS', 'D+']\nQuestion: What is the most abundant weather phenomenon?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.columns[df.iloc[0].eq('T')].tolist()[0].title()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'T', 'Tm', 'S', 'V', 'VV', 'W', 'G', 'I', 'H', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'RG', 'PG', 'FG', 'F', 'G', 'RA', 'SN', 'SG', 'GS', 'PL', 'IC', 'LC', 'VC', 'SD', 'RS', 'SS', 'UP', 'BF', 'DU', 'MI', 'RU', 'RO', 'AE', 'LS']\nQuestion: Which weather phenomenon is perhaps the least frequent?\nExpected return type: category\n\nCode that calculates the answer:\n```json",
    "```json\n{\n    \"solution\": \"df['author_name<gx:category>'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>', 'search<gx:category>']\nQuestion: Which entity is the most uncommon in the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.explode('text<gx:text>').loc[df.explode('text<gx:text>').groupby('text<gx:text>').size().idxmin()]['text<gx:text>']\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>',",
    "```json\n{\n    \"solution\": \"df['retweets'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['salary', 'name', 'nationality', 'dob', 'height (in)', 'weight (in)', 'position', 'club', 'value', 'wage', 'preferred foot', 'international reputation', 'weak foot', 'skill moves', 'work rate', 'body type', 'real face', 'release clause']\nQuestion: Which nationality is the most common among the players?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['nationality'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author<position>', 'author<email>', 'author<display_name>', 'authored_on', 'type', 'text<data>', 'thread<data>', 'in_reply_to_message_id', 'in_reply_to_author_id', 'source', 'links<url>', 'links_first<url>', 'image_links<url>', 'image_links_first<url>', 'mention_ids<position>', 'mention_names<position>', 'quote_message_id', 'quote_message_text<data>', 'quote_message_author_id', 'quote_message_author_name', 'retweet_message_id', 'retweet_message_author_id', 'retweet_message_author_name', 'reply_message_id', 'reply_message_author_id', 'reply_message_author_name', 'parent_message_id', 'parent_message_text<data>', 'parent_message_author_id', 'parent_message_author_name', 'is_locked', 'locked_reason', 'tags<tag>', 'polls<poll>']\nQuestion: How many times has the retweet been used?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['retweet_message_id'].notnull().sum()\"\n}\n```\n\nInput DataFrame columns: ['event_id', 'event_type', 'time_stamp', 'time_zone', 'time_utc', 'id', 'permalink', 'username',",
    "```json\n{\n    \"solution\": \"df.groupby('author_name<gx:category>')['user_followers_count<gx:number>'].max().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: []\nQuestion: What are the top 5 most common words in the text column?\nExpected return type: list[string]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"from nltk.tokenize import word_tokenize\\nstopwords = set(stopwords.words('english'))\\ndef tokenize(text): return [word for word in word_tokenize(text.lower()) if not word in stopwords]\\ndf['text<gx:text>'].str.lower().str.split().explode().value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['user_name<gx:category>', 'created_at<gx:date>', 'text<gx:text>', 'geo', 'id_str<gx:category>', 'in_reply_to_user_id_str<gx:category>', 'in_reply_to_status_id_str<gx:category>', 'coordinates', 'place', 'retweet_count<gx:number>', 'favorite_count<gx:number>', 'favorited<gx:boolean>', 'retweeted<gx:boolean>', 'possibly_sensitive<gx:boolean>', 'lang<gx:category>', 'quoted_status_id_str<gx:category>', 'quoted_status_permalink<gx:url>', 'source<gx:category>', 'is_quote_status<gx:boolean>', 'extended_tweet<gx:dictionary>', 'user<gx:dictionary>', 'entities<gx:dictionary>', 'quoted_status<gx:dictionary>', 'contributors<gx:dictionary>']\nQuestion: Are there any quotes in the text column?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['text<gx:text>'].str.contains('\"', na=False).any()\"\n}\n```\n\nInput DataFrame columns: ['user_id<gx:category>', 'user_name<gx:category>', 'created_at<gx:date>', 'full_text",
    "```json\n{\n    \"solution\": \"df.nlargest(4, 'user_favourites_count<gx:number>')['author_name<gx:category>'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['zipcode<gx:zipcode>', 'street<gx:address>', 'x<gx:number>', 'y<gx:number>', 'objectid<gx:number>', 'borough<gx:text>', 'cuisine<gx:text>']\nQuestion: What are the 4 most popular cuisines?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['cuisine<gx:text>'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Borough', 'City', 'Co-ordinates', 'Postcode district', 'Postcode', 'Population', 'Neighborhoods']\nQuestion: What is the closest Neighborhood to the Queensboro Bridge?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Neighborhoods'].str.split(', ').explode().apply(lambda s: s.strip()).nsmallest(2, key=lambda x: Levenshtein.jaro_winkler(x, 'Queensboro Bridge')).iloc[1]\"\n}\n```\n\nInput DataFrame columns: ['Borough', 'City', 'Co-ordinates', 'Postcode district', 'Postcode', 'Population', 'Neighborhoods']\nQuestion: What are the top 2 Postal Codes where the most people live?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Postcode'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Borough', 'City', 'Co-ordinates', 'Postcode district', 'Postcode', 'Population', 'Neighborhoods']\nQuestion: Which area has the least population?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Borough'].mode().iloc[0",
    "```json\n{\n    \"solution\": \"df.loc[df['mention_names'].explode().value_counts().nlargest(4).index.tolist()]['author_name<gx:category>'].tolist()\"\n}\n```\n\nInput Dataframe columns: ['id<gn:numeric>', 'category_id<gn:numeric>', 'parent_category_id<gn:numeric>', 'category_name<gn:category>', 'sub_category_name<gn:category>', 'description<gn:text>', 'description_bkup<gn:text>', 'original_description<gn:text>', 'name<gn:text>', 'domain_id<gn:category>', 'price<gn:number>', 'price_currency<gn:category>', 'delivery_option<gn:category>', 'location_id<gn:category>', 'location_name<gn:text>', 'latitude<gn:number>', 'longitude<gn:number>', 'currency<gn:category>', 'n_seller_rating<gn:number>', 'n_sales<gn:number>', 'n_delivered_items <gn:number>', 'n_views<gn:number>', 'n_likes<gn:number>', 'n_followers<gn:number>', 'n_categories<gn:number>', 'n_tags<gn:number>', 'n_comments<gn:number>', 'n_items_in_pack<gn:number>', 'timestamp<gn:date>', 'availability<gn:category>', 'ad_type<gn:category>', 'has_payment_options<gn:boolean>', 'has_delivery_options<gn:boolean>', 'posting_type<gn:category>', 'in_store_delivery<gn:boolean>', 'online_delivery<gn:boolean>', 'shipping_price<gn:number>', 'buyer_payment_method<gn:category>', 'seller_payment_method<gn:category>', 'seller_percentile_rating<gn:number>', 'seller_percentile_follower<gn:number>', 'seller_percentile_sales<gn:number>', 'seller_percentile_delivery<gn:number>', 'seller_percentile_payment<gn:number>', 'seller_percentile_price<gn:number>', 'seller_percentile_communication<gn:number>', 'seller_percentile_timelin",
    "```json\n{\n    \"solution\": \"df['author_name<gx:category>'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'message<gx:text>', 'created_at<gx:datetime>']\nQuestion: What are the 3 most posting authors?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['message<gx:text>'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'created_at<gx:date>', 'message<gx:text>', 'user_id<gx:category>', 'user_name<gx:category>', 'user_handler<gx:category>', 'user_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'source<gx:text>', 'hashtag_ids<gx:list[category]>', 'hashtag_names<gx:list[category]>', 'mentions_ids<gx:list[category]>', 'mentions_names<gx:list[category]>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>']\nQuestion: Which category has the most number of tweets?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['hashtag_names<gx:list[category]>'].explode().value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'created_at<gx:datetime>', 'message<gx:text>', 'user_id<gx:category>',",
    "```json\n{\n    \"solution\": \"df['user_followers_count<gx:number>'].nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>', 'search<gx:category>']\nQuestion: What are the top 3 number of users who were mentioned (mention_names) in the dataset?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['mention_names<gx:list[category]>'].explode().value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Tweets', 'Hashtags', 'Mentions', 'Link', 'Date', 'Time', 'Time_zone', 'Tweet_text', 'Retweet_count', 'Location', 'Source', 'User_name', 'User_description', 'User_screen",
    "```json\n{\n    \"solution\": \"df['favorites'].head(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'user_id', 'likes', 'replies', 'retweets', 'media', 'device', 'hashtags', 'source', 'text', 'date', 'retweet', 'quote_url', 'near', 'geo', 'place', 'source_url']\nQuestion: How many tweets have more likes than replies?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['likes'] >= df['replies']].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'patient_id', 'appointment_id', 'scheduled_day', 'appointment_day', 'age', 'neighbourhood', 'scholarship', 'hypertension', 'diabetes', 'alcoholism', 'handicap', 'sms_received', 'no_show']\nQuestion: Is there any patient having all of the 3 health issues?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['hypertension'] == 1 & df['diabetes'] == 1 & df['alcoholism'] == 1\"\n}\n```\n\nInput DataFrame columns: ['id', 'patient_id', 'appointment_id', 'scheduled_day', 'appointment_day', 'age', 'neighbourhood', 'scholarship', 'hypertension', 'diabetes', 'alcoholism', 'handicap', 'sms_received', 'no_show']\nQuestion: What's the most common age of a patient with hypertension?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['hypertension'] == 1]['age'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'patient_id', 'appointment_id', 'scheduled_day', 'appointment_day', 'age', 'neighbourhood', 'scholarship', 'hypertension', 'diabetes', 'alcoholism', 'handicap', 'sms_received',",
    "```json\n{\n    \"solution\": \"df['mention_ids'].explode().value_counts().dropna().nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['title', 'location', 'company', 'category', 'description', 'reviews_rating', 'reviews_count', 'reviews_text', 'address', 'postalCode', 'latitude', 'longitude', 'date_created', 'url']\nQuestion: What is the maximum reviews count?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['reviews_count'].max()\"\n}\n```\n\nInput DataFrame columns: ['name', 'category', 'review_count', 'rating', 'url']\nQuestion: What is the average reviews count for a restaurant with a rating of 2.5?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['rating'] == 2.5]['review_count'].mean()\"\n}\n```\n\nInput DataFrame columns: ['user_id<gx:category>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_location<gx:text>', 'user_name<gx:category>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_avatar_image_link<gx:url>', 'user_header_image_link<gx:url>', 'user_bio<gx:text>', 'location<gx:text>', 'user_type<gx:category>', 'user_screen_name<gx:category>', 'user_url<gx:url>', 'user_statuses_count<gx:number>', 'user_listed_count<gx:number>', 'user_friends_count<gx:number>', 'user_followers_count<gx:number>', 'user_favourites_count<gx:number>', 'user_lang<gx:category>', 'user_utc_offset<gx:number>', 'user_time_",
    "```json\n{\n    \"solution\": \"df['retweets'].nlargest(2).tolist()\"\n}\n```\n\nInput DataFrame columns: ['q001', 'q002', 'q003', 'q004', 'q005', 'q006', 'q007', 'q008', 'q009', 'q010', 'q011', 'q012', 'q013', 'q014', 'q015', 'q016', 'q017', 'q018', 'q019', 'q020', 'q021', 'q022', 'q023', 'q024', 'q025', 'q026', 'q027', 'q028', 'q029', 'q030', 'q031', 'q032', 'q033', 'q034', 'q035', 'q036', 'q037', 'q038', 'q039', 'q040', 'q041', 'q042', 'q043', 'q044', 'q045', 'q046', 'q047', 'q048', 'q049', 'q050', 'q051', 'q052', 'q053', 'q054', 'q055', 'q056', 'q057', 'q058', 'q059', 'q060', 'q061', 'q062', 'q063', 'q064', 'q065', 'q066', 'q067', 'q068', 'q069', 'q070', 'q071', 'q072', 'q073', 'q074', 'q075', 'q076', 'q077', 'q078', '",
    "```json\n{\n    \"solution\": \"df[df['Loan Amount'] == df['Loan Amount'].max()]['Loan Duration - Months'].gt(df['Loan Duration - Months'].max()).any()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year of Birth', 'Education', 'Marital Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Are there any customers with income higher than 100000?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nInput DataFrame columns: ['review_id', 'listing_id', 'reviewer_id', 'reviewer_name', 'notes', 'comments', 'date', 'date_hidden', 'reviewer_location', 'reviewer_country', 'reviewer_score', 'reviewer_response', 'reviewer_helpfulness', 'reviewer_report_listing_quality', 'reviewer_report_id_quality', 'reviewer_report_communication', 'reviewer_report_location', 'reviewer_report_time_of_stay', 'reviewer_days_since_first_review', 'reviewer_days_since_last_review', 'reviewer_profile_name', 'reviewer_is_superhost', 'number_of_reviews', 'number_of_reviews_gt_100', 'number_of_reviews_lt_100', 'number_of_reviews_lt_200', 'number_of_reviews_lt_300', 'number_of_reviews_lt_400', 'number_of_reviews_lt_",
    "```json\n{\n    \"solution\": \"banks.loc[banks['Number of Existing Loans'].idxmax(), 'Loan Amount'] == banks.loc[banks['Number of Existing Loans'].idxmax(), 'Number of Existing Loans']\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Address', 'Exterior', 'Interior', 'Price', 'Rooms', 'Br', 'Baths', 'Garage', 'Flooring', 'Fireplace', 'Wood/Steel', 'Heating/AC', 'Year Built']\nQuestion: What's the lowest price per bathroom?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"houses['Price'].min() / houses['Baths'].min()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'gender', 'age', 'debt', 'married', 'children', 'car', 'salary']\nQuestion: What is the client's age of people who have cars?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['car'] == 1, 'age'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['gender', 'income', 'married', 'children', 'car', 'cai', 'education']\nQuestion: What is the average income per gender?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('gender')['income'].mean().mean()\"\n}\n```\n\nInput DataFrame columns: ['gender', 'income', 'married', 'children', 'car', 'cai', 'education']\nQuestion: What is the average income per education?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('education')['income'].mean().mean()\"\n}\n```\n\nInput DataFrame columns: ['gender', 'income', 'married', 'children', 'car', 'cai', 'education']\nQuestion: What is the average income per gender per education?\nExpected return type: dict[category, number]\n\nCode that calculates the answer:\n```json",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].max() == df['Number of Existing Loans'].max()\"\n}\n```\n\nInput DataFrame columns: ['SeriousDlqin2yrs', 'RevolvingUtilizationOfUnsecuredLines', 'age', 'NumberOfTime30-59DaysPastDueNotWorse', 'DebtRatio', 'MonthlyIncome', 'NumberOfOpenCreditLinesAndLoans', 'NumberOfTimes90DaysLate', 'NumberRealEstateLoansOrLines', 'NumberOfTime60-89DaysPastDueNotWorse', 'NumberOfDependents']\nQuestion: Which customers are considered as having more than 30 days late with at least 90 days of delay or more?\nExpected return type: list[int]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['NumberOfTime30-59DaysPastDueNotWorse'] > 30) | (df['NumberOfTime60-89DaysPastDueNotWorse'] > 30)].index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'age', 'Gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod', 'MonthlyCharges', 'TotalCharges', 'Churn']\nQuestion: How many people are not seniors?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[~df['SeniorCitizen']].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['SYMBOL', 'Date', 'Open', 'High', 'Low', 'Close', 'AdjClose', 'Volume', 'ExDividend', 'SplitRatio', 'AdjOpen', 'AdjHigh', 'AdjLow', 'AdjClose', 'AdjVolume']\nQuestion: What is the average value of high stock prices?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['High'].mean()\"\n}",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].max() == df[df['Age'].gt(50)].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['item_id', 'item_name', 'order_id', 'cancellation_reason', 'category_name', 'total_ordered', 'order_status', 'order_date', 'delivery_date', 'days_to_deliver', 'payment_type']\nQuestion: Which is the most popular category in the past 30 days?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['delivery_date'] >= '2021-06-24'].groupby('category_name')['total_ordered'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['arrival_date', 'meal', 'country', 'market_segment', 'distribution_channel', 'is_repeated_guest', 'previous_cancellations', 'previous_bookings_not_canceled', 'reserved_room_type', 'assigned_room_type', 'booking_changes', 'deposit_type', 'agent', 'company', 'days_in_waiting_list', 'customer_type', 'adr', 'required_car_parking_spaces', 'total_of_special_requests', 'reservation_status', 'reservation_status_date']\nQuestion: How many guests didn't cancel the reservation?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[~df['reservation_status'].isin(['Canceled', 'No-Show'])].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['airline', 'airline_name', 'scheduled_departure', 'nb_stops', 'airports', 'city', 'flight_duration', 'departure_city', 'arrival_city', 'departure_airport', 'departure_airport_name', 'departure_time', 'arrival_time', 'arrival_airport', 'arrival_airport_name', 'departure_day', 'arrival_day']\nQuestion: How many airlines with a single stop?\nExpected return type: number\n\nCode that calculates the",
    "```json\n{\n    \"solution\": \"df['Loan Amount'].max()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: How many female customers were born between 1973 and 1990?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['Year_Birth'].between(1973, 1990)) & (df['Income'].gt(100000)) & (df['Sex'] == 'F'), 'Income']\"\n}\n```\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', '",
    "```json\n{\n    \"solution\": \"df['Number of Existing Loans'].gt(1).sum()\"\n}\n```\n\nInput DataFrame columns: ['External risk rating', 'Good Loan', 'Very good Loan', 'Acceptable Loan', 'age', 'education', 'marital status', 'job_type']\nQuestion: What is the average age of external risk rating group?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('External risk rating')['age'].mean().mean()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Age', 'Income', 'Experience', 'Profession', 'Family size', 'Family expense', 'Housing', 'Saving', 'Current loan balance', 'Credit card debt', 'Personal loan balance', 'Other loan balance', 'Loan circumstance', 'Total no of years of working in the market', 'House address']\nQuestion: What is the average age of resident living in a single family?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Family size'] == 1, 'Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Age', 'Income', 'Loan Amount', 'Credit History', 'Employment Length', 'Number of Credit Accounts', 'Loan Purpose', 'Loan Term', 'Loan Grade', 'Number of Open Accounts', 'Total Loan Amount', 'Number of Delinquencies', 'Total Accounts', 'Address']\nQuestion: What is the total number of loans made by person with credit history of 3?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Credit History'] == 3, 'Loan Term'].sum()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Age', 'Sex', 'Income', 'Loan Amount', 'Credit History', 'Employment Length', 'Number of Credit Accounts', 'Loan Purpose', 'Loan Term', 'Loan Grade', 'Number of Open Accounts', 'Total Loan Amount', 'Number of Delinquencies', 'Total Accounts', 'Address']\nQuestion: What is the total number of delinquencies",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].max()\"\n}\n```\n\nInput DataFrame columns: ['year', 'genre', 'artist', 'track', 'streams', 'date_added', 'country', 'release_date']\nQuestion: What are the top 3 songs that got the most streams in the dataset?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['track']).sum().sort_values('streams', ascending=False).index.tolist()[:3]\"\n}\n```\n\nInput DataFrame columns: ['year', 'genre', 'artist', 'track', 'streams', 'date_added', 'country', 'release_date']\nQuestion: How many tracks were released each year in the dataset?\nExpected return type: dict[number, number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['year'].value_counts().to_dict()\"\n}\n```\n\nInput DataFrame columns: ['Year', 'Month', 'MonthName', 'Day', 'DayName', 'Date', 'Time', 'Date/Time', 'Time (ET)', 'Sunset', 'Sunrise', 'Dew Point (C)', 'Dew Point Temp (F)', 'Humidity (%)', 'Sea Level Pressure', 'Visibility (km)', 'Wind Direction', 'Wind Speed (km/h)', 'Gust Speed (km/h)', 'Precipitation (mm)', 'Events', 'Conditions', 'WindDirDegrees', 'WindDir', 'Long', 'Lat', 'mslp_in', 'mslp_hPa', 'mslp_mb', 'mslp_Bar', 'mslp_inHg', 'mslp_Hg', 'mslp_PSI', 'mslp_atm', 'mslp_Torr']\nQuestion: What are the top 3 months that have the highest number of times precipitation?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Precipitation (mm)'].gt(0).value_counts().index.tolist()[:3]\"\n}\n```\n\nInput DataFrame columns: ['Year', 'Month', 'Month",
    "```json\n{\n    \"solution\": \"df['Age'].gt(50).sum()\"\n}\n```\n\nInput DataFrame columns: ['Gender', 'Age', 'Occupation', 'Marital Status', 'Number of Dependants', 'Income', 'Loan Amount', 'Number of Open Credit Lines', 'Number of Days Credit Line Exceed 30 Days', 'Number of Days Credit Line Exceed 89 Days', 'Number of Days In File', 'Years of Credit History', 'Monthly Debt Payment', 'Number of times Bounced', 'Present Credit Interval', 'Number of Months with Delay', 'Number of Times Credit Card Delinquent', 'Share of Income of Co-Applicant', 'Share of Income of Co-Applicant', 'Credit History', 'Share of Income of Co-Applicant', 'Status of Previous Application', 'Amount of previous Credit', 'Reason for Previous Application', 'Present Debt Rate', 'Monthly Expenses', 'Amount of Goods Paid', 'Number of Goods Paid', 'Present Residence', 'Property Type', 'Present Obligation', 'Purpose', 'Total Income', 'Length of Credit History', 'Location', 'Additional Months Payments', 'Monthly Outcome', 'Default', 'Default']\nQuestion: What is the maximum monthly expenses?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Monthly Expenses'].max()\"\n}\n```\n\nInput DataFrame columns: ['Sex', 'Age', 'Shelter', 'KM_ access to fire station', 'salary', 'Father', 'Mother', 'Brothers', 'Sisters', 'Children', 'Parents', 'Total education', 'High school', 'Job', 'Grades', '0-14 years', '15-24 years', '25-34 years', '35-44 years', '45-54 years', '55-64 years', '65+ years', 'Rural', 'Urban', 'Home_owner', 'Rent_owner', 'Own_apartment', 'Own_house', 'Accommodation_not_stated', 'Family', 'Other', 'Rented_from_Friends', 'Rented_from_Parents',",
    "```json\n{\n    \"solution\": \"df['Purpose of Loan'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'user_id', 'product', 'amount', 'description', 'category_id', 'category', 'number_of_payments', 'due_date', 'frequency_installments_name', 'frequency_installments_value', 'installment_amount', 'reference_id', 'notes', 'transaction_status_name', 'transaction_status_value', 'transaction_status_code', 'transaction_status_description', 'is_overdue', 'is_charged_back']\nQuestion: What was the maximum amount paid by a user?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['amount'].max()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Date', 'Store_ID', 'Sales', 'Customers', 'Without_Sales', 'Without_Customers', 'Competition_Open_since_Month', 'Competition_Open_since_Year', 'Promo2', 'Promo2SinceWeek', 'Promo2SinceYear', 'Promo_Interval', 'Competition_Distance', 'Promo', 'StateHoliday', 'SchoolHoliday']\nQuestion: Which month had the most sales?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Date'].dt.month.value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Product_Code', 'Customer_Name', 'CH_id', 'Sold_to_Name', 'Ship_to_Name', 'Bill_to_Name', 'Customer_Segment', 'Pymt_Terms', 'Country', 'Ship_To_ID', 'Order_Type', 'Order_Status', 'Payment_Method', 'SO_Number', 'SO_Type', 'SO_Date', 'SO_Line_Item_Key', 'Product_Name', 'Product_Description', 'Net_Value', 'Sales', 'Sales_Units', 'Sales_Value', 'Discount', 'Currency', 'Net_Amount', 'Tax', 'Gross_Amount', 'Ship_Date', 'Target_Date', 'Qty', '",
    "```json\n{\n    \"solution\": \"df['Job'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Gender', 'Age', 'Purpose', 'Credit History', 'Loan Amount', 'Loan Duration', 'Number of Existing Credits at the time of application, for approved applications', 'Number of Dependants', 'Capital Gain', 'Marital Status', 'Monthly Income', 'Property Ownership', 'Residence Duration', 'Status']\nQuestion: What is the average age for the loan applicants?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Marital Status', 'Sex', 'Current Job Year', 'Current Job Duration (in months)', 'Net Monthly Salary After Tax', 'Housing', 'Co-Applicant', 'Co-Applicant Gender', 'Co-Applicant Age', 'Co-Applicant Marital Status', 'Co-Applicant Current Job Year', 'Co-Applicant Current Job Duration (in months)', 'Co-Applicant Net Monthly Salary After Tax', 'Co-Applicant Housing', 'Number of Credits', 'Current Loan Expenses', 'Loan to Income Ratio', 'Debt-To-Income Ratio', 'Income Verified', 'Purpose', 'Credit History', 'Loan Amount', 'Loan Duration', 'Existing Loan Organization', 'Existing Loan Purpose', 'Existing Loan Amount', 'Existing Loan Duration', 'Existing Loan Expenses', 'Loan Purpose', 'Loan Amount Requested', 'Loan Duration Requested']\nQuestion: What is the most common loan purpose?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Loan Purpose'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Loan Duration', 'Existing Loan Amount', 'Existing Loan Purpose', 'Existing Loan Duration', 'Housing', 'Income Verified', 'Co-Applicant', 'Co-Applicant Gender', 'Co-Applicant Age', 'Co-Applicant Marital Status', 'Co-Applicant Current Job Year', 'Co-Applicant Current Job Duration (in months)', 'Co-Applicant",
    "```json\n{\n    \"solution\": \"df['Credit History'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Loan Duration - Months', 'Credit History', 'Purpose of Loan', 'Loan Amount', 'Savings Account', 'Length of Current Employment', 'Installment Rate as % of Income', 'Guarantors', 'Length of Current Property Residence', 'Age', 'Housing', 'Number of Existing Loans', 'Job', 'Number of Dependants', 'Foreign Worker', 'Risk', 'Sex', 'Status']\nQuestion: What is the mean age of all borrowers?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Loan Duration - Months', 'Credit History', 'Purpose of Loan', 'Loan Amount', 'Savings Account', 'Length of Current Employment', 'Installment Rate as % of Income', 'Guarantors', 'Length of Current Property Residence', 'Age', 'Housing', 'Number of Existing Loans', 'Job', 'Number of Dependants', 'Foreign Worker', 'Risk', 'Sex', 'Status']\nQuestion: What is the average loan amount of borrowers with a high credit history?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['Credit History'] == 'Very Good') | (df['Credit History'] == 'Good'), 'Loan Amount'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Loan Duration - Months', 'Credit History', 'Purpose of Loan', 'Loan Amount', 'Savings Account', 'Length of Current Employment', 'Installment Rate as % of Income', 'Guarantors', 'Length of Current Property Residence', 'Age', 'Housing', 'Number of Existing Loans', 'Job', 'Number of Dependants', 'Foreign Worker', 'Risk', 'Sex', 'Status']\nQuestion: What is the mean loan amount of borrowers with a high credit history?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['Credit History'] == 'Very Good",
    "```json\n{\n    \"solution\": \"df['Savings Account'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Adj Close']\nQuestion: What is the total volume of bitcoins on January 1st, 2018?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Date'] == '2018-01-01') & (df['Date'] < '2018-02-01')]['Volume'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Month', 'Status', 'State', 'City', 'County', 'Avg Speed', 'Avg Temp', 'Avg Precipitation', 'Avg Visibility', 'Avg WindSpeed', 'Avg Humidity', 'Avg Pressure', 'Lat', 'Lng']\nQuestion: What is the maximum average windspeed for the month of April?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Month'] == 'April']['Avg WindSpeed'].max()\"\n}\n```\n\nInput DataFrame columns: ['Day', 'Open', 'High', 'Low', 'Close', 'Volume']\nQuestion: What is the number of days with closing prices of at least 37000?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.loc[df['Close'] >= 37000, 'Day'].unique().size\"\n}\n```\n\nInput DataFrame columns: ['Month', 'City', 'County', 'Avg Speed', 'Avg Temp', 'Avg Precipitation', 'Avg Visibility', 'Avg WindSpeed', 'Avg Humidity', 'Avg Pressure', 'Lat', 'Lng', 'Snow', 'Fog', 'Rain']\nQuestion: How many cities have a snowfall above 0.25?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.loc[df['Snow'] > 0.25, 'City'].unique().size\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Loan Amount'].idxmax(), 'Job'].split(', ')[:3]\"\n}\n```\n\nInput DataFrame columns: ['Credit score', 'Taxable Income', 'Current Loan Expenses', 'Monthly Debt', 'Loan Amount', 'Annual Income', 'Years of Credit History', 'Months since last delinquent', 'Number of Open Accounts', 'Purpose', 'Term', 'Bankruptcies', 'Years in current job']\nQuestion: What is the minimum credit score of borrowers with 10 years of credit history?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Years of Credit History'] == 10, 'Credit score'].min()\"\n}\n```\n\nInput DataFrame columns: ['client', 'id', 'agency', 'channel', 'country', 'dept', 'product', 'state', 'date', 'storage', 'segment', 'cost', 'p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7', 'p8', 'p9', 'p10', 'p11', 'p12', 'p13', 'p14', 'p15', 'p16', 'p17', 'p18', 'p19', 'p20', 'p21', 'p22', 'p23', 'p24', 'p25', 'p26', 'p27', 'p28', 'p29', 'p30', 'p31', 'p32', 'p33', 'p34', 'p35', 'p36', 'p37', 'p38', 'p39', 'p40', 'p41', 'p42', 'p43', 'p44', 'p45', 'p46', 'p47', 'p48', 'p49', 'p50', 'p51', 'p52', 'p53', 'p54', 'p55', 'p56', 'p57', 'p5",
    "```json\n{\n    \"solution\": \"df[df['Loan Duration - Months'].lt(24)].groupby('Job')['Job'].count().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Android', 'Apple iOS', 'Microsoft Windows', 'Blackberry', 'Nokia', 'Samsung', 'Symbian', 'Opera Mini', 'Bada', 'Series Unknown', 'Series 40', 'Series 60', 'Series 80', 'Series 10', 'Series 30', 'Series 90', 'Series 11', 'Series 25', 'Series 70', 'Series 65', 'Series 75', 'Series 85', 'Series 78', 'Series 50', 'Series 20', 'Series 51', 'Series 52', 'Series 53', 'Series 55', 'Series 45', 'Series 48', 'Series 95', 'Series 9', 'Series 97', 'Series 4', 'Series 1', 'Series 5', 'Series 8', 'Series 3', 'Series 6', 'Series 2', 'Series 7', 'Series 13', 'Series 98', 'Series 99', 'Series 49', 'Series 12', 'Series 14', 'Series 39', 'Series 18', 'Series 38', 'Series 16', 'Series 37', 'Series 17', 'Series 24', 'Series 15', 'Series 35', 'Series 32', 'Series 41', 'Series 26', 'Series 19', 'Series 43', 'Series 47', 'Series 22', 'Series 33', 'Series 23', 'Series 29', 'Series 36', 'Series 28', 'Series 21', 'Series 46', 'Series 27', 'Series 42', 'Series 31', 'Series 34', 'Series 44', 'Series 54', 'Series 58', 'Series 56', 'Series",
    "```json\n{\n    \"solution\": \"df[df['Number of Existing Loans'] == df['Number of Existing Loans'].max()]['Job'].value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['age_of_person', 'gender', 'is_male', 'is_female', 'is_ethnicity_mentioned', 'is_other_ethnicity', 'ethnicity', 'is_hispanic', 'is_other_hispanic', 'is_american_indianor_alaskanative', 'is_american_indianor_alaskanative_or_other_pacific_island', 'is_asian', 'is_asian_or_other_pacific_island', 'is_blackor_african_american', 'is_blackor_african_american_or_other_hispanic', 'is_white', 'is_white_or_other_hispanic', 'is_other', 'race_ethnicity_combined', 'race_ethnicity_combined_x', 'race_ethnicity_combined_y', 'race_ethnicity_combined_z', 'race_ethnicity_combined_a', 'race_ethnicity_combined_b', 'race_ethnicity_combined_c', 'race_ethnicity_combined_d', 'race_ethnicity_combined_e', 'race_ethnicity_combined_f', 'race_ethnicity_combined_g', 'race_ethnicity_combined_h', 'race_ethnicity_combined_i', 'race_ethnicity_combined_j', 'race_ethnicity_combined_k', 'race_ethnicity_combined_l', 'race_ethnicity_combined_m', 'race_ethnicity_combined_n', 'race_ethnicity_combined_o', 'race_ethnicity_combined_p', 'race_ethnicity_combined_q', 'race_ethnicity_combined_r', 'race_ethnicity_combined_s', 'race_ethnicity_combined_t', 'race_ethnicity_combined_u', '",
    "```json\n{\n    \"solution\": \"df.nlargest(2,'Age').Name.tolist()\"\n}\n```\n\nInput DataFrame columns: ['NAME', 'AGE', 'SEX', 'FERTILITY', 'RELATIONSHIP', 'EDUCATION', 'DIABETES', 'CHRONIC', 'AGE_GROUP', 'HEIGHT', 'WEIGHT', 'BMI', 'SMOKE', 'EXERCISE', 'ALCOHOL', 'BP_AVERAGE', 'BLOOD_PRESSURE', 'CHOLESTEROL', 'LDL_C', 'HDL_C', 'TRIGLYCERIDES', 'TOTAL_C', 'HBA1C', 'RANDOM_INSULIN', 'HOMA', 'LDL_H', 'LEPTIN', 'GIPA', 'AST', 'ALT', 'PERT', 'AMYLOID', 'COCE', 'RNGI', 'YENAL', 'ZIEGLER', 'BUN', 'CREATININE', 'URINE', 'URIC_ACID', 'KETONES', 'GGT', 'PROTHROMBIN_TIME', 'INR', 'PLATELET_COUNT', 'WBC_COUNT', 'RBC_COUNT', 'HCT', 'ANEMIA', 'PACKS_YEAR', 'BLOOD_SUGAR_1ST', 'BLOOD_SUGAR_2ND', 'BLOOD_SUGAR_3RD', 'BLOOD_SUGAR_4TH', 'HBA1C_PERCENT', 'FOLATE', 'CAMPHOLIC_ACID', 'COAG_FACTOR', 'INTERLEUKIN_6', 'INTERLEUKIN_10', 'GLYCOSYLATED_HEMOGLOBIN', 'ZIKA_VIRUS', 'HIV_1_2_VIRUS', 'HIV_VIRUS', 'AIDS_VIRUS', 'SYPHILYSIS', 'HEAT_STROKE', 'EPILEPSY', 'EPILEPSY_SEIZURE', 'BRAIN_INJURY', 'LYMPHOMA', 'MULTIPLE_SCLEROSIS', 'DICUOUS_LYMPHATIC",
    "```json\n{\n    \"solution\": \"df['Loan Amount'].nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Saving accounts', 'Checking account', 'Loan', 'Status', 'Credit amount', 'Duration', 'Purpose', 'Age', 'Sex']\nQuestion: What is the minimum credit amount for loan purpose household?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Purpose'] == 'household']['Credit amount'].idxmin()\"\n}\n```\n\nInput DataFrame columns: ['Last Updated', 'S. No.', 'First Name', 'Last Name', 'Birth Date', 'Gender', 'Email', 'IP Address', 'Location', 'Company', 'Job Title', 'Job Description', 'Skill Level', 'Years of Experience', 'Qualification', 'Application Date', 'Category', 'Areas of Interest', 'Current Salary', 'Expected Salary', 'Resume File']\nQuestion: Is there any person with experience years greater than 15?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Years of Experience'].gt(15).any()\"\n}\n```\n\nInput DataFrame columns: ['Job Title', 'Job Description', 'Skill Level', 'Years of Experience', 'Area of Interest', 'Applied On', 'Location', 'Company', 'Salary', 'Category', 'Job Type', 'Seniority', 'Name', 'Email Address', 'Contact Number', 'Cover Letter', 'Resume', 'Resume File', 'LinkedIn Profile', 'Website']\nQuestion: Which job title requires experience years greater than 5?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Years of Experience'].gt(5)]['Job Title'].unique().tolist()\"\n}\n```\n\nInput DataFrame columns: ['job_title', 'job_industry_category', 'score1', 'score2', 'score3', 'score4', 'score5', 'company_profile', 'description', 'requirements', 'benefits', 'telecommuting', 'has_company_logo', 'has_questions', 'employment_type', 'required_experience', 'required_education",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].nlargest(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'CUSTID', 'Avgas', 'Age', 'Salary', 'Marital_Status', 'City', 'Education', 'Gender', 'History', 'Zipcode']\nQuestion: Are there any customers with salary higher than 100000?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Salary'].gt(100000).any()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Time']\nQuestion: What is the maximum number of messages sent on the same day?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Date')['Message'].count().max()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Time', 'lat', 'lon', 'depth', 'mag', 'magType', 'nst', 'gap', 'dmin', 'rms', 'net', 'id', 'updated', 'place', 'type', 'horizontalError', 'depthError', 'magError', 'magNst', 'status', 'locationSource', 'magSource']\nQuestion: What is the minimum distance between two earthquakes with the same magnitude?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df.type == 'earthquake']['mag'].nsmallest(2).diff().min()\"\n}\n```\n\nInput DataFrame columns: ['Time', 'Summary', 'Precip Type', 'Temperature (C)', 'Apparent Temperature (C)', 'Humidity', 'Wind Speed (km/h)', 'Wind Bearing (degrees)', 'Visibility (km)', 'Loud Cover', 'Pressure (millibars)', 'Daily Summary']\nQuestion: What is the maximum number of people who felt extreme heat?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Summary'].str.contains('Extreme Heat')]['Summary'].count()\"\n}\n```\n\nInput DataFrame columns: ['Time",
    "```json\n{\n    \"solution\": \"df['Number of Existing Loans'].nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['index', 'Fraudulent', 'Amount', 'Time', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Class', 'Amount_Scaled', 'Time_Scaled']\nQuestion: What is the maximum amount of money involved in fraud?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Fraudulent'] == 1]['Amount'].max()\"\n}\n```\n\nInput DataFrame columns: ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target']\nQuestion: What is the most common level of chest pain?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['cp'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Title', 'IsAlone']\nQuestion: What is the percentage of male passengers who survived the disaster?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Sex')['Survived'].apply(lambda x: x.sum()).loc['male'] / df.groupby('Sex')['",
    "```json\n{\n    \"solution\": \"df.query('Risk == \\\"good\\\"').nlargest(2, 'Age').Age.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Risk']\nQuestion: Is there any high-risk borrowers?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Risk'].str.contains('good').any()\"\n}\n```\n\nInput DataFrame columns: ['credit_score', 'age', 'yearly_debt', 'years_employed', 'home_ownership', 'annual_income', 'months_since_last_delinquent', 'number_of_open_accounts', 'number_of_credit_problems', 'current_credit_balance', 'maximum_open_credit', 'bankruptcies', 'tax_liens']\nQuestion: What is the correlation between \"number_of_credit_problems\" and \"bankruptcies\"?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['number_of_credit_problems', 'bankruptcies']].corr().iloc[0,1]\"\n}\n```\n\nInput DataFrame columns: ['Sector', 'Address', 'Country', 'Region', 'Targets', 'Preferred name', 'Planned purchase date', 'Planned purchase cost', 'Actual purchase date', 'Actual purchase cost', 'Approved by', 'Authorized by', 'Requested by', 'Supplier', 'Province', 'Comments', 'Obligated amount (USD)', 'Year', 'District', 'Economic Area']\nQuestion: Which province has the most number of Sectors?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Province'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Bus_ID', 'Route_ID', 'Date', 'Day', 'Dir', 'Late', 'Route', 'Service_No', 'Stop_ID', 'Street', 'Time', 'Trip_ID', 'Type', 'Weekday', 'Weekday_Service_No', 'Year', 'VT_Count', 'VTA_Count', 'Vehicle', 'VTA_Bus_ID', 'VTA",
    "```json\n{\n    \"solution\": \"df['Calories (kcal)'].eq(0).any()\"\n}\n```\n# Python - Hello, World!\n\nHello, World! is the first program in any programming language. It is useful to check if the language works.\n\n### Exampld\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in nums:\n            diff = target - i\n            if diff in nums:\n                return (nums.index(i), nums.index(diff))\n\n# Solve with dictionary\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    nums_map = {num: i for i, num in enumerate(nums)}\n    for i, num in enumerate(nums):\n        diff = target - num\n        if diff in nums_map:\n            return (i, nums_map[diff])\n\ne:\n\n```python\nprint(\"Hello, World!\")\n```\n\n# Python - Two Sum\n\nGiven an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\n### Examples:\n\n```python\n# Input: nums = [2,7,11,15], target = 9\n# Output: [0,1]\n# Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]\n\n# Input: nums = [3,2,4], target = 6\n# Output: [1,2]\n\n# Input: nums = [3,3], target = 6\n# Output: [0,1]\n```\n\n### Solution:\n\n# Solve with list comprehension\ndef twoSum1(nums: List[int], target: int) -> List[int]:\n    for i, num in enumerate(nums):\n        diff = target - num\n        if diff in nums:\n            return (nums.index(i), nums.index(diff))\n\n\n# Solve with for loop\ndef twoSum2(nums: List[int], target: int) -> List[int]:\n    for i, num in enumerate(nums):\n        diff = target - num\n        if diff in nums",
    "```json\n{\n    \"solution\": \"return all([df[i].str.contains('sugar') for i in df.columns])\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Response', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Age', 'Recency', 'Freq', 'MntFruits', 'MntWines', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Response', 'Age', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response', 'Age', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', '",
    "```json\n{\n    \"solution\": \"df['Total Fat (g)'].eq(0).all()\"\n}\n```\n\nInput DataFrame columns: ['store', 'item', 'week', 'sales', 'd_1', 'd_2', 'd_3', 'd_4', 'd_5', 'd_6', 'd_7', 'd_8', 'd_9', 'd_10', 'd_11', 'd_12', 'd_13', 'd_14', 'd_15', 'd_16', 'd_17', 'd_18', 'd_19', 'd_20', 'd_21', 'd_22', 'd_23', 'd_24', 'd_25', 'd_26', 'd_27', 'd_28', 'd_29', 'd_30', 'd_31', 'd_32', 'd_33', 'd_34', 'd_35', 'd_36', 'd_37', 'd_38', 'd_39', 'd_40', 'd_41', 'd_42', 'd_43', 'd_44', 'd_45', 'd_46', 'd_47', 'd_48', 'd_49', 'd_50', 'd_51', 'd_52', 'd_53', 'd_54', 'd_55', 'd_56', 'd_57', 'd_58', 'd_59', 'd_60', 'd_61', 'd_62', 'd_63', 'd_64', 'd_65', 'd_66', 'd_67', 'd_68', 'd_69', 'd_70', 'd_71', 'd_72', 'd_73', 'd_74', 'd_75', 'd_76', 'd_77', '",
    "```json\n{\n    \"solution\": \"return df['Protein (g)'].eq(0).any()\"\n}\n```\n\nInput DataFrame columns: ['diagnosis', 'radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean', 'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean', 'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se', 'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se', 'fractal_dimension_se', 'radius_worst', 'texture_worst', 'perimeter_worst', 'area_worst', 'smoothness_worst', 'compactness_worst', 'concavity_worst', 'concave points_worst', 'symmetry_worst', 'fractal_dimension_worst', 'Unnamed: 32']\nQuestion: Are there any instances with all zeros?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.isnull().all().any()\"\n}\n```\n\nInput DataFrame columns: ['name', 'nrel_category_id', 'renewable_energy_source', 'revenue_1000_barrels_per_day', 'onshore_wind_generation_mwh', 'offshore_wind_generation_mwh', 'total_generation_mwh', 'capacity_mw', 'latitude', 'longitude', 'city', 'state', 'country', '2008_capacity_mw', '2009_capacity_mw', '2010_capacity_mw', '2011_capacity_mw', '2012_capacity_mw', '2013_capacity_mw', '2014_capacity_mw', '2015_capacity_mw', '2016_capacity_mw']\nQuestion: Is there a renewable energy source in the bottom 10% most windy cities?\nExpected return type: boolean\n\nCode that calculates the",
    "```json\n{\n    \"solution\": \"df[df['Calories (kcal)'] > 500]['name'].count()\"\n}\n```\n\nInput DataFrame columns: ['title', 'date', 'date_created', 'feature', 'recommendations', 'responses', 'unique_id', 'upvotes', 'downvotes', 'num_comments', 'popularity', 'subreddit_id', 'url', 'clicked_title', 'clicked_date', 'clicked_feature', 'clicked_recommendations', 'clicked_responses', 'clicked_unique_id', 'clicked_upvotes', 'clicked_downvotes', 'clicked_num_comments', 'clicked_popularity', 'clicked_subreddit_id', 'clicked_url', 'clicked_title_num_words', 'clicked_title_num_unique_words', 'clicked_title_num_char', 'clicked_title_avg_word_length', 'clicked_title_stop_words', 'clicked_title_num_stop_words', 'clicked_title_num_char_stop', 'clicked_title_stop_word_length', 'clicked_title_word_repeated_more_than_once', 'clicked_title_word_total_occurences', 'clicked_title_word_density', 'clicked_title_word_total_unique_occurences', 'clicked_title_word_total_repeated_occurences', 'clicked_title_stop_words_density', 'clicked_title_num_punctuations', 'clicked_title_mean_punctuation_per_word', 'clicked_title_num_words_title', 'clicked_title_num_unique_words_title', 'clicked_title_num_char_title', 'clicked_title_avg_word_length_title', 'clicked_title_stop_words_title', 'clicked_title_num_stop_words_title', 'clicked_title_num_char_stop_title', 'clicked_title_stop_word_length_title', 'clicked_title_word_repeated_more_than_once_title', 'clicked_title_word_total_occurences_title', 'clicked_title_word_density_title', 'clicked_title_word_total_unique",
    "```json\n{\n    \"solution\": \"df['Total Fat (g)'].mean()\"\n}\n```\n\nInput DataFrame columns: ['name', 'emoji', 'Calories (kcal)', 'Carbohydrates (g)', 'Total Sugar (g)', 'Protein (g)', 'Total Fat (g)', 'Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)', 'Total Fiber (g)', 'Cholesterol (mg)', 'Vitamin B6 (mg)', 'Vitamin A (IU)', 'Vitamin B12 (ug)', 'Vitamin C (mg)', 'Vitamin D (IU)', 'Vitamin E (IU)', 'Vitamin K (ug)', 'Thiamin (mg)', 'Riboflavin (mg)', 'Niacin (mg)', 'Folate (ug)', 'Pantothenic Acid (mg)', 'Choline (mg)', 'Calcium (g)', 'Copper (mg)', 'Iron (mg)', 'Magnesium (mg)', 'Manganese (mg)', 'Phosphorus (g)', 'Potassium (g)', 'Selenium (ug)', 'Sodium (g)', 'Zinc (mg)']\nQuestion: What is the median amount of total fat (in grams) across all foods?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Total Fat (g)'].median()\"\n}\n```\n\nInput DataFrame columns: ['name', 'emoji', 'Calories (kcal)', 'Carbohydrates (g)', 'Total Sugar (g)', 'Protein (g)', 'Total Fat (g)', 'Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)', 'Total Fiber (g)', 'Cholesterol (mg)', 'Vitamin B6 (mg)', 'Vitamin A (IU)', 'Vitamin B12 (ug)', 'Vitamin C (mg)', 'Vitamin D (IU)', 'Vitamin E (IU)', 'Vitamin K (ug)', 'Thiam",
    "```json\n{\n    \"solution\": \"df['Sodium (g)'].gt(1).sum()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: What is the maximum income of a customer?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Income'].max()\"\n}\n```\n\nInput DataFrame columns: ['index', 'card_id', 'city_id', 'city_name', 'first_active_month', 'feature_1', 'feature_2', 'feature_3', 'target', 'target_mean', 'target_median', 'target_min', 'target_max', 'target_std', 'category_1', 'category_2', 'category_3', 'num_events', 'num_sales', 'num_purchases', 'num_holiday_purchases', 'category_1_mean', 'category_2_mean', 'category_3_mean', 'category_1_median', 'category_2_median', 'category_3_median', 'category_1_min', 'category_2_min', 'category_3_min', 'category_1_max', 'category_2_max', 'category_3_max', 'category_1_std', 'category_2_std', 'category_3_std']\nQuestion: What is the mean num_purchases, given that num_holiday_purchases is 0?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df",
    "```json\n{\n    \"solution\": \"df['Protein (g)'].max()\"\n}\n```\n\nInput DataFrame columns: ['neighbourhood_group', 'neighbourhood', 'latitude', 'longitude', 'room_type', 'price', 'minimum_nights', 'number_of_reviews', 'reviews_per_month']\nQuestion: Is there any room type that has a price higher than 100?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['price'].gt(100).any()\"\n}\n```\n\nInput DataFrame columns: ['UF', 'regiao', 'nome', 'populacaoTCU2019', 'populacao', 'densidade demografica', 'projecao populacional 2020', 'crescimento populacional 2020', 'area (km\u00b2)', 'populacaoAbaixo25Anos', 'populacao25a64Anos', 'populacao65a74Anos', 'populacao75a84Anos', 'populacao85AnosOuMais', 'taxa de fecundidade', 'homens', 'mulheres']\nQuestion\nQuestion: What's the total population between the years 1991 and 1993?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['populacao25a64Anos'].sum()\"\n}\n```\n\nInput DataFrame columns: ['neighborhood', 'zipcode', 'lat', 'lon', 'room_id', 'room_name', 'host_id', 'host_name', 'room_type', 'price', 'minimum_nights', 'number_of_reviews', 'last_review', 'reviews_per_month', 'calculated_host_listings_count', 'availability_365', 'cleaning_fee']\nQuestion: What's the total cost of cleaning a room for a year?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['cleaning_fee'].sum()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Calories (kcal)'].idxmax()]['name']\"\n}\n```\n\nInput DataFrame columns: ['CustomerID', 'Gender', 'Age', 'Occupation', 'City_Category', 'Stay_In_Current_City_Years', 'Marital_Status', 'Product_Category_1', 'Product_Category_2', 'Product_Category_3', 'Purchase']\nQuestion: What product category has the most purchases?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Product_Category_1').apply(lambda g: g['Purchase'].sum()).idxmax()\"\n}\n```\n\nInput DataFrame columns: ['children', 'school', 'sex', 'address', 'famsize', 'Pstatus', 'Medu', 'Fedu', 'Mjob', 'Fjob', 'reason', 'guardian', 'traveltime', 'studytime', 'failures', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences', 'G1', 'G2', 'G3']\nQuestion: How many students study for more than 3 hours per week?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['studytime'] > 3]['studytime'].count()\"\n}\n```\n\nInput DataFrame columns: ['SocialStatus', 'Age', 'Profession', 'CurrentEarnings', 'Sex', 'Education', 'HispanicEasternLatino', 'Race', 'MaritalStatus', 'Children', 'VehicleOccupied', 'HomeOwnerStatus', 'HomeOwnerStatus', 'HomeValue', 'HomeNetWorth', 'HomeAnnualIncome', 'HomeMortgage', 'HomeMortgage', 'CarMileage', 'Cars', 'HomeType', 'HomeYears', 'CarValue', 'HouseValue', 'HouseType', 'HousingArea', 'HousingUnits', 'CollegeCredential', 'JobSatisfaction', 'JobHours', '",
    "```json\n{\n    \"solution\": \"df['Total Sugar (g)'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23', 'x24', 'x25', 'x26', 'x27', 'x28', 'x29', 'x30', 'x31', 'x32', 'x33', 'x34', 'x35', 'x36', 'x37', 'x38', 'x39', 'x40', 'x41', 'x42', 'x43', 'x44', 'x45', 'x46', 'x47', 'x48', 'x49', 'x50', 'x51', 'x52', 'x53', 'x54', 'x55', 'x56', 'x57', 'x58', 'x59', 'x60', 'x61', 'x62', 'x63', 'x64', 'x65', 'x66', 'x67', 'x68', 'x69', 'x70', 'x71', 'x72', 'x73', 'x74', 'x75', 'x76', 'x77', 'x78', 'x79', 'x80', 'x81', 'x82', 'x83', 'x84', 'x85', 'x86', 'x87', 'x88', 'x89', 'x90', 'x91', 'x92', 'x93', 'x94', 'x95",
    "```json\n{\n    \"solution\": \"df.loc[df['Total Fat (g)'].idxmin(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['recipe_id', 'title', 'preparation_time', 'cook_time', 'ingredients', 'instructions', 'rating', 'total_time', 'n_comments', 'date', 'author', 'author_type', 'n_followers', 'author_id', 'user_id', 'n_posts', 'n_ingredients', 'n_steps', 'tags']\nQuestion: Which cook time has the highest average rating?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['cook_time'])['rating'].mean().sort_values(ascending=False).index[0]\"\n}\n```\n\nInput DataFrame columns: ['reviews', 'date', 'id', 'rating', 'food', 'service', 'value', 'reviewer_id', 'reviewer_name', 'categories', 'restaurant_id']\nQuestion: Which restaurant has the most reviews?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['restaurant_id'])['id'].count().sort_values(ascending=False).index[0]\"\n}\n```\n\nInput DataFrame columns: ['profile_id', 'polarity', 'subjectivity', 'username', 'text', 'date', 'query', 'user_id', 'retweet_count', 'is_retweet']\nQuestion: How many tweets by the user Leo Stein have the most retweets?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['username'] == 'Leo Stein']['retweet_count'].max()\"\n}\n```\n\nInput DataFrame columns: ['user', 'estimate', 'position', 'region', 'date']\nQuestion: Which is the top 10 highest-earning regions?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['region'])['estimate'].sum().nlargest(10).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df[df['Protein (g)'].gt(0)].sort_values('Protein (g)').iloc[-1,'name']\"\n}\n```\n\nInput DataFrame columns: ['male', 'age', 'desc', 'tweet_id', 'created_at', 'source', 'fav_count', 'hashtags', 'retweet_count', 'verified', 'reply_count', 'likes_count', 'length', 'paw_dog_group', 'dog_breed', 'dog_breed_confidence', 'dog_types', 'image_url', 'predict_1', 'predict_1_confidence', 'predict_2', 'predict_2_confidence', 'predict_3', 'predict_3_confidence', 'tweet_timestamp', 'tweet_day', 'tweet_hour', 'favorite_count', 'retweet_count', 'dog_type', 'jpg_url', 'expanded_urls', 'named', 'retweeted', 'user_id']\nQuestion: How many female dogs are present in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['male'].str.contains('Female').value_counts().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'timestamp', 'text', 'source', 'expanded_urls', 'rating_numerator', 'rating_denominator', 'name', 'doggo', 'floofer', 'pupper', 'puppo', 'retweet_count', 'favorite_count']\nQuestion: Is there a dog with a rating denominator other than 10?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['rating_denominator'].ne(10).any()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'Self-made', 'ID', 'year', 'gender', 'age', 'org', 'networth', 'category', 'source', 'country', 'state', 'city', 'stateprov', 'organization', 'selfMade', 'gender1', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about1', 'about",
    "```json\n{\n    \"solution\": \"df.nlargest(5, 'Calories (kcal)')['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['sequence', 'id', 'title', 'body', 'tags', 'answer_count', 'comment_count', 'favorite_count', 'creation_date', 'last_activity_date']\nQuestion: What are the top 10 most popular questions on StackOverflow?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.nlargest(10, 'favorite_count')['title'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['balance', 'favs', 'tweet_count', 'verified', 'followers_count', 'species', 'created_at', 'statuses_count', 'name', 'id', 'location', 'description', 'tweet_text', 'default_profile_image', 'profile_image_url', 'screen_name', 'location_id', 'date_time', 'place', 'retweet_count', 'user_mentions', 'hashtags', 'url', 'mentions', 'language', 'lang', 'in_reply_to_user_id', 'in_reply_to_status_id', 'in_reply_to_screen_name', 'retweeted_status', 'full_text', 'truncated']\nQuestion: Are there any tweets written in Dutch?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['language'].eq('nl').any()\"\n}\n```\n\nInput DataFrame columns: ['title', 'body', 'category', 'date_posted', 'source', 'language']\nQuestion: What are categories that have the biggest number of posts?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['category'].value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Name']\nQuestion: What is the maximum daily percentage return?\nExpected return type: number\n\nCode that calculates the answer:\n```json",
    "```json\n{\n    \"solution\": \"df['Total Sugar (g)'].nsmallest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'company_id', 'employee_id', 'points', 'log_id', 'branch_id', 'branch_name', 'grading_date', 'date_of_creation', 'created_by', 'last_updated', 'last_updated_by', 'is_deleted', 'status', 'comments']\nQuestion: How many branches have been visited by the IT company?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['company_id'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'company_id', 'employee_id', 'points', 'log_id', 'branch_id', 'branch_name', 'grading_date', 'date_of_creation', 'created_by', 'last_updated', 'last_updated_by', 'is_deleted', 'status', 'comments']\nQuestion: In the most visited branch, what was the maximum number of points?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['branch_id'] == df['branch_id'].mode().iloc[0]]['points'].max()\"\n}\n```\n\nInput DataFrame columns: ['page_path', 'page_title', 'users', 'sessions', 'pageviews', 'bounces', 'avg_time_on_site', 'exit_rate', 'bounce_rate', 'new_users', 'new_sessions', 'unique_visitors']\nQuestion: Which page has the highest exit rate?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['page_path'].loc[df['exit_rate'].idxmax()]\"\n}\n```\n\nInput DataFrame columns: ['Acres', 'Name_of_Town', 'Latitude', 'Longitude', 'Total_Pop', 'Total_Pop_Male', 'Total_Pop_Female', 'Foreign_Born', 'Foreign_Born_Male', 'Foreign_Born_Female', 'Births', 'Birth",
    "```json\n{\n    \"solution\": \"df.sort_values('Total Fat (g)', ascending=False).head(4)['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['health_status', 'country', 'user_id', 'likes_rec_prod_name', 'likes_rec_category', 'likes_prod_name', 'likes_category', 'dislikes_rec_prod_name', 'dislikes_rec_category', 'dislikes_prod_name', 'dislikes_category', 'review_date', 'review_text', 'rating', 'ambience_class', 'ambience_class_cat', 'restaurant_id_order', 'restaurant_id_recommended_order', 'user_id_recommended_order']\nQuestion: Does the number of likes on the recommended products differ between the 2 categories?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('ambience_class')['likes_rec_prod_name'].sum().gt(0).any()\"\n}\n```\n\nInput DataFrame columns: ['ArrivalDateAtHotel', 'ArrivalDateWeekNumber', 'ArrivalDateYear', 'IsCanceled', 'DaysInWaitingList', 'CustomerType', 'ADR', 'RoomType', 'BookingChanges', 'RequiredCarParkingSpaces', 'TotalOfSpecialRequests', 'ReservationStatusDate', 'meal', 'country', 'market segment', 'distribution channel', 'is_repeated_guest', 'reserved_room_type', 'assigned_room_type', 'deposit_type', 'days_in_waiting_list', 'company', 'reservation_status', 'distribution_channel', 'hotel', 'reserved_room_type', 'assigned_room_type', 'deposit_type', 'days_in_waiting_list', 'company', 'reservation_status', 'reservation_status_date']\nQuestion: Is there any customer allergic to meat in the dataset?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['meal'].str.contains('meat').any()\"\n}\n```\n\nInput DataFrame columns: ['age', 'job', 'marital', 'education', 'default', 'balance', 'housing',",
    "```json\n{\n    \"solution\": \"df.nsmallest(6, 'Protein (g)')['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['first_review', 'last_review', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'reviews_per_month']\nQuestion: Where do you usually find average reviews?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"\"\"\n    df['reviews'] = df.apply(lambda row: [\n        row['review_scores_accuracy'],\n        row['review_scores_cleanliness'],\n        row['review_scores_checkin'],\n        row['review_scores_communication'],\n        row['review_scores_location'],\n        row['review_scores_value']\n    ], axis=1)\n    df['avg_reviews'] = df['reviews'].apply(lambda x: sum(x) / len(x))\n    df['avg_reviews'] = df['avg_reviews'].round(decimals=2)\n    return df['avg_reviews'].mean()\"\"\"\n}\n```\n\nInput DataFrame columns: ['date', 'values']\nQuestion: What are the 4 most recent values?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['values'].nlargest(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['date', 'values']\nQuestion: What are the 4 least recent values?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['values'].nsmallest(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Manufacturer', 'Model', 'Label', 'Description', 'Active Ingredients', 'Ingredient Names', 'Strength', 'Manufacturer Country', 'Strength Units', 'Manufacturer ID', 'NDC', 'FDA Schedule', 'Unii', 'Form', 'Route', 'Pharm_Clas', 'Pharm_SubClas', 'Pharm_Actives', 'Emb_Date', 'Emb_Lot',",
    "```json\n{\n    \"solution\": \"df['Calories (kcal)'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'emoji', 'Calories (kcal)', 'Carbohydrates (g)', 'Total Sugar (g)', 'Protein (g)', 'Total Fat (g)', 'Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)', 'Total Fiber (g)', 'Cholesterol (mg)', 'Vitamin B6 (mg)', 'Vitamin A (IU)', 'Vitamin B12 (ug)', 'Vitamin C (mg)', 'Vitamin D (IU)', 'Vitamin E (IU)', 'Vitamin K (ug)', 'Thiamin (mg)', 'Riboflavin (mg)', 'Niacin (mg)', 'Folate (ug)', 'Pantothenic Acid (mg)', 'Choline (mg)', 'Calcium (g)', 'Copper (mg)', 'Iron (mg)', 'Magnesium (mg)', 'Manganese (mg)', 'Phosphorus (g)', 'Potassium (g)', 'Selenium (ug)', 'Sodium (g)', 'Zinc (mg)']\nQuestion: List all of the unique names in the dataset.\nExpected return type: list[string]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['name'].unique().tolist()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Customer', 'State', 'Product', 'Age', 'Gender', 'Education', 'MaritalStatus', 'Income', 'Kidhome', 'Teenhome', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact',",
    "```json\n{\n    \"solution\": \"df['Total Sugar (g)'].nsmallest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['index', 'name', 'calories', 'carbs', 'sugars', 'protein', 'fat', 'saturated', 'monounsaturated', 'polyunsaturated', 'fiber', 'cholesterol', 'vitamin_b6', 'vitamin_a', 'vitamin_b12', 'vitamin_c', 'vitamin_d', 'vitamin_e', 'vitamin_k', 'thiamin', 'riboflavin', 'niacin', 'folate', 'pantothenic_acid', 'choline', 'calcium', 'copper', 'iron', 'magnesium', 'manganese', 'phosphorus', 'potassium', 'selenium', 'sodium', 'zinc']\nQuestion: Which 3 foods have the lowest amount of carbohydrate?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['carbs'].nsmallest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'calories', 'carbs', 'sugars', 'protein', 'fat', 'saturated', 'monounsaturated', 'polyunsaturated', 'fiber', 'cholesterol', 'vitamin_b6', 'vitamin_a', 'vitamin_b12', 'vitamin_c', 'vitamin_d', 'vitamin_e', 'vitamin_k', 'thiamin', 'riboflavin', 'niacin', 'folate', 'pantothenic_acid', 'choline', 'calcium', 'copper', 'iron', 'magnesium', 'manganese', 'phosphorus', 'potassium', 'selenium', 'sodium', 'zinc']\nQuestion: What are the 3 foods with the lowest amount of protein?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['protein'].nsmallest",
    "```json\n{\n    \"solution\": \"df['Total Fat (g)'].nlargest(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'calories', 'total_fat', 'saturated_fat', 'sodium', 'protein', 'carbohydrates', 'sugars', 'calcium', 'iron', 'badge_type', 'badge_name', 'badges', 'badge_description', 'badge_background_color', 'badge_title', 'badge_text_color']\nQuestion: Which category of food has the highest amount of saturated fat?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['saturated_fat'].idxmax(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['progress_id', 'user_id', 'progress', 'time_spent', 'is_Project', 'created_at', 'updated_at', 'project_id', 'resource_type', 'lesson_id']\nQuestion: What is the user with the most progress?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['progress'].idxmax(), 'user_id']\"\n}\n```\n\nInput DataFrame columns: ['discrete_age', 'report_id', 'report_type', 'report_year', 'total_cases', 'new_cases', 'total_deaths', 'new_deaths', 'crude_death_rate', 'life_expectancy', 'fine_sper_1000_people', 'standard_error_95_ci', 'lower_95_ci', 'upper_95_ci', 'gdp_per_capita', 'log_gdp_per_capita', 'median_age', 'male_smokers', 'female_smokers', 'smokers', 'population_age_60', 'population_age_70', 'population_age_80', 'population_age_90', 'population_age_00', 'population_age_10', 'population_age_20', 'population_age_30', 'population_age",
    "```json\n{\n    \"solution\": \"df.sort_values('Protein (g)', ascending=True).head(6)['Protein (g)'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['ate', 'sunglasses', 'footwear', 'necktie', 'clown', 'dress', 'hats', 'glasses', 'dining_table', 'pillows', 'pants', 'boots', 'sweater', 'bag', 'backpack', 'horn', 'rug', 'towel', 'umbrella', 'tie', 'skirt', 'sunscreen', 'rain_coat', 'scarf', 'bag', 'cane_stick', 'cell_phone_and_charger', 'wallet', 'head_lamp', 'bluetooth', 'usb', 'speaker', 'charger', 'ear_cuff', 'rr', 'jeans', 'mask', 'belt', 'sunglass', 'cap', 'sunblock', 'hat', 'hair_dryer', 'shirt', 'glasses_and_sunglasses', 'blazer', 'jacket', 'jewelry', 'scarf', 'purse', 'glasses_and_sunglasses', 'purse', 'hat', 'jacket', 'shirt', 'scarf', 'boots', 'backpack', 'purse', 'jacket', 'glasses_and_sunglasses', 'shoes', 'purse', 'jacket', 'mask', 'boots', 'backpack', 'shoes', 'shoes', 'mask', 'shoes', 'sunglass', 'backpack', 'purse', 'jacket', 'shirt', 'scarf', 'backpack', 'shirt', 'boots', 'purse', 'backpack', 'sunscreen', 'backpack', 'sunglass', 'boots', 'shoes', 'backpack', 'backpack', 'shirt', 'purse', 'shoe', 'pants', 'purse', 'shoes', 'jacket', 'pants', 'shirt', 'sun_glasses_eyewear', 'shirt', 'sun_glasses_eyewear', 'shirt', 'belt', '",
    "```json\n{\n    \"solution\": \"df['edu'].str.contains('Primary').any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'new_id', 'created_at', 'image_url', 'description', 'bounding_box', 'tags']\nQuestion: Which pet is the most common?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['tags'].str.split(', ').explode().value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'dog_breed', 'dog_breed_name', 'dog_breed_confidence', 'dog_breed_family', 'dog_breed_pattern', 'dog_breed_group', 'dog_breed_sub_group', 'dog_breed_family_name', 'dog_breed_sub_group_name', 'dog_breed_pattern_name', 'dog_breed_group_name']\nQuestion: What is the family name of the most common dog breed?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['dog_breed_family_name'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'dog_breed', 'dog_breed_name', 'dog_breed_confidence', 'dog_breed_family', 'dog_breed_pattern', 'dog_breed_group', 'dog_breed_sub_group', 'dog_breed_family_name', 'dog_breed_sub_group_name', 'dog_breed_pattern_name', 'dog_breed_group_name']\nQuestion: What is the family name of the most common dog breed?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['dog_breed_family_name'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'new_id', 'created_at', 'image_url', 'description', 'bounding_box', 'tags']",
    "```json\n{\n    \"solution\": \"df['polInterest'].nunique() == 1\"\n}\n```\n\nInput DataFrame columns: ['StartDate', 'EndDate', 'Status', 'IPAddress', 'Progress', 'Duration (in seconds)', 'Finished', 'RecordedDate', 'ResponseId', 'RecipientLastName', 'RecipientFirstName', 'RecipientEmail', 'ExternalReference', 'LocationLatitude', 'LocationLongitude', 'DistributionChannel', 'UserLanguage', 'Q0001', 'Q0002', 'Q0003', 'Q0004', 'Q0005', 'Q0006', 'Q0007', 'Q0008', 'Q0009', 'Q0010', 'Q0011', 'Q0012', 'Q0013', 'Q0014', 'Q0015', 'Q0016', 'Q0017', 'Q0018', 'Q0019', 'Q0020', 'Q0021', 'Q0022', 'Q0023', 'Q0024', 'Q0025', 'Q0026', 'Q0027', 'Q0028', 'Q0029', 'Q0030', 'Q0031', 'Q0032', 'Q0033', 'Q0034', 'Q0035', 'Q0036', 'Q0037', 'Q0038', 'Q0039', 'Q0040', 'Q0041', 'Q0042', 'Q0043', 'Q0044', 'Q0045', 'Q0046', 'Q0047', 'Q0048', 'Q0049', 'Q0050', 'Q0051', 'Q0052', 'Q0053', 'Q0054', 'Q0055', 'Q0056', 'Q0057', 'Q00",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].str.contains('No').any()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Education', 'Gender', \"I'm not sure (I won't choose)\", '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'Post-Communist', 'Spain should be in the EU', 'The interests of the working class (Working-class)', 'The interests of the working class (Working-class)', 'Working-class (Ideologically)', 'Working-class (Ideologically)', 'Working class', 'Working class', 'Working class', 'Working class', 'Working class', 'Working class', 'Working class', 'Working class', 'Working class', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place', 'Yes, the current government should remain in place']\nQuestion: Does the first respondent prefer",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].eq('Right-Left').any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'email', 'gender', 'age', 'phone', 'address', 'created_at', 'updated_at']\nQuestion: Who is the youngest voter?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['age'].idxmin(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['Entrez Gene', 'RefSeq IDs', 'Description', 'Gene Title', 'Gene Symbol', 'Chromosome', 'Start', 'End', 'Strand', 'Gene Type', 'Transcript Type', 'Transcript', 'Isoform', 'CDS Start', 'PolyA Site', 'CDS End', 'Biotype', 'Symbol', 'Gene ID', 'HGNC ID', 'Protein ID', 'Transcript ID', 'HGVSc', 'HGVSg', 'HGVSp', 'Ensembl Transcript ID', 'Ensembl Gene ID', 'RefSeq IDs', 'UniProt', 'Ensembl Transcript Type', 'Ensembl Biotype', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated Gene Name', 'Associated",
    "```json\n{\n    \"solution\": \"return df['User self- placement on Progressive-Conservative economic values axis'].eq(10).sum()\"\n}\n```\n\nInput DataFrame columns: ['Timestamp', 'Q1a', 'Q1b', 'Q1c', 'Q1d', 'Q1e', 'Q1f', 'Q1g', 'Q1h', 'Q1i', 'Q1j', 'Q1k', 'Q1l', 'Q1m', 'Q1n', 'Q1o', 'Q1p', 'Q1q', 'Q1r', 'Q1s', 'Q1t', 'Q1u', 'Q1v', 'Q1w', 'Q1x', 'Q1y', 'Q1z', 'Q1aa', 'Q1ab', 'Q1ac', 'Q1ad', 'Q1ae', 'Q1af', 'Q1ag', 'Q1ah', 'Q1ai', 'Q1aj', 'Q1ak', 'Q1al', 'Q1am', 'Q1an', 'Q1ao', 'Q1ap', 'Q1aq', 'Q1ar', 'Q1as', 'Q1at', 'Q1au', 'Q1av', 'Q1aw', 'Q1ax', 'Q1ay', 'Q1az', 'Q2', 'Q3b', 'Q3c', 'Q3d', 'Q3e', 'Q3g', 'Q3h', 'Q3i', 'Q3j', 'Q3k', 'Q3l', 'Q3m', 'Q3n', 'Q3o', 'Q3p', 'Q3q', 'Q3r', 'Q3s', 'Q3t', 'Q3u', 'Q3v', 'Q3w', 'Q3x', 'Q3y', 'Q3z', 'Q4', 'Q5', 'Q6', 'Q7b', 'Q7c', 'Q7d', 'Q7e', 'Q7f', 'Q7g', 'Q7h', 'Q7i', 'Q7j', 'Q7k', 'Q7l', '",
    "```json\n{\n    \"solution\": \"df['Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Zipcode', 'Gender', 'Income', 'Occupation', 'Marital Status', 'ProductID', 'CategoryID', 'PurchaseAmount']\nQuestion: What is the percentage of respondents who purchase more than 300?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Gender')['PurchaseAmount'].apply(lambda x: sum(x > 300) / len(x)).tolist()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'name', 'gender', 'age', 'height', 'weight', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio']\nQuestion: What is the average weight of the respondents who have cholesterol level of 2?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['cholesterol'] == 2, 'weight'].mean()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Name', 'Gender', 'Age', 'Height', 'Weight', 'ap_hi', 'ap_lo', 'Cholesterol', 'Gluc', 'Smoke', 'Alco', 'Active', 'Cardio']\nQuestion: What is the maximum number of alcoholic drinks that male respondents have drunk?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Gender'] == 'M'].Alco.max()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Gender', 'Age', 'Height', 'Weight', 'ap_hi', 'ap_lo', 'Cholesterol', 'Gluc', 'Smoke', 'Alco', 'Active', 'Cardio']\nQuestion: What is the percentage of female respondents who are considered as healthy?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Gender'] == 'F',",
    "```json\n{\n    \"solution\": \"df['voteReason'].value_counts().loc['It should be more difficult for companies to lay off workers']\"\n}\n```\n\nInput DataFrame columns: ['Age', 'const', 'edu', 'gender', 'lang', 'partyId', 'polInterest', 'prevVote', 'prevVoteCat', 'prov', '\u00c7ollege women deserve better opportunities.']\nQuestion: How many people identify themselves as college women?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['const'] == 'College women deserve better opportunities.'].count()['voteReason']\"\n}\n```\n\nInput DataFrame columns: ['Vote Intention', 'Age', 'const', 'edu', 'gender', 'lang', 'partyId', 'polInterest', 'prevVote', 'prevVoteCat', 'prov', '\u00c7ollege women deserve better opportunities.']\nQuestion: What is the most common opinion regarding college women?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['const'] == 'College women deserve better opportunities.']['voteReason'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'const', 'edu', 'gender', 'lang', 'partyId', 'polInterest', 'prevVote', 'prevVoteCat', 'prov', '\u00c7ollege women deserve better opportunities.']\nQuestion: How many people think it is necessary to implement a law against child marriage?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['const'] == '\u00c7ollege women deserve better opportunities.']['voteReason'].value_counts().loc['The law against child marriage is necessary to limit the reproduction of human nature']\"\n}\n```\n\nInput DataFrame columns: ['Vote Intention', 'Age', 'const', 'edu', 'gender', 'lang', 'partyId', 'polInterest', 'prevVote', 'prevVoteCat', 'prov', 'The law against child marriage is necessary to limit the reproduction of human nature', 'Legislation of social equality is necessary",
    "```json\n{\n    \"solution\": \"df[(df['Vote Intention'].str.contains('Do not disclose my gender')) & (~df['gender'].str.contains('Do not disclose'))]['Age'].max()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: What is the minimum number of deal purchases made by a customer in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['NumDealsPurchases'].min()\"\n}\n```\n\nInput DataFrame columns: ['name', 'latitude', 'longitude', 'address', 'city', 'state', 'countryCode', 'country', 'zip', 'market', 'storeNumber', 'phone', 'menuPageUrl', 'website', 'specialInstructions', 'notes', 'internalId', 'externalId', 'businessName', 'description', 'createdAt', 'updatedAt', 'menus']\nQuestion: What are the top 6 tags used in the menu?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['menus']['tags'].explode().value_counts().nlargest(6).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Location', 'Category', 'Description', 'Price', 'Price.1']\nQuestion: What is the maximum price of a double cheeseburger?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df[df['Category'].str.lower() == 'bur",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].mode().iloc[0]\"\n}\n\nInput DataFrame columns: ['Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: What is the maximum number of family members on the ship?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['Parents_Children Aboard', 'Siblings_Spouses Aboard']].sum(axis=1).max()\"\n}\n```\n\nInput DataFrame columns: ['Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: How many passengers are traveling alone in first class?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[(df['Pclass'] == 1) & ((df['Parents_Children Aboard'] == 0) & (df['Siblings_Spouses Aboard'] == 0))])\"\n}\n```\n\nInput DataFrame columns: ['date', 'time', 'description', 'location', 'suspect_id', 'cleared']\nQuestion: Which are the 10 most dangerous suspects with respect to number of offenses?\nExpected return type: list[str]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['suspect_id'].value_counts().nlargest(10).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'Employee', 'Department', 'Salary', 'Sex', 'Date', 'Work Location', 'JobTitle', 'RoleCategory', 'Pay Rate', 'Work Location_1', 'Employee_1', 'Work Location_2', 'RoleCategory_1', 'Pay Rate_1', 'JobTitle_1', 'Employee_2', 'RoleCategory_2', 'Pay Rate_2', 'JobTitle_2', 'Department_1', 'Department_2', 'Department_3', 'Department_4', 'Department_5', 'Department_6', 'Department_7', 'Department_8', 'Department_9",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['page', 'article_id', 'language', 'region', 'year', 'month', 'day', 'hour', 'min', 'sec', 'author_id', 'author_name', 'author_email', 'article_name', 'article_url', 'article_text', 'total_comments']\nQuestion: How many articles are republished in English?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['language'].value_counts()[1]\"\n}\n```\n\nInput DataFrame columns: ['page', 'article_id', 'language', 'region', 'year', 'month', 'day', 'hour', 'min', 'sec', 'author_id', 'author_name', 'author_email', 'article_name', 'article_url', 'article_text', 'total_comments']\nQuestion: What is the average number of comments per article?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['total_comments'].mean()\"\n}\n```\n\nInput DataFrame columns: ['page', 'article_id', 'language', 'region', 'year', 'month', 'day', 'hour', 'min', 'sec', 'author_id', 'author_name', 'author_email', 'article_name', 'article_url', 'article_text', 'total_comments']\nQuestion: What is the most common author?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['author_name'].mode()[0]\"\n}\n```\n\nInput DataFrame columns: ['page', 'article_id', 'language', 'region', 'year', 'month', 'day', 'hour', 'min', 'sec', 'author_id', 'author_name', 'author_email', 'article_name', 'article_url', 'article_text', 'total_comments']\nQuestion: How many articles were published by ?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\":",
    "```json\n{\n    \"solution\": \"df['partyId'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['partyID', 'Voted', 'VoteIntention', 'Age', 'Gender', 'Lang', 'Marital status', 'Loc', 'Ideo', 'Ideology', 'Education', 'Prof', 'Income', 'Province', 'PartyID_Voteintention', 'Ideo_X_Voteintention', 'FileID', 'URL_Export', 'Source', 'Voted_1', 'Voted_2', 'Voted_3', 'Voted_4', 'Voted_5', 'Voted_6', 'Voted_7', 'Voted_8', 'Voted_9', 'Voted_10', 'Voted_11', 'Voted_12', 'Voted_13', 'Voted_14', 'Voted_15', 'Voted_16', 'Voted_17', 'Voted_18', 'Voted_19', 'Voted_20']\nQuestion: Which partyID, with or without VoteIntention, had the highest number of respondents?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('partyID')['Voted'].count().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['votedFor', 'Voted', 'VoteIntention', 'Age', 'Gender', 'Lang', 'Marital status', 'Loc', 'Ideo', 'Ideology', 'Education', 'Prof', 'Income', 'Province', 'PartyID_Voteintention', 'Ideo_X_Voteintention', 'FileID', 'URL_Export', 'Source', 'Voted_1', 'Voted_2', 'Voted_3', 'Voted_4', 'Voted_5', 'Voted_6', 'Voted_7', 'Voted_8', 'Voted_9', 'Voted_10', 'Voted_11', 'Voted_12', 'Voted_13', 'Voted_14', 'Voted_15', 'Voted_16', 'Voted",
    "```json\n{\n    \"solution\": \"df['lang'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['userID', 'itemID', 'rating', 'timestamp', 'jobID', 'title', 'genres']\nQuestion: Which movie got the highest average rating?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('title')['rating'].mean().nlargest(1).index[0]\"\n}\n```\n\nInput DataFrame columns: ['userId', 'movieId', 'rating', 'timestamp']\nQuestion: How many movies have been rated at least 50 times?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['movieId'].value_counts().ge(50).sum()\"\n}\n```\n\nInput DataFrame columns: ['userID', 'itemID', 'rating']\nQuestion: Which user rated the most movies?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['userID'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['userId', 'movieId']\nQuestion: How many movies have a userId value lower than 10?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['userId'] < 10]['movieId'].value_counts().sum()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'item_id', 'rating', 'timestamp']\nQuestion: How many ratings does the user with user_id 326 have?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['user_id'] == 326]['rating'].value_counts().sum()\"\n}\n```\n\nInput DataFrame columns: ['UserID', 'itemID', 'rating', 'timestamp']\nQuestion: How many ratings does the user with user_id 441 have?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['UserID'] == 441",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Car_Owner', 'Married', 'Rating', 'Children', 'Own_House/Flat', 'Year_of_Living', 'Living_Space', 'Car_Age', 'Energy_Performance', 'Gender', 'First_Contact', 'Telephone', 'Comfort_&_Safety', 'About_this_Episode']\nQuestion: What are the 5 most common comfort&safety ratings?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Comfort_&_Safety'].value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Date of Journey', 'Day of Journey', 'Time of Journey', 'Departure', 'Arrival', 'Airline', 'Airline_Name', 'Class', 'Price', 'Source', 'Destination', 'Stop1', 'Stop2', 'Stop3', 'Special_Services']\nQuestion: Which airline provide the lowest price?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Price'] == df['Price'].min()]['Airline_Name'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['v1', 'v2', 'v3', 'v4', 'v5', 'v6', 'v7', 'v8', 'v9', 'v10', 'v11', 'v12', 'v13', 'v14', 'v15', 'v16', 'v17', 'v18', 'v19', 'v20', 'v21', 'v22', 'v23', 'v24', 'v25', 'v26', 'v27', 'v28', 'v29', 'v30', 'v31', 'v32', 'v33', 'v34', 'v35', 'v36', 'v37', 'v38', '",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].str.split(' - ').explode().value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['age', 'education_level', 'city_level', 'speaking_english', 'political_ideology', 'gender', 'income', 'income_group', 'household_income_group', 'party_affiliation', 'vote_intention', 'time_spent_on_the_exercise', 'time_spent_on_exercise_group', 'political_expectations']\nQuestion: Which is the most common gender?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['gender'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['ID', 'diag_1', 'diag_2', 'diag_3', 'race', 'age', 'gender', 'admission_type_id', 'discharge_disposition_id', 'admission_source_id', 'time_in_hospital', 'num_lab_procedures', 'num_procedures', 'num_medications', 'number_outpatient', 'number_emergency', 'number_inpatient', 'diag_1_ Primary Diagnostic Code', 'diag_2_ Secondary Diagnostic Code', 'diag_3_ Tertiary Diagnostic Code', 'number_diagnoses', 'max_glu_serum', 'A1Cresult', 'metformin', 'repaglinide', 'nateglinide', 'chlorpropamide', 'glimepiride', 'acetohexamide', 'glipizide', 'glyburide', 'tolbutamide', 'pioglitazone', 'rosiglitazone', 'acarbose', 'miglitol', 'troglitazone', 'tolazamide', 'examide', 'citoglipton', 'insulin', 'glyburide-metformin', 'glipizide-metformin', 'glimepiride-pioglitazone', 'metformin-rosiglitazone', 'metformin-pioglitazone', 'change', 'diabetesMed",
    "```json\n{\n    \"solution\": \"df['partyId'].head(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'Q2', 'Q3A', 'Q3B', 'Q4A', 'Q4B', 'Q5A', 'Q5B', 'Q6A', 'Q6B', 'Q7A', 'Q8', 'Q9A', 'Q9B', 'Q9C', 'Q9D', 'Q9E', 'Q9F', 'Q10A', 'Q10B', 'Q10C', 'Q10D', 'Q10E', 'Q11A', 'Q11B', 'Q11C', 'Q11D', 'Q11E', 'Q11F', 'Q12A', 'Q12B', 'Q12C', 'Q12D', 'Q12E', 'Q13A', 'Q13B', 'Q13C', 'Q13D', 'Q13E', 'Q13F', 'Q13G', 'Q13H', 'Q13I', 'Q13J', 'Q14A', 'Q14B', 'Q14C', 'Q14D', 'Q14E', 'Q15A', 'Q15B', 'Q15C', 'Q15D', 'Q15E', 'Q16A', 'Q16B', 'Q16C', 'Q16D', 'Q16E', 'Q17A', 'Q17B', 'Q17C', 'Q17D', 'Q17E', 'Q18A', 'Q18B', 'Q18C', 'Q18D', 'Q18E', 'Q19A', 'Q19B', 'Q19C', 'Q19D', 'Q19E', 'Q20A', 'Q20B', 'Q20C', 'Q20D', 'Q20E', 'Q21A', 'Q21B', 'Q2",
    "```json\n{\n    \"solution\": \"df['edu'].value_counts().nlargest(3).index.to_list()\"\n}\n```\n\nInput DataFrame columns: ['id', 'rrss', 'date', 'text']\nQuestion: How many times in total was an article published on a RT?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.groupby('rrss')['id'].count()['rt.euskal.euskadi']\"\n}\n```\n\nInput DataFrame columns: ['id', 'rrss', 'date', 'text']\nQuestion: Which of the following RT words appear the most?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['text'].str.findall('(euskadi|politika|politika garaipena|euskaldunalk|behar|nafarrik|era|serikus|beruga|berandio|ESK|Eusko|zein|euskal|berandio|eskaer|eskokortasun|berdintasun|EUSKAL|euskalak|garaipenak|eskokortasuen|ESKA|eskaintza|eskaera|euskaldun|euskal-sentiments|euskalak|euskal-zg|kortasar|kortasuna|kortasun|kortasar|euskal-garaipena|euskal|eragun|euskal-eragun|euskal-berandio|euskal-sorri|euskal-berandio|kortasilar|euskalak|eskali|eskali|eskaltzako|eskaltzakoa|eskintza|euskalera|euskaldun|euskaldunean|euskaldun|euskaldun|euskaltzakoa|soberdi|eskaera|eskaintza|eskaltzakoa|euskaldun|euskaldunean|eus",
    "```json\n{\n    \"solution\": \"df['Age'].value_counts().iloc[:3].index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'abstract', 'text', 'bow', 'label', 'topic_label', 'topic_index']\nQuestion: Is there any respondent with empty abstract?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['abstract'].isnull().any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'abstract', 'text', 'bow', 'label', 'topic_label', 'topic_index']\nQuestion: How many respondents have an abstract?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['abstract'].notnull().sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'abstract', 'text', 'bow', 'label', 'topic_label', 'topic_index']\nQuestion: Which is the most common topic?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['topic_label'].mode()[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'abstract', 'text', 'bow', 'label', 'topic_label', 'topic_index']\nQuestion: Which is the topic with the lowest average number of words in the abstract of a paper?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['topic_label'])['abstract'].apply(lambda x: np.nanmean(x.apply(lambda x: len(x.split()))) if len(x) > 0 else np.nan).idxmin()\"\n}\n```\n\nInput DataFrame columns: ['abstract', 'label', 'topic_label', 'topic_index']\nQuestion: Which is the label with the lowest average number of words in the abstract?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['label'])['abstract'].apply(lambda x: np.nanmean(x.apply(lambda x: len(",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].str.split('\\\\b(\\\\-\\\\d*\\\\.\\\\d+)|(\\\\-?\\\\d+\\\\.\\\\d*)\\\\b').loc[df['Vote Intention'].str.split('\\\\b(\\\\-\\\\d*\\\\.\\\\d+)|(\\\\-?\\\\d+\\\\.\\\\d*)\\\\b').map(len).gt(1)].explode().value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Age', 'Gender', 'Education', 'Party', 'Vote_Intention', 'Economic_Value_Left_Right', 'Economic_Value_Progressive_Conservative', 'Fiscal_Tax_Values', 'Welfare_Aid_to_Poor', 'Pension_Program_Household_Income', 'Economic_Growth', 'Inflation', 'International_Debt', 'American_Debt', 'Redistribution_of_Wealth', 'Constitutional_Organisation_of_State', 'Measure_to_Increase_Cultural_and_Linguistic_Diversity', 'Measure_to_Increase_Decentralization', 'Enforcement_of_Codes_of_Public_Security', 'Redistribution_of_Wealth', 'Measures_to_Control_Crime', 'Shift_to_More_Efficient_Accommodation_of_Public_Funds', 'Shift_to_Efficiency_in_the_Distribution_of_Public_Funds', 'Support_for_the_University_System', 'Support_for_Clean_and_Recyclable_Energy', 'Support_for_Free_Public_Transportation', 'Support_for_More_Security_Measures_to_Reduce_the_Risk_of_Crime', 'Support_for_Private_Sector_Participation', 'Support_for_Increased_Taxes', 'Support_for_Decreased_Taxes', 'Support_for_Austerity_Policies', 'Support_for_an_Election_for_a_President', 'Support_for_the_People', 'Support_for_the_Pensioners', 'Support_for_the_Elderly', 'Support",
    "```json\n{\n    \"solution\": \"df['User self- placement on Progressive-Conservative economic values axis'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['User self-placement on Left-Right economic values axis', 'User self-placement on Progressive-Conservative economic values axis', 'User self-placement on conservative economic values axis', 'User self-placement on liberal economic values axis', 'User self- placement on Conservative economic values axis', 'What kind of terrorist do you consider yourself?', 'What is your occupation?', 'What is the nature of your household?', 'What is your civil status?', 'How long have you been a resident of this city? \ud83c\udfe1', 'How old are you?', 'How long have you been a resident of the country? \ud83c\uddea\ud83c\uddf8', 'How old were you when you immigrated to the country? \ud83c\uddea\ud83c\uddf8', 'What is your highest level of education?', 'What is the nature of your relationship with your country of residence?', 'How do you consider your relationship with your country of residence?', 'In which part of the world do you live?', 'What is the nature of your country of residence?', 'What is the nature of your residence?', 'When did you immigrated to the country?', 'What is your country of origin?', 'What is the nature of your relationship with your country of origin?', 'How do you consider your relationship with your country of origin?', 'In which part of the world are you from?', 'What is your country of origin?', 'What is the nature of your residence?', 'What is your place of residence any longer?', 'What is your place of residence now?', \"How do you consider your place of residence?\", 'In which country are you from?', 'What is your country of residence?', 'What is your place of residence?', 'What is the nature of your relationship with your country of origin?', 'How long have you been a resident of the country?', 'What is your highest level of education?', 'What is the nature of your relationship with your country?', 'What is the nature of your residence?', 'How do you consider your relationship with your country?', 'What is the nature",
    "```json\n{\n    \"solution\": \"df['Constitutional organisation of the country (More Descentralization)'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['cement_measure_id', 'date', 'cement_reason', 'cement_type', 'cement_unit_price', 'fossil_fuel_usage', 'non_fossil_fuel_usage', 'hydroelectric_units_planned', 'hydroelectric_units_planned', 'primary_energy_input', 'price', 'fossil_fuel_units', 'non_fossil_fuel_units', 'hydroelectric_units', 'fossil_fuel_consumption', 'non_fossil_fuel_consumption', 'hydroelectric_units_planned', 'fossil_fuel_units', 'non_fossil_fuel_units', 'fossil_fuel_consumption', 'non_fossil_fuel_consumption', 'fossil_fuel_consumption', 'non_fossil_fuel_consumption', 'hydroelectric_units_planned', 'fossil_fuel_consumption', 'fossil_fuel_units', 'hydroelectric_units', 'non_fossil_fuel_consumption', 'fossil_fuel_units', 'non_fossil_fuel_units', 'primary_energy_input', 'non_fossil_fuel_units', 'cement_type', 'fossil_fuel_units', 'hydroelectric_units', 'non_fossil_fuel_units', 'fossil_fuel_units', 'non_fossil_fuel_units', 'fossil_fuel_consumption', 'non_fossil_fuel_consumption', 'hydroelectric_units_planned', 'fossil_fuel_units', 'non_fossil_fuel_units', 'primary_energy_input', 'price']\nQuestion: What is the maximum number of units of non-fossil fuel consumed?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['non_fossil_fuel_units']."
]