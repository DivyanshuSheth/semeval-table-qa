[
    "```json\n{\n    \"solution\": \"df[df['lang'].eq('es')]['favorites'].max() == df[df['lang'].eq('en')]['favorites'].max()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Start Time', 'Location', 'Start Latitude', 'Start Longitude', 'End Location', 'End Latitude', 'End Longitude', 'Miles', 'Minutes', 'Start City', 'Start Country', 'End City', 'End Country', 'Type', 'Start State', 'End State', 'Start Address', 'End Address', 'Gender', 'Age', 'Stance', 'Goal', 'No. of Hands', 'Duration', 'Time Lapse', 'Meters', '# of Laps', 'Comment', 'Notes', 'username', 'author', 'author_username', 'author_id', 'date', 'location', 'place', 'latitude', 'longitude', 'location_city', 'location_county', 'location_state', 'location_country', 'location_country_code', 'location_region', 'location_region_code', 'location_ZIP', 'location_latitude', 'location_longitude', 'added_by_id', 'added_by_username', 'added_by_name', 'added_by_uploaded_picture_url', 'added_by_css_class', 'twitter_id', 'url', 'comment_count']\nQuestion: Are there any armed+persons trips?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Stance'].eq('armed+persons').any()\"\n}\n```\n\nInput DataFrame columns: ['age', 'diagnosis', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal']\nQuestion: What is the highest level of diastolic blood pressure?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['trestbps'].max()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Start Time', 'End Time', 'Duration (mins)', 'Start Location', 'End Location', 'Start Latitude', 'Start Longitude',",
    "```json\n{\n    \"solution\": \"df['author_name'].str.len().max() == len(df.loc[df['author_name'].idxmax(), 'text'])\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'label', 'tweet']\nQuestion: Does the tweet start with the text \"the\"?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[0, 'tweet'].startswith('the')\"\n}\n```\n\nInput DataFrame columns: ['label', 'tweet', 'tweet_length']\nQuestion: How many tweets are longer than 60 characters?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['tweet_length'] > 60]['tweet'].count()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'subject', 'date', 'from', 'to', 'message', 'sentiment', 'sentiment_score']\nQuestion: What is the average sentiment score of messages sent from '' to ''?\nExpected return type: float\n\nOutput:\n```json\n{\n    \"solution\": \"df[(df['from'] == '') & (df['to'] == '')]['sentiment_score'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'review_id', 'user_id', 'business_id', 'stars', 'date', 'text', 'useful', 'funny', 'cool', 'province', 'City', 'full_address', 'latitude', 'longitude', 'categories']\nQuestion: Does the record with the most 'cool' votes belong to a restaurant?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['cool'].idxmax(), 'categories'].str.contains('Restaurant').all()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'business_id', 'name', 'neighborhood', 'address', 'city', 'state', 'postal_code', 'latitude', 'longitude', 'stars', 'review_count', 'is_open', 'attributes', 'categories', 'hours']\nQuestion: What is the mean number of reviews for rest",
    "```json\n{\n    \"solution\": \"df['retweets'].eq(0).all()\"\n}\n```\n\nInput DataFrame columns: ['title', 'text', 'tokenized_title', 'tokenized_text', 'bag_of_words_title', 'bag_of_words_text', 'bag_of_words_title_sparse', 'bag_of_words_text_sparse', 'tfidf_title', 'tfidf_text', 'tfidf_title_sparse', 'tfidf_text_sparse', 'predictions_title', 'predictions_text', 'title_prediction_score', 'text_prediction_score', 'predictions_title_text', 'predictions_title_score', 'predictions_text_score', 'title_text_prediction_score', 'title_text_prediction_id', 'title_text_prediction_text', 'labels', 'model_name', 'model_params', 'n_components', 'n_iter', 'n_top_words', 'lda_type', 'num_topics', 'random_state', 'alpha', 'eta', 'chunksize', 'passes', 'iterations', 'perplexity']\nQuestion: What are the top 5 most common words in the title and what are the top 5 words in the text?\nExpected return type: list[string]\n\nOutput:\n```json\n{\n    \"solution\": \"df[['title', 'text']].apply(lambda col: col.str.extract('(\\\\b\\\\w+\\\\b)', expand=False).value_counts().index.tolist()[:5]).tolist()\"\n}\n```\n\nInput DataFrame columns: ['title', 'text', 'tokenized_title', 'tokenized_text', 'bag_of_words_title', 'bag_of_words_text', 'bag_of_words_title_sparse', 'bag_of_words_text_sparse', 'tfidf_title', 'tfidf_text', 'tfidf_title_sparse', 'tfidf_text_sparse', 'predictions_title', 'predictions_text', 'title_prediction_score', 'text_prediction_score', 'predictions_title_text', 'predictions_title_score', 'predictions_text_score', 'title_text_prediction_score', 'title",
    "```json\n{\n    \"solution\": \"return list(df['links_first'].isna()).count(True) > 0\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What are the most frequently used hashtags\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['text'].str.findall(r'#(\\w+)').explode().value_counts().nlargest(6).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many posts contain the word \"cinema\"?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"return (df['text'].str.lower().str.contains('cinema')).sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What is the most used hashtag in the first 150 characters of the post?\nExpected return type: category\n\nOutput:",
    "```json\n{\n    \"solution\": \"print(df['author_id'].nunique())\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many tweets do we have in the dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"print(df['id'].nunique())\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: Which author has the longest name?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"print(df['author_name'].str.len().max())\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: Which tweet has the highest number of retweets?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"print(df['retweets'].max())\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler",
    "```json\n{\n    \"solution\": \"df['text'].str.split(' ').str.len().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'event', 'team', 'score1', 'score2', 'result1', 'result2', 'result3', 'result4', 'result5', 'result6', 'result7', 'result8', 'result9', 'result10', 'result11', 'result12', 'result13', 'result14', 'result15', 'result16', 'result17', 'result18', 'result19', 'result20', 'result21', 'result22', 'result23', 'result24', 'result25', 'result26', 'result27', 'result28', 'result29', 'result30', 'result31', 'result32', 'result33', 'result34', 'result35', 'result36', 'result37', 'result38', 'result39', 'result40', 'result41', 'result42', 'result43', 'result44', 'result45', 'result46', 'result47', 'result48', 'result49', 'result50', 'result51', 'result52', 'result53', 'result54', 'result55', 'result56', 'result57', 'result58', 'result59', 'result60', 'result61', 'result62', 'result63', 'result64', 'result65', 'result66', 'result67', 'result68', 'result69', 'result70', 'result71', 'result72', 'result73', 'result74', 'result75', 'result76', 'result77', 'result78', 'result79', 'result80', 'result81', 'result82', 'result83', 'result84', 'result85', 'result86', 'result87', 'result88', 'result89', 'result90', 'result91', 'result",
    "```json\n{\n    \"solution\": \"df['retweets'].sum()\"\n}\n```\n\nInput DataFrame columns: ['reg_date', 'reg_time', 'reg_ip', 'reg_address', 'reg_link', 'reg_lang', 'login_date', 'login_time', 'login_ip', 'login_address', 'login_url', 'login_link', 'login_lang', 'logout_time', 'logout_date', 'logout_ip', 'logout_address', 'logout_link', 'logout_lang', 'client_id', 'country', 'device', 'os', 'browser', 'version', 'gender', 'timezone', 'age', 'language']\nQuestion: How many different countries are represented in this dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['country'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'email', 'accesstoken', 'accesstokensecret', 'password', 'password', 'mail', 'ip', 'is_private', 'activated', 'deleted', 'active_user', 'password_change_required', 'created', 'updated', 'lang', 'timezone', 'gender', 'picture', 'location', 'locale', 'name', 'profile_background_color', 'profile_text_color', 'profile_link_color', 'profile_sidebar_border_color', 'profile_sidebar_fill_color', 'profile_highlight_color', 'profile_background_image', 'profile_background_image_status', 'profile_use_background_image', 'profile_image_url', 'profile_background_tile', 'is_verified', 'state', 'country', 'age', 'last_login', 'is_deleted', 'last_seen', 'is_premium', 'is_admin', 'is_bot', 'is_agent', 'is_information_required']\nQuestion: How many users are logged in with the same password?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['password'].count() - df['password'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['Q1', 'Q2', 'Q3', '",
    "```json\n{\n    \"solution\": \"df['mention_ids'].isna().sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many tweets mention the user with the name ''?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['mention_names'].str.contains('', regex=False).sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many tweets (both replies and non-replies) contain a link?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['links'].notna().sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many posts were made by users with an account handler that starts with 'Edwin' or 'Mariette'?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['author_handler'][df['author_",
    "```json\n{\n    \"solution\": \"df.loc[df['retweets'].idxmax(), 'author_name']\"\n}\n```\n\nInput DataFrame columns: ['gender', 'age', 'weight', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio']\nQuestion: What is the gender who has the biggest ap_hi?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['ap_hi'].idxmax(), 'gender']\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What is the name of the author with the most favorited single tweet?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['favorites'].idxmax(), 'author_name']\"\n}\n```\n\nInput DataFrame columns: ['customer_id', 'review_date', 'num_reviews', 'avg_rating', 'language', 'country', 'province', 'category', 'brand', 'varieties', 'style', 'price', 'rating']\nQuestion: Which category has the highest number of restaurants?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['category'].value_counts().head(1).index.tolist()[0]\"\n}\n```\n\nInput DataFrame columns: ['customer_id', 'review_date', 'num_reviews', 'avg_rating', 'language', 'country', 'province', 'category', 'brand', 'varieties', 'style', 'price', 'rating']\nQuestion: What are the top 5 countries with the most reviews?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\":",
    "```json\n{\n    \"solution\": \"df.loc[df['favorites'].idxmax(), 'lang']\"\n}\n```\n\nInput DataFrame columns: ['sex', 'age', 'alcohol-use', 'alcohol-frequency', 'smoking', 'desire-to-pray', 'religion', 'christianity', 'muslim', 'hinduism', 'buddhism', 'jewishness', 'self-hate', 'group-hate', 'race-hate', 'mental-health', 'physical-health', 'opinion-about-mental-health', 'opinion-about-physical-health', 'opinion-about-sexual-orientation', 'opinion-about-gender', 'opinion-about-sex', 'opinion-about-gender-equality', 'opinion-about-intersectionality', 'opinion-about-work-life-balance', 'opinion-about-lack-of-affirmation']\nQuestion: What is the most commonly reported reason for being dissatisfied with sexual orientation?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['opinion-about-sexual-orientation'].value_counts().nlargest(1).index[0]\"\n}\n```\n\nInput DataFrame columns: ['cityName', 'cityID', 'metropolitanAreaName', 'metropolitanAreaID', 'regionName', 'regionID', 'stateName', 'stateID', 'countryName', 'countryID', 'citiesCount', 'cities2500Count', 'pop']\nQuestion: What is the number of cities in the United States?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['countryName'].value_counts()['United States of America']\"\n}\n```\n\nInput DataFrame columns: ['id', 'id_hash', 'created_at', 'text', 'retweet_count', 'favorite_count', 'geo', 'place', 'user.id', 'user.id_str', 'user.name', 'user.screen_name', 'user.location', 'user.description', 'user.url', 'user.entities.url.urls', 'user.protected",
    "```json\n{\n    \"solution\": \"df.loc[df['text'].str.split().apply(len).idxmax(), 'author_name']\"\n}\n```\n\nInput DataFrame columns: ['time', 'text', 'hashtags', 'mentions', 'permalink', 'urls', 'media', 'media_links', 'lat', 'lng', 'cashtags', 'source', 'is_retweet', 'retweet_id', 'retweet_date']\nQuestion: What are the top 3 most frequent hashtags?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['hashtags'].str.split().explode().value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Post_Id', 'User_Id', 'Handle', 'Timestamp', 'Type', 'Text', 'Post_Link', 'Media_Link']\nQuestion: What type of content do people from the handle start with?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['Handle'] == 'AthleticBench', 'Type'].unique()[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'gender', 'rating', 'occupation', 'age', 'zip']\nQuestion: Has the age distribution changed for a movie with a rating of lower than 2?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df[df['rating'].lt(2.0)].shape[0] > df.shape[0]\"\n}\n```\n\nInput DataFrame columns: ['Company_Name', 'Data_Cleaning', 'Data_Exploration', 'Data_Analysis', 'Machine_Learning', 'Statistics', 'R_Programming', 'Statistics_in_ES', 'Information_Visualization', 'Data_Visualization', 'Plotly', 'Tableau', 'Kaggle', 'RStudio', 'Python', 'Scikit_Learn', 'Tensorflow', 'Matplotlib', 'ggplot2', 'Shiny', 'dplyr', 'SQL', 'Azure', 'AWS', 'DAX', 'SAS', 'Business_Intelligence', 'Real_Analysis', 'Data_Engineering',",
    "```json\n{\n    \"solution\": \"df['type'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many times does the most mentioned Twitter user appear in the dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['mention_ids'].explode().value_counts().max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What is the average number of mentions of a tweet?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['mention_ids'].explode().count()\"\n}\n```\n\nInput DataFrame columns: ['Street', 'City', 'County', 'State', 'ZipCode', 'InventoryControlNumber', 'LotInventory', 'Map', 'ParcelID', 'Improvement', 'ImprovementValue', 'Land', 'LandValue']\nQuestion: What is the lowest value improvement in dollars?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['ImprovementValue'].min()\"\n}\n```\n\nInput DataFrame columns: ['A', 'B', 'C', 'D', 'E', 'F']\nQuestion: How many times did the letter A appear in column A in the dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['A",
    "```json\n{\n    \"solution\": \"df.nlargest(3, 'retweets').author_name.tolist()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'user_name', 'user_screen_name', 'date', 'tweet_id', 'text', 'lang', 'in_reply_to_tweet_id', 'in_reply_to_user_id', 'in_reply_to_user_id_str', 'in_reply_to_user_name', 'in_reply_to_user_screen_name', 'retweet_count', 'reply_count', 'like_count', 'quote_count', 'quote_quote_count', 'quote_user_id', 'quote_user_name', 'quote_user_screen_name', 'is_retweet', 'retweeted_id', 'retweeted_date', 'retweeted_like_count', 'retweeted_retweet_count', 'retweeted_quote_count', 'retweeted_text', 'hashtags', 'cashtags', 'urls', 'urls_url', 'urls_expanded_url', 'urls_expanded_url_host', 'user_mentions', 'user_mentions_screen_name', 'user_mentions_id', 'user_mentions_name', 'source']\nQuestion: How many tweets have been liked by the most prominent Twitter user of the dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"users = df['user_mentions'].str.split('id').explode()\nmost_likes = users.value_counts().nlargest(1).index[0]\ntotal_likes = df.query(f'user_mentions_id == \"{most_likes}\"').like_count.sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'user_name', 'handle', 'screen_name', 'location', 'url', 'source', 'num_followers', 'num_following', 'num_tweets', 'num_likes', 'num_retweets', 'num_hashtags', 'num_cashtags', 'avg_likes', 'avg_retweets', 'avg_hashtags', 'avg_cashtags', 'avg_",
    "```json\n{\n    \"solution\": \"df['lang'].value_counts().nsmallest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['pub_date', 'article_id', 'section_name', 'subsection_name', 'headline', 'short_description', 'type_of_material', 'length', 'score', 'source', 'views']\nQuestion: What are the 5 most viewed news article?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['views'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'age', 'gender', 'height', 'weight', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio']\nQuestion: Which gender has most samples?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['gender'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['age', 'gender', 'height', 'weight', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio']\nQuestion: Is there any person with a weight higher than 200?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['weight'].ge(200).any()\"\n}\n```\n\nInput DataFrame columns: ['Country', 'Year', 'Value', 'Lower', 'Upper', 'Footnote']\nQuestion: What are the top 5 countries with highest life expectancy?\nExpected return type: list[string]\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['Country'] == 'Germany'].sort_values(by='Value', ascending=False).head(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Country', 'Year', 'Value', 'Lower', 'Upper', 'Footnote']\nQuestion: How many years of data does the data set contain?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution",
    "```json\n{\n    \"solution\": \"df['text'].str.split().str.len().nsmallest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'content', 'author', 'tags', 'author_url', 'author_image_url', 'createdAt', 'updatedAt']\nQuestion: What is the title of the post with the highest number of words in its title?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['title'].str.split().str.len().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['0', '1', 'salary', 'ratio']\nQuestion: What is the ratio of male to female employees in the dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['0'] == 'gender']['1'].value_counts(normalize=True).iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['firstname', 'lastname', 'age', 'gender', 'state', 'gender_of_respondent', 'household_size', 'married', 'race', 'relationship', 'education', 'year', 'income', 'race_ethnicity', 'party', 'voted', 'hashtags', 'user_id', 'retweet_count', 'favorite_count', 'reply_count', 'quote_count', 'created_at']\nQuestion: What are the top 5 most infamous hashtags in 2018?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['year'] == 2018]['hashtags'].explode().value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'text', 'authors', 'tags', 'author_url', 'author_image_url', 'createdAt', 'updatedAt']\nQuestion: What are the top 3 topics in this dataset?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['tags'].explode().value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame",
    "```json\n{\n    \"solution\": \"df['type'].value_counts().index[:6].tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many times has a post been retweeted?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['retweets'].sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What is the most common location in the dataset?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['location'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What are the 5 most common locations?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['location'].value_counts().index[:5].tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_",
    "```json\n{\n    \"solution\": \"df['favorites'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Symbol', 'Open', 'High', 'Low', 'Close', 'Volume']\nQuestion: What were the opening prices of each stock on the last trading day of 2020?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Open'].iloc[-1].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Lemmatized', 'POS', 'Named Entity', 'Dep Rel', 'Head', 'Head POS', 'Children', 'Children POS']\nQuestion: What is the number of entities, nouns, verbs, adjectives, and adverbs in the top 5 longest sentences?\nExpected return type: dict[string, number]\n\nOutput:\n```json\n{\n    \"solution\": \"res = df['Children'].explode()\\nentity_counts = res['Named Entity'].value_counts()\\nparts_of_speech_counts = res['Children POS'].value_counts()\\nreturn {\\\"Entities\\\": entity_counts.to_dict(), \\\"Parts of Speech\\\": parts_of_speech_counts.to_dict()}\"\n}\n```\n\nInput DataFrame columns: ['Stimulus', 'R', 'Neutrality', 'Arousal', 'Dominance', 'Language', 'Affect', 'Valence', 'Confident', 'Political', 'Economic', 'Gender', 'Age', 'Race', 'Religion', 'Education', 'Sexual Orientation', 'Sexual Orientation2', 'Nationality', 'Career Field', 'Occupation', 'Occupation2', 'Income', 'Self-Made', 'Height', 'Weight', 'Body Complexity', 'Eye Color', 'Hair Color', 'Skin Tone', 'Long Hair', 'Facial Hair', 'Glasses', 'Philosophical Orientation', 'Openness', 'Conscientiousness', 'Extraversion', 'Agreeableness', 'Emotional Range', 'Happiness', 'Sadness', 'Anger', 'Disgust', 'Fear', 'Surprise', 'Trust', 'Accommodating', 'Amiable",
    "```json\n{\n    \"solution\": \"df['text'].str.strip().str.split().apply(len).nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['importance', 'org_activity', 'who_met', 'country_met', 'org_name', 'partner_org_name', 'org_name_met', 'partner_org_name_met', 'company_size', 'capacity_needed', 'workload', 'activity', 'outcome_1', 'outcome_2', 'outcome_3', 'outcome_4', 'outcome_5', 'outcome_6', 'outcome_7', 'outcome_8', 'outcome_9', 'outcome_10', 'outcome_11', 'outcome_12', 'outcome_13', 'outcome_14', 'outcome_15', 'outcome_16', 'outcome_17', 'agency_1', 'agency_2', 'agency_3', 'agency_4', 'agency_5', 'agency_6', 'agency_7', 'source', 'outcome_category', 'outcome_3', 'outcome_4', 'outcome_5', 'outcome_6', 'outcome_7', 'outcome_8', 'outcome_9', 'outcome_10', 'outcome_11', 'outcome_12', 'outcome_13', 'outcome_14', 'outcome_15', 'outcome_16', 'outcome_17', 'agency', 'date_posted', 'date_terminated', 'status', 'naics_code', 'naics_code_description', 'has_partner_organization', 'confirmed_public_total', 'confirmed_private_total', 'confirmed_total', 'confirmed_federal_total', 'confirmed_nonfederal_total', 'confirmed_other_total', 'confirmed_unsure_total', 'confirmed_unconfirmed_total', 'project_total', 'project_federal_total', 'project_nonfederal_total', 'project_other_total', 'project_unsure_total', 'project_unconfirmed_total', 'project_total_1', 'project_federal_1', 'project_nonfederal_1', 'project_other_1', 'project_un",
    "```json\n{\n    \"solution\": \"df['retweets'].nsmallest(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['uri', 'id', 'id_str', 'name', 'screen_name', 'location', 'description', 'url', 'entities', 'protected', 'followers_count', 'friends_count', 'listed_count', 'created_at', 'favourites_count', 'utc_offset', 'time_zone', 'geo_enabled', 'verified', 'statuses_count', 'lang', 'contributors_enabled', 'is_translator', 'is_translation_enabled', 'profile_background_color', 'profile_background_image_url', 'profile_background_image_url_https', 'profile_background_tile', 'profile_image_url', 'profile_image_url_https', 'profile_banner_url', 'profile_link_color', 'profile_sidebar_border_color', 'profile_sidebar_fill_color', 'profile_text_color', 'profile_use_background_image', 'has_extended_profile', 'default_profile', 'default_profile_image', 'following', 'follow_request_sent', 'notifications', 'translator_type', 'profile_background_image_url_https', 'profile_banner_url_https']\nQuestion: What is the total number of followers?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['followers_count'].sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'created_at', 'id_str', 'full_text', 'truncated', 'display_text_range', 'entities', 'extended_entities', 'source', 'in_reply_to_status_id', 'in_reply_to_status_id_str', 'in_reply_to_user_id', 'in_reply_to_user_id_str', 'in_reply_to_screen_name', 'user', 'geo', 'coordinates', 'place', 'contributors', 'is_quote_status', 'retweet_count', 'favorite_count', 'favorited', 'retweeted', 'possibly_sensitive', 'lang']\nQuestion: Is there any tweet with more",
    "```json\n{\n    \"solution\": \"df['text'].str.split(' ').apply(len).nsmallest(6).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What is the maximum length of a post?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['text'].apply(len).max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What are the 10 most popular tweets?\nExpected return type: list[string]\n\nOutput:\n```json\n{\n    \"solution\": \"df['text'].value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What are the 10 most liked tweets?\nExpected return type: list[string]\n\nOutput:\n```json\n{\n    \"solution\": \"df['favorites'].nlargest(10).index.tolist()\"\n}\n```\n\nInput DataFrame",
    "```json\n{\n    \"solution\": \"df['name'].str.contains('Pikachu', case=False, regex=False).any()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Weekend_flag', 'Visitors', 'Week_Number', 'Year', 'Month', 'Day', 'Day_Name', 'Day_No', 'Day_Type', 'Visitors_Weekday', 'Visitors_Weekend', 'Visitors_Trend', 'Holiday_Flag', 'Region', 'Region_Code']\nQuestion: Which store has the highest number of visitors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('Region').agg({'Visitors': 'sum'}).idxmax()[0]\"\n}\n```\n\nInput DataFrame columns: ['Title', 'Category', 'MaxSalary', 'MinSalary', 'Location', 'Remote', 'Contract', 'StartDate', 'Duration', 'JobID', 'CompanyName', 'CompanyID', 'CompanyDescription', 'CompanyRating', 'CompanyLogo', 'CompanyNoOfJobsPosted', 'CompanyJobOpened', 'CompanyNoOfJobsSaved', 'CompanyNoOfJobsApplied', 'CompanyNoOfJobsClosed', 'CompanyNoOfJobsExpired', 'CompanyNoOfJobsMatched', 'CompanyNoOfJobsReceived', 'CompanyNoOfJobsResponded']\nQuestion: How many job openings were published by company 'Experis'?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['CompanyName'] == 'Experis']['JobID'].count()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Region', 'Store', 'Items', 'Cost', 'Profit', 'Sales', 'Profit_Margin']\nQuestion: Which region has the highest profit?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['Profit'].groupby(df['Region']).sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Region', 'Store', 'Items', 'Cost', 'Profit', 'Sales', 'Profit_Margin']\nQuestion: What is the percentage of best-selling products of the 'West' region?\nExpected return type: percentage\n\nOutput:",
    "```json\n{\n    \"solution\": \"return df['total'].gt(700).any()\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Are there any people who were born on 24 December 1993?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df[df['birthDate'] == '24/12/1993'].any().any()\"\n}\n```\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_3",
    "```json\n{\n    \"solution\": \"df.loc[df['generation'] == 1]['legendary'].all()\"\n}\n```\n\nInput DataFrame columns: ['date', 'total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated', 'daily_vaccinations_raw', 'daily_vaccinations', 'total_vaccinations_per_hundred', 'people_vaccinated_per_hundred', 'people_fully_vaccinated_per_hundred', 'daily_vaccinations_per_million', 'vaccines', 'source_name', 'source_website']\nQuestion: Which vaccine is most widely used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['vaccines'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['code', 'latitude', 'longitude', 'name', 'state', 'depth', 'time', 'event', 'date']\nQuestion: In which city could you find the largest number of earthquakes?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('name')['code'].count().sort_values(ascending=False).index[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'gender', 'age', 'hypertension', 'heart_disease', 'ever_married', 'work_type', 'Residence_type', 'avg_glucose_level', 'bmi', 'smoking_status', 'stroke']\nQuestion: How many individuals have never been married?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['ever_married'] == 'No]['id'].count()\"\n}\n```\n\nInput DataFrame columns: ['id', 'gender', 'age', 'hypertension', 'heart_disease', 'ever_married', 'work_type', 'Residence_type', 'avg_glucose_level', 'bmi', 'smoking_status', 'stroke']\nQuestion: How many individuals have never smoked?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\":",
    "```json\n{\n    \"solution\": \"df['speed'].gt(150).any()\"\n}\n```\n\nInput DataFrame columns: ['green_table', 'red_table', 'yellow_table', 'blue_table', 'purple_table']\nQuestion: How many tables are in the green room?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['green_table'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Id', 'name', 'sex', 'age', 'height', 'weight', 'color', 'bred_for', 'egg_group']\nQuestion: What is the average weight of female and male Pok\u00e9mon?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('sex')['weight'].mean().tolist()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Position', 'Age', 'Height', 'Weight', 'College', 'Exhaustion Rating', 'Wonderlic', 'Approximate Year of Graduation', 'URL', 'Twitter', 'Youtube', 'Instagram']\nQuestion: What is the average Wonderlic score of highlights soccer players?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['Position'] == 'Highlight Soccer', 'Wonderlic'].mean()\"\n}\n```\n\nInput DataFrame columns: ['business_id', 'name', 'address', 'city', 'state', 'postal_code', 'latitude', 'longitude']\nQuestion: Which city has the largest number of restaurants?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('city')['business_id'].count().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Business ID', 'Name', 'Address', 'City', 'State', 'Zip', 'Latitude', 'Longitude']\nQuestion: Which zip code has the largest number of restaurants?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['Zip'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['S.No', 'Name', 'Position', 'Age",
    "```json\n{\n    \"solution\": \"df['type1'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['athlete_id', 'athlete_name', 'athlete_sport', 'athlete_event', 'athlete_event_gender', 'athlete_country', 'athlete_medals_won', 'athlete_medals_gold', 'athlete_medals_silver', 'athlete_medals_bronze', 'athlete_birth_day', 'athlete_birth_year', 'athlete_birth_month', 'athlete_birth_country', 'athlete_birth_city', 'athlete_birth_loc', 'athlete_height', 'athlete_weight', 'athlete_team', 'athlete_noc', 'record_year', 'record_season', 'record_season_total', 'record_season_best', 'record_season_year', 'record_season_loc', 'record_season_city', 'record_gender_total', 'record_gender_best', 'record_gender_year', 'record_gender_loc', 'record_gender_city', 'record_gender_sport', 'record_gender_season', 'record_gender_season_year', 'record_gender_season_loc', 'record_gender_season_city', 'record_gender_season_sport', 'record_gender_com', 'record_gender_com_year', 'record_gender_com_loc', 'record_gender_com_city', 'record_gender_com_sport', 'record_gender_com_season', 'record_gender_com_season_year', 'record_gender_com_season_loc', 'record_gender_com_season_city', 'record_gender_com_season_sport', 'record_gender_com_season_total', 'record_gender_com_season_best', 'record_gender_com_season_year', 'record_gender_com_loc', 'record_gender_com_city', 'record_gender_com_sport', 'record_gender_com_sport_year', 'record_gender_com_sport_city', 'record_gender_com_sport_loc', 'record_gender_com",
    "```json\n{\n    \"solution\": \"df['total'].max()\"\n}\n```\n\nInput DataFrame columns: ['#', 'Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary', 'color', 'pre-evolution', 'evolution']\nQuestion: How many times did Charizard evolve past its second form?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"len(df[df['evolution'] == 'Charizard Mega Charizard X']['evolution'])\"\n}\n```\n\nInput DataFrame columns: ['number', 'name', 'type1', 'type2', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary', 'color', 'pre-evolution', 'evolution']\nQuestion: What pokemon has the least HP?\nExpected return type: string\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['hp'].idxmin(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['#', 'Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary', 'color', 'pre-evolution', 'evolution']\nQuestion: Which Pok\u00e9mon has the highest power-to-weight ratio?\nExpected return type: string\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['Total'].idxmax() / df['Weight_kg'].max(), 'Name']\"\n}\n```\n\nInput DataFrame columns: ['#', 'Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary', 'color', 'pre-evolution', 'evolution', 'Weight_kg']\nQuestion: Which Pok\u00e9mon has the least power-to-weight ratio?\nExpected return type: string\n\nOutput:\n```json",
    "```json\n{\n    \"solution\": \"df.loc[df['generation'] == 3, 'number'].count()\"\n}\n```\n\nInput DataFrame columns: ['abilities', 'weight_kg', 'height_m', 'class', 'dex', 'defense', 'sp_defense', 'attack', 'sp_attack', 'speed', 'hp', 'name']\nQuestion: What is the Pok\u00e9mon with highest speed?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['speed'].idxmax(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['saleprice', 'bedroom_abvgr', 'year_built', 'garage_area', 'gr_liv_area', 'kitchen_abvgr', 'garage_cars', 'total_bsmt_sf', 'ms_zoning', 'year_remod_add']\nQuestion: Which is the most expensive house in the dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['saleprice'].max()\"\n}\n```\n\nInput DataFrame columns: ['name', 'height_m', 'weight_kg', 'gender', 'habitat']\nQuestion: Which is the heaviest anole?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['name'] == 'Anolis carolinensis', 'weight_kg'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['total_bill', 'tip', 'sex', 'smoker', 'day', 'time', 'size']\nQuestion: What is the mean total bill of female smokers who eat at dinner on Friday?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.query('sex == \\\"Female\\\" and smoker == \\\"Yes\\\" and day == \\\"Fri\\\"').tip.mean()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'age', 'occupation', 'zip code']\nQuestion: How many customers have zip code 3333?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.",
    "```json\n{\n    \"solution\": \"df['attack'].mean()\"\n}\n```\n\nInput DataFrame columns: ['battleNumber', 'gameid', 'teamid', 'playerid', 'name', 'tag', 'champion', 'position', 'totaldamagedealt', 'physicaldamagedealt', 'magicdamagedealt', 'truedamagedealt', 'largestcriticalstrike', 'totaldamagedealttochampions', 'physicaldamagedealttochampions', 'magicdamagedealttochampions', 'truedamagedealttochampions', 'totalheal', 'totalminionskilled', 'neutralminionskilled', 'ownjunglekills', 'enemyjunglekills', 'totaltimecrowdcontroldealt', 'largestkillingsprevent', 'largestmultikills', 'kills', 'deaths', 'assists', 'largestkillingspree', 'largestcs', 'largestmultikill', 'longesttimespentliving', 'doublekills', 'triplekills', 'quadrakills', 'pentakills', 'killingsprees', 'unrealkills', 'totaldamagedealttoobjectives', 'totaldamagedealttochampions']\nQuestion: How many times did  get more than 10000 true damage dealt on her?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['totaldamagedealttochampions'].gt(10000).sum()\"\n}\n```\n\nInput DataFrame columns: ['title', 'game', 'platform', 'year_of_release', 'publisher', 'na_sales', 'eu_sales', 'jp_sales', 'other_sales', 'critic_score', 'user_score', 'rating']\nQuestion: Which platform had the highest number of games?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['platform'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['title', 'user_score', 'total_sales']\nQuestion: What is the highest average user score for a game?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['user_score'].replace('tbd', 0",
    "```json\n{\n    \"solution\": \"df.loc[df['defense'].idxmax(), 'type1']\"\n}\n```\n\nInput DataFrame columns: ['id', 'species', 'island', 'latitude', 'longitude', 'date', 'time', 'mass', 'f', 'size', 'flipper', 'sex', 'vol', 'sal', 'island_name', 'group_name', 'd', 'species_name', 'status', 'Unnamed: 23', 'Unnamed: 24', 'Unnamed: 25', 'Unnamed: 26', 'Unnamed: 27', 'Unnamed: 28', 'Unnamed: 29', 'Unnamed: 30', 'Unnamed: 31', 'Unnamed: 32', 'Unnamed: 33', 'Unnamed: 34', 'Unnamed: 35', 'Unnamed: 36', 'Unnamed: 37', 'Unnamed: 38', 'Unnamed: 39']\nQuestion: What is the average flipper length for Gentoo penguins?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby(['species']).mean()['flipper']\"\n}\n```\n\nInput DataFrame columns: ['date', 'time', 'latitude', 'longitude', 'depth', 'mag', 'magType', 'nst', 'gap', 'dmin', 'rms', 'net', 'id', 'updated', 'place', 'type', 'horizontalError', 'depthError', 'magError', 'magNst', 'status', 'locationSource', 'magSource']\nQuestion: What is the number of earthquakes with a magnitude equal to or greater than 6.0?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"len(df[(df['mag'] >= 6.0)])\"\n}\n```\n\nInput DataFrame columns: ['datetime', 'city', 'latitude', 'longitude', 'temperature', 'rainfall', 'humidity']\nQuestion: What is the mean temperature in the city San Juan?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['city'] == 'San Juan']['temperature'].mean",
    "```json\n{\n    \"solution\": \"df.loc[df['speed'].idxmin(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['ID', 'date', 'time', 'season', 'holiday', 'workingday', 'weather', 'temp', 'atemp', 'humidity', 'windspeed', 'casual', 'registered', 'count']\nQuestion: Which month has the highest sum of registered users?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby(pd.Grouper(key='date', freq='M'))['registered'].sum().idxmax().strftime('%m')\"\n}\n```\n\nInput DataFrame columns: ['name', 'age', 'hometown', 'occupation', 'education']\nQuestion: Which occupation has the highest number of users?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['occupation'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'age', 'job', 'marital', 'education', 'default', 'balance', 'housing', 'loan', 'contact', 'day', 'month', 'duration', 'campaign', 'pdays', 'previous', 'poutcome', 'y']\nQuestion: Which age group has the highest number of people?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['age'].max()\"\n}\n```\n\nInput DataFrame columns: ['state', 'gender', 'income']\nQuestion: Which gender has the highest total income?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('gender')['income'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'SibSp', 'Parch', 'Fare', 'Cabin', 'Embarked']\nQuestion: How much is the sum of all ticket prices?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['Fare'].sum()\"\n}\n```\n\nInput DataFrame columns: ['age', 'sex', 'pclass', 'survived', 'ticket', 'fare', 'cabin', 'emb",
    "```json\n{\n    \"solution\": \"df[df['legendary']]['type1'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114",
    "```json\n{\n    \"solution\": \"df[df['sp_attack'].gt(df['sp_attack'].max())]['name'].iloc[0]\"\n}\n```\n/pyLecture/lessons/lesson16_linear_regression.py\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n# Loading our data\ndata = pd.read_csv('datasets/Advertising.csv', index_col=0)\n\n# What is the nature of this data\ndata.info()\n\n# Checking if any NaNs are present\ndata.isnull().sum()\n\n# Plotting the data\nimport matplotlib.pyplot as plt\nplt.scatter(data.TV, data.sales)\nplt.scatter(data.radio, data.sales)\nplt.scatter(data.newspaper, data.sales)\nplt.legend()\n\n# Scatter plot matrix\npd.plotting.scatter_matrix(data, figsize=(6, 6))\nplt.show()\n\n# Importing all the necessary libraries\nimport seaborn as sns\n\n# Generating the correlation matrix\ncorr = data.corr()\nprint(corr)\n\n# Plotting the correlation matrix by seaborn\nsns.heatmap(corr, xticklabels=corr.columns,\n            yticklabels=corr.columns, annot=True)\nplt.show()\n\n# Note: Seaborn will automatically create a correlation matrix\n# for the given dataset. One can also provide our own correlation\n# matrix\n\n# Let's model these features using a multiple linear regression\n# model\ny = data.sales # The response variable\nX = data.drop('sales', axis=1) # The explanatory variables\n\nX = sm.add_constant(X) # adding a constant to our model\nmodel = sm.OLS(y, X).fit()\npredictions = model.predict(X)\nmodel.summary()\n\n# Plotting the residuals\nfig, ax = plt.subplots(figsize=(12,8))\nax.scatter(y, y-yhat)\nax.axhline(lw=2, color='black') # The horizontal line at 0 (zero error)\nax.set_title('Residual plot')\nax.set",
    "```json\n{\n    \"solution\": \"df.nlargest(3, 'total')['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['start_date', 'end_date', 'country_name', 'user_id', 'country_code', 'source', 'channel', 'device', 'campaign_id', 'campaign_name', 'campaign_source_id', 'campaign_source_name', 'campaign_medium_id', 'campaign_medium_name', 'campaign_content_id', 'campaign_content_name', 'campaign_term_id', 'campaign_term_name', 'campaign_source_term_id', 'campaign_source_term_name', 'campaign_medium_term_id', 'campaign_medium_term_name', 'campaign_content_term_id', 'campaign_content_term_name', 'campaign_term', 'channel_term_id', 'channel_term_name', 'source_term_id', 'source_term_name', 'medium_term_id', 'medium_term_name', 'content_term_id', 'content_term_name']\nQuestion: How many unique campaigns are there?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['campaign_name'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['Id', 'Year', 'Month', 'Country', 'Name', 'Quantity', 'UnitPrice', 'UnitPriceCurrency', 'TotalPrice', 'TotalPriceCurrency', 'CustomerID', 'CustomerName', 'CustomerAddress', 'CustomerCity', 'CustomerPostalCode', 'CustomerCountry']\nQuestion: What are the top 3 countries with highest total revenue?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('Country')['TotalPrice'].sum().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Postal Code', 'Region', 'Urban/Rural', 'Value']\nQuestion: Which postal code has the highest number of people living in a city?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('Region')['Value'].sum().idxmax()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['hp'].nsmallest(5).index]['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['city', 'data', 'state', 'country', 'user_id', 'product_id', 'day']\nQuestion: What are the 3 cities with the most total number of reviews?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['city'].value_counts().head(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['x', 'y', 'type1', 'species', 'type2', 'ability1', 'ability2', 'abilityH', 'hp', 'attack', 'defense', 'spattack', 'spdefense', 'speed', 'total', 'weight', 'heightm']\nQuestion: What is the highest weight of a Pok\u00e9mon?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['weight'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'city', 'category', 'contact', 'company', 'created_at', 'last_contacted_at']\nQuestion: Which company has the most number of leads?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['company'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['name_of_school', 'address1', 'city', 'state', 'zip', 'federal_provider_number', 'lunch_program_available', 'school_phone_number', 'school_fax_number', 'state_office_address', 'state_office_phone_number', 'state_office_fax_number', 'state_office_email_address', 'school_website_url', 'location', 'grades_offered', 'school_zip_code', 'school_location']\nQuestion: What are the top 5 cities with the most number of schools?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['city'].value_counts().head().index.tolist()\"\n}\n```\n\nInput DataFrame columns",
    "```json\n{\n    \"solution\": \"df[['type1','type2']].melt().value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'main_img', 'img_list', 'abilities', 'base_experience', 'height', 'weight', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'base_egg_steps', 'base_happiness', 'attack_5', 'defense_5', 'sp_attack_5', 'sp_defense_5', 'speed_5', 'hp_5', 'total', 'height_m', 'is_legendary', 'abilities_num', 'abilities_1_name', 'abilities_1_url', 'abilities_2_name', 'abilities_2_url', 'abilities_3_name', 'abilities_3_url', 'abilities_4_name', 'abilities_4_url', 'types_1_name', 'types_1_url', 'types_2_name', 'types_2_url', 'egg_1_name', 'egg_1_url', 'egg_1_image', 'egg_2_name', 'egg_2_url', 'egg_2_image', 'egg_group_1_name', 'egg_group_1_url', 'egg_group_2_name', 'egg_group_2_url', 'gender_rate', 'growth_rate', 'happiness', 'has_gender_differences', 'has_hidden_ability', 'is_baby', 'is_default', 'is_mega', 'name_clean', 'pokedex_number', 'sp_def_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff_5', 'sp_eff",
    "```json\n{\n    \"solution\": \"df[df['generation'] == 2]['name'].nlargest(6).tolist()\"\n}\n```\n\nInput DataFrame columns: ['CustomerID', 'InvoiceDate', 'InvoiceNo', 'StockCode', 'Description', 'Quantity', 'UnitPrice', 'InvoiceNo', 'Country']\nQuestion: Which country sold the most quantity of products?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('Country')['Quantity'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Postal Code', 'Borough', 'Neighborhood', 'Street', 'Civic Number', 'House Number', 'City', 'Province', 'Postal Code', 'Latitude', 'Longitude', 'Count']\nQuestion: Which city has the most amenities?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['City'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Postal Code', 'Borough', 'Neighborhood', 'Street', 'Civic Number', 'House Number', 'City', 'Province', 'Postal Code', 'Latitude', 'Longitude', 'Value']\nQuestion: Which city has the most amount of amenities?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('City')['Value'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Postal Code', 'Borough', 'Neighborhood', 'Street', 'Civic Number', 'House Number', 'City', 'Province', 'Postal Code', 'Latitude', 'Longitude']\nQuestion: Which province has the most amount of amenities?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['Province'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Postal Code', 'Borough', 'Neighborhood', 'Street', 'Civic Number', 'House Number', 'City', 'Province', 'Postal Code', 'Latitude', 'Longitude', 'Value']\nQuestion: Which street has the most amenities?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('Street')['Value'].",
    "```json\n{\n    \"solution\": \"df['sp_defense'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['no', 'name', 'hp', 'atk', 'def', 'spa', 'spd', 'speed', 'total', 'type1', 'type2', 'generation', 'legendary']\nQuestion: What is the minimum number of special defense in the dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['spd'].min()\"\n}\n```\n\nInput DataFrame columns: ['name', 'type1', 'type2', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'is_legendary']\nQuestion: What is the average number of special defense in the dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['sp_defense'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary', 'Color', 'Egg Group 1', 'Egg Group 2', 'Body Style', 'Drive', 'Base Speed', 'Base Total', 'Weight', 'Height', 'Catch Rate', 'Base ATK', 'Base DEF', 'Base SPA', 'Base SPD', 'Base SPEED', 'EXP Growth', 'EXP Total', 'EV Growth', 'EV Total', 'Home Terrain', 'Gender', 'Base Friendship', 'Base EXP', 'Aqua Legency', 'Bird Legency', 'Bug Legency', 'Dark Legency', 'Dragon Legency', 'Electric Legency', 'Fairy Legency', 'Fighting Legency', 'Fire Legency', 'Flying Legency', 'Ghost Legency', 'Grass Legency', 'Ground Legency', 'Ice Legency', 'Normal Legency', 'Poison Legency', 'Psychic Legency', 'Rock Legency', 'Steel Legency', 'Water Legency', 'Base ATK Per Level', 'Base DEF Per Level', 'Base SPA",
    "```json\n{\n    \"solution\": \"df[(df['legendary'] == True)].sort_values('defense', ascending=True)['defense'].tolist()[:2]\"\n}\n```\n\nInput DataFrame columns: ['number', 'name', 'type1', 'type2', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary']\nQuestion: Are there any legendary Pok\u00e9mon whose stats are equal to the maximum amount of speedpoints spent on Pok\u00e9mon?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df[(df['legendary'] == True) & (df['speed'] == df['sp_defense']) & (df['sp_attack'] == df['attack']) & (df['defense'] == df['defense']).any()\"\n}\n```\n\nInput DataFrame columns: ['date', 'wind_speed', 'wind_dir', 'wind_ave', 'wind_gust', 'pressure', 'humidity', 'temp', 'dew_point', 'windchill', 'heat_index', 'wind_chill', 'visibility', 'precipitation', 'pressure_tendency', 'clouds', 'resistance_therm', 'resistance_base', 'station_pressure']\nQuestion: What is the maximum average windspeed?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['wind_ave'].max()\"\n}\n```\n\nInput DataFrame columns: ['name', 'attack', 'sp_attack', 'defense', 'sp_defense', 'hp', 'speed', 'legendary', 'total', 'type1', 'type2']\nQuestion: Who is the strongest type 1 Pok\u00e9mon?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['type1'] == 'water'][['name', 'sp_defense']].sort_values('sp_defense', ascending=False).iloc[0].name\"\n}\n```\n\nInput DataFrame columns: ['name', 'attack', 'sp_attack', 'defense', 'sp_defense', 'hp', 'speed', 'legendary', 'total', 'type1', 'type",
    "```json\n{\n    \"solution\": \"df[df['generation'] == 4]['speed'].nlargest(2).tolist()\"\n}\n```\n\nInput DataFrame columns: ['ability', 'against grass', 'against ground', 'against fire', 'against fighting', 'against flying', 'against foul', 'against ghost', 'against electric', 'against poison', 'against bug', 'against normal', 'against psychic', 'against ice', 'against dragon', 'against steel', 'against dark', 'against rock', 'against water']\nQuestion: Which are the 3 highest stats against water of Pok\u00e9mon?\nExpected return type: list[string]\n\nOutput:\n```json\n{\n    \"solution\": \"df[['against water', 'against dark', 'against rock']].idxmax().tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'type1', 'type2', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary']\nQuestion: What is the percentage of missing values of the \"name\" column?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['name'].isna().sum() / df.shape[0]\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary']\nQuestion: Which is the highest Total stat of Pok\u00e9mon?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['Total'].max()\"\n}\n```\n\nInput DataFrame columns: ['name', 'type1', 'type2', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary']\nQuestion: What is the highest number of total points amongst the top 10% of Pok\u00e9mon?\nExpected return type: number\n\nOutput:\n```json\n{",
    "```json\n{\n    \"solution\": \"df[df['legendar'] == False][['total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed']].nsmallest(6, 'total').sum(axis=1).tolist()\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: When did the person with the highest net worth was born?\nExpected return type: date\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'birthDate']\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: Which gender has the most siblings or spouses aboard the Titanic?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['SibSp'].gt(0)].groupby('Sex')['SibSp'].count().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: How many passengers were traveling with their spouse and siblings?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"len(set(df[(df['SibSp'] > 0) & (df['SibSp'] < 3)]['PassengerId'].tolist()))\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: How many passengers were traveling with their spouse but",
    "```json\n{\n    \"solution\": \"return df['Extraversion'].max() > df['Agreeableness'].max()\"\n}\n```\n\nInput DataFrame columns: ['title', 'created_date', 'created_time', 'body', 'category', 'article_url', 'public_id']\nQuestion: Is there any post whose category is \"Region\" or \"country\"?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['category'].str.lower().isin(['region', 'country']).any()\"\n}\n```\n\nInput DataFrame columns: ['category', 'resolved_at', 'created_date', 'public_id', 'title', 'created_time', 'status', 'created_by', 'body', 'article_url']\nQuestion: Which category has the highest number of resolved posts?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['status'] == 'resolved']['category'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'tag_name', 'tag_id', 'comment_count', 'comment_id', 'vote_count', 'vote_id', 'user_id']\nQuestion: What is the highest number of votes of any post?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"return df['vote_count'].max()\"\n}\n```\n\nInput DataFrame columns: ['Loan_ID', 'Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term', 'Credit_History', 'Property_Area', 'Loan_Status']\nQuestion: Are there any clients whose loan amount is greater than 150?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['LoanAmount'].gt(150).any()\"\n}\n```\n\nInput DataFrame columns: ['User_ID', 'Product_ID', 'Gender', 'Age', 'Occupation', 'City_Category', 'Stay_In_Current_City_Years', 'Marital_Status', 'Product_Category_1', '",
    "```json\n{\n    \"solution\": \"return df['Openness'].max().equals(df['Conscientousness'].max())\"\n}\n```\n\nInput DataFrame columns: ['_id', 'Kia', 'Hyundai', 'Toyota', 'Honda', 'Volkswagen', 'Nissan', 'Ford_Mazda', 'Volvo', 'Mitsubishi', 'Lexus', 'Audi_Mercedes', 'BMW_VW', 'Saab', 'Porsche_Opel', 'Subaru_Fiat', 'Jaguar_Land_Rover', 'Tesla', 'Chrysler_Dodge_Jeep', 'GMC', 'MINI', 'Maserati_Bentley_Acura', 'Bentley', 'Lincoln_Land_Rover', 'Bentley_Rolls_Royce', 'Audi', 'Rolls-Royce', 'Porsche', 'Cadillac', 'Mercedes-Benz', 'Mercedes', 'Ferrari', 'Jeep', 'Lamborghini_Aventador', 'Ferrari_Maserati', 'Spyker', 'McLaren', 'Jaguar', 'Lamborghini', 'Infiniti_Lexus', 'BMW', 'Subaru', 'MINI_Maserati']\nQuestion: How many times does the word Tesla appear in the DataFrame?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.filter(regex='Tesla').count()\"\n}\n```\n\nInput DataFrame columns: ['Ranking', 'Car_Company', 'Test_Date', 'Owner', 'Seats', 'Mileage', 'Engine', 'Power', 'Torque', 'Fuel_Type', 'Cylinder', 'Year', 'Transmission', 'Driven_Wheels', 'Weight', 'Length', 'Width', 'Height', 'Low_Speed_rpm', 'High_Speed_rpm', 'Fuel_Consumption_City', 'Fuel_Consumption_City_(L/100km)', 'Fuel_Consumption_Hwy', 'Fuel_Consumption_Hwy_(L/100km)', 'Fuel_Consumption_Comb',",
    "```json\n{\n    \"solution\": \"result = df.iloc[df['Emotional_Range'].idxmin()]['Conversation'] <= df.iloc[df['Conscientousness'].idxmin()]['Conversation']\"\n}\n```\n\nInput DataFrame columns: ['id', 'age', 'workclass', 'fnlwgt', 'education', 'education_num', 'marital_status', 'occupation', 'relationship', 'race', 'gender', 'capital_gain', 'capital_loss', 'hours_per_week', 'native_country', 'income']\nQuestion: What is the most common education level of females in the dataset?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['gender'] == 'Female', 'education'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['SibSp', 'Parch', 'PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Survived']\nQuestion: Is there any passenger with more than 2 siblings or spouses aboard?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['SibSp'].gt(2).any()\"\n}\n```\n\nInput DataFrame columns: ['qid', 'question_text', 'question_asker_intent_understanding', 'question_have_other_facts', 'question_type_instructions', 'question_type_procedure', 'question_type_why_not', 'question_well_written', 'question_clear_what_you_want_to_know', 'question_well_researched', 'question_interesting_topic', 'question_factual_information', 'question_conversational', 'question_not_really_a_question', 'question_type_answer_description', 'question_type_fact_seeking', 'question_type_personal_joke', 'question_type_opinion', 'answer_helpful', 'answer_level_of_information', 'answer_plausible', 'answer_relevance', 'answer_satisfaction', 'answer_type_instructions",
    "```json\n{\n    \"solution\": \"df[['Openness to Change', 'Hedonism']].mean().gt('Hedonism')\"\n}\n```\n\nInput DataFrame columns: ['Income', 'Age', 'Household Income', 'Household Size', 'Educational Attainment', 'Gender', 'Race', 'Geographic Region']\nQuestion: What is the gender who has the highest household income?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['Household Income'].idxmax(), 'Gender']\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Patient Age', 'Patient Gender', 'Patient Tags', 'Severity of Illness', 'Visitors with Patient', 'Age_group', 'Illness severity', 'Patient ID', 'City', 'Hospital_code']\nQuestion: What is the city with the highest number of patient visits?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['City'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Patient Age', 'Patient Gender', 'Patient Tags', 'Severity of Illness', 'Visitors with Patient', 'Age_group', 'Illness severity', 'Patient ID', 'City', 'Hospital_code']\nQuestion: Which city has the highest number of patients with diabetes?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Patient Tags'] == 'Diabetes']\\n.groupby('City')['Age_group'].count()\\n.idxmax()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Patient Age', 'Patient Gender', 'Patient Tags', 'Severity of Illness', 'Visitors with Patient', 'Age_group', 'Illness severity', 'Patient ID', 'City', 'Hospital_code']\nQuestion: Which age group has the highest number of patients with heart problems?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Patient Tags'] == 'Heart_Problem']\\n.groupby('Age_group')['Age_group'].count()\\n.idxmax()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df[['Profession', 'Self-enhancement']].groupby('Profession').max().max()[0]\"\n}\n```\n\nInput DataFrame columns: ['Gleat_abundance', 'Gleat_amount', 'Gleat_aspect', 'Gleat_bearing', 'Gleat_brightness', 'Gleat_color', 'Gleat_contrast', 'Gleat_definition', 'Gleat_direction', 'Gleat_disposition', 'Gleat_fullness', 'Gleat_hue', 'Gleat_intensity', 'Gleat_line', 'Gleat_name', 'Gleat_orient', 'Gleat_pos', 'Gleat_quality', 'Gleat_separate', 'Gleat_shape', 'Gleat_size', 'Gleat_symm', 'Gleat_type', 'Gleat_volume', 'Gleat_width', 'Gleat_woody']\nQuestion: Are there any individuals who have a normal (2) disposition on the gleat_disposition attribute?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return (df['Gleat_disposition'] == 2).any()\"\n}\n```\n\nInput DataFrame columns: ['Is_Sigle', 'Group', 'H_Top_Left', 'H_Top_Right', 'H_Bot_Left', 'H_Bot_Right', 'V_Top_Left', 'V_Top_Right', 'V_Bot_Left', 'V_Bot_Right', 'Corners_Top_Left', 'Corners_Top_Right', 'Corners_Bot_Left', 'Corners_Bot_Right', 'Mouth_Top', 'Mouth_Bottom', 'Mouth_Left', 'Mouth_Right', 'Chin_Bottom', 'Nose_Left', 'Nose_Right', 'Nose_Bottom']\nQuestion: How many individuals are sigle?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Is_Sigle'].sum()\"\n}\n```\n\nInput DataFrame columns: ['V",
    "```json\n{\n    \"solution\": \"df[df['Emotional_Range'] > 0.5]['Profession'].size\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Sex', 'Nationality', 'Age', 'Height', 'Weight', 'Skin color', 'Eyes', 'Hair', 'Referee', 'Utility player', 'Goalkeeper']\nQuestion: In what nationality is ?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Name'] == '']['Nationality'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Nationality', 'Age', 'Club', 'Club Logo', 'Preferred Positions', 'Weak Foot', 'Skill Moves', 'Alleged Position', 'Overall', 'Potential', 'Value', 'Wage', 'Special', 'Preferred Foot', 'International Reputation', 'Weak Foot', 'Skill Moves', 'Work Rate', 'Body Type', 'Real Face', 'Position', 'Jersey Number', 'Joined', 'Loaned From', 'Contract Valid Until', 'Height', 'Weight', 'LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB', 'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\nQuestion: How many",
    "```json\n{\n    \"solution\": \"df.groupby('Profession')['Extraversion'].agg(['mean','count']).sort_values('count',ascending=False).head(1)['mean'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Age', 'Gender', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: What is the total number of records of households who have income higher than 100000?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Income'].gt(100000)].count().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['age', 'main_category', 'total_amount']\nQuestion: What is the sum of the total amount for the category with the highest number of records?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('main_category')['total_amount'].agg(['sum','count']).sort_values('count',ascending=False).head(1)['sum'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['character_id', 'name', 'category1', 'category2', 'category3', 'category4', 'category5', 'category6', 'category7', 'category8', 'category9', 'category10', 'category11']\nQuestion: How many characters are in category 1?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('category1')['character_id'].count().head(1).iloc[0]\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Self-transcendence'].min()\"\n}\n```\n\nInput DataFrame columns: ['M', 'F', 'Ages', 'Location', 'You have', 'You are', 'Sometimes', 'Most of the time', 'Always', 'All of the time', 'Q2_1', 'Q2_2', 'Q2_3', 'Q2_4', 'Q2_5', 'Q2_6', 'Q2_7', 'Q2_8', 'Q2_9', 'Q2_10', 'Q2_11', 'Q2_12', 'Q2_13', 'Q2_14', 'Q2_15', 'Q2_16', 'Q2_17', 'Q2_18', 'Q2_19', 'Q2_20', 'Q2_21', 'Q2_22', 'Q2_23', 'Q2_24', 'Q2_25', 'Q2_26', 'Q2_27', 'Q2_28', 'Q2_29', 'Q2_30', 'Q2_31', 'Q2_32', 'Q2_33', 'Q2_34', 'Q2_35', 'Q2_36', 'Q2_37', 'Q2_38', 'Q2_39', 'Q2_40', 'Q2_41', 'Q2_42', 'Q2_43', 'Q2_44', 'Q2_45', 'Q2_46', 'Q2_47', 'Q2_48', 'Q2_49', 'Q2_50', 'Q2_51', 'Q2_52', 'Q2_53', 'Q2_54', 'Q2_55', 'Q2_56', 'Q2_57', 'Q2_58', 'Q2_59', 'Q2_60', 'Q2_61', 'Q2_62', 'Q2_6",
    "```json\n{\n    \"solution\": \"df.loc[df['Conscientiousness'].idxmax(), 'Profession']\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Attrition', 'Age', 'BusinessTravel', 'Department', 'DistanceFromHome', 'Education', 'EducationField', 'Gender', 'JobLevel', 'JobRole', 'MaritalStatus', 'MonthlyIncome', 'NumCompaniesWorked', 'PercentSalaryHike', 'StockOptionLevel', 'TotalWorkingYears', 'TrainingTimesLastYear', 'YearsAtCompany', 'YearsSinceLastPromotion', 'YearsWithCurrManager', 'n']\nQuestion: What is the most common level of stock option?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['StockOptionLevel'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Attrition', 'Age', 'BusinessTravel', 'Department', 'DistanceFromHome', 'Education', 'EducationField', 'Gender', 'JobLevel', 'JobRole', 'MaritalStatus', 'MonthlyIncome', 'NumCompaniesWorked', 'PercentSalaryHike', 'StockOptionLevel', 'TotalWorkingYears', 'TrainingTimesLastYear', 'YearsAtCompany', 'YearsSinceLastPromotion', 'YearsWithCurrManager', 'n']\nQuestion: What is the most common value for the 'YearSinceLastPromotion' column?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['YearSinceLastPromotion'].mode()[0]\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Attrition', 'Age', 'BusinessTravel', 'Department', 'DistanceFromHome', 'Education', 'EducationField', 'Gender', 'JobLevel', 'JobRole', 'MaritalStatus', 'MonthlyIncome', 'NumCompaniesWorked', 'PercentSalaryHike', 'StockOptionLevel', 'TotalWorkingYears', 'TrainingTimesLastYear', 'YearsAtCompany', 'YearsSinceLastPromotion', 'YearsWithCurrManager', 'n']\nQuestion: What is the average 'Age' for people that travel rarely?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['BusinessTravel'] == 'Rarely']['Age'].mean()\"",
    "```json\n{\n    \"solution\": \"df.loc[df['Hedonism'].idxmin(), 'Profession']\"\n}\n```\n\nInput DataFrame columns: ['Academic discipline', 'Age', 'Education level', 'Gender', 'Heard from', 'Hogwarts House', 'Job', 'Location', 'Nationality', 'Which of the following best describes your personality?', 'Which of the following best describes your personality?', 'Which of the following best describes your personality?', 'Which of the following best describes your personality?', 'Which of the following best describes your personality?', 'Which of the following best describes your personality?', 'Which of the following best describes your personality?', 'Which of the following best describes your personality?', 'Which of the following best describes your personality?', 'Which of the following best describes your personality?', 'Psychometric score']\nQuestion: Which university has the highest number of students?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['Location'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['age', 'gender', 'height', 'weight', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio']\nQuestion: Are there any people who suffered from hypertension and diabetes?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df[(df['ap_hi'] > 170) & (df['ap_lo'] > 110)]['cardio'].any()\"\n}\n```\n\nInput DataFrame columns: ['date', 'Time', 'Temperature_C', 'Humidity', 'Wind_Speed', 'Weather_Condition', 'visibility', 'pressure', 'Precipitation_mm', 'Rain_Inches', 'Snow_Inches', 'Cloud_Cover']\nQuestion: Are there any days that were colder than -20 degrees?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Temperature_C'].lt(-20).any()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Time',",
    "```json\n{\n    \"solution\": \"row = df.loc[df['Emotional_Range'].idxmax()]['Profession']\"\n}\n\n{\n    \"solution\": \"df.loc[df['Emotional_Range'].idxmax(), 'Profession']\"\n}\n```\n\nInput DataFrame columns: ['Person', 'Track', 'Score', 'Timestamp']\nQuestion: Which track has the highest score?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"return df.loc[df['Score'].idxmax(), 'Track']\"\n}\n```\n\nInput DataFrame columns: ['Product', 'Gender', 'Age', 'Occupation', 'City_Category', 'Stay_In_Current_City_Years', 'Marital_Status', 'Product_Category_1', 'Product_Category_2', 'Product_Category_3', 'Purchase']\nQuestion: What are the top 3 categories which have the highest purchases?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('Product_Category_1')['Purchase'].sum().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'item_id', 'dept_id', 'cat_id', 'store_id', 'state_id', 'd_1', 'd_2', 'd_3', 'd_4', 'd_5', 'd_6', 'd_7', 'd_8', 'd_9', 'd_10', 'd_11', 'd_12', 'd_13', 'd_14', 'd_15', 'd_16', 'd_17', 'd_18', 'd_19', 'd_20', 'd_21', 'd_22', 'd_23', 'd_24', 'd_25', 'd_26', 'd_27', 'd_28', 'd_29', 'd_30', 'd_31', 'd_32', 'd_33', 'd_34', 'd_35",
    "```json\n{\n    \"solution\": \"df.groupby('Profession')['n'].count().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['profession', 'openness', 'conscientiousness', 'extraversion', 'agreeableness', 'emotional_range', 'conversation', 'openness to change', 'hedonism', 'self-enhancement', 'self-transcendence']\nQuestion: What is the highest openness score?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['openness'].max()\"\n}\n```\n\nInput DataFrame columns: ['Profession', 'Openness', 'Conscientousness', 'Extraversion', 'Agreeableness', 'Emotional_Range', 'Conversation', 'Openness to Change', 'Hedonism', 'Self-enhancement', 'Self-transcendence']\nQuestion: What is the highest Hedonism score?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['Hedonism'].max()\"\n}\n```\n\nInput DataFrame columns: ['profession', 'openness', 'conscientiousness', 'extraversion', 'agreeableness', 'emotional_range', 'conversation', 'openness to change', 'hedonism', 'self-enhancement', 'self-transcendence']\nQuestion: What is the highest self-enhancement score?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['self-enhancement'].max()\"\n}\n```\n\nInput DataFrame columns: ['Profession', 'Openness', 'Conscientousness', 'Extraversion', 'Agreeableness', 'Emotional_Range', 'Conversation', 'Openness to Change', 'Hedonism', 'Self-enhancement', 'Self-transcendence']\nQuestion: What is the highest self-transcendence score?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['self-transcendence'].max()\"\n}\n```\n\nInput DataFrame columns: ['profession', 'openness', 'conscientiousness', 'extra",
    "```json\n{\n    \"solution\": \"top3_openness = df.sort_values('Openness', ascending=False)['Profession'].head(3)\"\n}\n```\n\nInput DataFrame columns: ['income', 'sex', 'age', 'marital', 'health', 'education', 'race', 'religion']\nQuestion: Is there any individual who has more than 500000 in income?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"if 500000 in df['income']: return True\"\n}\n```\n\nInput DataFrame columns: ['year', 'age', 'gender', 'clinic', 'hour', 'month', 'day', 'week', 'business_code', 'is_holiday', 'weekday', 'is_workingday', 'is_weekend', 'is_during_workinghour', 'is_workinghour', 'temp', 'feels_like', 'temp_difference', 'temp_difference_from_highest', 'temp_difference_from_lowest', 'precip', 'icon', 'wind', 'weather_type', 'weather_description', 'event', 'pressure', 'humidity', 'is_snow']\nQuestion: Which is the highest temperature difference from the highest temperature?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['temp_difference_from_highest'].max()\"\n}\n```\n\nInput DataFrame columns: ['index', 'question', 'answer', 'username', 'created_at']\nQuestion: What are the top 3 usernames who have the most answers with Python keyword?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"top3_usernames = df.groupby('username').count()['answer'].sort_values(ascending=False).head(3)\"\n}\n```\n\nInput DataFrame columns: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q10']\nQuestion: What is the most frequent answer to the 8th question?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df",
    "```json\n{\n    \"solution\": \"df.sort_values('Agreeableness').iloc[0:4]['Profession'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Car', 'Pet', 'Travel', 'Food', 'Health', 'Weather', 'Music', 'Work', 'Touch', 'Diet', 'Food/Drink', 'Nature', 'Day/Night', 'Information', 'Hobbies', 'Clothes', 'Finance', 'Art', 'Movies', 'Shopping', 'Cinema', 'Arts', 'Books', 'Sleep', 'Sports', 'Computer', 'TV', 'Education', 'Gardening', 'Entertainment', 'Politics', 'Charity', 'Beauty', 'Society', 'Community', 'Religion', 'Fashion', 'Health/Fitness', 'Exercise', 'Science', 'Sales/Commercial', 'Medicine', 'Shopping', 'Travel', 'Relaxation', 'Friends', 'Music', 'Social', 'Family', 'Self/Spirituality', 'Philosophies', 'Career', 'Art/Design', 'General']\nQuestion: What are the top 4 most common activities in 2014?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Date'].apply(lambda x: x.year).eq(2014).idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Timestamp', 'Age', 'Gender', 'Country', 'state', 'self_employed', 'family_history', 'treatment', 'work_interfere', 'no_employees', 'remote_work', 'tech_company', 'benefits', 'care_options', 'wellness_program', 'seek_help', 'anonymity', 'Leave', 'mental_health_consequence', 'phys_health_consequence', 'coworkers', 'supervisor', 'mental_health_interview', 'phys_health_interview', 'mental_vs_physical', 'obs_consequence', 'comments']\nQuestion: Which country has the highest number of people who identify as Remote Work?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\":",
    "```json\n{\n    \"solution\": \"(df['Conscientousness'].sort_values(ascending=False).head(5).index.tolist())\"\n}\n```\n\n\n#### Example 4: Regression\n\nInput DataFrame columns: ['square', 'square_by_ten', 'average', 'average_squared']\nQuestion: What is the best fit polynomial regression model that minimizes squared error?\nExpected return type: dict(name=str, parameters=list[number])\n\nOutput:\n```json\n{\n    \"solution\": \"import sklearn.linear_model\\nimport sklearn.metrics\\nimport sklearn.preprocessing\\n\\nmodel = sklearn.linear_model.LinearRegression()\\nx = df.loc[:, ['square', 'square_by_ten']].to_numpy()\\ny = df['average'].to_numpy()\\n\\nmodel.fit(x, y)\\n\\nmodel_parameters = {'name': 'LinearRegression', 'parameters': [model.coef_[0], model.coef_[1], model.intercept_]}\"\n}\n```\n\nInput DataFrame columns: ['square', 'square_by_ten', 'average', 'average_squared']\nQuestion: What is the best fit polynomial regression model that minimizes squared error?\nExpected return type: dict(name=str, parameters=list[number])\n\nOutput:\n```json\n{\n    \"solution\": \"import sklearn.linear_model\\nimport sklearn.metrics\\nimport sklearn.preprocessing\\n\\nmodel = sklearn.linear_model.Ridge(alpha=5.0)\\nx = df.loc[:, ['square', 'square_by_ten']].to_numpy()\\ny = df['average'].to_numpy()\\n\\nmodel.fit(x, y)\\n\\nmodel_parameters = {'name': 'Ridge', 'parameters': [model.coef_[0], model.coef_[1], model.intercept_]}\"\n}\n```\n\nInput DataFrame columns: ['square', 'square_by_ten', 'average', 'average_squared']\nQuestion: What is the best fit polynomial regression model that minimizes squared error?\nExpected return type: dict(name=str, parameters=list[number])\n\nOutput:\n```json\n{\n    \"solution\": \"import sklearn.linear",
    "```json\n{\n    \"solution\": \"df.sort_values('Self-enhancement').iloc[-2:]['Profession'].tolist()\"\n}\n```\nry_name\", \"street_name\", \"cross_street_1\", \"cross_street_2\", \"intersection_street_1\", \"intersection_street_2\", \"address_type\", \"landmark\", \"facility_type\", \"status\", \"due_date\", \"resolution_action_updated_date\", \"community_board\", \"x_coordinate\", \"y_coordinate\", \"park_facility_name\", \"park_borough\", \"bbl\", \"open_data_channel_type\", \"vehicle_type\", \"taxi_company_borough\", \"taxi_pickup_location\", \"bridge_highway_name\", \"bridge_highway_direction\", \"road_ramp\", \"bridge_highway_segment\", \"latitude\", \"longitude\", \"location\", \"unique_key\", \"Unnamed_0\", \"closed_date\"]\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['yr','mo', 'dy', 'date','st','mag', 'inj', 'fat','slat','slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'Accepted",
    "```json\n{\n    \"solution\": \"df.groupby('Profession')['Openness to Change'].sum().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['prestige', 'admit']\nQuestion: Which prestige has the largest number of students admitted?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['admit'] == 1]['prestige'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'loan_addr', 'loan_amnt', 'funded_amnt', 'funded_amnt_inv', 'term', 'int_rate', 'installment', 'grade', 'sub_grade', 'emp_title', 'emp_length', 'home_ownership', 'annual_inc', 'verification_status', 'issue_d', 'loan_status', 'pymnt_plan', 'url', 'desc', 'purpose', 'title', 'zip_code', 'addr_state', 'dti', 'delinq_2yrs', 'earliest_cr_line', 'inq_last_6mths', 'mths_since_last_delinq', 'mths_since_last_record', 'open_acc', 'pub_rec', 'revol_bal', 'revol_util', 'total_acc', 'initial_list_status', 'out_prncp', 'out_prncp_inv', 'total_pymnt', 'total_pymnt_inv', 'total_rec_prncp', 'total_rec_int', 'total_rec_late_fee', 'recoveries', 'collection_recovery_fee', 'last_pymnt_d', 'last_pymnt_amnt', 'next_pymnt_d', 'last_credit_pull_d', 'last_fico_range_high', 'last_fico_range_low', 'collections_12_mths_ex_med', 'mths_since_last_major_derog', 'policy_code', 'application_type', 'annual_inc_joint', 'dti_joint', 'verification_status_joint', 'acc_now_de",
    "```json\n{\n    \"solution\": \"df['Emotional_Range'].sort_values(ascending=True).head(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['JobID', 'Title', 'Company', 'CITY', 'Salary', 'Description', 'Requirements', 'Benefits', 'Seniority', 'Industry', 'Location', 'Contact']\nQuestion: Which Company has the most number of Job listings?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['Company'].value_counts().sort_values(ascending=False).iloc[0].index\"\n}\n```\n\nInput DataFrame columns: ['PayRate', 'Gender', 'Age', 'CitizenDesc', 'Hispanic/Latino', 'RaceDesc', 'Hispanic/LatinoDesc', 'DateofHire', 'DateofTermination', 'ReasonForTerm', 'EmploymentStatus', 'Department', 'ManagerName', 'EmployeeSource', 'PerformanceScore', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', 'DaysLateLast30', 'LateLast30', 'Absences', 'AbsencesPct', 'Attrition', 'IsOverTime', 'SpecialProjects', 'Education', 'MaritalDesc', 'OrgGroup', 'EmpStatus', 'BusinessTravelDesc', 'DeptCode', 'RecruitmentSource', 'EmpID', 'G']\nQuestion: What is the average payrate of females who have Masters degree?\nExpected return type: float\n\nOutput:\n```json\n{\n    \"solution\": \"df[(df['Gender'] == 'F') & (df['Education'] == 'Masters')]['PayRate'].mean()\"\n}\n```\n\nInput DataFrame columns: ['name', 'hid', 'good', 'risk_bad', 'credit_good', 'credit_bad', 'credit_tend', 'bad_history', 'bad_purpose', 'risk_recover', 'risk_tend', 'amount_1', 'amount_2', 'amount_3', 'amount_4', 'amount_5', 'amount_6', 'amount_7', 'amount_8', 'amount_9', 'amount_10', 'amount_11', 'amount_12',",
    "```json\n{\n    \"solution\": \"df['Extraversion'].nlargest(5).values.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Title', 'Age', 'Hair', 'Height', 'Weight', 'Religion', 'Sex', 'Sign', 'Occupation', 'Location', 'Image']\nQuestion: What is the average age of a man with an attractive hair color?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[(df['Sex'] == 'Man') & (df['Hair'] == 'Attractive'), 'Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Title', 'Age', 'Hair', 'Height', 'Weight', 'Religion', 'Sex', 'Sign', 'Occupation', 'Location', 'Image']\nQuestion: What is the average weight of a woman not attractive?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[(df['Sex'] == 'Woman') & (df['Hair'] == 'Not-attractive'), 'Weight'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Title', 'Age', 'Hair', 'Height', 'Weight', 'Religion', 'Sex', 'Sign', 'Occupation', 'Location', 'Image']\nQuestion: What is the average weight of a woman with an attractive hair color?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[(df['Sex'] == 'Woman') & (df['Hair'] == 'Attractive'), 'Weight'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Title', 'Age', 'Hair', 'Height', 'Weight', 'Religion', 'Sex', 'Sign', 'Occupation', 'Location', 'Image', 'Gender', 'Body', 'Signs']\nQuestion: What is the average age of a man with a pale skin color?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[(df['Sex'] == 'Man') & (df['Body'] == 'Pale'), 'Age'].mean()\"\n}\n```\n\nInput DataFrame columns",
    "```json\n{\n    \"solution\": \"df.sort_values('Self-transcendence')[:6]['Self-transcendence'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Gender', 'Education', 'Country', 'Ethnicity', 'Nscore', 'Escore', 'Oscore', 'Ascore', 'Cscore', 'Impulsive', 'SS', 'Alcohol', 'Amphet', 'Amyl', 'Benzos', 'Caff', 'Cannabis', 'Choc', 'Coke', 'Crack', 'Ecstasy', 'Heroin', 'Ketamine', 'Legalh', 'LSD', 'Meth', 'Mushrooms', 'Nicotine', 'Semer', 'VSA']\nQuestion: Are there any respondents with Impulsive score higher than 100?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Impulsive'].gt(100).any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'age', 'gender', 'religion', 'income', 'workclass', 'education', 'educational-num', 'marital-status', 'occupation', 'relationship', 'race', 'native-country', 'salary']\nQuestion: How many people are working in the private sector?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['workclass'].value_counts()[0]\"\n}\n```\n\nInput DataFrame columns: ['age', 'workclass', 'education', 'marital-status', 'occupation', 'relationship', 'race', 'gender', 'hours-per-week', 'native-country', 'income']\nQuestion: Which gender has the highest number of people working in the private sector?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['workclass'] == ' Private', 'gender'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['age', 'workclass', 'education', 'marital-status', 'occupation', 'relationship', 'race', 'gender', 'hours-per-week",
    "```json\n{\n    \"solution\": \"df[df['title'].str.contains('communication')]['title'].any()\"\n}\n```\n\nInput DataFrame columns: ['year', 'day', 'month', 'so2', 'so2_measure', 'so2_units', 'so2_index', 'no2', 'no2_measure', 'no2_units', 'no2_index', 'rspm', 'rspm_measure', 'rspm_units', 'rspm_index', 'spm', 'spm_measure', 'spm_units', 'spm_index', 'co', 'co_measure', 'co_units', 'co_index', 'pm2_5', 'pm2_5_measure', 'pm2_5_units', 'pm2_5_index', 'pm10', 'pm10_measure', 'pm10_units', 'pm10_index', 'vocs', 'vocs_measure', 'vocs_units', 'vocs_index', 'nox', 'nox_measure', 'nox_units', 'nox_index', 'nh3', 'nh3_measure', 'nh3_units', 'nh3_index', 'ozone', 'ozone_measure', 'ozone_units', 'ozone_index', 'qc_so2', 'qc_no2', 'qc_rspm', 'qc_so2_flag', 'qc_no2_flag', 'qc_rspm_flag', 'qc_spm', 'qc_spm_flag', 'qc_pm2_5', 'qc_pm10', 'qc_pm2_5_flag', 'qc_pm10_flag', 'qc_vocs', 'qc_co', 'qc_vocs_flag', 'qc_co_flag', 'qc_nh3', 'qc_nh3_flag', 'qa_so2', 'qa_no2', 'qa_rspm', 'qa_pm2_5', 'qa_pm10', 'qa_vocs', 'qa_co', 'qa_nh3', 'date', 'time', 'sample_date', 'sample_time', 'location', 'address', 'state',",
    "```json\n{\n    \"solution\": \"return df['organization'].eq('IBM').any()\"\n}\n```\n\nInput DataFrame columns: ['avg_rating', 'avg_rating_count', 'num_claims', 'organization', 'kind', 'type', 'graphext_cluster', 'date', 'abstract', 'title', 'lang', 'abstract_gx_ADJ', 'grp_title', 'abstract_gx_products', 'abstract_gx_organizations', 'abstract_gx_NOUN', 'abstract_gx_ngrams', 'id', 'target', 'weight', 'x', 'y']\nQuestion: What are the 5 highest-ranking patents?\nExpected return type: list[string]\n\nOutput:\n```json\n{\n    \"solution\": \"return df.nlargest(5, 'avg_rating')['id'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['DATE', 'DESCRIP', 'STREET', 'X', 'Y']\nQuestion: Which streets have the most crimes reported?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"return df['STREET'].value_counts().head().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['X', 'Y', 'Address', 'Cross Street', 'Descript', 'Weekday', 'Time', 'Date', 'month', 'year', 'Long', 'Lat', 'Resolution', 'Victims', 'Injured', 'Fatalities', 'Injury Severity', 'State', 'Location']\nQuestion: What are the top 3 police districts in terms of number of crimes?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Location'].value_counts().head(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Details', 'Subject', 'ZIP/Postcode', 'Collected By', 'Location of Occurrence', 'Total Incidents', 'Reported Date', 'Location', 'Long', 'Lat', 'Asset', 'Property', 'Type of Business', 'Property Subtype', 'Property Type', 'Property Subtype', 'Year', 'Quarter', 'Month', 'Day', ' hour', 'Month_Name',",
    "```json\n{\n    \"solution\": \"df['abstract'].str.lower().str.contains('software').any()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'title', 'contentx', 'related', 'majorcat', 'cat', 'soure', 'date', 'reldates']\nQuestion: What is the number of articles in the dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.shape[0]\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Discount_Type', 'Discount', 'Competitor_price', 'User_Rating', 'Reviews', 'Brand', 'Product_Category', 'Product_Name', 'Discount_Percentage', 'Product_Price']\nQuestion: What is the highest user rating?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['User_Rating'].max()\"\n}\n```\n\nInput DataFrame columns: ['country_name', 'population_2016', 'city_name', 'population_2000', 'population_growth', 'longitude', 'latitude', 'emissions']\nQuestion: Which city has the lowest emissions?\nExpected return type: tuple[category, number]\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['emissions'].idxmin(), ['city_name', 'emissions']]\"\n}\n```\n\nInput DataFrame columns: ['ID', 'gender', 'age', 'education', 'member_year', 'occupation', 'marriage', 'country', 'province', 'city', 'salary']\nQuestion: Are there any individuals who are 50 years of age living in China?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df[(df['gender'] == 'female') & (df['age'] == 50) & (df['country'] == 'China')].size > 0\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Company', 'Title', 'Location', 'Salary_High', 'Salary_Low', 'Salary_Range', 'Salary_Avg', 'Sector', 'Industry', 'Size', 'Type_OF_OWNER',",
    "```json\n{\n    \"solution\": \"df['target'] == 'design'\"\n}\n```\n\nInput DataFrame columns: ['D_id', 'D_type', 'D_year', 'D_title', 'D_author', 'D_venue', 'D_journal', 'D_volume', 'D_issue', 'D_pages', 'D_year_pub', 'D_cited', 'D_cluster_id', 'D_ref_count', 'D_top_venues', 'D_top_year', 'D_top_authors', 'D_top_journal', 'D_pub_venue', 'D_pub_journal', 'P_id', 'P_name', 'P_title', 'P_venue', 'P_journal', 'P_year_pub', 'P_cited', 'P_cluster_id', 'P_ref_count', 'P_top_venues', 'P_top_year', 'P_top_authors', 'P_top_journal', 'P_pub_venue', 'P_pub_journal']\nQuestion: Do the top 10 venues for papers contain the top 10 venues for design?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"all(f in df['P_top_venues'].head(10) for f in df['D_top_venues'].head(10))\"\n}\n```\n\nInput DataFrame columns: ['id', 'year', 'title', 'authors', 'venue', 'type', 'cited', 'top_venues', 'top_year', 'top_authors', 'top_journal', 'pub_venue', 'pub_journal']\nQuestion: What is the title of the paper with the most citations?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['cited'].idxmax(), 'title']\"\n}\n```\n\nInput DataFrame columns: ['id', 'year', 'title', 'authors', 'venue', 'type', 'cited', 'top_venues', 'top_year', 'top_authors', 'top_journal', 'pub_venue', 'pub_journal']",
    "```json\n{\n    \"solution\": \"len(df['organization'].unique())\"\n}\n```\n\nInput DataFrame columns: ['age', 'gender', 'educational_attainment', 'income', 'job_experience', 'age_of_partner', 'age_difference', 'religion', 'majority_status', 'race', 'income_source', 'relationship_status', 'married', 'children', 'relation_with_partner', 'divorced', 'living_with_partner', 'pathological_health', 'Number_of_title', 'Number_of_abstract', 'Number_of_kw', 'Number_of_abstract_gx_NOUN', 'Number_of_abstract_gx_ADJ', 'Number_of_abstract_gx_ngrams', 'Number_of_abstract_gx_organizations', 'Number_of_abstract_gx_products', 'Number_of_abstract_gx_ADJ_products', 'Number_of_abstract_gx_ADJ_organizations', 'Number_of_abstract_gx_NOUN_products', 'Number_of_abstract_gx_NOUN_organizations', 'Number_of_abstract_gx_ADJ_NOUN', 'Number_of_abstract_gx_ADJ_NOUN_products', 'Number_of_abstract_gx_NOUN_ADJ', 'Number_of_abstract_gx_NOUN_ADJ_products', 'Number_of_abstract_gx_NOUN_ADJ_organizations', 'Number_of_abstract_gx_VERB', 'Number_of_abstract_gx_VERB_products', 'Number_of_abstract_gx_VERB_NOUN', 'Number_of_abstract_gx_VERB_NOUN_products', 'Number_of_abstract_gx_products_NOUN', 'Number_of_abstract_gx_products_NOUN_organizations', 'Number_of_abstract_gx_NOUN_VERB', 'Number_of_abstract_gx_NOUN_VERB_products', 'Number_of_abstract_gx_NOUN_VERB_organizations', 'Number_of_abstract_gx_organizations_VERB', 'Number_of_abstract_gx_organizations_VERB_NOUN', 'Number_of_abstract_gx_organizations_NOUN', 'Number_of_abstract_gx_NOUN_organizations_NOUN', 'Number_",
    "```json\n{\n    \"solution\": \"df['num_claims'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Start', 'Start Latitude', 'Start Longitude', 'End', 'End Latitude', 'End Longitude', 'Bike ID', 'Member Type', 'Birth Year', 'Gender', 'Start Time', 'Stop Time', 'Duration', 'Distance']\nQuestion: How many females have used the bikes?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Gender'] == 'Female'].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['date', 'matchId', 'groupId', 'numGroups', 'teamId', 'matchType', 'kills', 'damageDealt', 'winPlacePerc']\nQuestion: What is the average number of kills for the match with match ID 3018217?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['matchId'] == 3018217]['kills'].mean()\"\n}\n```\n\nInput DataFrame columns: ['matchType', 'matchId', 'assists', 'boosts', 'DBNOs', 'headshotKills', 'heals', 'killPlace', 'killPoints', 'kills', 'killStreaks', 'longestKill', 'revives', 'rideDistance', 'roadKills', 'swimDistance', 'teamKills', 'vehicleDestroys', 'walkDistance', 'weaponsAcquired', 'winPoints', 'rankPoints', 'winPlacePerc', 'matchDuration']\nQuestion: What is the average number of kills for the match with match ID 3018217?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['matchId'] == 3018217]['kills'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Censored', 'Rating', 'Title', 'URL', 'id']\nQuestion: Count the number of films with an IMDB rating of over 8.5?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution",
    "```json\n{\n    \"solution\": \"df['num_claims'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'related_factors', 'score']\nQuestion: What are the factors with the highest number of scores?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['related_factors'].explode().value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'A', 'B', 'C', 'D', 'E', 'related_factors', 'score']\nQuestion: What are the factors with the highest number of scores?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['related_factors'].explode().value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'related_factors', 'score']\nQuestion: What are the factors with the highest number of scores?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['related_factors'].explode().value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'related_factors', 'score']\nQuestion: What are the factors with the highest number of scores?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['related_factors'].explode().value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'related_factors', 'score']\nQuestion: What are the factors with the highest number of scores?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['related_factors'].explode().value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame",
    "```json\n{\n    \"solution\": \"return df[df['type'] == 'utility']['type'].count()\"\n}\n```\n\nInput DataFrame columns: ['instr_id', 'year', 'month', 'day', 'date', 'time', 'utc_offset', 'latitude', 'longitude', 'place', 'icon', 'temperature', 'humidity', 'pressure', 'wind_speed', 'wind_direction', 'visibility', 'cloud_cover', 'precipitation', 'events', 'conditions', 'wind_gust']\nQuestion: Are there any days in which the wind was blowing toward the south?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['wind_direction'].str.contains('S').any()\"\n}\n```\n\nInput DataFrame columns: ['index', 'id', 'title', 'plot', 'genres', 'popularity', 'year', 'rating', 'release_date', 'vote_count', 'vote_average', 'runtime', 'budget', 'revenue', 'tagline', 'imdb_id', 'poster_path', 'original_language', 'original_title', 'overview', 'spoken_languages', 'status', 'production_countries', 'production_companies', 'release_date_k', 'budget_adj', 'revenue_adj', 'vote_count_k', 'vote_count_10k', 'vote_average_k']\nQuestion: Which director has directed the most movies?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"return df.groupby('director')['director'].size().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['movie_id', 'title', 'year', 'month', 'day', 'genres', 'duration', 'averagerating', 'numreviews', 'watch', 'director', 'productioncompany', 'actors', 'country', 'language']\nQuestion: Is there any movie with more than 1 hour long?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['duration'] > 60 * 60\"\n}\n```\n\nInput DataFrame columns: ['account_id', 'country', 'date', 'month', 'year', 'age',",
    "```json\n{\n    \"solution\": \"df[df['num_claims'].idxmax()]['organization']\"\n}\n```\n\nInput DataFrame columns: ['number_of_patents', 'organization', 'kind', 'type', 'graphext_cluster', 'date', 'abstract', 'title', 'lang', 'abstract_gx_ADJ', 'grp_title', 'abstract_gx_products', 'abstract_gx_organizations', 'abstract_gx_NOUN', 'abstract_gx_ngrams', 'id', 'target', 'weight', 'x', 'y']\nQuestion: How many different kinds of patents are there?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"len(df['kind'].unique())\"\n}\n```\n\nInput DataFrame columns: ['number_of_patents', 'organization', 'kind', 'type', 'graphext_cluster', 'date', 'abstract', 'title', 'lang', 'abstract_gx_ADJ', 'grp_title', 'abstract_gx_products', 'abstract_gx_organizations', 'abstract_gx_NOUN', 'abstract_gx_ngrams', 'id', 'target', 'weight', 'x', 'y']\nQuestion: How many unique organizations are there?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"len(df['organization'].unique())\"\n}\n```\n\n#!/bin/bash\n\nfor partition in $(seq 32)\n    do\n        echo \"Running script on partition $partition\"\n        docker cp ./autogradable-challenge-engine:/usr/src/autogradable-challenge-engine/results/partition\"$partition\".csv /home/ec2-user/results/partition\"$partition\".csv\n    done\n# Prediction Challenge\n\nThis challenge is about scoring a model using the same data as the training set with a different evaluation metric.\n\n## Author\n\n-   [](https://github.com/dfalbel)\n\n## Setup\n\n### Prerequisites\n\n-   [Docker](https://docs.docker.com/get-docker/)\n\n### Setup\n\n-   First, make sure you have installed dependencies in `requirements.txt` and `requirements-dev.txt`\n-",
    "```json\n{\n    \"solution\": \"df['kind'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['node_id', 'subject_id', 'subject_type', 'subject_name', 'subject_count', 'object_id', 'object_type', 'object_name', 'object_count', 'predicate', 'edge_id', 'edge_type', 'edge_name', 'edge_count', 'edge_weight', 'edge_type_count', 'edge_count_from_node_to_object', 'edge_count_from_node_to_subject', 'edge_weight_from_node_to_object', 'edge_weight_from_node_to_subject', 'subject_from_node', 'object_from_node', 'context_node_id', 'context_node_subject_id', 'context_node_subject_type', 'context_node_subject_name', 'context_node_subject_count', 'context_node_object_id', 'context_node_object_type', 'context_node_object_name', 'context_node_object_count', 'context_node_predicate', 'context_node_edge_id', 'context_node_edge_type', 'context_node_edge_name', 'context_node_edge_count', 'context_node_edge_weight', 'context_node_edge_type_count', 'context_node_edge_count_from_node_to_object', 'context_node_edge_count_from_node_to_subject', 'context_node_edge_weight_from_node_to_object', 'context_node_edge_weight_from_node_to_subject', 'context_node_subject_from_node', 'context_node_object_from_node', 'context_node_is_largest_connected_component', 'context_node_is_in_largest_connected_component', 'context_node_connected_components', 'context_node_size_of_connected_component', 'context_node_number_of_connected_components_in_largest_subgraph', 'context_node_size_of_largest_connected_component']\nQuestion: Which node is not",
    "```json\n{\n    \"solution\": \"df['lang'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Rank', 'Name', 'Age', 'Country', 'Overall', 'Potential', 'Preferred Foot', 'International Reputation', 'Weak Foot', 'Skill Moves', 'Work Rate', 'Body Type', 'Real Face', 'Position', 'Jersey Number', 'Joined', 'Loaned From', 'Contract Valid Until', 'Height', 'Weight', 'LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB', 'Release Clause']\nQuestion: How many players have the position of GK?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"len(df[df['Position'] == 'GK'])\"\n}\n```\n\nInput DataFrame columns: ['Car_ID', 'City', 'Registration_Date', 'Fuel_Type', 'Transmission_Type', 'Owner', 'Mileage_kmpl', 'Engine_CC', 'Power_bhp', 'Seats', 'New_Price', 'Price']\nQuestion: What is the average price of cars with an engine capacity of 2200 CC?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Engine_CC'] == 2200]['Price'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'text', 'ItemID', 'AnonID', 'Rating', 'Date']\nQuestion: What is the average rating of the Doodles poll?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['Rating'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'country_code', 'city', 'year', 'total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated', '",
    "```json\n{\n    \"solution\": \"df['graphext_cluster'].value_counts().idxmax()\"\n}\n```\n\n\n## Resources\n- [About Data Leakage Detection](https://www.kaggle.com/competitions/playground-series-s3e11/discussion/375328) - Discussion on data leakage by the host\n- [How to detect and remove data leakage? (Video)](https://www.youtube.com/watch?v=9xJ9WUqecck) - Video on identifying and removing data leakage\n- [Practical Guide to Handle Data Leakage in Real Life](https://analyticsindiamag.com/practical-guide-to-handle-data-leakage-in-real-life/) - Article on handling data leakage\n- [How to detect and remove data leakage? (Paper)](https://dl.acm.org/doi/10.1145/3394486.3403270) - Paper on data leakage detection and correction\n- [Detecting Data Leakage](https://www.analyticsvidhya.com/blog/2021/05/detecting-data-leakage/) - Article on data leakage detection\n- [Intro to Data Leakage Detection](https://www.youtube.com/watch?v=krl9l-FB6Pw) - Video on data leakage detection\n- [How to detect bias in your dataset? (Paper)](https://arxiv.org/abs/2008.07346) - Paper on data bias detection\n- [How to detect bias in your dataset? (Video)](https://www.youtube.com/watch?v=X3_5lR59M0s&t=3s) - Video on data bias detection\n- [How to detect bias in your dataset? (Notebook)](https://www.kaggle.com/code/jthaem/how-to-detect-bias-in-your-dataset) - Notebook on data bias detection\n/Projects/Playground-Series-S3E11/notebook.md\n# Playground Series - Season 3, Episode 11\n\n##",
    "```json\n{\n    \"solution\": \"df['organization'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'keyword', 'location', 'text', 'target', 'target_int', 'clean_text', 'clean_kw', 'clean_loc', 'num_words', 'num_unique_words', 'num_chars', 'num_stopwords', 'num_punctuations', 'num_words_upper', 'num_stopwords_upper', 'num_mean_word_len', 'num_punctuations_upper', 'num_words_title', 'num_words_lower', 'num_words_capital', 'num_words_numeric', 'num_words_other', 'num_words_repeated', 'num_words_symbols', 'num_words_space', 'num_words_endwith', 'num_words_alpha', 'num_words_alnum', 'num_words_alnumspace', 'num_words_alnumlower', 'num_words_alnumupper', 'num_words_alnumlower_alnumupper', 'num_words_alnum_spaces', 'num_words_alnum_symbols', 'num_words_alnum_repeated', 'num_words_alnum_whitespace', 'num_words_alnum_punctuation', 'num_non_alnum_chars', 'num_non_alnum_symbols', 'num_non_alnum_chars_repeated', 'num_non_alnum_chars_repeated', 'num_non_alnum_chars_whitespace', 'num_non_alnum_chars_punctuation', 'num_non_alnum_chars_uppercase', 'num_non_alnum_chars_lowercase', 'num_non_alnum_chars_title', 'num_non_alnum_chars_whitespace_uppercase', 'num_non_alnum_chars_whitespace_lowercase', 'num_non_alnum_chars_whitespace_title', 'num_non_alnum_chars_punctuation_uppercase', 'num_non_alnum_chars_punctuation_lowercase', 'num_non_alnum_chars_punctuation_title', 'num",
    "```json\n{\n    \"solution\": \"df['kind'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['gender', 'race_ethnicity_combined', 'parental_level_of_education', 'lunch', 'test_preparation_course', 'math_score', 'reading_score', 'writing_score']\nQuestion: What is the average score of the lunch group that takes a course in preparation?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['lunch'] == 'standard' & df['test_preparation_course'] == 'completed']['math_score'].mean()\"\n}\n```\n\nInput DataFrame columns: ['title', 'year', 'genres', 'runtime', 'revenue', 'director', 'cast', 'popularity', 'budget', 'vote_count', 'vote_average', 'release_date', 'id']\nQuestion: Which movies have the highest vote average but lower than the budget?\nExpected return type: list[string]\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['vote_average'].gt(df['budget'])].sort_values('vote_count', ascending = False)['title'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['time', 'responded', 'question', 'answer']\nQuestion: How many people haven't responded to the questionaire?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"return df['responded'].value_counts().iloc[1]\"\n}\n```\n\nInput DataFrame columns: ['total_cases', 'total_deaths', 'new_cases', 'new_deaths', 'population', 'continent', 'location', 'date', 'new_tests', 'total_tests', 'tests_per_case', 'positive_rate', 'people_fully_vaccinated', 'new_vaccinations', 'total_vaccinations', 'new_vaccinations_smoothed', 'total_vaccinations_per_hundred', 'stringency_index', 'population_density', 'median_age', 'gdp_per_capita', 'extreme_poverty', '",
    "```json\n{\n    \"solution\": \"df['kind'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Survived']\nQuestion: How many men above the age of 50 survived?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[(df['Age'] > 50) & (df['Sex'] == 'male')]['Survived'].sum()\"\n}\n```\n\nInput DataFrame columns: ['inquirer', 'answer', 'key']\nQuestion: Which query is the most repeated?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"query_cols = ['inquirer', 'answer', 'key'] df['key'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: []\nQuestion: How many records are in this dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"return df.shape[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'label', 'sex', 'race', 'age', 'affection_status', 'chronic', 'bp_s1', 'bp_s2', 'cholesterol_hmg', 'gluc_mgperdl', 'ldl_mgperdl', 'hdl_mgperdl', 'trig_mgperdl', 'bmi', 'ap_hi', 'ap_lo', 'cholesterol_hmg_f', 'trig_mgperdl_f', 'hdl_mgperdl_f', 'ldl_mgperdl_f', 'gluc_mgperdl_f']\nQuestion: Which racial group has the highest number of cholesterols?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"cholesterol_by_race = df.groupby('race')['cholesterol_hmg_f'].sum() return cholesterol_by_race.idxmax(cholesterol_by_race)\"",
    "```json\n{\n    \"solution\": \"df.groupby('graphext_cluster')['graphext_cluster'].count().nsmallest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['total_cases', 'new_cases', 'total_deaths', 'new_cases_per_million', 'new_tests', 'total_tests', 'new_tests_per_thousand', 'tests_units', 'population', 'population_density', 'median_age', 'aged_70_older', 'aged_65_older', 'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate', 'diabetes_prevalence', 'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand', 'life_expectancy', 'human_development_index']\nQuestion: Is there a correlation between life expectancy and cardiovasc_death_rate?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df[['life_expectancy', 'cardiovasc_death_rate']].corr().iloc[0,1].gt(0.5).any()\"\n}\n```\n\nInput DataFrame columns: ['state', 'county', 'fips_code', 'case_count', 'stay_at_home_code', 'stay_at_home_date', 'governor_code', 'governor_date', 'liberal_count', 'conservative_count', 'undecided_count', 'open_date', 'county_code']\nQuestion: What is the maximum liberal cases count?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['liberal_count'].max()\"\n}\n```\n\nInput DataFrame columns: ['pau_customers', 'pau_net_worth', 'pau_employees', 'pau_incent_recd', 'pau_procurement', 'pau_hr_recru', 'pau_legal', 'pau_tech_recd', 'pau_operations', '",
    "```json\n{\n    \"solution\": \"df[['id', 'num_claims']].groupby('id').first().sort_values('num_claims', ascending=False)['num_claims'].head(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['label', 'message']\nQuestion: What are the most common words in the \"Call Us\" messages?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['label'] == 'CallUs']['message'].str.split(expand=True).stack().value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['year', 'country', 'country_code', 'region', 'region_code', 'population', 'world_4region', 'sub_region', 'time_series', 'population_density', 'median_age', 'aged_65_older', 'aided_count_per_capita', 'gdp_per_capita', 'extreme_poverty', 'human_development_index', 'income_share_held', 'inequality', 'gini', 'year_month', 'education_expenditure', 'health_expenditure', 'education_expenditure_percent_gdp', 'health_expenditure_percent_gdp', 'year_week', 'gini_minus_one_half']\nQuestion: What are the top 5 countries with the highest number of aided people per capita?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df[['country', 'aided_count_per_capita']].groupby('country').mean().sort_values('aided_count_per_capita', ascending=False)['aided_count_per_capita'].head(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Alcohol', 'Milk', 'Wheat', 'Cereals', 'Meat', 'Fruits', 'Fish', 'Vegetables', 'Other', 'Total']\nQuestion: Which food is least consumed?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[['Alcohol', 'Milk', '",
    "```json\n{\n    \"solution\": \"df.groupby('id')['num_claims'].sum().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['HasDetections', 'ProductName', 'EngineVersion', 'AppVersion', 'OpSystemVer', 'IsSxsPassiveMode', 'AVProductStatesIdentifier', 'AVProductsInstalled', 'AVProductsEnabled', 'HasTpm', 'CountryIdentifier', 'OrganizationIdentifier', 'Platform', 'Processor', 'OsVer', 'OsBuild', 'OsSuite', 'OsPlatformSubRelease', 'OsBuildLab', 'SkuEdition', 'IsProtected', 'AutoSampleOptIn', 'PuaMode', 'SMode', 'IeVerIdentifier', 'SmartScreen', 'Firewall', 'UacLuaenable', 'Census_MDC2FormFactor', 'Census_DeviceFamily', 'Census_OEMNameIdentifier', 'Census_OEMModelIdentifier', 'Census_ProcessorCoreCount', 'Census_ProcessorManufacturerIdentifier', 'Census_ProcessorModelIdentifier', 'Census_ProcessorClass', 'Census_PrimaryDiskTotalCapacity', 'Census_PrimaryDiskTypeName', 'Census_SystemVolumeTotalCapacity', 'Census_HasOpticalDiskDrive', 'Census_TotalPhysicalRAM', 'Census_ChassisTypeName', 'Census_InternalPrimaryDiagonalDisplaySizeInInches', 'Census_InternalPrimaryDisplayResolutionHorizontal', 'Census_InternalPrimaryDisplayResolutionVertical', 'Census_PowerPlatformRoleName', 'Census_InternalBatteryType', 'Census_InternalBatteryNumberOfCharges', 'Census_OSVersion', 'Census_OSArchitecture', 'Census_OSBranch', 'Census_OSBuildNumber', 'Census_OSBuildRevision', 'Census_OSEdition', 'Census_OSSkuName', 'Census_OSInstallTypeName', 'Census_OSInstallLanguageIdentifier', 'Census_OSUILocaleIdentifier', 'Census_OSWUAutoUpdateOptionsName', 'Census_IsPortableOperatingSystem', 'Census_GenuineStateName', 'Census_ActivationChannel', 'Census_IsFlightingInternal', 'Census_IsFlightsDisabled', 'Census_FlightRing', 'Census_ThresholdOptIn', '",
    "```json\n{\n    \"solution\": \"return [df[df['kind'] == 'B2']['num_claims'].median(), df[df['kind'] == 'S1']['num_claims'].median()]\"\n}\n```\n\nInput DataFrame columns: ['X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'Y']\nQuestion: What is the correlation between X1 and Y?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.corr().loc['X1', 'Y']\"\n}\n```\n\nInput DataFrame columns: ['mean', 'std', 'min', '25%', '50%', '75%', 'max', 'count']\nQuestion: What is the median of the final exam marks?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['50%'].loc['final']\"\n}\n```\n\nInput DataFrame columns: ['Continent','Country','Region','Happiness Rank','Happiness Score','Standard Error','Economy (GDP per Capita)','Family','Health (Life Expectancy)','Freedom','Trust (Government Corruption)','Generosity','Dystopia Residual']\nQuestion: What is the Happiness Score of the 10 least happy countries in East Asia?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"return df.loc[df['Continent'] == 'East Asia']['Happiness Score'].nsmallest(10).tolist()\"\n}\n```\n\nInput DataFrame columns: ['User ID', 'Location', 'Age', 'Gender', 'Occupation', 'Zip', 'Course Name', 'Term','Grade', 'Statuses']\nQuestion: What is the average number of statuses of the 10 most active users?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"return df.groupby(['User ID']).size().nlargest(10).mean()\"\n}\n```\n\nInput DataFrame columns: ['Title', 'Genre', 'User Rating', 'Director', 'Actors', 'Year', 'Language', 'Runtime (Minutes)', 'Produced By', 'Country', '",
    "```json\n{\n    \"solution\": \"list(df['id'].tail(3))\"\n}\n```\n\nInput DataFrame columns: ['time_in', 'time_out', 'distance_traveled', 'speed_traveled', 'route_to_work', 'from_work', 'dist_from_work', 'w2_total', '_w1_total', 'dist_from_home', 'route_to_home', 'employer', 'age', 'gender', 'location', 'distance_to_work', 'additional_distance_to_work', 'city', 'income', 'miles_per_hour', 'engine', 'vehicle_type', 'car_type', 'car_make', 'car_model', 'car_year', 'car_color', 'status', 'threshold']\nQuestion: Which police car is used the most?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['engine'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['state', 'county', 'hu_site_id', 'site_name', 'num_units', 'total_hh_units', 'tothh', 'tothh_units_10', 'tothh_units_50', 'total_pop', 'totpop_25', 'totpop_50', 'totpop_75', 'totpop_100', 'price_10', 'price_50', 'price_75', 'price_100', 'ov_10', 'ov_50', 'ov_75', 'ov_100', 'hh_10', 'hh_50', 'hh_75', 'hh_100', 'n10', 'n50', 'n75', 'n100']\nQuestion: How many homes with 50+ units worth $500,000+ are there in the dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[(df['price_50'] >= 500_000) & (df['hh_50'] > 0.",
    "```json\n{\n    \"solution\": \"df[df['user_favourites_count'].idxmax()]['user_verified'].values[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'bio', 'location', 'following']\nQuestion: Which has the most followers?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['following'].max().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>']\nQuestion: How many tweets were there on the 20th of December in the 2017?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"time_range = df['date'].between('2017-12-20', '2017-12-21')\\ndf.loc[time_range",
    "```json\n{\n    \"solution\": \"df['user_favourites_count'].max() == df['user_favourites_count'].max()\"\n}\n```\n\nInput DataFrame columns: ['target', 'id', 'keyword', 'location', 'text', 'target_names', 'target_dict']\nQuestion: How many tweets with the keyword \"flood\" do not contain the word \"storm\"?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['text'].str.lower().str.contains('flood') & ~df['text'].str.lower().str.contains('storm')]['id'].count()\"\n}\n```\n\nInput DataFrame columns: ['userID', 'itemID', 'rating', 'timestamp', 'userAge', 'userGender', 'userOccupation', 'userZipCode', 'movieId', 'movieTitle', 'movieGenres', 'userGenres']\n\nQuestion: What are the top 2 movie genres with the highest rating?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['rating'].groupby(df['movieGenres']).sum().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['movieId', 'title', 'genres', 'userId', 'itemId', 'rating', 'timestamp', 'timestamp_format', 'age', 'gender', 'occupation', 'zipCode', 'genreList']\nQuestion: What are the top 10 movies that have been most watched?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['movieId'].value_counts().nlargest(10).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['userId', 'movieId', 'rating', 'timestamp', 'userAge', 'userGender', 'occupation', 'occupation_dict', 'userZipCode', 'movieTitle', 'genreList', 'movieId_dict', 'timestamp_format', 'timestamp_format_dict']\nQuestion: What is the median rating of all the movies?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['rating'].median()\"\n}",
    "```json\n{\n    \"solution\": \"return df['mention_names'].explode().value_counts().idxmax() == df['rp_user_name'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'lat', 'lon', 'mag', 'depth', 'magType', 'nst', 'gap', 'dmin', 'rms', 'net', 'id', 'updated', 'place', 'type', 'horizontalError', 'depthError', 'magError', 'magNst', 'status', 'locationSource', 'magSource']\nQuestion: What is the maximum magnitude of earthquakes that have occurred from 1st of January 2011 to 30th of September 2020 in the \"22.24, 114.27, 9.65, 103.86, 1.82\" region?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"return df[df['updated'] < '2020-10-01'].loc[:, 'mag'].max()\"\n}\n```\n\nInput DataFrame columns: ['Year','Month','Day','Time','State','Latitude','Longitude','Location','Severity','Start_Time','End_Time','Start_Lat','Start_Lng','End_Lat','End_Lng','Distance(mi)','Description','Number','Street','Side','City','County','State','Zipcode','National_Id','Lattitude','Longitude','Timezone','Airport_Code','Weather_Timestamp','Temperature(F)','Wind_Chill(F)','Humidity(%)','Pressure(in)','Visibility(mi)','Wind_Direction','Wind_Speed(mph)','Precipitation(in)','Weather_Condition','Amenity','Bump','Crossing','Give_Way','Junction','No_Exit','Railway','Roundabout','Station','Stop','Traffic_Calming','Traffic_Signal','Turning_Loop','Sunrise_Sunset','Civil_Twilight','Nautical_Twilight','Astronomical_Twilight']\n\nQuestion: Which category of road condition has the most number of incidences in February 2020?\nExpected return type: category",
    "```json\n{\n    \"solution\": \"df['author_name'].value_counts().index[0] in df.groupby(by='author_name')['retweets'].sum().sort_values(ascending=False).index[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'listing_id', 'date', 'review_id', 'reviewer_id', 'reviewer_name', 'comments', 'reviewer_country', 'neighborhood', 'interaction', 'date_first_interaction', 'interaction_type', 'tags', 'date_last_review', 'n_questions', 'n_answers', 'n_reviews']\nQuestion: Who answered the most questions?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"return df['reviewer_name'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']\nQuestion: What is the value of the daily adjusted closing price on the 2020-03-27?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"return df.loc[df['Date'] == '2020-03-27', 'Adj Close'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['DateTime', 'DateTimeUTC', 'CurrencyPair', 'RateBid', 'RateAsk', 'Rate24hHigh', 'Rate24hLow', 'Rate24hAvg', 'Volume24h', 'Volume24hBase', 'Volume24hCurrency', 'TradesCount', 'IsFrozen', 'UpdatedAt']\nQuestion: What was the highest rate of trade in the 5 years of data?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"return df['RateAsk'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'host_id', 'host_name', 'neighbourhood_group', 'neighbourhood', 'latitude', 'longitude', 'room_type', 'price', 'minimum_nights', 'number_of_reviews', 'last_review', 'reviews_per_month', 'calculated_host_listings_",
    "```json\n{\n    \"solution\": \"df['user_followers_count<gx:number>'].max()\"\n}\n```\n\nInput DataFrame columns: ['n_clickbait_irresistible', 'n_clickbait_unforgivable', 'n_clickbait_nonsensical', 'n_clickbait_notorious', 'n_clickbait_boastful', 'n_clickbait_embarrassing', 'n_clickbait_untruthful', 'n_clickbait_misleading', 'n_clickbait_disrespectful', 'n_clickbait_racist', 'n_clickbait_controversial', 'n_clickbait_sexist', 'n_clickbait_inflammatory', 'n_clickbait_divisive', 'n_clickbait_sarcasm', 'n_clickbait_unfunny', 'n_clickbait_derogatory', 'n_clickbait_outlandish', 'n_clickbait_nuanced', 'n_clickbait_political_correctness', 'n_clickbait_factual', 'n_clickbait_libelous', 'n_clickbait_profane', 'n_clickbait_disinformation_risk', 'n_clickbait_disinformation_probability', 'n_clickbait_disinformation_credibility', 'n_clickbait_self_made', 'n_clickbait_unreliable', 'n_clickbait_misleading_claim', 'n_clickbait_false_or_mistaken', 'n_clickbait_false_claim', 'n_clickbait_implausible', 'n_clickbait_bloomberg', 'n_clickbait_misrepresentation', 'n_clickbait_discredit', 'n_clickbait_stew', 'n_clickbait_trump', 'n_clickbait_fivethirtyeight', 'n_clickbait_fake_news', 'n_clickbait_misleading_story', 'n_clickbait_fake_america', 'n",
    "```json\n{\n    \"solution\": \"df.groupby('author_id')['favorites'].sum()[df.groupby('author_id')['favorites'].sum() > 10000].count()\"\n}\n```\n\nInput DataFrame columns: ['trip_id', 'route_id', 'service_id', 'trip_start_time', 'trip_stop_time', 'trip_duration_seconds', 'trip_distance_miles', 'street_for_waypoint', 'street_to_waypoint', 'direction_for_waypoint', 'direction_to_waypoint', 'wheelchair_accessible', 'bike_route_name', 'bike_route_type', 'bike_route_id', 'bike_route_url', 'bike_route_short_name', 'bike_route_long_name', 'bike_route_type_id', 'bike_route_type_name', 'bike_stop_id', 'bike_stop_name', 'bike_stop_lat', 'bike_stop_lon', 'bike_stop_url', 'bike_location_type', 'bike_parent_station_id', 'bike_parent_station_name', 'bike_parent_station_wheelchair_accessible', 'bike_parent_station_lat', 'bike_parent_station_lon', 'bike_parent_station_url', 'bike_parent_station_location_type', 'bike_parent_station_is_rental_station', 'bike_parent_station_rental_methods']\nQuestion: Are there any route_ids with over 800 trips?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['route_id'].value_counts() > 800\"\n}\n```\n\nInput DataFrame columns: ['trip_id', 'route_id', 'service_id', 'trip_start_time', 'trip_stop_time', 'trip_duration_seconds', 'trip_distance_miles', 'street_for_waypoint', 'street_to_waypoint', 'direction_for_waypoint', 'direction_to_waypoint', 'wheelchair_accessible',",
    "```json\n{\n    \"solution\": \"df['retweets'].max()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'screen_name<gx:category>', 'tweet_link<gx:url>', 'text<gx:text>', 'mentions<gx:list[category]>', 'hashtags<gx:list[category]>', 'links<gx:list[url]>', 'image_links<gx:list[url]>', 'replies<gx:number>', 'retweets<gx:number>', 'favorites<gx:number>', 'user_id<gx:category>', 'user_name<gx:category>', 'user_avatar<gx:url>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'filter_level<gx:category>', 'source<gx:text>', 'date<gx:date>']\nQuestion: How many images does the most tweeted tweet have?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['image_links'].apply(len).max()\"\n}\n```\n\nInput DataFrame columns: ['month', 'year', 'day', 'period', 'city', 'state', 'category', 'act_code', 'subcat', 'crime_type', 'offense_description', 'location_description', 'district', 'beats', 'neighborhood', 'location', 'x', 'y', 'lat', 'long', 'ucr_part', 'ucr_ncic_code', 'latitude', 'longitude', 'city_FIPS', 'city_name', 'state_FIPS', 'state_ab', 'state_name', 'geometry']\nQuestion: What is the crime with the highest amount of records?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['category'].max()\"\n}\n```\n\nInput DataFrame columns: ['category', 'sub_category', 'crime_description', 'latitude', 'longitude', 'geometry']\nQuestion: How many unique crime categories does Cleveland PD have?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['category'].nunique()\"",
    "```json\n{\n    \"solution\": \"df['mention_ids'].explode().value_counts().max()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>', 'search<gx:category>']\nQuestion: What user has been mentioned the most? (In order of mentioned times)\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['mention_names'].explode().value_counts().head(5)\"\n}\n```\n\nInput DataFrame columns: ['Product Name', 'Brand', 'Category', 'Description', 'Price', 'Sale Price', 'Product Type', 'Deals', 'Rating', 'Positive Feedback Count', 'Review Count', 'Review Date', 'Review Rating', 'Review Body', 'Review Title', 'Review Title Sentiment', 'Helpful Review Votes', 'Review Date Sentiment', 'Review User Location', 'Review User ID', 'Review User Join",
    "```json\n{\n    \"solution\": \"df['author_name'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'post_created_at<gx:datetime>', 'post_updated_at<gx:datetime>', 'post_published_at<gx:datetime>', 'post_text<gx:text>', 'post_title<gx:text>', 'post_excerpt<gx:text>', 'post_video_file<gx:url>', 'post_audio_file<gx:url>', 'post_content<gx:text>', 'post_slug<gx:text>', 'post_url<gx:url>', 'post_status<gx:text>', 'post_type<gx:category>', 'post_format<gx:category>', 'post_language<gx:category>', 'post_password<gx:text>', 'post_password_protected<gx:boolean>', 'post_parent<gx:category>', 'post_category<gx:category>', 'post_tags<gx:category>', 'post_featured_media<gx:category>', 'post_thumbnail<gx:category>', 'post_sticky<gx:boolean>', 'post_author<gx:category>', 'post_author_avatar<gx:url>', 'post_author_display_name<gx:text>', 'post_author_first_name<gx:text>', 'post_author_last_name<gx:text>', 'post_author_nickname<gx:text>', 'post_author_slug<gx:text>', 'post_author_description<gx:text>', 'post_author_email<gx:text>', 'post_author_user_url<gx:url>', 'post_author_user_id<gx:text>', 'post_author_website<gx:url>', 'post_author_location<gx:text>', 'post_author_bio<gx:text>', 'post_author_fields<gx:text>', 'post_author_meta<gx:text>', 'post_author_roles<gx:text>']\nQuestion: What is the maximum number of posts posted?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.shape[0]\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.groupby('author_name')['user_favourites_count'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>', 'search<gx:category>']\nQuestion: What is the tweet text published by the author with the lowest number of retweets?\nExpected return type: str\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('author_name')['retweets'].sum().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers",
    "```json\n{\n    \"solution\": \"df['author_name<gx:category>'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>', 'search<gx:category>']\nQuestion: Which entity has the most unverified accounts?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['author_id<gx:category>'].groupby(df['user_verified<gx:boolean>']).value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'description', 'verified', 'followers', 'friends', 'location', 'statuses', 'created_at', 'favourites', 'utc_offset', 'time_zone', 'name', 'screen_name', 'lang', 'contributors_enabled', 'is_translator', 'profile_background_color', 'profile_background_image_",
    "```json\n{\n    \"solution\": \"df['retweets'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['salary', 'equity', 'sector', 'asset_classes', 'geography', 'geographical_sector', 'geographical_region', 'company_name', 'founded_year', 'company_url', 'ticker', 'industry_type', 'employee_count', 'company_id', 'company_homepage_url', 'funding_total_usd', 'funding_rounds', 'funding_rounds_crunchbase', 'funding_rounds_investools', 'funding_rounds_type', 'funding_rounds_total', 'funding_rounds_pre_money', 'funding_rounds_angel', 'funding_rounds_seed', 'funding_rounds_grant', 'funding_rounds_series_a', 'funding_rounds_series_b', 'funding_rounds_series_c', 'funding_rounds_series_d', 'funding_rounds_series_e', 'funding_rounds_series_f', 'funding_rounds_series_g', 'funding_rounds_series_h', 'funding_rounds_series_i', 'funding_rounds_series_unknown', 'funding_total_usd_cat', 'funding_rounds_cat', 'funding_rounds_pre_money_cat', 'funding_rounds_angel_cat', 'funding_rounds_seed_cat', 'funding_rounds_grant_cat', 'funding_rounds_series_a_cat', 'funding_rounds_series_b_cat', 'funding_rounds_series_c_cat', 'funding_rounds_series_d_cat', 'funding_rounds_series_e_cat', 'funding_rounds_series_f_cat', 'funding_rounds_series_g_cat', 'funding_rounds_series_h_cat', 'funding_rounds_series_i_cat', 'funding_rounds_series_unknown_cat', 'funding_total_usd_1', 'funding_total_usd_2', 'funding_total_usd_3', 'funding_total_",
    "```json\n{\n    \"solution\": \"df.groupby('author_name<gx:category>')['user_followers_count<gx:number>'].max().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: []\nQuestion: What are the top 5 most common tweet types?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['type<gx:category>'].value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['qid', 'question_text', 'question_body_text', 'question_title_text', 'question_type_text', 'question_user_name_text', 'answer_text', 'answer_user_name_text', 'answer_body_text', 'answer_user_name_text', 'answer_date', 'answer_user_upvotes', 'answer_user_downvotes', 'answer_user_comments', 'answer_user_reputation', 'answer_top_rank', 'answer_top_share_rank', 'answer_top_comment_rank', 'answer_top_score', 'answer_top_accepted', 'answer_user_follower_count', 'answer_user_following_count', 'correct_answer_id', 'correct_answer_user_name_text', 'correct_answer_user_upvotes', 'correct_answer_user_downvotes', 'correct_answer_user_comments', 'correct_answer_user_reputation', 'correct_answer_date', 'correct_answer_top_share_rank', 'correct_answer_top_comment_rank', 'correct_answer_top_score', 'correct_answer_top_accepted']\nQuestion: Does the dataset have any duplicate questions?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['question_text'].duplicated().any()\"\n}\n```\n\nInput DataFrame columns: ['qid', 'question_text', 'question_body_text', 'question_title_text', 'question_type_text', 'question_user_name_text', 'answer_text', 'answer_user_name_text', 'answer_body_",
    "```json\n{\n    \"solution\": \"df.nlargest(4, 'favorites').author_name.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>', 'search<gx:category>']\nQuestion: Who are the top 3 authors with the most replies?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df.nlargest(3, 'replies').author_name.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>',",
    "```json\n{\n    \"solution\": \"df.loc[df['mention_names'].explode().value_counts().nlargest(4).index.tolist()]['author_name<gx:category>'].tolist()\"\n}\n```\n\nInput Dataframe columns: ['id<gn:numeric>', 'category_id<gn:numeric>', 'category_name<gn:text>', 'parent_category_name<gn:text>', 'sub_category_name<gn:text>', 'description<gn:text>', 'description_bkup<gn:text>', 'original_description<gn:text>', 'name<gn:text>', 'domain_id<gn:category>', 'price<gn:number>', 'price_currency_code<gn:text>', 'price_currency<gn:category>', 'shipping<gn:boolean>', 'location<gn:text>', 'brand<gn:text>', 'category_path<gn:text>', 'currency_code<gn:text>', 'seller_id<gn:numeric>', 'seller_type<gn:category>', 'seller_feedback_count<gn:numeric>', 'category_description<gn:text>', 'item_group_id<gn:text>', 'item_group_listing_count<gn:numeric>', 'item_group_post_count<gn:numeric>', 'item_group_status<gn:category>', 'item_group_visibility<gn:category>', 'item_group_inventory<gn:category>', 'item_group_price_range<gn:number>', 'item_group_price_range_max<gn:number>', 'item_group_price_range_min<gn:number>', 'item_group_price_range_currency_code<gn:text>', 'item_group_shipping_price_range<gn:number>', 'item_group_shipping_price_range_max<gn:number>', 'item_group_shipping_price_range_min<gn:number>', 'item_group_shipping_price_range_currency_code<gn:text>', 'is_watched<gn:boolean>', 'automatic_shipping<gn:boolean>', 'has_automated_shipping<gn:boolean>', 'has_gallery<gn:boolean>', 'is_valutated<gn:boolean>', '",
    "```json\n{\n    \"solution\": \"df['author_name'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'id_str', 'name', 'screen_name', 'location', 'description', 'url', 'protected', 'followers_count', 'friends_count', 'listed_count', 'created_at', 'favourites_count', 'utc_offset', 'time_zone', 'geo_enabled', 'verified', 'statuses_count', 'lang', 'contributors_enabled', 'is_translator', 'is_translation_enabled', 'profile_background_color', 'profile_background_image_url', 'profile_background_image_url_https', 'profile_background_tile', 'profile_image_url', 'profile_image_url_https', 'profile_banner_url', 'profile_link_color', 'profile_sidebar_border_color', 'profile_sidebar_fill_color', 'profile_text_color', 'profile_use_background_image', 'has_extended_profile', 'default_profile', 'default_profile_image', 'following', 'follow_request_sent', 'notifications', 'translator_type', 'following', 'follow_request_sent', 'notifications', 'utc_offset', 'time_zone', 'geo_enabled', 'verified', 'statuses_count', 'lang', 'status', 'contributors_enabled', 'is_translator', 'is_translation_enabled', 'profile_background_color', 'profile_background_image_url', 'profile_background_image_url_https', 'profile_background_tile', 'profile_image_url', 'profile_image_url_https', 'profile_banner_url', 'profile_link_color', 'profile_sidebar_border_color', 'profile_sidebar_fill_color', 'profile_text_color', 'profile_use_background_image', 'has_extended_profile', 'default_profile', 'default_profile_image', 'following', 'follow_request_sent', 'notifications', 'translator_type']\nQuestion: Which user has the most friends?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['friends_count",
    "```json\n{\n    \"solution\": \"df['user_followers_count'].nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'upvotes', 'time', 'tags', 'author', 'community', 'comments', 'score', 'body', 'relevancy_score', 'is_answered', 'is_accepted', 'is_edited', 'link', 'parent_id', 'parent_author_id', 'accepted_answer_id']\nQuestion: How many posts in the dataset have no parent?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['parent_id'].isnull()].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['source_id', 'message_id', 'conversation_id', 'sentiment', 'message', 'author', 'time_timestamp', 'location', 'post_type', 'in_response_to_message_id', 'in_response_to_user_id', 'in_response_to_screen_name', 'quote_count', 'reply_count', 'like_count', 'retweet_count', 'attachments', 'mentions', 'hashtags', 'urls', 'photos', 'video', 'thumbnail', 'thumbnail_url', 'user_id', 'name', 'screen_name', 'lang', 'possibly_sensitive', 'quoted_status_id', 'quoted_status_permalink', 'possibly_sensitive_appealable', 'quoted_status', 'quoted_status_id_str', 'quoted_status_permalink_str', 'quoted_status_text', 'quoted_status_user_id', 'quoted_status_user_id_str', 'quoted_status_user_name', 'quoted_status_user_screen_name', 'quoted_status_user_location', 'quoted_status_user_description', 'quoted_status_user_verified', 'quoted_status_user_ friends_count', 'quoted_status_user_followers_count', 'quoted_status_user_listed_count', 'quoted_status_user_created_at', 'quoted_status_user_favourites_count', 'quoted_status_user_utc_offset', 'quoted_status_user_",
    "```json\n{\n    \"solution\": \"df['favorites'].head(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'user_id', 'likes', 'replies', 'retweets', 'media', 'device', 'hashtags', 'urls', 'cashtags', 'user_id', 'username', 'name', 'created_at', 'retweet_count', 'like_count', 'reply_count', 'retweeted_status_id', 'retweeted_status_user_id', 'retweeted_status_created_at', 'retweeted_status_text', 'retweeted_status_hashtags', 'retweeted_status_mentions', 'retweeted_status_cashtags', 'retweeted_status_links', 'retweeted_status_urls', 'retweeted_status_media', 'retweeted_status_device', 'quoted_status_id', 'quoted_status_user_id', 'quoted_status_created_at', 'quoted_status_text', 'quoted_status_hashtags', 'quoted_status_mentions', 'quoted_status_cashtags', 'quoted_status_links', 'quoted_status_urls', 'quoted_status_media', 'quoted_status_device']\nQuestion: What is the maximum number of retweets a tweet in the dataset has?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['retweets'].max()\"\n}\n```\n\nInput DataFrame columns: ['month', 'total', 'contract', 'rate_monthly_cost', 'rate_annual_cost', 'contract_duration', 'customer_id', 'Product', 'gender', 'Age', 'Education', 'Country', 'Payment_Method', 'Monthly_Spending', 'Total_Spending', 'Tenure', 'Num_of_Spent_Services', 'Is_First_Transaction', 'Has_Fidelity_Card', 'Is_Active', 'Marital_Status', 'Income_Category', 'Avg_Monthly_Spending', 'Avg_Monthly_Spending_on_Products', 'Avg_Monthly_Spending_on_Electronic_Product', 'Avg_Monthly_Spending_on_Electronic",
    "```json\n{\n    \"solution\": \"df['mention_ids'].apply(len).nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'user_name', 'user_description', \"user_favorites_count\", 'homepage', 'photo_count', 'photo_link', 'biography', 'dob', 'joined', 'location', 'gender', 'external_url', 'user_location', 'verified', 'mentions', 'followers_count', 'following_count', 'photos', 'tweets']\nQuestion: Which user has the most mentions and followers?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[['user_name', 'mentions', 'followers_count']].sort_values('followers_count', ascending=False).iloc[0]['user_name']\"\n}\n```\n\nInput DataFrame columns: ['day', 'time', 'sender', 'recepient', 'message', 'message_id', 'date']\nQuestion: What is the most used sender?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['sender'].str.split().str.join('').value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['year', 'month', 'day', 'item_id', 'store_id', 'sales']\nQuestion: What is the total sales per day in 2017?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['year'] == 2017]['sales'].sum()\"\n    \"solution\": \"df.loc[df['year'] == 2017, 'sales'].sum()\"\n}\n```\n\nInput DataFrame columns: ['year', 'month', 'day', 'item_id', 'store_id', 'sales']\nQuestion: What is the total sales per day in 2017?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['year'] == 2017, 'sales'].sum()\"\n}\n```\n\nInput DataFrame columns: ['year', 'month', 'day', '",
    "```json\n{\n    \"solution\": \"df['retweets'].nlargest(2).tolist()\"\n}\n```\n\nInput DataFrame columns: ['q001', 'q002', 'q003', 'q004', 'q005', 'q006', 'q007', 'q008', 'q009', 'q010', 'q011', 'q012', 'q013', 'q014', 'q015', 'q016', 'q017', 'q018', 'q019', 'q020', 'q021', 'q022', 'q023', 'q024', 'q025', 'q026', 'q027', 'q028', 'q029', 'q030', 'q031', 'q032', 'q033', 'q034', 'q035', 'q036', 'q037', 'q038', 'q039', 'q040', 'q041', 'q042', 'q043', 'q044', 'q045', 'q046', 'q047', 'q048', 'q049', 'q050', 'q051', 'q052', 'q053', 'q054', 'q055', 'q056', 'q057', 'q058', 'q059', 'q060', 'q061', 'q062', 'q063', 'q064', 'q065', 'q066', 'q067', 'q068', 'q069', 'q070', 'q071', 'q072', 'q073', 'q074', 'q075', 'q076', 'q077', 'q078', '",
    "```json\n{\n    \"solution\": \"df[df['Loan Duration - Months'].idxmax()]['Loan Amount'] == df[df['Loan Duration - Months'].idxmax()]['Loan Amount'].max()\"\n}\n```\n\nInput DataFrame columns: ['duration_in_months', 'credit_score', 'area_of_study', 'balance', 'education', 'loan_purpose', 'income', 'number_of_dependents', 'risk_status', 'repayment_status_Jan', 'repayment_status_Jul', 'repayment_status_Sep', 'repayment_status_Feb', 'repayment_status_Apr', 'repayment_status_Mar', 'repayment_status_Oct', 'repayment_status_May', 'repayment_status_Jun', 'repayment_status_Dec', 'default', 'default_binary']\nQuestion: What is the smallest loan purpose amongst the defaulted borrowers?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['default'] == 1]['loan_purpose'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Gender', 'Region', 'Income', 'Education', 'Credit_Card', 'Is_Active', 'experience', 'score', 'employment_type', 'is_default']\nQuestion: Are there any individuals with experience higher than 10?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['experience'].gt(10).any()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Are there any customers who have",
    "```json\n{\n    \"solution\": \"banks.loc[banks['Number of Existing Loans'].idxmax(), 'Loan Amount'] == banks.loc[banks['Number of Existing Loans'].idxmax(), 'Loan Amount'].max()\"\n}\n```\n\nInput DataFrame columns: ['NumDepend', 'NumLoans', 'NumProp', 'NumRealEstate', 'NumBank', 'ApplicantIncome', 'CoapplicantIncome', 'NumMortgage', 'Graded', 'Risk']\nQuestion: Is the grade calculated by the model a good representation of the risk of the mortgage?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"banks['Graded'] == banks['Risk']\"\n}\n```\n\nInput DataFrame columns: ['SK_ID_CURR', 'TARGET', 'NFLAG_INSURED_ON_APPROVAL', 'NAME_CONTRACT_TYPE', 'CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY', 'CNT_CHILDREN', 'AMT_INCOME_TOTAL', 'AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE', 'NAME_TYPE_SUITE', 'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE', 'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE', 'REGION_POPULATION_RELATIVE', 'DAYS_BIRTH', 'DAYS_EMPLOYED', 'DAYS_REGISTRATION', 'DAYS_ID_PUBLISH', 'OWN_CAR_AGE', 'FLAG_MOBIL', 'FLAG_EMP_PHONE', 'FLAG_WORK_PHONE', 'FLAG_CONT_MOBILE', 'FLAG_PHONE', 'FLAG_EMAIL', 'OCCUPATION_TYPE', 'CNT_FAM_MEMBERS', 'REGION_RATING_CLIENT', 'REGION_RATING_CLIENT_W_CITY', 'WEEKDAY_APPR_PROCESS_START', 'HOUR_APPR_PROCESS_START', 'REG_REGION_NOT_LIVE_REGION', 'REG_REGION_NOT_WORK_REGION', 'LIVE_REGION_NOT_WORK_REGION', 'REG_CITY_NOT_LIVE_CITY', 'REG",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].max() == df['Number of Existing Loans'].max()\"\n}\n```\n\nInput DataFrame columns: ['SeriousDlqin2yrs', 'RevolvingUtilizationOfUnsecuredLines', 'age', 'NumberOfTime30-59DaysPastDueNotWorse', 'DebtRatio', 'MonthlyIncome', 'NumberOfOpenCreditLinesAndLoans', 'NumberOfTimes90DaysLate', 'NumberRealEstateLoansOrLines', 'NumberOfTime60-89DaysPastDueNotWorse', 'NumberOfDependents']\nQuestion: Which customers are considered as having more than 30 days late with at least 90 days of delay or more?\nExpected return type: list[int]\n\nOutput:\n```json\n{\n    \"solution\": \"df['NumberOfTime30-59DaysPastDueNotWorse'].ge(30) | df['NumberOfTimes90DaysLate'].ge(90)\"\n}\n```\n\nInput DataFrame columns: ['dteday', 'season', 'holiday', 'workingday', 'weathersit', 'temp', 'atemp', 'hum', 'windspeed', 'casual', 'registered', 'cnt']\nQuestion: Which day had the most people registered with the bike sharing service?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['registered'].idxmax()\"\n}/docs/cpp.md\n# C++\n\n[src/MGT-1001/cpp/src/README.md](src/MGT-1001/cpp/src/README.md)\n-1001/java/src/README.md\n# Java\n\n[src/MGT-1001/java/src/README.md](src/MGT-1001/java/src/README.md)\n/docs/java.md\n# Java\n\n[src/MGTon:\n```\n$ docker-compose down\n```\n\n## Add package by name\n\n```\n$ cd./src/MGT-1001/java/\n$ make add_package {package_name",
    "```json\n{\n    \"solution\": \"df['Age'].eq(df['Age'].max()).any()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Unnamed: 0', 'Unnamed: 0.1', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response', 'age_group', 'age_category', 'income_category', 'income_group', 'income_category_group', 'risk_category', 'risk_group']\nQuestion: What is the average income of the youngest group?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('age_group')['Income'].mean().loc['20 - 30']\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Start date', 'End date', 'Category', 'List Price', 'Base Price', 'Total Price', 'Discounted Price', 'Street', 'City', 'State', 'Latitude', 'Longitude', 'Location']\nQuestion: What is the most expensive remaining category of discounted prices?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Category'] == df['Category'].mode().iloc[0]].nlargest(1, 'Discounted Price')['Category'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Product ID', 'Product Name', 'Category', 'Sub-Category', 'Sales', 'Quantity', 'Discount', 'Profit']\nQuestion: Does the highest profit category also have the highest quantity?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Profit'].max()",
    "```json\n{\n    \"solution\": \"df['Loan Amount'].max()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'X', 'Y', 'CRIME', 'DAY_OF_WEEK', 'DATE', 'MONTH', 'HOUR', 'DISTRICT', 'SEASON', 'WAY_ID', 'WAY_ID', 'STREET_NAME', 'REPORT_NO', 'ADDRESS_1', 'ADDRESS_2', 'ADDRESS_3', 'ADDRESS_4', 'ZIP', 'LATITUDE', 'LONGITUDE', 'LOCATION']\nQuestion: Which crime is the most frequent?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['CRIME'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['BsmtFin SF 1', 'BsmtFin SF 2', 'Bsmt Unf SF', 'Total Bsmt SF', '1st Flr SF', '2nd Flr SF', 'Low Qual Fin SF', 'Gr Liv Area', 'Garage Area', 'Wood Deck SF', 'Open Porch SF', 'Enclosed Porch', '3Ssn Porch', 'Screen Porch', 'Pool Area', 'Misc Val', 'Lot Area', 'SalePrice', 'Street', 'Utilities', 'Lot Config', 'Land Slope', 'Bldg Type', 'Neighborhood', 'Condition 1', 'Condition 2', 'Roof Style', 'Roof Matl', 'Exterior 1st', 'Exterior 2nd', 'Mas Vnr Type', 'Mas Vnr Area', 'Exter Qual', 'Exter Cond', 'Foundation', 'Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin Type 2', 'Heating', 'Heating QC', 'Central Air', 'Electrical', 'Kitchen Qual', 'Functional', 'Fireplace Qu', 'Garage Type', 'Garage Finish', 'Garage Qual', 'Garage Cond', 'Paved Drive', 'Pool QC', 'Fence', 'Misc Feature', 'Sale Type', 'ID', 'PID']\nQuestion: Is there any feature that has a correlation value lower than -0.4?\nExpected return type: boolean",
    "```json\n{\n    \"solution\": \"df['Number of Existing Loans'].gt(1).sum()\"\n}\n```\n\nInput DataFrame columns: ['External risk rating', 'Good Loan', 'Very good Loan', 'Acceptable Loan', 'age', 'education', 'marital status', 'job_type']\nQuestion: What is the average age of a borrower?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[:, 'age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Geo', 'Date', 'Time', 'IP', 'Source', 'Browser', 'OS', 'Country', 'Region', 'City', 'Lat', 'Long', '1st_Login', 'Last_Login', 'login_count', 'signup_count', 'N_Signup', 'N_login', 'N_S_L_Gap', 'N_L_S_Gap', 'P_L_S_Gap', 'P_S_L_Gap', 'Duration', 'P_L_C', 'L_C', 'AvgTime', 'AvgTime_P', 'L_Count', 'L_Count_P', 'Cust_Count', 'Cust_Count_P']\nQuestion: What is the maximum number of sign-up count?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['signup_count'].max()\"\n}\n```\n\nInput DataFrame columns: ['Time', 'Categ', 'Visits', 'Sessions', 'Bounce Rate', 'Exit Rate', 'Page Value', 'Special Day', 'Weekend', 'Region', 'TrafficType', 'Browser', 'Operating System', 'City', 'Country', 'Page Value', 'Special Day', 'Single Product', 'Multi Product', 'Page Value', 'TrafficType', 'Browser', 'Operating System', 'City', 'Country', 'Page Value', 'Special Day', 'Single Product', 'Multi Product']\nQuestion: How many pages were visited by the user?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['Visits'].sum()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Geo', 'Date', 'Time', '",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].max()\"\n}\n```\n\nInput DataFrame columns: ['year', 'genre', 'artist', 'track', 'streams', 'date_added', 'country', 'release_date']\nQuestion: What are the top 3 songs that got the most streams in the dataset?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    # This solution has been tweaked for better performance\n    \"solution\": \"df.groupby('track')['streams'].sum().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['BookID', 'UserID', 'Location', 'Rating', 'Date Added', 'Date Rated', 'ISBN', 'ISBN13', 'Book-Title', 'Book-Author', 'Year Published', 'Publisher']\nQuestion: What is the average rating of the books from New York?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Location'] == 'New York']['Rating'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'created_at', 'text', 'retweeted_status_id', 'retweeted_status_user_id', 'retweeted_status_timestamp', 'expanded_urls_0', 'expanded_urls_2', 'expanded_urls_3', 'expanded_urls_4', 'expanded_urls_5', 'expanded_urls_6', 'expanded_urls_7', 'expanded_urls_8', 'expanded_urls_9', 'user_id', 'user_name', 'user_screen_name', 'user_description', 'user_followers_count', 'user_friends_count', 'user_listed_count', 'user_favourites_count', 'user_statuses_count', 'user_verified', 'user_created_at', 'source_label', 'source_url', 'source_platform_family', 'source_platform_version', 'source_platform_build_number', 'source_platform_type', 'source_application_id', 'source_application_family', 'source_application_version', 'source_application_build_number', 'source_application_type',",
    "```json\n{\n    \"solution\": \"df['Age'].gt(50).sum()\"\n}\n```\n\nInput DataFrame columns: ['Gender', 'Age', 'Occupation', 'Marital Status', 'Number of Dependants', 'Years in Current Job', 'Credit Card Debt', 'Credit Card Limit', 'Real Estate Loan', 'Real Estate Loan Amount', 'Amount of Loan', 'Monthly Income', 'Monthly Debt', 'Years of Credit History', 'Months since last delinquent', 'Number of Credit Problems', 'Bankruptcies', 'Tax Liens', 'Current Credit Balance', 'Maximum Open Credit', 'Years of Credit History', 'Months since last delinquent', 'Months since last record']\nQuestion: How many bankruptcies have people with debt greater than 5,000?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[(df['Monthly Debt'] > 5000) & (df['Bankruptcies'].notnull())].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Customer ID', 'Gender', 'Age', 'Total Bills', 'Total Charges', 'Phone', 'Type of Internet', 'Monthly statment', 'Monthly Bills', 'Monthly Charges', 'Total Expenditure', 'Total Late Fee']\nQuestion: What is the average number of bills that people experience in a month that have internet in the house?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[(df['Type of Internet'] == 'House') & (df['Total Charges'].notnull())]['Total Bills'].mean()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Join Date', 'Type of Product', 'Latitude', 'Longitude', 'Customer Stay Duration', 'Customer Lifetime Value', 'Customer Loyalty', 'Customer Location', 'Sales per Month', 'Total Number of Orders', 'Discount', 'Percentage of Discount per Order', 'Total Sales', 'Total Transactions', 'Subscribed', 'Price', 'Quantity', 'Discount in USD', 'Total Charges', 'Transaction Date', 'Transaction Time', 'Order Type']\nQuestion: How many orders have not been converted to orders?",
    "```json\n{\n    \"solution\": \"df['Purpose of Loan'].mode().iloc[0]\"\n}\n```\n\n## Usage\n\nThe user can introduce a dataframe and perform some operations on it. The dataframe will be preprocessed before being sent to the SPARK mode and the prediction will be made through the accuracy metric.\n\nWe also display the optimal algorithm found alongside with the quality of the prediction. The total execution time is also shown.\n\nThe user can also select to display the dataframe in a GUI.\n\n## Authors\n\n- ****\n- ****\n- ****\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\n\nCOPY requirements.txt requirements.txt\nRUN pip install -r requirements.txt\n\nCOPY . /usr/src/app\n\nENTRYPOINT [ \"python\", \"app.py\" ]\nimport pandas as pd\nfrom sklearn import preprocessing\nimport ast\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator, RegressionEvaluator\nfrom pyspark.ml.feature import VectorAssembler, StandardScaler\nfrom pyspark.ml.regression import LinearRegression\nfrom pyspark.ml.classification import LogisticRegression, RandomForestClassifier\nfrom pyspark.ml import Pipeline\nimport time\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nimport numpy as np\n\n\ndef preprocess_dataframe(df):\n    \"\"\"\n    From a dataframe, return a preprocessed dataframe with the following transformations:\n    - Drop missing values\n    - Drop useless columns\n    - Pivot categorical data\n    - One hot encoding\n    - Pivoting numerical data\n    - Scaling\n    :param df: Dataframe\n    :return: Preprocessed dataframe\n    \"\"\"\n    # Delete empty rows\n    df = df.dropna()\n\n    # Drop useless columns\n    useless_columns = [\"Unnamed: 0\", \"index\", \"status\", \"id\"]\n    for column in useless_columns:\n        if column in df.columns:\n            df = df.drop(column, axis=1)\n\n    # Pivot categorical data\n    categorical_columns = [\"",
    "```json\n{\n    \"solution\": \"df['Job'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Gender', 'Age', 'Purpose', 'Housing', 'Job', 'CreditAmount', 'SavingAmount', 'CheckingAmount', 'CreditDuration', 'CreditPurpose', 'Risks', 'Telephone', 'Others', 'Status']\nQuestion: What is the most common purpose of the borrower's loan?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['Purpose'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['LoanDuration', 'Amount', 'InstallmentRate', 'ResidenceDuration', 'CurrentJobDuration', 'ExistingCredits', 'Dependents', 'CreditHistory', 'Gender', 'MaritalStatus', 'RealEstate', 'OwnBusiness', 'Housing', 'Job', 'Telephone', 'ForeignWorker', 'Status']\nQuestion: How many loans were rejected by the bank?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['Status'].value_counts().loc['reject']\"\n}\n```\n\nInput DataFrame columns: ['LoanDuration', 'Amount', 'InstallmentRate', 'ResidenceDuration', 'CurrentJobDuration', 'ExistingCredits', 'Dependents', 'CreditHistory', 'Gender', 'MaritalStatus', 'RealEstate', 'OwnBusiness', 'Housing', 'Job', 'Telephone', 'ForeignWorker', 'Purpose']\nQuestion: Are there any loans with a very low installment rate?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['InstallmentRate'].lt(0.1).any()\"\n}\n```\n\nInput DataFrame columns: ['LoanDuration', 'Amount', 'InstallmentRate', 'ResidenceDuration', 'CurrentJobDuration', 'ExistingCredits', 'Dependents', 'CreditHistory', 'Gender', 'MaritalStatus', 'RealEstate', 'OwnBusiness', 'Housing', 'Job', 'Telephone', 'ForeignWorker', 'Purpose']\nQuestion: What are the minimum and maximum amounts of loans?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Amount'].",
    "```json\n{\n    \"solution\": \"df['Credit History'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Loan Duration - Months', 'Credit History', 'Purpose of Loan', 'Loan Amount', 'Savings Account', 'Length of Current Employment', 'Installment Rate as % of Income', 'Guarantors', 'Length of Current Property Residence', 'Age', 'Housing', 'Number of Existing Loans', 'Job', 'Number of Dependants', 'Foreign Worker', 'Risk', 'Sex', 'Status']\nQuestion: What is the mean age of all borrowers?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Which customer has the highest annual income?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5',",
    "```json\n{\n    \"solution\": \"df['Savings Account'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Adj Close']\nQuestion: What is the total number of trades on January 1st, 2018?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.query('Date == \\\"1/1/2018\\\"')['Volume'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Id', 'Name', 'Gender', 'Racing', 'Percentage', 'Year']\nQuestion: What is the average percentage for female runners?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.query('Gender == \\\"F\\\"')['Percentage'].mean()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What is the percentage of males who survived?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.query('Sex == \\\"male\\\"')['Survived'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Time', 'Date', 'Temperature', 'Humidity', 'Wind', 'Precipitation', 'Weekday', 'Weekday_num', 'Month', 'Day', 'Dayofweek', 'Dayofyear', 'Is_month_end', 'Is_month_start', 'Is_quarter_end', 'Is_quarter_start', 'Is_year_end', 'Is_year_start', 'Hour', 'Dayofyear_num', 'Weekofyear', 'Dayofyear_num', 'Dayofyear_num', 'Day_num']\nQuestion: What is the average percentage of precipitation?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['Precipitation'].mean()\"\n}\n```\n\nInput DataFrame columns: ['name', 'category', 'item_type', 'calories', 'fat",
    "```json\n{\n    \"solution\": \"df.loc[df['Loan Amount'].idxmax(), 'Job'].split(', ')[:3]\"\n}\n```\n\nInput DataFrame columns: ['Credit score', 'Taxable income', 'Years since last delinquent', 'Years of credit history', 'Months since last delinquent', 'Maximum open credit', 'Number of open accounts', 'Current loan amount', 'Current credit balance', 'Average current balance', 'Number of credit problems', 'Bankruptcies', 'Current credit balance', 'Credit default', 'Random']\nQuestion: Which of the following credit values has the highest value? (The result can be: Taxable income, Credit score, Average current balance, Maximum open credit, Current loan amount)\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"('Taxable income', 'Credit score', 'Average current balance', 'Maximum open credit', 'Current loan amount')[df['Credit score'].idxmax()]\"\n}\n```\n\nInput DataFrame columns: ['Job', 'Average Annual Household Income', 'Average Monthly Bills', 'Total Household Income', 'Number of Dependants', 'Total Home Owners', 'Number of Home Owners', 'Average Monthly Income', 'Date of Birth', 'Child', 'Age', 'Married', 'Household Size', 'Income Level', 'Children', 'Household Declining Income', 'Income Ratio', 'Total Income', 'Total Household Expenses', 'Total Home Expenses', 'Total Household Expenses', 'Total Household Assets', 'Total Home Assets', 'Total Assets', 'Total Household Liabilities', 'Total Home Liabilities', 'Total Liabilities', 'Housing', 'Job Satisfaction', 'Job Stability', 'Job Type', 'Job Level', 'Job Stability', 'Marital Status', 'Good Credit History', 'Good Education', 'Good Job', 'Risk', 'Random', 'Credit Score']\nQuestion: What is the most common job status?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['Job'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['nr.employed', 'stock_idx', 'monthly_var', 'quarterly",
    "```json\n{\n    \"solution\": \"df[df['Loan Duration - Months'].lt(24)].groupby('Job')['Job'].count().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Android', 'iPhone', 'Blackberry', 'Amazon Kindle', 'Nokia', 'Windows Mobile', 'iPad', 'Win32']\nQuestion: Is there a dominant phone type in the dataset?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"bool(df.sum().gt(1))\"\n}\n```\n\nInput DataFrame columns: ['Overall assessment score for the property', 'Location', 'Property type', 'Price', 'Space', 'Qualifications of landowner ', 'Qualifications of tenants ', 'Risk', 'Enviroment', 'Safety', 'Customers', 'Your self']\nQuestion: What is the maximum overall assessment score for the property?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['Overall assessment score for the property'].max()\"\n}\n```\n\nInput DataFrame columns: ['Timestamp', 'Age', 'In which country do you live?', 'What is your gender?', 'How long have you been coding?', 'Have you used Python before?', 'What is your experience level?', 'Which code editor do you use?', 'Which Python frameworks do you regularly use?', 'Which Python version do you use?', 'What is your experience with how the code is laid out?', 'Which code editor do you use?', 'Which Python version do you use?', 'Do you use git for version control?', 'Which Python version do you use?', 'What is the age of your server?', 'What is your experience with working in a team?', 'What is your experience with Cloud?', 'What is your experience with Kubernetes?', 'What is your experience with Docker?', 'What is your experience with HTML?', 'What is your experience with CSS?', 'What is your experience with JavaScript?', 'What is your experience with React.js?', 'What is your experience with Vue.js?', 'What is your experience with Angular?', 'What is your experience with NodeJS?', 'What is your experience with Django?', 'What is your experience with Flask?', 'What is your experience with with Flask (web development framework)?', 'What is",
    "```json\n{\n    \"solution\": \"df[df['Number of Existing Loans'] == df['Number of Existing Loans'].max()]['Job'].value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['age_of_person', 'gender', 'phone_number', 'current_location', 'current_city', 'current_state', 'current_country', 'permanent_residence', 'permanent_city', 'permanent_state', 'permanent_country', 'date_of_birth', 'full_name', 'email_address', 'password', 'profession', 'marital_status', 'banking', 'investment', 'other_assets', 'other_liabilities_expenditure', 'other_assets_liabilities', 'other_income', 'other_expenditure', 'total_income', 'total_expenditure', 'total_assets', 'total_debt', 'total_net_worth', 'investment_types', 'investment_instruments', 'investment_amounts', 'investment_returns', 'investment_taxes']\nQuestion: How many people are registered in the data set with marital_status as single?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['marital_status'].str.contains('Single').sum()\"\n}\n```\n\nInput DataFrame columns: ['Hotel ID', 'Restaurant ID', 'CustomerID', 'InternationalCustomer', 'Age', 'City', 'CustomerType', 'TransactionDate', 'UniqueID', 'UniqueBin', 'State', 'Country', 'Voucher', 'Coupon', 'VoucherValidity', 'VoucherDate', 'VoucherValue', 'DiningDate', 'Days', 'Overdue', 'OverdueDay', 'OverdueCost', 'CheapestAmt', 'CheapestCoupon', 'HighestAmt', 'HighestCoupon', 'BilledAmount', 'BillableAmt', 'BillableCoupon', 'Bills', 'HouseholdID', 'DiningDateLength', 'DiningDateLengthDay', 'DiningDateLengthMonth', 'DiningDateLengthYear', 'DiningDateDay', 'DiningDateMonth', 'DiningDateYear', 'DiningDateWeekDay', 'DiningDateWeekDayName']",
    "```json\n{\n    \"solution\": \"df.nlargest(2,'Age')['Job'].values.tolist()\"\n}\n```\n\nInput DataFrame columns: ['loan_amnt', 'int_rate', 'term', 'annual_inc', 'grade', 'emp_length', 'home_ownership', 'verification_status', 'issue_d', 'addr_state', 'purpose', 'dti', 'delinq_2yrs', 'earliest_cr_line', 'inq_last_6mths', 'open_acc', 'pub_rec', 'revol_bal', 'revol_util', 'total_acc', 'initial_list_status', 'out_prncp', 'out_prncp_inv', 'total_pymnt', 'total_pymnt_inv', 'total_rec_prncp', 'total_rec_int', 'total_rec_late_fee', 'recoveries', 'collection_recovery_fee', 'last_pymnt_d', 'last_pymnt_amnt', 'next_pymnt_d', 'last_credit_pull_d', 'last_fico_range_low', 'last_fico_range_high', 'collections_12_mths_ex_med', 'policy_code', 'application_type', 'acc_now_delinq', 'tot_coll_amt', 'tot_cur_bal', 'open_acc_6m', 'open_act_il', 'open_il_12m', 'open_il_24m', 'mths_since_rcnt_il', 'total_bal_il', 'il_util', 'open_rv_12m', 'open_rv_24m', 'max_bal_bc', 'all_util', 'total_rev_hi_lim', 'inq_fi', 'total_cu_tl', 'inq_last_12m', 'acc_open_past_24mths', 'avg_cur_bal', 'bc_open_to_buy', 'bc_util', 'chargeoff_within_12_mths', 'delinq_amnt', 'mo_sin_old_il_acct', 'mo_sin_",
    "```json\n{\n    \"solution\": \"df['Loan Amount'].nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['credit_score', 'purpose', 'credit_amount', 'years_employed', 'income', 'int_rate', 'payment_pc', 'defaulted', 'dependents', 'age', 'gender', 'city', 'state', 'zip_code']\nQuestion: Is there any record of credit card users with credit score higher than 800?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['credit_score'].gt(800).any()\"\n}\n```\n\nInput DataFrame columns: ['Loan_ID', 'Customer_ID', 'Loan_Amount_Applied', 'Loan_Tenure_Applied', 'Existing_EMI', 'Loan_Amount_Submitted', 'Loan_Tenure_Submitted', 'Interest_Rate', 'Processing_Fee', 'EMI_Loan_Submitted', 'Var1', 'Loan_Tenure_Submitted.1', 'Interest_Rate.1', 'EMI_Loan_Submitted.1', 'Processing_Fee.1', 'EMI_ tenure (months)', 'Var2', 'Loan_Amount_Submitted.1', 'Loan_Tenure_Submitted.2', 'Interest_Rate.2', 'EMI_Loan_Submitted.2', 'Processing_Fee.2', 'EMI_ tenure (months).1', 'Var3', 'Loan_Amount_Submitted.2', 'Loan_Tenure_Submitted.3', 'Interest_Rate.3', 'EMI_Loan_Submitted.3', 'Processing_Fee.3', 'EMI_ tenure (months).2', 'Var4', 'Loan_Amount_Submitted.3', 'Loan_Tenure_Submitted.4', 'Interest_Rate.4', 'EMI_Loan_Submitted.4', 'Processing_Fee.4', 'EMI_ tenure (months).3', 'Var5', 'Loan_Amount_Submitted.4', 'Loan_Tenure_Submitted.5', 'Interest_Rate.5', 'EMI_Loan_Submitted.5', 'Processing_Fee.5', 'EMI_ tenure (months).4']\nQuestion: What",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].nlargest(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'CUSTID', 'Avgas', 'Income', 'Card Debt', 'Other Debt', 'PrincileAgree', 'SecuritiesAccount', 'DerivadaAccount', 'CDAccount', 'CreditCard', 'Target']\nQuestion: Is there a customer who has the highest income?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].max()\"\n}\n```\n\nInput DataFrame columns: ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)', 'species']\nQuestion: Is there any species of iris with a sepal width less than 2cm?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['sepal width (cm)'].le(2).any()\"\n}\n```\n\nInput DataFrame columns: ['Class', 'Age', 'Sex', 'Chest-Pain', 'BP', 'Cholesterol', 'Na_to_K', 'Drug']\nQuestion: Which drug is more effective for a patient?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['Drug'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'attempts1', 'attempts2', 'attempts3', 'attempts4', 'attempts5', 'attempts6', 'attempts7', 'attempts8', 'attempts9', 'attempts10', 'Base', 'unityID', 'attempts11', 'attempts12', 'attempts13', 'attempts14', 'attempts15', 'attempts16', 'attempts17', 'attempts18', 'attempts19', 'attempts20', 'attempts21', 'attempts22', 'attempts23', 'attempts24', 'attempts25', 'attempts26', 'attempts27', 'attempts28', 'attempts29', 'attempts30', 'attempts31', 'attempts32', 'attempts33', 'attempts34', '",
    "```json\n{\n    \"solution\": \"df['Number of Existing Loans'].nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['index', 'F1', 'F2', 'F3', 'target']\nQuestion: What is the maximum value for the F3 column?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['F3'].max()\"\n}\n```\n\nInput DataFrame columns: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'index']\nQuestion: What are the top 3 F1 values?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['F1'].nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'class', 'sex', 'age', 'survived', 'fare', 'embarked', 'family_size', 'family_size_scaled', 'boat', 'boat_filling', 'home.dest', 'cabin_multiple', 'cabin_adv', 'ticket_letters', 'cabin_char', 'name_title', 'is_married', 'is_millionare', 'age_categories', 'label']\nQuestion: What are the unique values in the age_categories column?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['age_categories'].unique().tolist()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What is the median fare paid by passengers in the first class?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Pclass'] == 1]['Fare'].median()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare",
    "```json\n{\n    \"solution\": \"df.query('Risk == \\\"good\\\"')['Age'].nlargest(2).tolist()\"\n}\n```\n\nInput DataFrame columns: ['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term', 'Credit_History', 'Property_Area', 'Loan_Status']\nQuestion: Is there any loan with Loan Amount greater than 200?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['LoanAmount'] > 200\"\n}\n```\n\nInput DataFrame columns: ['Loan_ID', 'Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term', 'Credit_History', 'Property_Area', 'Loan_Status']\nQuestion: What is the maximum loan amount from the property area having an education level of graduate?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.query('Property_Area == \\\"Urban\\\" & Education == \\\"Graduate\\\"')['LoanAmount'].max()\"\n}\n```\n\nInput DataFrame columns: ['Loan_ID', 'Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term', 'Credit_History', 'Property_Area', 'Loan_Status']\nQuestion: What is the maximum loan amount from the property area having an education level of graduate and married?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.query('Property_Area == \\\"Urban\\\" & Education == \\\"Graduate\\\" & Married == \\\"Yes\\\"')['LoanAmount'].max()\"\n}\n```\n\nInput DataFrame columns: ['age', 'occupation', 'gender', 'lifestyle']\nQuestion: What is the income of the top 5 youngest and oldest people?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df.sort_values(['age', 'occupation']).groupby('occupation')['age'].agg([list])[::-",
    "```json\n{\n    \"solution\": \"df['Calories (kcal)'].eq(0).any()\"\n}\n```\n# Python - Hello, World!\n\nHello, World! is the first program in any programming language. It is useful to ensure that one can run a program and that it prints a simple message to the console.\n\nThe following code snippet is an example of it using the JavaScript language. The code prints the message \"Hello, World!\" to the console:\n\n```\nconsole.log(\"Hello, World!\");\n```\n\n## Building\n\nTo build the program, run the following:\n\n```\ncling -std=c++17 -O3 -DNDEBUG HelloWorld.cpp -o HelloWorld\n```\n\n## Running\n\nTo run the program, run the following:\n\n```\n./HelloWorld\n```\n\nThe program will print the following message to the console:\n\n```\nHello, World!\n```\n\n## Output\n\n```\nHello, World!\n```\n\n## Explanation\n\nThe code consists of a single line:\n\n```\nconsole.log(\"Hello, World!\");\n```\n\nThis line prints the message \"Hello, World!\" to the console.\n\nThe JavaScript programming language is a high-level, dynamic, multi-paradigm, and multi-platform programming language. It has based on ECMAScript and implements JavaScript and WebAssembly. It has an interpreted language, a just-in-time compiler, and an automatic memory management system.\n\nThe following are the steps in building the code:\n\n1. The `cling` command is used to compile and build the code, including outputting it to a file named `HelloWorld`.\n2. The `-std=c++17` flag sets the C++17 standard.\n3. The `-O3` flag sets the optimization level to `3`.\n4. The `-DNDEBUG` flag disables debugging.\n5. The `HelloWorld.cpp` file is the source code. It consists of a single line that prints the message \"Hello, World!\" to the console.\n6. The `-o HelloWorld` flag sets the output file to `HelloWorld`.\n\nThe following are the steps in running the code:\n\n1. The `./HelloWorld` command runs the program.",
    "```json\n{\n    \"solution\": \"return all([df[i].str.contains('sugar').any() for i in df.columns])\"\n}\n```\n\nInput DataFrame columns: ['ticker', 't_date', 't_open', 't_high', 't_low', 't_close', 't_adj_close']\nQuestion: Which stock has the highest initial price?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['t_open'] == df['t_open'].max()].iloc[0, 0]\"\n}\n\nInput DataFrame columns: ['Unnamed: 0', 'id', 'date', 'time', 'open', 'high', 'low', 'last', 'close', 'ticker', 'volume', 'vwap', 'label']\nQuestion: Which stock had the lowest 3-day return?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('ticker').agg({'Return': lambda x: x.iloc[-3:].prod() - 1})['Return'].idxmin()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'id', 'date', 'time', 'open', 'high', 'low', 'last', 'close', 'ticker', 'volume', 'vwap', 'label']\nQuestion: Which 3 stocks had the highest 3-day return?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('ticker').agg({'Return': lambda x: x.iloc[-3:].prod() - 1}).nlargest(3, columns='Return').index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['date', 'time', 'open', 'high', 'low', 'last', 'close', 'ticker', 'volume', 'vwap', 'label']\nQuestion: Which 3 stocks had the highest 3-day average price?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('ticker').agg({'Return': lambda x: x.iloc[-3:].mean()}).nlargest(3, columns='Return').index",
    "```json\n{\n    \"solution\": \"df['Total Fat (g)'].eq(0).all()\"\n}\n```\n\nInput DataFrame columns: ['store', 'item', 'month', 'sales', 'revenue']\nQuestion: What are the top 3 stores with highest sales?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('store')['sales'].sum().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Timestamp', 'Age', 'Gender', 'State', 'Self_Employed', 'LoanAmount', 'Loan_Amount_Term', 'Credit_History', 'Property_Area', 'Loan_Status']\nQuestion: Does anybody have a home loan?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['LoanAmount'].notna().any()\"\n}\n```\n\nInput DataFrame columns: ['store', 'item', 'month', 'sales', 'revenue']\nQuestion: What are the top 3 stores with highest revenue?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('store')['revenue'].sum().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['City', 'State', 'Postal Code', 'Status', 'Latest query date', 'Past Query Count', 'Latest query result', 'Contact Name', 'Contact Title', 'Phone', 'Email', 'Website', 'Fax', 'Address', 'City']\nQuestion: Which company has the smallest web address?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Website'].str.contains('http')]['Website'].str.split('/').str[2].value_counts().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['Timestamp', 'Age', 'Gender', 'City', 'Self_Employed', 'Property_Area', 'LoanAmount', 'Loan_Amount_Term', 'Credit_History', 'Loan_Status']\nQuestion: Are there any customers who have no home loan?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['",
    "```json\n{\n    \"solution\": \"return df['Protein (g)'].eq(0).any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'nppes_provider_state', 'nppes_provider_city', 'nppes_entity_code', 'nppes_provider_zip', 'nppes_provider_zip4', 'nppes_provider_country', 'nppes_provider_phone', 'nppes_provider_phone_ext', 'nppes_provider_website', 'nppes_provider_gender', 'nppes_provider_medicare_participation_indicator', 'nppes_provider_nurse_participation_indicator', 'nppes_provider_optometrist_indicator', 'nppes_provider_optician_indicator', 'nppes_provider_optometric_provider_indicator', 'nppes_provider_ophthalmologist_indicator', 'nppes_provider_dental_hygienist_indicator', 'nppes_provider_dental_indicator', 'nppes_provider_dentist_indicator', 'nppes_provider_clinical_laboratory_indicator', 'nppes_provider_hospitalist_indicator', 'nppes_provider_diagnostic_services_indicator', 'nppes_provider_diagnostic_service_indicator', 'nppes_provider_cardiology_indicator', 'nppes_provider_cardiologist_indicator', 'nppes_provider_internal_medicine_indicator', 'nppes_provider_emergency_medicine_indicator', 'nppes_provider_emergency_care_indicator', 'nppes_provider_family_practice_indicator', 'nppes_provider_general_practice_indicator', 'nppes_provider_general_drug_indicator', 'nppes_provider_specialty_drug_indicator', 'nppes_provider_outpatient_indicator', 'nppes_credentials', 'nppes_provider_gender', 'nppes_entity_code', 'nppes_provider_gender', 'nppes_credentials', 'nppes_provider_gender', 'nppes_credentials",
    "```json\n{\n    \"solution\": \"df[df['Calories (kcal)'] > 500]['name'].count()\"\n}\n```\n\nInput DataFrame columns: ['title', 'date', 'date_created', 'feature', 'recommendations', 'author', 'author_id', 'content_id', 'channel', 'category', 'thumbnail', 'image', 'image_thumbnail', 'image_source', 'image_type', 'has_image']\nQuestion: Which author has the most articles?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('author_id')['title'].count().nlargest(1).index\"\n}\n```\n\nInput DataFrame columns: ['title', 'date', 'date_created', 'feature', 'recommendations', 'author', 'author_id', 'content_id', 'channel', 'category', 'thumbnail', 'image', 'image_thumbnail', 'image_source', 'image_type', 'has_image', 'views', 'link', 'story_id']\nQuestion: Which type of content consumes the most views?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('category')['views'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['title', 'date', 'date_created', 'feature', 'recommendations', 'author', 'author_id', 'content_id', 'channel', 'category', 'thumbnail', 'image', 'image_thumbnail', 'image_source', 'image_type', 'has_image', 'views', 'link', 'story_id']\nQuestion: What is the most common date created?\nExpected return type: datetime\n\nOutput:\n```json\n{\n    \"solution\": \"df['date_created'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['title', 'date', 'date_created', 'feature', 'recommendations', 'author', 'author_id', 'content_id', 'channel', 'category', 'thumbnail', 'image', 'image_thumbnail', 'image_source', 'image_type', 'has_image', 'views', 'link', 'story_id', 'paragraphs']",
    "```json\n{\n    \"solution\": \"df['Total Fat (g)'].mean()\"\n}\n```\n\nInput DataFrame columns: ['name', 'emoji', 'Calories (kcal)', 'Total Fat (g)', 'Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)', 'Cholesterol (mg)', 'Sodium (g)']\nQuestion: What is the total amount of total fat (in grams) for the least healthy food?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['Sodium (g)'].idxmin(), 'Total Fat (g)']\"\n}\n```\n\nInput DataFrame columns: ['name', 'emoji', 'Calories (kcal)', 'Carbohydrates (g)', 'Total Sugar (g)', 'Protein (g)', 'Total Fat (g)', 'Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)']\nQuestion: Which food has the highest amount of total sugar?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['Total Sugar (g)'].idxmax(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['name', 'emoji', 'Calories (kcal)', 'Carbohydrates (g)', 'Total Sugar (g)', 'Protein (g)', 'Total Fat (g)', 'Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)', 'Cholesterol (mg)', 'Sodium (g)']\nQuestion: Which food has the least amount of sodium, and what is the maximum amount of sodium?\nExpected return type: [category, number]\n\nOutput:\n```json\n{\n    \"solution\": \"['df.loc[df['Sodium (g)'].idxmin(), 'name'], df['Sodium (g)'].max()]\"\n}\n```\n\nInput DataFrame columns: ['name', 'emoji', 'Calories (kcal)', 'Carbohydrates (g)', '",
    "```json\n{\n    \"solution\": \"df['Sodium (g)'].gt(1).sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'genre_ids', 'release_date', 'budget', 'revenue', 'original_language', 'cast', 'visualization', 'description', 'keywords', 'production_countries', 'spoken_languages', 'vote_count', 'vote_average']\nQuestion: What is the average rating of movies released in 2016?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[(df['release_date'].str.contains('2016'))]['vote_average'].mean()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'item_id', 'rating', 'timestamp']\nQuestion: What is the average rating given by a user with id 209?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['user_id'] == 209]['rating'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Country', 'Year', 'Time', 'Age', 'Sex', 'Location', 'Number', 'Women', 'Hair', 'Eye', 'Average', 'Extreme', 'Notes']\nQuestion: How many participants are there in the dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['Number'].sum()\"\n}\n```\n\nInput DataFrame columns: ['V1', 'V2', 'V3', 'V4', 'Class']\nQuestion: What is the maximum value of V1 ?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['V1'].max()\"\n}\n```\n\nInput DataFrame columns: ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target']\nQuestion: How many females who are above 50 years of age have a heart disease?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution",
    "```json\n{\n    \"solution\": \"df['Protein (g)'].max()\"\n}\n```\n\nInput DataFrame columns: ['neighbourhood_group', 'neighbourhood', 'latitude', 'longitude', 'room_type', 'price', 'minimum_nights', 'number_of_reviews', 'reviews_per_month']\nQuestion: Is there any room type that is more expensive than the others?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('room_type')['price'].sum().gt(df['price'].sum()).any()\"\n}\n```\n\nInput DataFrame columns: ['host_response_time', 'host_response_rate', 'host_is_superhost', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood_cleansed', 'host_identity_verified', 'neighbourhood_group_cleansed', 'property_type', 'room_type', 'accommodates', 'bathrooms', 'bedrooms', 'beds', 'bed_type', 'amenities', 'square_feet', 'price', 'weekly_price', 'monthly_price', 'guests_included', 'extra_people', 'minimum_nights', 'maximum_nights', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'number_of_reviews', 'number_of_reviews_ltm', 'first_review', 'last_review', 'review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'requires_license', 'license', 'instant_bookable', 'is_business_travel_ready', 'cancellation_policy', 'require_guest_profile_picture', 'require_guest_phone_verification']\nQuestion: Can we categorise hosts based on their response rate?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('host_response_time')['host_response_rate'].mean",
    "```json\n{\n    \"solution\": \"df.loc[df['Calories (kcal)'].idxmax(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['CustomerID', 'Gender', 'Age', 'Occupation', 'City_Category', 'Stay_In_Current_City_Years', 'Marital_Status', 'Product_Category_1', 'Product_Category_2', 'Product_Category_3', 'Purchase']\nQuestion: What product category has the most purchases?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('Product_Category_1')['Purchase'].count().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'product_name', 'aisle', 'department', 'prices_amountmin', 'prices_amountmax', 'prices_logmin', 'prices_logmax', 'prices_logmean', 'prices_logstd', 'prices_logmedian', 'prices_logmin_diff', 'prices_logmax_diff', 'prices_logmean_diff', 'prices_logmedian_diff', 'prices_logstd_diff', 'prices_logmin_diff_rank', 'prices_logmax_diff_rank', 'prices_logmean_diff_rank', 'prices_logmedian_diff_rank', 'prices_logstd_diff_rank', 'prices_logmin_diff_mean', 'prices_logmax_diff_mean', 'prices_logmean_diff_mean', 'prices_logmedian_diff_mean', 'prices_logstd_diff_mean', 'price_25', 'price_50', 'price_75', 'price_mean', 'price_std', 'price_min', 'price_max', 'price_nunique', 'price_median', 'price_count', 'price_sum', 'price_nunique_counts', 'price_diff', 'price_diff_mean', 'price_diff_median', 'price_diff_max', 'price_diff_min', 'price_div', 'price_div_mean', 'price_div_median', 'price_div_max', 'price_div_min', 'price_div_sum', 'price_div",
    "```json\n{\n    \"solution\": \"df['Total Sugar (g)'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23', 'x24', 'x25', 'x26', 'x27', 'x28', 'x29', 'x30', 'x31', 'x32', 'x33', 'x34', 'x35', 'x36', 'x37', 'x38', 'x39', 'x40', 'x41', 'x42', 'x43', 'x44', 'x45', 'x46', 'x47', 'x48', 'x49', 'x50', 'x51', 'x52', 'x53', 'x54', 'x55', 'x56', 'x57', 'x58', 'x59', 'x60', 'x61', 'x62', 'x63', 'x64', 'x65', 'x66', 'x67', 'x68', 'x69', 'x70', 'x71', 'x72', 'x73', 'x74', 'x75', 'x76', 'x77', 'x78', 'x79', 'x80', 'x81', 'x82', 'x83', 'x84', 'x85', 'x86', 'x87', 'x88', 'x89', 'x90', 'x91', 'x92', 'x93', 'x94', 'x95",
    "```json\n{\n    \"solution\": \"df.loc[df['Total Fat (g)'].idxmin(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['recipe_id', 'title', 'preparation_time', 'cook_time', 'ingredients', 'instructions', 'rating', 'total_time', 'n_comments', 'date', 'author', 'author_type', 'n_followers', 'author_id', 'user_id', 'n_posts', 'n_ingredients', 'n_steps', 'cook']\nQuestion: Which cook time has the highest average rating?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('cook_time')['rating'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['code', 'mean', 'var', 'std', 'skew', 'kurt', 'food_name']\nQuestion: Which food has the highest kurtosis?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['kurt'].idxmax(), 'food_name']\"\n}\n```\n\nInput DataFrame columns: ['Country', 'Happiness.Rank', 'Happiness.Score', 'Whisker.high', 'Whisker.low', 'Economy..GDP.per.Capita.', 'Family', 'Health..Life.Expectancy.', 'Freedom', 'Generosity', 'Trust..Government.Corruption.', 'Dystopia.Residual']\nQuestion: What is the happiest country in Africa?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.set_index('Country').loc['Egypt', 'Happiness.Score']\"\n}\n```\n\nInput DataFrame columns: ['reviewID', 'businessID', 'userID', 'review', 'date', 'like', 'stars', 'useful', 'funny', 'cool', 'review_time', 'postal_code', 'review_text', 'business_name', 'review_useful', 'review_funny', 'review_cool', 'review_date']\nQuestion: Which business has the most amount of useful reviews?\nExpected return type",
    "```json\n{\n    \"solution\": \"df[df['Protein (g)'].gt(0)].sort_values('Protein (g)').iloc[-1,'name']\"\n}\n```\n\nInput DataFrame columns: ['male', 'age', 'female', 'married', 'location']\nQuestion: How many people are married per country?\nExpected return type: dict\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('location').apply(lambda g: g['married'].sum().to_dict()).to_dict()\"\n}\n```\n\nInput DataFrame columns: ['bank_name', 'city', 'street', 'risk_rate', 'rating', 'business_year', 'business_location', 'business_type', 'business_registration_number', 'contact_name', 'contact_job_title', 'contact_office_location', 'contact_phone_number', 'contact_email', 'contact_fax_number']\nQuestion: Which street has the highest number of businesses?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['street'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'gender', 'age', 'occupation', 'zip', 'gender_age']\nQuestion: How many male customers are there for each age?\nExpected return type: dict\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['gender']=='M'].groupby('age').apply(lambda g: g['age'].count()).to_dict()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'movie_id', 'rating', 'age']\nQuestion: What is the average rating of the oldest customers?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['rating'].mean()\"\n}\n```\n\nInput DataFrame columns: ['occupation', 'gender', 'age', 'zip']\nQuestion: Which occupation has the second-highest average age among women?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['gender']=='F'].groupby('occupation').apply(lambda g: g['age'].mean()).sort_values(",
    "```json\n{\n    \"solution\": \"df.nlargest(5, 'Calories (kcal)')['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['sequence', 'id', 'title', 'body', 'tags', 'answer_count', 'comment_count', 'favorite_count', 'creation_date', 'last_activity_date']\nQuestion: What are the top 10 most popular questions on Stack Overflow?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df.nlargest(10, 'favorite_count')['id'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Post ID', 'Question Posted', 'Author', 'Score', 'Post Creation Date', 'Post Edit Date', 'Total Answers', 'Total Views', 'Total Comments', 'Tags', 'Answer Creation Date', 'Accepted Answer Date', 'Answer Score', 'Question Edit Date', 'Answer Edit Date', 'Answer Body', 'Answer Likes', 'Answer User', 'Answer User Reputation', 'Answer Creation Date_dt', 'Answer Edit Date_dt', 'Question Creation Date_dt', 'Question Edit Date_dt', 'Answer Creation Date_dt_nunique', 'Answer User_nunique', 'Question Edit Date_dt_nunique']\nQuestion: What are the top 10 most popular questions on Stack Overflow?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df.nlargest(10, 'Question Posted')['Post ID'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['country', 'phone_number', 'date_of_birth', 'age', 'uk_citizen', 'gender', 'language', 'brc_score']\nQuestion: What were the highest three scores amongst male English speakers?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[(df['language'] == 'English') & (df['gender'] == 'Male'), 'brc_score'].nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'description', 'industry', 'tags']\nQuestion: Is there any job with a minimum",
    "```json\n{\n    \"solution\": \"df['Total Sugar (g)'].nsmallest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'company_id', 'employee_id', 'points', 'log_id', 'branch_id', 'branch_name', 'grading_date', 'date_of_creation', 'created_by', 'last_updated', 'last_updated_by', 'is_deleted', 'status', 'comments']\nQuestion: What is the most common status of the log entries?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['status'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'company_id', 'employee_id', 'points', 'log_id', 'branch_id', 'branch_name', 'grading_date', 'date_of_creation', 'created_by', 'last_updated', 'last_updated_by', 'is_deleted', 'status', 'comments']\nQuestion: What is the employee with the highest number of log entries?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('employee_id')['log_id'].nunique().sort_values().index[-1]\"\n}\n```\n\nInput DataFrame columns: ['sex', 'first_name', 'last_name', 'present_address', 'permanent_address', 'city_native', 'country', 'date_of_birth', 'place_of_birth', 'email', 'phone', 'zip_pin', 'employee_id', 'is_deleted', 'date_of_creation', 'created_by', 'last_updated', 'last_updated_by', 'marital_status', 'date_of_joining']\nQuestion: How many employees are present in the company?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['employee_id'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['animal_id', 'outcome_date', 'outcome_type', 'outcome_subtype', 'outcome_age', 'animal_type', 'breed', 'color', ' sex', 'name',",
    "```json\n{\n    \"solution\": \"df.sort_values('Total Fat (g)', ascending=False).head(4)['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['health_status', 'country', 'user_id', 'likes_rec_prod_name', 'likes_rec_category', 'likes_prod_name', 'likes_category', 'dislikes_rec_prod_name', 'dislikes_rec_category', 'dislikes_prod_name', 'dislikes_category', 'review_count', 'average_rating', 'product_id', 'prod_name', 'category', 'review_text']\nQuestion\nQuestion: What is the number of likes received by all products in the 'Beauty & Grooming' category?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[(df['category'] == 'Beauty & Grooming') & df['review_count'] > 0]['review_count'].sum()\"\n}\n```\n\nInput DataFrame columns: ['InstaCode', 'Honda', 'Hyundai', 'Kia', 'Nissan', 'Toyota', 'Volkswagen', 'Volvo', 'Audi', 'BMW', 'Chevrolet', 'Dodge', 'Ford', 'Hyundai_Sonata', 'Hyundai_Tucson', 'Hyundai_Veracruz', 'Infiniti', 'Jaguar', 'Jeep', 'Lexus', 'Mercedes-Benz', 'Mitsubishi', 'Nissan_Versa', 'Nissan_X-Trail', 'Porsche', 'Subaru', 'Tesla', 'Volkswagen_Jetta', 'Volkswagen_Tiguan', 'Volkswagen_Touareg', 'minutes_from_now']\nQuestion: How many minutes does it take to buy the 1st car after 24 hours?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['minutes_from_now'] == 1440]['InstaCode'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Largest City', 'Population',",
    "```json\n{\n    \"solution\": \"df.nsmallest(6, 'Protein (g)')['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['first_date', 'last_date', 'last_date_x', 'last_date_y', 'age', 'age_range', 'age_range_category', 'gender', 'gender_category', 'gender_category_x', 'gender_category_y', 'race', 'race_category', 'race_category_x', 'race_category_y', 'cause_of_death', 'cause_of_death_category', 'cause_of_death_category_x', 'cause_of_death_category_y', 'cause_of_death_x', 'cause_of_death_y', 'id', 'id_x', 'id_y']\nQuestion: Has it been observed that there is a correlation between the race and the cause of death?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['race'] == df['cause_of_death']\"\n}\n```\n\nInput DataFrame columns: ['name', 'gender', 'age', 'height', 'weight', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'Cardio']\nQuestion: What is the correlation coefficient between the cholesterol level and the blood pressure high limit?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"return df[['ap_hi', 'cholesterol']].corr()[0][1]\"\n}\n```\n\nInput DataFrame columns: ['Unknown', 'In Person', 'Online', 'Unknown/Other']\nQuestion: What is the most reported channel?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['Unknown'].value_counts().idxmax()\"\n}\n```\n/cs230-final-project/cs230_final_project/templates/submission.html\n{% extends \"layout.html\" %}\n\n{% block title %}CS230 Final Project{% endblock %}\n\n{% block content %}\n  <div class=\"jumbotron\">",
    "```json\n{\n    \"solution\": \"df['Calories (kcal)'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'emoji', 'Calories (kcal)', 'Carbohydrates (g)', 'Total Sugar (g)', 'Protein (g)', 'Total Fat (g)', 'Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)', 'Total Fiber (g)', 'Cholesterol (mg)', 'Vitamin B6 (mg)', 'Vitamin A (IU)', 'Vitamin B12 (ug)', 'Vitamin C (mg)', 'Vitamin D (IU)', 'Vitamin E (IU)', 'Vitamin K (ug)', 'Thiamin (mg)', 'Riboflavin (mg)', 'Niacin (mg)', 'Folate (ug)', 'Pantothenic Acid (mg)', 'Choline (mg)', 'Calcium (g)', 'Copper (mg)', 'Iron (mg)', 'Magnesium (mg)', 'Manganese (mg)', 'Phosphorus (g)', 'Potassium (g)', 'Selenium (ug)', 'Sodium (g)', 'Zinc (mg)']\nQuestion: List all of the unique names in the dataset.\nExpected return type: list[string]\n\nOutput:\n```json\n{\n    \"solution\": \"df['name'].unique().tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'emoji', 'Calories (kcal)', 'Carbohydrates (g)', 'Total Sugar (g)', 'Protein (g)', 'Total Fat (g)', 'Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)', 'Total Fiber (g)', 'Cholesterol (mg)', 'Vitamin B6 (mg)', 'Vitamin A (IU)', 'Vitamin B12 (ug)', 'Vitamin C (mg)', 'Vitamin D (IU)', 'Vitamin E (IU)', 'Vitamin K (ug)', 'Thiamin (mg)', 'Ribo",
    "```json\n{\n    \"solution\": \"df['Total Sugar (g)'].nsmallest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['calories', 'total_fat', 'cholesterol', 'sodium', 'carbohydrates', 'protein', 'sugars', 'saturated_fat', 'sodium_mg', 'potassium_mg', 'food_category']\nQuestion: What is the average calories of foods containing sodium?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['sodium'].gt(0), 'calories'].mean()\"\n}\n```\n\nInput DataFrame columns: ['time', 'visitors', 'location']\nQuestion: What is the average number of visitors per month?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"return df['visitors'].mean()\"\n}\n```\n\nInput DataFrame columns: ['cuisine', 'number_of_ingredients']\nQuestion: What are the 2 cuisines with least ingredients?\nExpected return type: list[str]\n\nOutput:\n```json\n{\n    \"solution\": \"df['cuisine'].value_counts().nsmallest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['car', 'year', 'manufacturer', 'cylinders', 'model', 'displacement', 'acceleration', 'horsepower', 'origin', 'name']\nQuestion: What is the average horsepower of cars?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"return df['horsepower'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'release_date', 'vote_average', 'popularity', 'budget', 'revenue']\nQuestion: What is the average popularity of the movies?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['popularity'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Home_Company_ID', 'Home_Company_Name', 'Home_Company_SIC', 'Home_Company_Industry', 'Home_Company",
    "```json\n{\n    \"solution\": \"df['Total Fat (g)'].nlargest(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'calories', 'total_fat', 'saturated_fat', 'sodium', 'protein', 'carbohydrates', 'sugars', 'calcium', 'iron', 'badge_type', 'badge_name', 'badges', 'badge_description', 'badge_background_color', 'badge_title', 'badge_text_color']\nQuestion: Which category of food has the highest amount of saturated fat?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['saturated_fat'].idxmax(), 'badge_type']\"\n}\n```\n\nInput DataFrame columns: ['product_id', 'product_title', 'product_description', 'product_type', 'product_category_tree', 'pid', 'retail_price', 'discounted_price', 'image', 'is_FK_Advantage_product', 'total_reviews', 'rating', 'rating_count', 'is_FK_Advantage_product', 'availability', 'reviews']\nQuestion: How many products have the highest number of total reviews?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['total_reviews'].max()\"\n}\n```\n\nInput DataFrame columns: ['title', 'description', 'rating', 'review_count', 'image_link', 'product_type', 'product_id', 'product_category', 'brand', 'price', 'maxOrder', 'size', 'sizeType', 'color', 'rating_count', 'review_count', 'review_rating', 'review_text', 'review_title', 'review_time', 'review_username', 'review_userimage']\nQuestion: Who is the reviewer with the highest count of reviews titled \"Best\"?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['review_title'] == 'Best']['review_username'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['name', 'emoji', 'Calories (kcal)',",
    "```json\n{\n    \"solution\": \"df.sort_values('Protein (g)', ascending=True).head(6)['Protein (g)'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Age', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: How many customers had less than 3 purchases of gold products?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['NumGoldProds'] = df['MntWines'] + df['MntGoldProds'] + df['NumDealsPurchases'] + df['NumWebPurchases'] + df['NumCatalogPurchases'] + df['NumStorePurchases'] + df['NumWebVisitsMonth']\n\ndf.loc[df['NumGoldProds'] < 3]['ID'].count()\"\n}\n```\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bathrooms', 'bedrooms', 'beds', 'amenities', 'minimum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'number_of_reviews', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_rating', 'review_scores_accuracy', 'review",
    "```json\n{\n    \"solution\": \"df['edu'].str.contains('Primary').any()\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'user', 'newquestion', 'question', 'answer_1', 'answer_2', 'answer_3', 'answer_4', 'answer_5', 'answer_6', 'answer_7', 'answer_8', 'answer_9', 'answer_10', 'answer_11', 'answer_12', 'answer_13', 'answer_14', 'answer_15', 'answer_16', 'answer_17', 'answer_18', 'answer_19', 'answer_20', 'answer_21', 'answer_22', 'answer_23', 'answer_24', 'answer_25', 'answer_26', 'answer_27', 'answer_28', 'answer_29', 'answer_30', 'answer_31', 'answer_32', 'answer_33', 'answer_34', 'answer_35', 'answer_36', 'answer_37', 'answer_38', 'answer_39', 'answer_40', 'answer_41', 'answer_42', 'answer_43', 'answer_44', 'answer_45', 'answer_46', 'answer_47', 'answer_48', 'answer_49', 'answer_50', 'answer_51', 'answer_52', 'answer_53', 'answer_54', 'answer_55', 'answer_56', 'answer_57', 'answer_58', 'answer_59', 'answer_60', 'voteReason']\nQuestion: Which party has voted the most?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['partyId'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'userID', 'newquestion', 'question', 'answer_1', 'answer_2', 'answer_3', 'answer_4', 'answer_5', 'answer_6', 'answer_7',",
    "```json\n{\n    \"solution\": \"df['polInterest'].nunique() == 1\"\n}\n```\n\nInput DataFrame columns: ['StartDate', 'EndDate', 'Status', 'IPAddress', 'Progress', 'Duration (in seconds)', 'Finished', 'RecordedDate', 'ResponseId', 'RecipientLastName', 'RecipientFirstName', 'RecipientEmail', 'ExternalReference', 'LocationLatitude', 'LocationLongitude', 'DistributionChannel', 'UserLanguage', 'Q0001', 'Q0002', 'Q0003', 'Q0004', 'Q0005', 'Q0006', 'Q0007', 'Q0008', 'Q0009', 'Q0010', 'Q0011', 'Q0012', 'Q0013', 'Q0014', 'Q0015', 'Q0016', 'Q0017', 'Q0018', 'Q0019', 'Q0020', 'Q0021', 'Q0022', 'Q0023', 'Q0024', 'Q0025', 'Q0026', 'Q0027', 'Q0028', 'Q0029', 'Q0030', 'Q0031', 'Q0032', 'Q0033', 'Q0034', 'Q0035', 'Q0036', 'Q0037', 'Q0038', 'Q0039', 'Q0040', 'Q0041', 'Q0042', 'Q0043', 'Q0044', 'Q0045', 'Q0046', 'Q0047', 'Q0048', 'Q0049', 'Q0050', 'Q0051', 'Q0052', 'Q0053', 'Q0054', 'Q0055', 'Q0056', 'Q0057', 'Q00",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].str.contains('No').any()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Education', 'Gender', 'Involvement', 'Income', 'Country', 'Transcale', 'Translate', 'WhyElections', 'WhyEU', 'WhyRight', 'WhyLeft', 'WhyFreeEconomy', 'WhyFreeEconomy_Allies', 'WhyFreeEconomy_Council', 'WhyFreeEconomy_Green', 'WhyFreeEconomy_Independence', 'WhyFreeEconomy_Liberty', 'WhyFreeEconomy_Patriotism', 'WhyFreeEconomy_Protectionism', 'WhyFreeEconomy_Solidarity', 'WhyFreeEconomy_Unity', 'WhyFreeEconomy_Other', 'WhyFreeEconomy_Unknown', 'WhyDemocracy', 'WhyDemocracy_Allies', 'WhyDemocracy_Council', 'WhyDemocracy_Green', 'WhyDemocracy_Independence', 'WhyDemocracy_Liberty', 'WhyDemocracy_Patriotism', 'WhyDemocracy_Protectionism', 'WhyDemocracy_Unity', 'WhyDemocracy_Other', 'WhyDemocracy_Unknown', 'WhyRight2', 'WhyRight1', 'WhyLeft2', 'WhyLeft1', 'WhyFreeEconomy2', 'WhyFreeEconomy3', 'WhyFreeEconomy4', 'WhyFreeEconomy5', 'WhyFreeEconomy6', 'WhyRight3', 'WhyRight4', 'WhyRight5', 'WhyDemocracy2', 'WhyDemocracy3', 'WhyDemocracy4', 'WhyDemocracy5', 'WhyDemocracy6', 'WhyDemocracy7', 'WhyDemocracy8', 'WhyDemocracy9', 'WhyDemocracy10', 'WhyFreeEconomy2_Allies', 'WhyFreeEconomy2_Council', 'WhyFreeEconomy2_Green', 'WhyFreeEconomy2_Independence', 'WhyFreeEconomy2_Liberty', 'WhyFreeEconomy2_Patriotism', 'WhyFreeEconomy2_Protectionism', 'WhyFreeEconomy2_Solidarity', 'Why",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].str.contains('Left').any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'email', 'ip_address', 'timestamp', 'token', 'question_number', 'question', 'response', 'type', 'feedback']\nQuestion: Is there any question with a response?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['response'].notna().any()\"\n}\n```\n\nInput DataFrame columns: ['date', 'retweet_count', 'text', 'rating_numerator', 'rating_denominator', 'name', 'dog_type', 'p1', 'p1_conf', 'p1_dog', 'p2', 'p2_conf', 'p2_dog', 'p3', 'p3_conf', 'p3_dog']\nQuestion: Is there any dog with a name?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['name'].notna().any()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'timestamp', 'source', 'text', 'expanded_urls', 'rating_numerator', 'rating_denominator', 'name', 'dog_type', 'jpg_url', 'img_num', 'retweet_count', 'favorite_count']\nQuestion: Which dog has the most retweets?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.nlargest(1, 'retweet_count')['name'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'timestamp', 'source', 'text', 'expanded_urls', 'rating_numerator', 'rating_denominator', 'name', 'dog_type', 'jpg_url', 'img_num', 'retweet_count', 'favorite_count']\nQuestion: What is the average number of retweets for the most popular dog?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['retweet_count'].mean()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'timestamp', 'source', 'text',",
    "```json\n{\n    \"solution\": \"return df['User self- placement on Progressive-Conservative economic values axis'].eq(10).sum()\"\n}\n```\n\nInput DataFrame columns: ['Timestamp', 'Q1a', 'Q1b', 'Q1c', 'Q1d', 'Q1e', 'Q1f', 'Q1g', 'Q1h', 'Q1i', 'Q2a', 'Q2b', 'Q2c', 'Q2d', 'Q2e', 'Q2f', 'Q2g', 'Q2h', 'Q2i', 'Q2j', 'Q2k', 'Q2l', 'Q3a', 'Q3b', 'Q3c', 'Q3d', 'Q3e', 'Q3f', 'Q3g', 'Q3h', 'Q3i', 'Q3j', 'Q3k', 'Q3l', 'Q3m', 'Q3n', 'Q4a', 'Q4b', 'Q4c', 'Q4d', 'Q4e', 'Q4f', 'Q4g', 'Q4h', 'Q4i', 'Q4j', 'Q4k', 'Q4l', 'Q4m', 'Q4n', 'Q5a', 'Q5b', 'Q5c', 'Q5d', 'Q5e', 'Q5f', 'Q5g', 'Q5h', 'Q5i', 'Q5j', 'Q5k', 'Q5l', 'Q5m', 'Q5n', 'Q6a', 'Q6b', 'Q6c', 'Q6d', 'Q6e', 'Q6f', 'Q6g', 'Q6h', 'Q6i', 'Q6j', 'Q6k', 'Q6l', 'Q6m', 'Q7a', 'Q7b', 'Q7c', 'Q7d', 'Q7e', 'Q7f', 'Q7g', 'Q7h', 'Q7i', 'Q7j', 'Q7k', 'Q7l', 'Q7m', 'Q8a', 'Q",
    "```json\n{\n    \"solution\": \"df['Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Zipcode', 'Gender', 'Income', 'Occupation', 'Marital Status', 'Home Owner', 'Education Level', 'Age', 'Veteran', 'Totalchildren', 'Yrs of Schooling', 'Household Status', 'Children in Household', 'Household Income', 'House Value', 'Longitude', 'Latitude', 'Household Size', 'Year Moved In', 'Dwelling Structure', 'Rent or Own', 'Total Square Feet', 'Bedrooms', 'Bedrooms Occupied', 'Bathrooms', 'Heating Fuel', 'Water Heater', 'Cooking Fuel', 'Room Air Conditioning', 'Closets', 'Disposal', 'Toilet Cleanliness', 'Kitchen Cleanliness', 'Kitchen Utensils', 'Laundry Facilities', 'Microwave', 'Refrigerator', 'Television', 'Radio', 'Car', 'Telephone', 'Internet', 'Kid Friendly', 'Fireplace', 'Fireplace Gas', 'Fireplace Features', 'Basement Finished Areas', 'Basement Finished Square Feet', 'Basement Finished Year', 'Basement Unfinished Areas', 'Basement Unfinished Square Feet', 'Basement Unfinished Year', 'Finished Square Feet', 'Year Built', 'Year Renovated', 'Lot Size', 'Year Moved Out', 'Income_level', 'Income_category', 'Occupation_category', 'Household Income_category', 'House Value_category', 'Square Feet_category', 'Home Owner_category', 'Bedrooms_category', 'Bathrooms_category', 'Kitchen Features_category', 'Laundry Facilities_category', 'Bedrooms Occupied_category', 'Age_category', 'Veteran_category', 'Marital Status_category', 'Children in Household_category', 'Totalchildren_category', 'Education Level_category', 'Yrs of Schooling_category', 'Household Size_category']\nQuestion: What is the square feet of the house with the highest income?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['Total Square Fe",
    "```json\n{\n    \"solution\": \"df['voteReason'].value_counts().loc['It should be more difficult for companies to lay off workers']\"\n}\n```\n\nInput DataFrame columns: ['Age', 'const', 'edu', 'gender', 'lang', 'partyId', 'polInterest', 'prevVote', 'prevVoteCat', 'prov', '\u00c7a continue d\u2019\u00eatre un mod\u00e8le d\u2019\u00e9conomie bourgeoise.', 'Encore des \u00e9conomies r\u00e9gionales, c\u2019est une priorit\u00e9 pour la stabilit\u00e9 de notre pays.', 'La politique immigrationale actuelle est \u00e0 l\u2019origine d\u2019un stress sur l\u2019emploi des paysans et de la sant\u00e9.', 'Au titre de la crise sanitaire, les finances publiques deviennent un stress pour la population.', 'La stabilit\u00e9 \u00e9conomique est un des principes de la Constitution.', 'La promotion du march\u00e9 immobilier doit \u00eatre prioritaire.', 'Une gestion \u00e9quitable des politiques de transport est n\u00e9cessaire.', 'L\u2019\u00e9quilibre \u00e9nerg\u00e9tique doit \u00eatre maintenu \u00e0 hauteur d\u2019une certaine \u00e9chelle de co\u00fbt.', 'Une r\u00e9forme des taxes favorisera l\u2019emploi et favorisera l\u2019\u00e9conomie.', 'La r\u00e9sidence des entreprises dans les zones rurales est une priorit\u00e9 pour l\u2019\u00e9conomie.', 'L\u2019investissement pour la construction d\u2019offices et d\u2019autres b\u00e2timents publics doit \u00eatre r\u00e9gionalis\u00e9.', 'Les budgets des r\u00e9gions pourraient \u00eatre r\u00e9gionalis\u00e9s.', 'La protection contre les apports europ\u00e9ens doit \u00eatre mise en place.', 'Des subventions pour la construction d\u2019offices \u00e9tait pr\u00e9vue par la Constitution.', 'Une carte \u00e9quitable des rentes doit \u00eatre cr\u00e9\u00e9e.', 'Une plus grande part de paysans et de pauvres pourrait \u00eatre concern\u00e9e par un programme de solidarit\u00e9 en cas de rupture.', 'Les retraites doit \u00eatre plus \u00e9quitables.', 'La contribution des mutuelles aux \u00e9pargnes doit \u00eatre r\u00e9duite.', 'La",
    "```json\n{\n    \"solution\": \"df[(~df['gender'].isin(['Male', 'Female']))].age.max()\"\n}\n```\n\nInput DataFrame columns: ['country', 'year', 'unemployment', 'policy', 'interest', 'largeValue', 'emScale', 'emAggregate', 'emCount', 'sustainableProgress']\nQuestion: Which country has the highest unemployment rate?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('country')['unemployment'].max().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['country', 'year', 'policy', 'interest', 'largeValue', 'emScale', 'emAggregate', 'emCount', 'sustainableProgress']\nQuestion: What is the average largeValue among countries which have the highest unemployment rate?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['largeValue'].mean() * df.groupby('country')['unemployment'].max().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['aid_id', 'Country', 'Year', 'Collateral_Coverage_Rate', 'Aid_Type', 'Aid_Flow', 'Aid_Category', 'Sum_Aid_Amount_(000_US$)', 'Average_Aid_Amount_(000_US$)', 'Number_of_Projects', 'Area_of_impact', 'Coordination', 'Un_Organizations', 'Interest', 'Large_Value', 'Scale_of_Economic_Impact', 'Aggregate_Level_of_Economic_Impact', 'Count_of_Countries_with_Economic_Impact', 'Sustainable_Progress']\nQuestion: What is the highest number of projects in the dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['Number_of_Projects'].max()\"\n}\n```\n\nInput DataFrame columns: ['aid_id', 'Country', 'Year', 'Collateral_Coverage_Rate', 'Aid_Type', 'Aid_Flow', 'Aid_Category', 'Sum_Aid_Amount_(000_US$)', 'Average_Aid_Amount_(000_US",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].mode().iloc[0]\"\n}\n\n```\n\nInput DataFrame columns: ['Age', 'Income', 'Sex', 'Political Party', 'Education', 'Self-Employed', 'Employment Sector', 'Job Satisfaction', 'Household Income', 'Interest in Sport', 'Interest in Environment', 'Interest in Religion', 'Interest in Politics', 'Interest in Innovation', 'Interest in Social Security', 'Interest in Health', 'Interest in Violence against Women', 'Interest in Women at Work', 'Interest in European Integration', 'Interest in Fair Trade', 'Interest in Economy', 'Interest in Poverty Reduction', 'Interest in Decent Work', 'Interest in Workers Rights', 'Interest in Elections', 'Interest in Community Building', 'Interest in State Initiatives', 'Interest in Social Security', 'Interest in Access to Technology', 'Interest in Internet', 'Interest in Gender Equality', 'Interest in Immigration', 'Interest in Anti-Corruption', 'Interest in Police Reforms', 'Interest in Citizenship', 'Interest in Liberalism', 'Interest in Conservatism', 'Interest in Populism', 'Interest in Freedom of Expression', 'Interest in Freedom of Choice', 'Interest in Citizenship', 'Interest in Free Education', 'Interest in Free Health Care', 'Interest in Free Press', 'Interest in Free Aid', 'Interest in Freedom of Speech', 'Interest in Freedom of Religion', 'Interest in Bail', 'Interest in Immigration', 'Interest in Freedom of Movement', 'Interest in Freedom of Football', 'Interest in Freedom of Cinema', 'Interest in Freedom of Concerts', 'Interest in Freedom of Theatre', 'Interest in Freedom of Music', 'Interest in Citizens with Disabilities', 'Interest in Freedom of Animals', 'Interest in Social Justice', 'Interest in Access to Information', 'Interest in Privacy', 'Interest in Open Society', 'Interest in Open Market', 'Interest in Open Government', 'Interest in Modern Europe', 'Interest in European Social Football', 'Interest in European Football', '",
    "```json\n{\n    \"solution\": \"df['voteReason'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Attendance', 'Party size', 'Party structure', 'Ideology', 'Policy preferences', 'Innovation', 'Ticket price', 'Age', 'Gender', 'Profession', 'Education', 'Income', 'Position', 'Conduct', 'Language', 'Partisanship', 'Importance', 'Other', 'Scandal', 'Region', 'Province', 'City', 'District', 'District Size', 'Respondent', 'RegNum', 'RegDate', 'RegIP', 'RegLoc', 'RegLat', 'RegLon', 'ProNum', 'ProDate', 'ProIP', 'ProLoc', 'ProLat', 'ProLon', 'VotNum', 'VotDate', 'VotIP', 'VotLoc', 'VotLat', 'VotLon', 'VotIPIN', 'VotLocIN', 'VotLatIN', 'VotLonIN', 'VotIPFC', 'VotLocFC', 'VotLatFC', 'VotLonFC', 'VotIP1', 'VotLoc1', 'VotLat1', 'VotLon1', 'VotIP2', 'VotLoc2', 'VotLat2', 'VotLon2', 'VotIP3', 'VotLoc3', 'VotLat3', 'VotLon3', 'VotIP4', 'VotLoc4', 'VotLat4', 'VotLon4', 'VotIP5', 'VotLoc5', 'VotLat5', 'VotLon5', 'VotIP6', 'VotLoc6', 'VotLat6', 'VotLon6', 'VotIP7', 'VotLoc7', 'VotLat7', 'VotLon7', 'VotIP8', 'VotLoc8', 'VotLat8', 'VotLon8', 'VotIP9', 'VotLoc9', 'VotLat9', 'VotLon9', 'VotIP10', 'VotLoc10', 'VotLat10', 'VotLon10', 'VotIP11', 'Vot",
    "```json\n{\n    \"solution\": \"df['partyId'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['partyID', 'Voted', 'VoteIntention', 'Age', 'Gender', 'Lang', 'Marital status', 'Province of residence', 'Education', 'Income (Euros)', 'Party identification', 'Organized party', 'Party registration', 'Party registration date', 'Previous vote', 'Previous vote category', 'Previous State of the Nation', 'Source', 'Voted for the previous State of the Nation', 'Causes of the previous State of the Nation (left)', 'Causes of the previous State of the Nation (centre)', 'Causes of the previous State of the Nation (right)', 'Causes of the previous State of the Nation (other)', 'Causes of the previous State of the Nation (don\\'t know)', 'Causes of the previous State of the Nation (don\\'t talk about it)', 'Causes of the previous State of the Nation (don\\'t know)', 'Causes of the previous State of the Nation (don\\'t know)', 'Causes of the previous State of the Nation (don\\'t know)', 'Causes of the previous State of the Nation (don\\'t know)', 'Causes of the previous State of the Nation (don\\'t know)', 'Causes of the previous State of the Nation (other)', 'Causes of the previous State of the Nation (left)', 'Causes of the previous State of the Nation (right)', 'Causes of the previous State of the Nation (other)', 'Causes of the previous State of the Nation (other)']\nQuestion: Which is the most common cause of the previous State of the Nation?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['VoteIntention'] == 2]['Causes of the previous State of the Nation (left)'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Voted', 'Vote', 'Age', 'Gender', 'Ethnicity', 'Language', 'In which of the following locations do you live?', 'Employment status', 'Education', 'Household wealth (Euros",
    "```json\n{\n    \"solution\": \"df['lang'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['userID', 'itemID', 'rating', 'timestamp', 'jobID', 'title', 'genres']\nQuestion: Which movie got the highest average rating?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.groupby('title')['rating'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['name', 'year', 'month', 'day', 'hour', 'minute', 'second', 'set', 'data', 'time', 'col1', 'col2', 'col3']\nQuestion: How many entries are there for each time unit?\nExpected return type: dict[string, number]\n\nOutput:\n```json\n{\n    \"solution\": \"return {k: len(v) for k, v in df.groupby('time')}\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Close', 'Adj Close', 'Volume']\nQuestion: What is the proportion of data for missing values?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.isna().mean().mean()\"\n}\n```\n\nInput DataFrame columns: ['target', 'age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'num']\nQuestion: What is the percentage of missing data in 'thal' column?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['thal'].isna().mean()\"\n}\n```\n\nInput DataFrame columns: ['subject', 'relation', 'time', 'action', 'actor', 'informed1', 'informed2', 'informed3', 'informed4', 'informed5', 'informed6', 'informed7', 'informed8', 'informed9', 'informed10', 'informed11', 'informed12', 'informed13', 'informed14', 'informed15', 'informed16', 'in",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Car_Owner', 'Married', 'Rating', 'Children', 'Credit_card', 'Education', 'Employment_Status', 'Gender', 'Income_Level', 'Income_Level', 'Location_Type', 'Marital_Status', 'Own_your_home', 'Religion', 'Residence_Duration', 'Savings_Account', 'Var1', 'Var2', 'Var3', 'Var4', 'Var5', 'Var6', 'Var7', 'Var8', 'Var9', 'Var10', 'Var11', 'Var12', 'Var13', 'Var14', 'Var15', 'Var16', 'Var17', 'Var18', 'Var19', 'Var20', 'Var21', 'Var22', 'Var23', 'Var24', 'Var25', 'Var26', 'Var27', 'Var28', 'Var29']\nQuestion: Which variable has the most missing values?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df.isnull().sum().nlargest(1).index[0]\"\n}\n```\n\nInput DataFrame columns: ['channelGrouping', 'date', 'fullVisitorId', 'visitId', 'visitNumber', 'visitStartTime', 'device_browser', 'device_deviceCategory', 'device_isMobile', 'device_operatingSystem', 'geoNetwork_city', 'geoNetwork_continent', 'geoNetwork_country', 'geoNetwork_metro', 'geoNetwork_networkDomain', 'geoNetwork_region', 'geoNetwork_subContinent', 'totals_bounces', 'totals_hits', 'totals_newVisits', 'totals_pageviews', 'totals_transactionRevenue', 'totals_visits', 'trafficSource_adContent', 'trafficSource_campaign', 'trafficSource_isTrueDirect', 'trafficSource_keyword', 'trafficSource_medium', 'trafficSource_referralPath', 'trafficSource_source']\nQuestion: Which column is the only one with null values?\nExpected return type: category",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].str.split(' - ').explode().value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['age', 'education_level', 'race', 'gender', 'political_channels', 'income', 'vote']\nQuestion: Who is more likely to vote right-wing and left-wing?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['vote'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['age', 'born_on_election', 'education_level', 'gender', 'income', 'marital_status', 'profession', 'political_channels', 'state_vote', 'vote', 'voted_last_time']\nQuestion: Is there a higher chance of voting right-wing or left-wing among young people?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['age'].between(18, 30)]['state_vote'].str.contains('right').any()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Sex', 'Diabetes', 'Alcohol use', 'Drug use', 'Asthma', 'Smoking', 'Tuberculosis', 'Chronic obstructive pulmonary disease', 'Cerebrovascular disease', 'Kidney disease', 'Chronic liver disease', 'Chronic bronchitis', 'Dementia', 'Obesity', 'Suicide attempts', 'Suicide', 'Pneumonia', 'Hypertension', 'Hepatitis B', 'Cancer', 'Arthritis', 'Depression', 'Self-harm', 'Depression']\nQuestion: How many different types of chronic diseases are there in the dataset?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df.select_dtypes(include=['bool']).sum().sum()\"\n}\n```\n\nInput DataFrame columns: ['Country', 'Province/State', 'Lat', 'Long', 'Date', 'Confirmed', 'Recovered', 'Deaths",
    "```json\n{\n    \"solution\": \"df['partyId'].head(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'Q2', 'Q3A', 'Q3B', 'Q4A', 'Q4B', 'Q5A', 'Q5B', 'Q6A', 'Q6B', 'Q7A', 'Q8', 'Q9A', 'Q9B', 'Q9C', 'Q9D', 'Q9E', 'Q9F', 'Q10A', 'Q10B', 'Q10C', 'Q10D', 'Q10E', 'Q11A', 'Q11B', 'Q11C', 'Q11D', 'Q11E', 'Q11F', 'Q12A', 'Q12B', 'Q12C', 'Q12D', 'Q12E', 'Q13A', 'Q13B', 'Q13C', 'Q13D', 'Q13E', 'Q13F', 'Q13G', 'Q13H', 'Q13I', 'Q13J', 'Q14A', 'Q14B', 'Q14C', 'Q14D', 'Q14E', 'Q15A', 'Q15B', 'Q15C', 'Q15D', 'Q15E', 'Q15F', 'Q15G', 'Q15H', 'Q15I', 'Q16', 'Q17A', 'Q17B', 'Q17C', 'Q17D', 'Q17E', 'Q18', 'Q19A', 'Q19B', 'Q19C', 'Q19D', 'Q19E', 'Q19F', 'Q19G', 'Q19H', 'Q19I', 'Q19J', 'Q19K', 'Q19L', 'Q19M', 'Q19N', 'Q19O', 'Q19P', 'Q19Q",
    "```json\n{\n    \"solution\": \"df['edu'].value_counts().nlargest(3).index.to_list()\"\n}\n```\n\nInput DataFrame columns: ['id', 'rrss', 'date', 'text']\nQuestion: How many times in total was an article published on a social network?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['rrss'].count()\"\n}\n```\n\nInput DataFrame columns: ['title', 'category', 'url', 'date']\nQuestion: How many titles are in the top 3 categories?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['category'].value_counts().nlargest(3).sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'category', 'url', 'date']\nQuestion: Which category has the least number of titles?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['category'].value_counts().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['title', 'category', 'url', 'date']\nQuestion: What is the most repeated title?\nExpected return type: text\n\nOutput:\n```json\n{\n    \"solution\": \"df['title'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['title', 'sentiment']\nQuestion: Name the best performing sentiment?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['sentiment'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['name', 'age', 'position', 'team', 'nation', 'games', 'goals', 'assists', 'pens_made', 'pens_att', 'cards']\nQuestion: What is the player with the first name 'Kai'?\nExpected return type: text\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['name'].str.contains('Kai')].iloc[0, :]\"\n}\n```\n\nInput DataFrame columns: ['player', 'birthday', 'birth_year', 'age', 'height', 'weight', 'country', 'league', 'team', '",
    "```json\n{\n    \"solution\": \"df['Age'].value_counts().iloc[:3].index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'abstract', 'text', 'bow', 'label', 'topic_label', 'topic_index']\nQuestion: Is there any respondent with empty abstract?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['abstract'].isnull().any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'abstract', 'text', 'bow', 'label', 'topic_label', 'topic_index']\nQuestion: What is the respondent's text with the highest number of frequency (i.e. most number of words)?\nExpected return type: string\n\nOutput:\n```json\n{\n    \"solution\": \"' '.join(df[df['bow'].str.len().idxmax()]['text'].split())\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'abstract', 'text', 'bow', 'label', 'topic_label', 'topic_index']\nQuestion: Which respondents has the highest number of words?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['bow'].str.split(' ').str.len().gt(10)].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'abstract', 'text', 'bow', 'label', 'topic_label', 'topic_index']\nQuestion: What is the most frequent term among respondents?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['bow'].str.split(' ').explode().mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'abstract', 'text', 'bow', 'label', 'topic_label', 'topic_index']\nQuestion: What is the label with the lowest frequency among respondents?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"pd.Series(np.unique(df['label'].values)).value_counts().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['id', '",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].str.split('\\\\b(\\\\-\\\\d*\\\\.\\\\d+)|(\\\\-?\\\\d+\\\\.\\\\d*)\\\\b').loc[df['Vote Intention'].str.split('\\\\b(\\\\-\\\\d*\\\\.\\\\d+)|(\\\\-?\\\\d+\\\\.\\\\d*)\\\\b').map(len).gt(1)].str.split(' ').explode().value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['voteReason', 'voteReasonLabel', 'q100', 'q101', 'q102', 'q103', 'q104', 'q105', 'q106', 'q107', 'q108', 'q109', 'q110', 'q111', 'q112', 'q113', 'q114', 'q115', 'q116', 'q117', 'q118', 'q119', 'q120', 'q121', 'q122', 'q123', 'q124', 'q125', 'q126', 'q127', 'q128', 'q129', 'q130', 'q131', 'q132', 'q133', 'q134', 'q135', 'q136', 'q137', 'q138', 'q139', 'q140', 'q141', 'q142', 'q143', 'q144', 'q145', 'q146', 'q147', 'q148', 'q149', 'q150', 'q151', 'q152', 'q153', 'q154', 'q155', 'q156', 'q157', 'q158', 'q159', 'q160', 'q161', 'q",
    "```json\n{\n    \"solution\": \"df['User self- placement on Progressive-Conservative economic values axis'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['User self-placement on Left-Right economic values axis', 'User self-placement on Progressive-Conservative economic values axis', 'User self-placement on conservative economic values axis', 'User self-placement on liberal economic values axis', 'User self- placement on Conservative economic values axis', 'What kind of terrorist do you consider yourself?', 'What is your occupation?', 'What is the nature of your household?', 'What is your civil status?', 'How many people live in your household?', 'What is your age?', 'What is the maximum level of studies you have achieved?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?', 'age_group', 'gender', 'education', 'income', 'marital', 'know_dialect', 'know_dialect1', 'know_dialect2', 'know_dialect3', 'know_dialect4', 'know_dialect5', 'know_dialect6', 'know_dialect7', 'know_dialect8', 'know_dialect9', 'know_dialect1",
    "```json\n{\n    \"solution\": \"df['Constitutional organisation of the country (More Descentralization)'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['cement_measure_id', 'date', 'cement_reason', 'cement_type', 'cement_unit_price', 'fossil_fuel_usage', 'non_fossil_fuel_usage', 'hydroelectric_units_planned', 'hydroelectric_units_planned', 'primary_energy_input', 'price', 'sulfur_dioxide_swipping_rate', 'sulfur_dioxide_free_air', 'diesel_mix_planned', 'secondary_energy_input', 'energy_efficiency_measures', 'non_renewable_energy_sources', 'renewable_energy_sources', 'power_plants_located_in_land_areas', 'power_plants_located_on_seas_offshore_areas', 'power_plants_located_in_waste_disposal_areas', 'power_plants_located_in_land_areas', 'power_plants_located_on_seas_offshore_areas', 'power_plants_located_in_waste_disposal_areas', 'power_plants_located_in_land_areas', 'power_plants_located_on_seas_offshore_areas', 'power_plants_located_in_waste_disposal_areas', 'power_plants_located_in_land_areas', 'power_plants_located_on_seas_offshore_areas', 'power_plants_located_in_waste_disposal_areas', 'power_plants_located_in_land_areas', 'power_plants_located_on_seas_offshore_areas', 'power_plants_located_in_waste_disposal_areas', 'power_plants_located_in_land_areas', 'power_plants_located_on_seas_offshore_areas', 'power_plants_located_in_waste_"
]