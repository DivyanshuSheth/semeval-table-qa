[
    "```json\n{\n    \"solution\": \"df[df['lang'].eq('es')]['favorites'].max() > df[df['lang'].ne('es')]['favorites'].max()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Start Time', 'Location', 'Start Latitude', 'Start Longitude', 'End Location', 'End Latitude', 'End Longitude', 'Miles', 'Minutes', 'Start City', 'Start Country', 'End City', 'End Country', 'Type', 'Start State', 'End State', 'Start Address', 'End Address', 'Gender', 'Age', 'Stance', 'Goal', 'Stop Time', 'Sport', 'Duration', 'Distance', 'Month', 'Weekday', 'Year', 'Hour']\nQuestion: Which athlete is the most active during weekdays?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['Weekday'].isin([0, 1, 2, 3, 4])) & (df['Hour'].isin([6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])), 'Athlete'].value_counts().idxmax()\"\n}\n```---\nid: Intro\ntitle: Introduction\nsidebar_label: Introduction\nslug: /Intro\n---\n\n![Mental Health in Tech](/img/MentalHealthTech.png)\n\nHi there, my name is .\nI'm a teacher and the founder of the mental health community [HackerRank](https://www.hackerrank.com/mental_health_in_tech).\nI've been teaching mental health related topics since I was a teenager.\nI see this community as a valuable opportunity to help mental health professionals and technologists alike.\n\nI plan to share resources and tips.\nI aim to make it easy to understand the mental health ecosystem.\nThere are many resources out there, but I see a need to simplify communication and democratize access",
    "```json\n{\n    \"solution\": \"df['author_name'].str.len().gt(df['author_name'].str.len().max()).any()\"\n}\n```\n\nInput DataFrame columns: ['person_id', 'first_name', 'last_name', 'url', 'person_name', 'gender']\nQuestion: What is the gender of the customer with the longest last name?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['last_name'].str.len().argmax(), 'gender']\"\n}\n```\n\nInput DataFrame columns: ['user_key', 'user_id', 'url', 'alias', 'name', 'last_name', 'first_name', 'native_language', 'locale', 'email', 'gender', 'verified', 'creation_date', 'registration_date', 'state', 'city', 'current_city_name', 'app_language', 'last_activity_date', 'picture_url', 'birthdate', 'facebook_id', 'linkedin_id', 'twitter_id', 'instagram_id', 'last_product_id', 'last_product_sku', 'registered_products', 'registered_product_skus', 'c3_user_id', 'c3_user_key', 'c3_user_md5_id', 'c3_user_md5_key', 'c3_user_sha1_id', 'c3_user_sha1_key', 'c3_auth_id', 'c3_auth_key', 'instagram_username', 'facebook_username', 'newsletter_subscribed', 'newsletter_unsubscribed', 'newsletter_date', 'analytics_user_id', 'analytics_user_key', 'analytics_user_md5_id', 'analytics_user_md5_key', 'analytics_user_sha1_id', 'analytics_user_sha1_key', 'is_this_user_deleted', 'is_this_user_admin', 'is_this_user_super_admin', 'is_this_user_has_account', 'is_this_user_has_shop', 'is_this_user_has_blog', 'is_this",
    "```json\n{\n    \"solution\": \"df['retweets'].eq(0).any()\"\n}\n```\n\nInput DataFrame columns: ['title', 'text', 'tokenized_title', 'tokenized_text', 'tokenized_hashtags']\nQuestion: What are the top 3 most common words that are used in the titles of the tweets?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['tokenized_title'].explode().value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['title', 'text', 'bad_tweets', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: Which author has the most tweets?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['author_name'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['hotel_name', 'hotel_city', 'latitude', 'longitude', 'score', 'customer_id', 'hotel_category', 'customer_category', 'customer_segment', 'customer_nationality', 'customer_type', 'customer_score', 'booking_date', 'issue_date', 'arrival_date', 'depature_date', 'nights', 'adults', 'children']\nQuestion: What are the top 2 customers who have made bookings the most?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('customer_id')['customer_id'].count().nlargest(2).index.tolist()\"\n}\n```\n\n\nInput DataFrame columns: ['hotel_name', 'address', 'hotel_city', 'latitude', 'longitude', 'score', 'customer_id', 'hotel_category', 'customer_category',",
    "```json\n{\n    \"solution\": \"return list(df['links_first'].isna()).count(True) == len(df['links_first'])\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What's the average number of characters in a tweet, if the type is text?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['type'] == 'text', 'text'].str.len().mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What is the maximum number of unique mentions?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['mention_ids'].apply(lambda x: len(x.split(', '))).max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many tweets are of type image?\nExpected return type: number\n\nCode that",
    "```json\n{\n    \"solution\": \"pd.unique(df['author_name']).shape[0]\"\n}\n```\n\nInput DataFrame columns: ['agent_id', 'case_id', 'subject_id', 'case_number', 'date_of_loss', 'month_of_loss', 'year_of_loss', 'state_code', 'cause', 'fraud_report', 'fraud_report_out', 'lawyer', 'defender', 'prosecution', 'type_of_incident', 'incident_state', 'incident_city', 'incident_county', 'incident_zip', 'location', 'offense', 'offense_type', 'offense_method', 'offense_level', 'offense_classification', 'offense_subclass', 'disposition', '\u4e8b\u6545\u7c7b\u578b', '\u4e8b\u6545\u539f\u56e0', '\u4e8b\u6545\u7b49\u7ea7', '\u4e8b\u6545\u6027\u8d28', '\u4e8b\u6545\u8d23\u4efb', '\u4e8b\u6545\u5f71\u54cd']\nQuestion: How many cases resulted in fraud?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['fraud_report'].sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'date', 'time', 'lat', 'lng', 'description', 'zip', 'title', 'address', 'city', 'state', 'country', 'location', 'created_at', 'updated_at']\nQuestion: How many traffic accidents were in the state of Texas?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['state'].eq('Texas').sum()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Postal Code', 'Unique Key', 'Borough', 'X Coordinate (State Plane)', 'Y Coordinate (State Plane)', 'Latitude', 'Longitude', 'Location']\nQuestion: What is the total number of occurrences of the crime code 211 (Disorderly Conduct) across the boroughs?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Primary Type'] == 'DISORDERLY CONDUCT']['Primary Type'].count()\"\n}\n```\n\nInput DataFrame columns: ['incident_id",
    "```json\n{\n    \"solution\": \"df['text'].str.split(' ').str.len().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'event', 'team', 'score1', 'score2', 'result1', 'result2', 'result3', 'result4', 'result5', 'result6', 'result7', 'result8', 'result9', 'result10', 'result11', 'result12', 'result13', 'result14', 'result15', 'result16', 'result17', 'result18', 'result19', 'result20', 'result21', 'result22', 'result23', 'result24', 'result25', 'result26', 'result27', 'result28', 'result29', 'result30', 'result31', 'result32', 'result33', 'result34', 'result35', 'result36', 'result37', 'result38', 'result39', 'result40', 'result41', 'result42', 'result43', 'result44', 'result45', 'result46', 'result47', 'result48', 'result49', 'result50', 'result51', 'result52', 'result53', 'result54', 'result55', 'result56', 'result57', 'result58', 'result59', 'result60', 'result61', 'result62', 'result63', 'result64', 'result65', 'result66', 'result67', 'result68', 'result69', 'result70', 'result71', 'result72', 'result73', 'result74', 'result75', 'result76', 'result77', 'result78', 'result79', 'result80', 'result81', 'result82', 'result83', 'result84', 'result85', 'result86', 'result87', 'result88', 'result89', 'result90', 'result91', 'result",
    "```json\n{\n    \"solution\": \"df['retweets'].sum()\"\n}\n```\n\nInput DataFrame columns: ['reg_date', 'reg_time', 'reg_ip', 'reg_address', 'reg_link', 'reg_lang', 'login_date', 'login_time', 'login_ip', 'login_address', 'login_url', 'login_link', 'login_lang', 'logout_time', 'logout_date', 'logout_ip', 'logout_address', 'logout_link', 'logout_lang', 'client_id', 'country', 'device', 'os', 'browser', 'version', 'gender', 'timezone', 'age', 'language', 'country_code', 'post_id', 'post_title', 'post_category', 'post_published', 'post_text', 'post_url', 'post_video', 'post_image', 'post_images', 'post_parent', 'post_author', 'post_author_name', 'post_author_link', 'post_author_profile', 'post_likes', 'post_comments']\nQuestion: How many people logged in the website in USA?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['country'] == 'USA']['client_id'].count()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Text', 'Campaign', 'Platform']\nQuestion: Which campaign had the largest number of posts celebrating Black Lives Matter?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Campaign'].str.contains('Black Lives Matter'))]['Campaign'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Title', 'Description', 'Category', 'Sub Category', 'Type', 'Hours', 'Terms & Conditions', 'Country', 'City', 'ZipCode', 'State/Province', 'Last Update', 'Website', 'Email', 'Address', 'Contact Number', 'Contact Person', 'Latitude', 'Longitude', 'Tags', 'Likes', 'Dislikes', 'Feedback Score', 'Source']\nQuestion: Which of the websites has the most Facebook referrals?\nExpected",
    "```json\n{\n    \"solution\": \"df['mention_ids'].isna().sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many tweets are located in US, UK and Canada?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['location'].str.split(' ', expand=True).iloc[:, 1].value_counts().loc[['US', 'UK', 'Canada']].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Mag', 'Latitude', 'Longitude', 'Depth', 'Date', 'Time', 'Type', 'HorizontalError', 'DepthError', 'MagnitudeError', 'AzimuthalGap', 'HorizontalDistance', 'HorizontalError', 'DepthError', 'MagnitudeError', 'AzimuthalGap', 'RMS', 'ID']\nQuestion: How many earthquakes happened in South America (BR) between 2005 and 2020?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Date'] > '2005-1-1') & (df['Date'] < '2020-1-1')].loc[(df['Latitude'] > -51.9234) & (df['Latitude'] < -9.018), 'Mag'].count()\"\n}\n```\n\nInput DataFrame columns: ['event_id', 'state_name', 'population', 'fips', 'hazard_type']\nQuestion: What are the most common hazard type in New York State?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['state_name'] == 'New York']['hazard_type'].value_",
    "```json\n{\n    \"solution\": \"df.loc[df['retweets'].idxmax(), 'author_name']\"\n}\n```\n\nInput DataFrame columns: ['gender', 'age', 'weight', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio']\nQuestion: What is the gender who has the biggest ap_hi?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['ap_hi'].idxmax(), 'gender']\"\n}\n```\n\nInput DataFrame columns: ['sex', 'disease', 'diuresis', 'heartrate', 'systolic', 'diastolic', 'age', 'Cholesterol', 'Glucose', 'Smoke', 'Alcohol', 'active', 'cardio']\nQuestion: What disease has the maximum diuresis?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['diuresis'].idxmax(), 'disease']\"\n}\n```\n\nInput DataFrame columns: ['id', 'sex', 'bmi', 'age', 'suicides_no', 'population', 'year']\nQuestion: Calculate the average BMI for men and women.\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('sex')['bmi'].mean().tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'sex', 'bmi', 'age', 'suicides_no', 'population', 'year']\nQuestion: What is the average suicides number for each age group?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('age')['suicides_no'].mean().tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'sex', 'bmi', 'age', 'suicides_no', 'population', 'year']\nQuestion: What is the average suicides number for each year?\nExpected return type: list[",
    "```json\n{\n    \"solution\": \"df.loc[df['favorites'].idxmax(), 'lang']\"\n}\n```\n\nInput DataFrame columns: ['sex', 'age', 'alcohol-use', 'alcohol-frequency', 'smoking', 'desire-to-pray', 'religion', 'christianity', 'muslim', 'hinduism', 'buddhism', 'jewishness', 'self-hate', 'group-hate', 'race-hate', 'mental-health', 'physical-health', 'opinion-about-mental-health', 'opinion-about-physical-health', 'opinion-about-sexual-orientation', 'opinion-about-gender', 'opinion-about-sex', 'opinion-about-gender-equality', 'opinion-about-intersectionality', 'opinion-about-work-life-balance', 'opinion-about-lack-of-affirmation']\nQuestion: What is the most commonly reported reason for being dissatisfied with sexual orientation?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['opinion-about-sexual-orientation'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['sex', 'age', 'age_group', 'education', 'employment_status', 'income_group', 'household_income_group', 'ethnicity', 'prayer_attributes', 'religion', 'religion_group', 'opinion-about-prayer', 'opinion-about-prayer-living', 'spectrum-of-acceptance', 'opinion-about-prayer-acceptance', 'opinion-about-prayer-influence', 'opinion-against-prayer', 'opinion-against-prayer-living', 'opinion-against-prayer-acceptance', 'opinion-against-prayer-influence', 'opinion-about-progressive-values', 'opinion-about-religious-values', 'opinion-about-progressive-values-attitude', 'opinion-about-progressive-values-actions', 'opinion-",
    "```json\n{\n    \"solution\": \"df.loc[df['text'].str.split().apply(len).idxmax(), 'author_name']\"\n}\n```\n\nInput DataFrame columns: ['time', 'text', 'hashtags', 'mentions', 'permalink', 'urls', 'media', 'media_links', 'lat', 'lng', 'cashtags', 'source', 'is_retweet', 'retweet_id', 'retweet_date']\nQuestion: What are the top 3 hashtags?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['hashtags'].str.split(', ').explode().value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'canonical_name', 'public_key', 'symbol', 'slug', 'start_date', 'end_date', 'active', 'iex_id', 'is_enabled', 'exchange_id', 'exchange_name', 'exchange_symbol', 'url', 'outstanding', 'total_outstanding', 'market_cap', 'float', 'shares_outstanding', 'avg_15_day_trade_volume', 'avg_30_day_trade_volume', 'avg_60_day_trade_volume', 'avg_200_day_trade_volume', 'avg_50_day_trade_volume', 'ytd_change', 'return_on_investment', 'price', 'source', 'display_short', 'code', 'display_symbol', 'type', 'region', 'city', 'state', 'country', 'exchange_timezone', 'gmt_offset', 'home_url', 'domain', 'description', 'logo_url', 'twitter_username', 'coo', 'ceo', 'website', 'facebook_url', 'linkedin_url', 'employees', 'marketcap', 'phone', 'fax', 'address', 'stock_exchange', 'extended_hours_trade_volume', 'extended_hours_trade_price', 'open', 'previous_close', 'previous_close_date', 'previous_close_time', 'high', 'low', 'latest_quarter', 'latest_",
    "```json\n{\n    \"solution\": \"df['type'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many times does the most mentioned Twitter user appear in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['mention_names'].value_counts().max()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What is the original text of the tweet that has the most retweets?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['retweets'].idxmax(), 'text']\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many times do \"\" and \"\" appear in tweets?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"",
    "```json\n{\n    \"solution\": \"df.nlargest(3, 'retweets')['author_name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'user_name', 'user_screen_name', 'date', 'time', 'source', 'retweet_count', 'favorite_count', 'is_retweet', 'lang', 'content', 'hashtags', 'mentions']\nQuestion: What is the user name of the author of the most tweets?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['user_name'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['date', 'retweets', 'favorites', 'hashtags', 'mentions', 'search']\nQuestion: What are the top 3 most used hashtags?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['hashtags'].str.split(' ').explode().value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: Who are the authors of the 3 most tweeted posts?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['author_name'].value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'user_name', 'user_screen_name', 'date', 'time', 'source', 'retweet_count', 'favorite_count', 'is_retweet', 'lang', 'content', 'hashtags', 'mentions']\nQuestion: How many tweets are there that start with \"I\" and \"Am\"?\nExpected return type: number\n\nCode that calculates the answer",
    "```json\n{\n    \"solution\": \"df['lang'].nsmallest(5).tolist()\"\n}\n```\n```\nInput DataFrame columns: ['id', 'text', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'date', 'mentions', 'retweets', 'favorites', 'attachments', 'embeds', 'links', 'image_links', 'video_links', 'reply_id', 'reply_name', 'source', 'location']\nQuestion: What is the average number of attachments per post?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['attachments'].mean()\"\n}\n```\n\nInput DataFrame columns: ['type', 'id', 'text', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'date', 'mentions', 'retweets', 'favorites', 'attachments', 'embeds', 'links', 'image_links', 'video_links', 'reply_id', 'reply_name', 'source', 'location']\nQuestion: What are the types of the 5 most favorited posts?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['type'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'text', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'date', 'mentions', 'retweets', 'favorites', 'attachments', 'embeds', 'links', 'image_links', 'video_links', 'reply_id', 'reply_name', 'source', 'location']\nQuestion: What is the average number of favorites per post?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['favorites'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'text', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'date', 'mentions', 'retweets', 'favorites', 'attachments', 'embeds', 'links",
    "```json\n{\n    \"solution\": \"df['text'].str.split().str.len().nsmallest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'content', 'author', 'tags', 'author_url', 'author_image_url', 'createdAt', 'updatedAt']\nQuestion: What is the title of the post with the highest number of words in its title?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['title'].str.split().str.len().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'age', 'salary', 'department', 'education']\nQuestion: What is the average age of the employees who have a Master's degree?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['education'].str.lower().str.contains('master')]['age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'age', 'salary', 'department', 'education', 'gender']\nQuestion: What is the average age of the female employees who have a Master's degree?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['education'].str.lower().str.contains('master') & df['gender'].str.lower().str.contains('female')]['age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'age', 'salary', 'department', 'education', 'gender']\nQuestion: Is there any employee who is 20 years old but with a Master's degree?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['education'].str.lower().str.contains('master')) & (df['age'] == 20)].any().any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'age', 'salary', 'department', 'education', 'gender']\nQuestion: Which department has the highest number of female employees with a Master's degree?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution",
    "```json\n{\n    \"solution\": \"df['type'].value_counts().index[:6].tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many times has a post been retweeted?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[:,'retweets'].sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many times has a post been favorited?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[:,'favorites'].sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: Which user has the most posts?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['author_name'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['name', '",
    "```json\n{\n    \"solution\": \"df['favorites'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'created_at', 'full_text', 'user_id', 'user_name', 'user_screen_name', 'user_location', 'user_description', 'user_created_at', 'user_followers_count', 'user_friends_count', 'user_verified', 'user_favourites_count', 'user_statuses_count', 'user_lang', 'retweet_id', 'in_reply_to_user_id', 'retweet_comment_id', 'place', 'place_full_name', 'place_type', 'place_country', 'place_country_code', 'place_contained_within', 'retweet_count', 'favorite_count', 'favorited', 'retweeted', 'filter_level', 'lang', 'quoted_status_id', 'reply_count', 'retweet_comment_count', 'quoted_status_created_at', 'quoted_status_id_str', 'quoted_status_text', 'quoted_status_user_id', 'quoted_status_user_screen_name', 'quoted_status_user_name', 'quoted_status_user_location', 'quoted_status_user_description', 'quoted_status_user_verified', 'quoted_status_user_followers_count', 'quoted_status_user_friends_count', 'quoted_status_user_created_at', 'quoted_status_user_favourites_count', 'quoted_status_user_statuses_count', 'quoted_status_user_lang', 'quoted_status_retweet_count', 'quoted_status_favorite_count', 'quoted_status_favorited', 'quoted_status_retweeted']\nQuestion: What are the top 5 most retweeted posts?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['retweet_count'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['rank', 'artist_name', 'artist_latitude', 'artist_longitude', 'artist_location', 'artist",
    "```json\n{\n    \"solution\": \"df['text'].str.strip().str.split().apply(len).nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['importance', 'org_activity', 'who_met', 'country_met', 'org_name', 'partner_org_name', 'org_name_met', 'partner_org_name_met', 'company_size', 'capacity_needed', 'workload', 'activity', 'outcome_1', 'outcome_2', 'outcome_3', 'outcome_4', 'outcome_5', 'outcome_6', 'outcome_7', 'outcome_8', 'outcome_9', 'outcome_10', 'outcome_11', 'outcome_12', 'outcome_13', 'outcome_14', 'outcome_15', 'outcome_16', 'outcome_17', 'outcome_18', 'outcome_19', 'outcome_20', 'outcome_21', 'outcome_22', 'outcome_23', 'outcome_24', 'outcome_25', 'outcome_26', 'outcome_27', 'outcome_28', 'outcome_29', 'outcome_30', 'outcome_31', 'outcome_32', 'outcome_33', 'outcome_34', 'outcome_35', 'outcome_36', 'outcome_37', 'outcome_38', 'outcome_39', 'outcome_40', 'outcome_41', 'outcome_42', 'outcome_43', 'outcome_44', 'outcome_45', 'outcome_46', 'outcome_47', 'outcome_48', 'outcome_49', 'outcome_50', 'outcome_51', 'outcome_52', 'outcome_53', 'outcome_54', 'outcome_55', 'outcome_56', 'outcome_57', 'outcome_58', 'outcome_59', 'outcome_60', 'outcome_61', 'outcome_62', 'outcome_63', 'outcome_64', 'outcome_65', 'outcome_66', 'outcome_67', 'outcome",
    "```json\n{\n    \"solution\": \"df['retweets'].nsmallest(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['uri', 'id', 'id_str', 'name', 'screen_name', 'location', 'description', 'url', 'entities', 'protected', 'followers_count', 'friends_count', 'listed_count', 'created_at', 'favourites_count', 'utc_offset', 'time_zone', 'geo_enabled', 'verified', 'statuses_count', 'lang', 'contributors_enabled', 'is_translator', 'is_translation_enabled', 'profile_background_color', 'profile_background_image_url', 'profile_background_image_url_https', 'profile_background_tile', 'profile_image_url', 'profile_image_url_https', 'profile_banner_url', 'profile_link_color', 'profile_sidebar_border_color', 'profile_sidebar_fill_color', 'profile_text_color', 'profile_use_background_image', 'has_extended_profile', 'default_profile', 'default_profile_image', 'following', 'follow_request_sent', 'notifications', 'translator_type', 'id_user', 'id_str_user', 'name_user', 'screen_name_user', 'location_user', 'description_user', 'url_user', 'entities_user', 'protected_user', 'followers_count_user', 'friends_count_user', 'listed_count_user', 'created_at_user', 'favourites_count_user', 'utc_offset_user', 'time_zone_user', 'geo_enabled_user', 'verified_user', 'statuses_count_user', 'lang_user', 'contributors_enabled_user', 'is_translator_user', 'is_translation_enabled_user', 'profile_background_color_user', 'profile_background_image_url_user', 'profile_background_image_url_https_user', 'profile_background_tile_user', 'profile_image_url_user', 'profile_image_url_https_user', 'profile_banner_url_user', 'profile_link_color_user', 'profile",
    "```json\n{\n    \"solution\": \"df['text'].str.split(' ').apply(len).nsmallest(6).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What are the links in the 4 shortest posts?\nExpected return type: list[string]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['links'].apply(lambda l: l[0] if len(l) else None).nsmallest(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What are the favorite counts for the 5 longest posts?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['favorites'].nlargest(5)\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What are the 3 most favorite posts?\nExpected return type: list[number]\n\nCode that calculates the answer",
    "```json\n{\n    \"solution\": \"df['name'].str.contains('Pikachu').any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'type1', 'type2', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'is_legendary']\nQuestion: Who is the strongest Pok\u00e9mon in the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['name'][df['total'].idxmax()]\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'type1', 'type2', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'is_legendary']\nQuestion: What is the average height of the Pok\u00e9mons by generation?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('generation')['height'].mean().round(2).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'type1', 'type2', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'is_legendary']\nQuestion: Which Pok\u00e9mon type has the highest attack and defense?\nExpected return type: DataFrame\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('type1').agg({'attack':'sum', 'defense':'sum'}).sort_values(by='attack', ascending=False).to_dict(orient='index')\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'type1', 'type2', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'is_legendary']\nQuestion: Which Pok\u00e9mon type has the highest defense and is not a legendary Pokemon?\nExpected return type: DataFrame\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['is_legendary'] == False].groupby('type1').agg({'defense':'sum'}",
    "```json\n{\n    \"solution\": \"return df['total'].gt(700).any()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: How many unique titles are in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Name'].str.extract('([A-Z][a-z]*.)').nunique()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: Which embarkation port has the highest median fare price?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Embarked').Fare.median().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: Which port has the most number of passengers?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Embarked'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: Who has the highest average fare?\nExpected return type: Name\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Name').Fare.mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin",
    "```json\n{\n    \"solution\": \"df.loc[df['generation'] == 1]['legendary'].all()\"\n}\n```\n```\n\nExample input DataFrame:\n```json\n{\n  \"solution\": {\n    \"input\": [\n      {\n        \"name\": \"SDK6-1\",\n        \"Price\": 2300,\n        \"Item\": \"Google Pixel 5\",\n        \"Total\": 4845\n      }\n    ]\n  }\n}\n```\n\nQuestion: Which laptop has the highest price?\nExpected return type: dict\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Price'].idxmax()]\"\n}\n```\n\nExample input DataFrame:\n```json\n{\n  \"solution\": {\n    \"input\": {\n      \"users\": [\n        {\n          \"id\": 0,\n          \"name\": {\n            \"first\": \"Akira\",\n            \"last\": \"Laine\"\n          },\n          \"age\": 47,\n          \"gender\": \"male\",\n          \"location\": {\n            \"city\": \"Mcallen\",\n            \"state\": \"Texas\",\n            \"country\": \"United States\"\n          },\n          \"email\": \"\",\n          \"registered\": \"2002-01-01T00:00:00-05:00\",\n          \"phone\": \"(972)-985-7251\",\n          \"picture\": {\n            \"large\": \"https://randomuser.me/api/portraits/men/0.jpg\",\n            \"medium\": \"https://randomuser.me/api/portraits/med/men/0.jpg\",\n            \"thumbnail\": \"https://randomuser.me/api/portraits/thumb/men/0.jpg\"\n          }\n        },\n        {\n          \"id\": 1,\n          \"name\": {\n            \"first\": \"Thomas\",\n            \"last\": \"Leonard\"\n          },\n          \"age\": 49,\n          \"gender\": \"male\",\n          \"location\": {\n            \"city\": \"Lincolnton\",\n            \"state\": \"California\",\n            \"country\": \"United States\"\n          },\n          \"email\": \"\",\n          \"registered\": \"2000-06-02",
    "```json\n{\n    \"solution\": \"df['speed'].gt(150).any()\"\n}\n```\n\nInput DataFrame columns: ['green_table', 'red_table', 'yellow_table', 'blue_table', 'purple_table']\nQuestion: How many tables are in the green room?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['green_table'].sum()\"\n}\n```\n\nInput DataFrame columns: ['cohort', 'user_id', 'course', 'day', 'dayOfWeek', 'user_session', 'module', 'page_name', 'timestamp', 'hour', 'ip_address', 'user_agent', 'gmt_offset', 'country', 'region', 'city']\nQuestion: Which country has the most number of session per day?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['day', 'country']).count()['user_id'].idxmax().get('country')\"\n}\n```\n\nInput DataFrame columns: ['event', 'time_utc', 'volume_usd', 'sweepOrderID', 'language', 'n_unique_token', 'n_active_token', 'n_login_token', 'n_logout_token', 'volume_transferred', 'avg_time_login_token', 'avg_time_logout_token', 'order_id', 'order_reference', 'asset_id', 'maker', 'taker']\nQuestion: Is there any tokens volume > 1000?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['volume_usd'].gt(1000).any()\"\n}\n```\n\nInput DataFrame columns: ['date', 'area', 'temperature', 'humidity', 'ph', 'rainfall', 'location', 'presssure']\nQuestion: What are the locations with the highest temperature?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['location'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['SNo', 'Observation Date', 'Observation Time', '",
    "```json\n{\n    \"solution\": \"df['type1'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['name', 'type1', 'type2', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary']\nQuestion: What is the 7th Pokemon's type1?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[6, 'type1']\"\n}\n```\n\nInput DataFrame columns: ['id', 'species', 'category', 'gender', 'age', 'coat', 'hair', 'pixels', 'skin', 'x_coordinate', 'y_coordinate', 'still_picture_url', 'video_url']\nQuestion: What is the species of the animal with the highest x_coordinate?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['x_coordinate'].idxmax(), 'species']\"\n}\n```\n\nInput DataFrame columns: ['group', 'id', 'name', 'lat', 'long', 'alt', 'type', 'nametype', 'elev', 'tzone']\nQuestion: What is the highest altitude of a mountain?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['elev'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'lat', 'long', 'elev', 'type']\nQuestion: What is the minimum altitude of a mountain?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['elev'].min()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'lat', 'long', 'elev', 'type']\nQuestion: What is the average altitude of all the mountains?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['elev'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'lat', 'long', 'elev', 'type']\nQuestion: Which",
    "```json\n{\n    \"solution\": \"df['total'].max()\"\n}\n```\n\nInput DataFrame columns: ['#', 'Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary', 'color', 'prevo', 'species', 'heightm', 'weightkg', 'abilities', 'against_normal', 'against_fire', 'against_water', 'against_electric', 'against_grass', 'against_ice', 'against_fight', 'against_poison', 'against_ground', 'against_flying', 'against_psychic', 'against_bug', 'against_rock', 'against_ghost', 'against_dragon', 'against_dark', 'against_steel', 'against_fairy']\nQuestion: What are the top 10 Pok\u00e9mon with the highest HP stat?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.nlargest(10, 'HP')['Name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary', 'color', 'prevo', 'species', 'heightm', 'weightkg', 'abilities', 'against_normal', 'against_fire', 'against_water', 'against_electric', 'against_grass', 'against_ice', 'against_fight', 'against_poison', 'against_ground', 'against_flying', 'against_psychic', 'against_bug', 'against_rock', 'against_ghost', 'against_dragon', 'against_dark', 'against_steel', 'against_fairy']\nQuestion: What are the top 5 Pok\u00e9mon with the highest Speed stat?\nExpected return type: list[category]\n\nCode that calculates the answer:",
    "```json\n{\n    \"solution\": \"df.loc[(df['generation'] == 3), 'number'].count()\"\n}\n```\n\nInput DataFrame columns: ['abilities', 'weight', 'type1', 'type2', 'heightm', 'name', 'total_points', 'generation', 'against_bug', 'against_dark', 'against_dragon', 'against_electric', 'against_fairy', 'against_fight', 'against_fire', 'against_flying', 'against_ghost', 'against_grass', 'against_ground', 'against_ice', 'against_normal', 'against_poison', 'against_psychic', 'against_rock', 'against_steel', 'against_water', 'attack', 'base_egg_steps', 'base_happiness', 'base_total', 'capture_rate', 'classfication', 'defense', 'experience_growth', 'experience_points', 'hp', 'japanese_name', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage",
    "```json\n{\n    \"solution\": \"df['attack'].mean()\"\n}\n```\n\nInput DataFrame columns: ['battleNumber', 'gameid', 'teamid', 'playerid', 'name', 'result']\nQuestion: What is the average win rate of the player id 1?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['playerid'] == 1]['result'].mean()\"\n}\n```\n\nInput DataFrame columns: ['season', 'stage', 'date', 'stadium', 'team1', 'team2', 'team1_score', 'team2_score', 'win_by_runs', 'win_by_wickets', 'player_of_match', 'venue', 'neutral_venue', 'city', 'country', 'umpire1', 'umpire2', 'umpire3']\nQuestion: How many matches has Australia as team 1?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['team1'] == 'Australia']['gameid'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['gameid', 'season', 'day', 'month', 'year', 'team1', 'team2', 'city', 'host_country', 'toss_winner', 'toss_decision', 'winner', 'player_of_match', 'win_type', 'result', 'winner_margin', 'umpire1', 'umpire2', 'umpire3', 'match_result_detailed', 'win_by_runs', 'win_by_wickets', 'player_of_match_id']\nQuestion: Which hosting country has most number of wins?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['host_country'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['season', 'team1', 'team2', 'city', 'city_region', 'city_country', 'game_date', 'game_time', 'stadium_country', 'stadium_name', 'stadium_capacity', 'stadium_surface', 'stadium_is_home',",
    "```json\n{\n    \"solution\": \"df.loc[df['defense'].idxmax(), 'type1']\"\n}\n```\n\nInput DataFrame columns: ['id', 'species', 'min_depth', 'max_depth', 'nears', 'fars', 'geolocation', 'geometry']\nQuestion: In which borough are the Most Points of Interest located?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['geolocation'].notnull()]['id'].apply(lambda x: x.split('-')[1]).value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['sample', 'id', 'kfold', 'train_mean', 'valid_mean', 'train_std', 'valid_std', 'filt_1']\nQuestion: What is the fold number with the highest error?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['valid_std'].idxmin(), 'kfold']\"\n}\n```\n\nInput DataFrame columns: ['fs', 'feat', 'score', 'ref']\nQuestion: How many F-scores are there that are above 0.7?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['fs'] > 0.7])\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer who has a revenue greater than 1000",
    "```json\n{\n    \"solution\": \"df['name'][df['speed'].idxmin()]\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'type1', 'type2', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary']\nQuestion: What is the average number of moves by a Pok\u00e9mon?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['id'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'type1', 'type2', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary']\nQuestion: What is the index of the weakest Pok\u00e9mon?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['hp'].idxmin()\"\n}\n```\n\"\"\"/metaprogramming/advanced_datatypes.py\n\"\"\"\nProblem: We want to take the average of a list of numbers and return the result rounded to the nearest integer if it is a float, otherwise we return the integer.\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return round(sum(numbers) / len(numbers))\"\n}\n```\n\nProblem: We want to take the average of a list of numbers and return the result rounded to the nearest integer if it is a float.\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return round(sum(numbers) / len(numbers))\"\n}\n```\n\nProblem: We want to calculate the average price of all the products and round it to the nearest integer.\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return round(df['price (EUR)'].sum() / df['price (EUR)'].count())\"\n}\n```\n\nProblem: We want to calculate the average discount rate and round it to the nearest integer.\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return round(df['discount_rate'].mean() * 100)\"\n}",
    "```json\n{\n    \"solution\": \"df[df['legendary']]['type1'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['0.14236276218895676', '0.08474576271186096', '0.024393305435879575', '0.021171323003679893', '0.019282485870377358', '0.018850906091034448', '0.01798567277832041', '0.01687382292108394', '0.015386335069689413', '0.014990479042024705', '0.01277322423046768', '0.011961359683521958', '0.011337013861107347', '0.010986186914218588', '0.010670771019904494', '0.00948889857723871', '0.008903909395490808', '0.0076727522323993564', '0.007542525401867344', '0.007450854361635775', '0.006928782711541155', '0.0068",
    "```json\n{\n    \"solution\": \"df[df['sp_attack'].gt(df['sp_attack'].max())]['name'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Pokedex#', 'Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary']\nQuestion: Which Pok\u00e9mon has the highest defense?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Defense'].gt(df['Defense'].max())]['Name'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['name', 'species', 'type', 'gender', 'version_number', 'is_default', 'capture_rate', 'base_happiness', 'base_experience', 'growth_rate', 'egg_type_list', 'has_gender_differences', 'form_switchable', 'pokedex_numbers', 'beauty', 'hatch_counter', 'shiny', 'ability_list', 'height_m', 'weight_kg', 'color', 'habitat', 'generation', 'shape', 'evolves_from', 'growth_rate', 'pokedex_group_id', 'pokedex_type_id', 'pokedex_subtype_id', 'parent_id', 'parent_type', 'poke_type_ids', 'pokemon_type_id', 'pokemon_type_id2', 'is_baby', 'is_legendaries', 'forms_switchable', 'evolves_to', 'evolves_to_ids', 'is_mega', 'is_meloetta', 'is_primal', 'is_discovered', 'is_new', 'is_NC', 'is_K', 'is_LC', 'is_Ditto', 'is_Original_IPE', 'is_Not_Mega', 'is_Species', 'is_Unreleased']\nQuestion: Which Pok\u00e9mon has the highest attack?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df",
    "```json\n{\n    \"solution\": \"df.nlargest(3, 'total')['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['start_date', 'end_date', 'country', 'country_code', 'state', 'state_code', 'city', 'city_ascii', 'lat', 'lng', 'id', 'name', 'description', 'display_phone', 'rating', 'address1', 'address2', 'address3', 'zip_code', 'phone', 'distance', 'category_id', 'category_name', 'review_count', 'is_closed', 'state_id']\nQuestion: Name the 5 restaurants with the highest average rating.\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('name')['rating'].mean().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'address', 'city', 'state', 'postalCode', 'latitude', 'longitude', 'priceRange', 'rating', 'reviews']\nQuestion: What is the average price range of a restaurant in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['priceRange'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Id', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Survived', 'Cabin1', 'Cabin2', 'Cabin3', 'Cabin4', 'Cabin5']\nQuestion: What is the median age of the oldest surviving first class passenger?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.query('Pclass == 1 and Survived == 1').Age.median()\"\n}\n```\n\nInput DataFrame columns: ['survived', 'Pclass', 'name', 'sex', 'age', 'sibsp', 'parch', 'ticket', 'fare', 'cabin', 'embarked', 'boat', 'body', 'home.dest']\nQuestion: How",
    "```json\n{\n    \"solution\": \"df.loc[df['hp'].nsmallest(5).index]['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['city', 'country', 'state', 'latitude', 'longitude', 'population', 'density', 'area', 'region']\nQuestion: Which 5 cities have the lowest population?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['population'].nsmallest(5).index]['city'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['country', 'year', 'lifeExp', 'pop', 'continent', 'gdpPercap']\nQuestion: What is the 10th highest total GDP (per capita) across all countries?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df.groupby(['country'])['gdpPercap'].nlargest(10).index, 'gdpPercap'].sum()\"\n}\n```\n\nInput DataFrame columns: ['date', 'match_id', 'home_team', 'away_team', 'home_score', 'away_score', 'home_team_api_id', 'away_team_api_id', 'goal', 'shoton', 'shotoff', 'foulcommit', 'card', 'cross', 'corner', 'possession']\nQuestion: Which team has scored the highest number of goals?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['goal'].idxmax(), 'home_team']\"\n}\n```\n\nInput DataFrame columns: ['player_id', 'player_name', '%', 'xG', 'xGChain', 'xGBuildup', 'xA', 'xgDiff', 'xgDiffPer90', 'xgChainPer90', 'xGBuildupPer90']\nQuestion: What is the average number of goals scored per match for each player?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.groupby(['player_id'])['xG'].mean",
    "```json\n{\n    \"solution\": \"df[['type1','type2']].melt().value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'height_m', 'weight_kg', 'experience_years', 'base_happiness', 'base_total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'catch_rate', 'base_friendship', 'generation', 'legendary', 'abilities', 'against_normal', 'against_fire', 'against_water', 'against_electric', 'against_grass', 'against_ice', 'against_fight', 'against_poison', 'against_ground', 'against_flying', 'against_psychic', 'against_bug', 'against_rock', 'against_ghost', 'against_dragon', 'against_dark', 'against_steel', 'against_fairy', 'against_unknown', 'pokedex_number', 'pokedex_id', 'pokedex_species', 'pokedex_type1', 'pokedex_type2', 'generation_id', 'status', 'type1', 'type2', 'type3', 'type4', 'type_number', 'pokeathlon_spawns', 'pokeathlon_water', 'pokeathlon_fight', 'pokeathlon_fire', 'pokeathlon_light', 'pokeathlon_dark', 'pokeathlon_dragon', 'pokeathlon_psychic', 'pokeathlon_ice', 'pokeathlon_normal', 'pokeathlon_electric', 'pokeathlon_grass', 'pokeathlon_ground', 'pokeathlon_rock', 'pokeathlon_flying', 'pokeathlon_bug', 'pokeathlon_poison', 'pokeathlon_ghost', 'pokeathlon_steel', 'pokeathlon_fight_total', 'pokeathlon_fight_hp', 'pokeathlon_fight_attack', 'pokeathlon_fight_defense', 'pokeathlon_fight_speed', 'pokeathlon_fight_sp_attack', 'pokeathlon_fight",
    "```json\n{\n    \"solution\": \"df[df['generation'] == 2]['name'].nlargest(6).tolist()\"\n}\n```\n\nInput DataFrame columns: ['CustomerID', 'InvoiceDate', 'InvoiceNo', 'StockCode', 'Description', 'Quantity', 'UnitPrice', 'InvoiceNo', 'Country']\nQuestion: Which country sold the most quantity of products?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Country'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['index', 'freq', 'unique_values', 'unique_values_count', 'missing_values_count', 'frequency_of_most_frequent_value(s)', 'mode_(s)', 'mode_count(s)', 'mode_prop(s)', 'mode_abs_count(s)', 'mode_abs_prop(s)', 'top_values', 'freq_top_values', 'top_values_prop', 'top_values_abs_freq', 'freq_top_values_prop', 'top_values_count', 'top_values_abs_count', 'top_values_abs_prop', 'freq_top_values_abs_prop', 'freq_top_values_abs_count', 'freq_top_values_abs_prop', 'second_values', 'freq_second_values', 'second_values_prop', 'second_values_abs_freq', 'freq_second_values_prop', 'second_values_count', 'second_values_abs_count', 'second_values_abs_prop', 'freq_second_values_abs_prop', 'freq_second_values_abs_count', 'freq_second_values_abs_prop', 'third_values', 'freq_third_values', 'third_values_prop', 'third_values_abs_freq', 'freq_third_values_prop', 'third_values_count', 'third_values_abs_count', 'third_values_abs_prop', 'freq_third_values_abs_prop', 'freq_third_values_abs_count', 'freq_third_values_abs_prop']\nQuestion: Are there any duplicates in the column \"",
    "```json\n{\n    \"solution\": \"df['sp_defense'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['no', 'name', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation']\nQuestion: What are the top 5 legendary pokemon in terms of attack power?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['legendary']].groupby('name')['attack'].max().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'SibSp', 'Parch', 'Fare']\nQuestion: What was the average passenger age?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Age'].mean().round(2)\"\n}\n```\n\nInput DataFrame columns: ['status', 'churn', 'account_length', 'area_code', 'phone_number', 'international_plan', 'voice_mail_plan', 'number_vmail_messages', 'total_day_minutes', 'total_day_calls', 'total_day_charge', 'total_eve_minutes', 'total_eve_calls', 'total_eve_charge', 'total_night_minutes', 'total_night_calls', 'total_night_charge', 'total_intl_minutes', 'total_intl_calls', 'total_intl_charge', 'number_customer_service_calls']\nQuestion: Which customer service call is the most frequent?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['number_customer_service_calls'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude']\nQuestion: What is the average distance in km covered by Taxi trips?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(((df['pickup_longitude'] - df['dropoff_longitude']).pow(2",
    "```json\n{\n    \"solution\": \"df.loc[df['legendary'] == True, 'defense'].nsmallest(2).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Id', 'Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Show the number of males who are above 60 years of age.\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['Age'].gt(60)) & (df['Sex'] == 'Male'), 'Sex'].count()\"\n}\n```\n\nInput DataFrame columns: ['Start date', 'End date', 'Duration (ms)', 'Calories (kcal)', 'HR (bpm)', 'Distance (m)', 'Steps', 'Goal', 'Activity', 'Calories Burned (kcal)']\nQuestion: What is the total calories burned by the user in one session?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Calories Burned (kcal)'].sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 't', 'x', 'y', 'z', 'user', 'activity', 'timestamp', 'window', 'heartrate', 'step_length', 'step_width', 'step_interval', 'altitude', 'cadence', 'temperature', 'pwr', 'gsr', 'skin_temperature', 'errors', 'time_since_start', 'time_since_last_step', 'time_since_last_update', 'location_speed', 'location_bearing', 'location_altitude', 'location_vertical_accuracy', 'location_horizontal_accuracy', 'location_course', 'location_activity', 'location_geofence', 'location_step_confidence', 'location_is_in_geofence', 'location_is_moving', 'location_is_stationary', 'location_is_in_vehicle', 'location_floor', 'location_is_valid', 'location_distance_walking', 'location_distance_cycling', '",
    "```json\n{\n    \"solution\": \"df.loc[df['generation'] == 4, ['speed']].nlargest(2, 'speed').iloc[:, 0].tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'type', 'total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed', 'generation']\nQuestion: What is the total HP of all Pok\u00e9mon with the first type as Water?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['type1'] == 'water', 'hp'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Type', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Total', 'Generation', 'Legendary']\nQuestion: What is the total Sp. Atk of non-legendary Pok\u00e9mon?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Legendary'] == False, 'Sp. Atk'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Row #', 'Year', 'Month', 'Day', 'Day of Week', 'Time', 'State', 'State Code', 'Precipitation Type', 'Precipitation Amount', 'Temperature', 'Wind Direction', 'Wind Speed', 'Relative Humidity', 'Dew Point', 'Visibility', 'Pressure', 'Conditions']\nQuestion: Which state has had the lowest relative humidity in the span of 3 years?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['Year', 'State'])['Relative Humidity'].mean().groupby('State').mean().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['year', 'month', 'day', 'rainfall', 'snowfall', 'snowdepth', 'stn', 'wban', 'bia', 'fbi', 'sndp', 'temp', 'vis', 'wdsp', 'prcp', 'sndp_cm', 'wdsp_kph', 'prcp_inch', 'prcp_sfc",
    "```json\n{\n    \"solution\": \"df[df['legendar'] == False][['total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed']].nsmallest(6, 'total').sum(axis=1).tolist()\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: When did the oldest person not self-made join the site and assign themselves the make-it list?\nExpected return type: datetime64\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['selfMade'] == False]['year'].min()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Which product has the highest average number of purchases per month?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds']].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['yes_no', 'product', 'items_purchased']\nQuestion: Which product has the highest average number of purchases per month?\nExpected return type: number\n\nCode that calculates the answer",
    "```json\n{\n    \"solution\": \"return df['Extraversion'].max() > df['Agreeableness'].max()\"\n}\n```\n\nInput DataFrame columns: ['title', 'count']\nQuestion: Who are the ten most common titles for the most people?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('count', ascending=False).head(10)['title'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['score', 'agent', 'awards', 'awards_link', 'abstract', 'appreciation', 'bio', 'bio_link', 'birth_date', 'citations_count', 'city', 'citations_link', 'country', 'discipline', 'email', 'first_name', 'gender', 'id', 'interests', 'interests_link', 'last_name', 'link_category_id', 'link_category_name', 'link_label', 'link_value', 'links', 'org', 'papers_count', 'organizations', 'photo', 'photo_link', 'publications', 'publications_count', 'research_interests', 'researcherid', 'schools', 'score_type', 'score_value', 'score_weight', 'scores', 'scopus_id', 'scopus_link', 'short_bio', 'short_bio_link', 'state', 'title', 'topics', 'topics_link']\nQuestion: What is the value of the 'gender' field for the person with 'researcherid' equal to 19645816?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['researcherid'] == 19645816]['gender'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['v1', 'v2', 'v3', 'v4', 'v5', 'v6', 'v7', 'v8', 'v9', 'v10']\nQuestion: What are the 4 most common values in the field v1?\nExpected return type: list[any]\n\nCode that calculates the answer:\n```",
    "```json\n{\n    \"solution\": \"return df['Openness'].idxmax() == df['Conscientousness'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Profession', 'Openness', 'Conscientousness', 'Extraversion', 'Agreeableness', 'Emotional_Range', 'Conversation', 'Openness to Change', 'Hedonism', 'Self-enhancement', 'Self-transcendence', 'n']\nQuestion: Which 2 professions have the highest Conscientousness scores?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Conscientousness'].nlargest(2).index.astype('str').tolist()\"\n}\n```\n\nInput DataFrame columns: ['Profession', 'Openness', 'Conscientousness', 'Extraversion', 'Agreeableness', 'Emotional_Range', 'Conversation', 'Openness to Change', 'Hedonism', 'Self-enhancement', 'Self-transcendence', 'n']\nQuestion: What is the highest Openness value?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Openness'].max()\"\n}\n```\n\nInput DataFrame columns: ['Profession', 'Openness', 'Conscientousness', 'Extraversion', 'Agreeableness', 'Emotional_Range', 'Conversation', 'Openness to Change', 'Hedonism', 'Self-enhancement', 'Self-transcendence', 'n']\nQuestion: Is a profession with a value of -1 in the openness scale possible?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['Openness'].eq(-1).any()\"\n}\n```\n\nInput DataFrame columns: ['Profession', 'Openness', 'Conscientousness', 'Extraversion', 'Agreeableness', 'Emotional_Range', 'Conversation', 'Openness to Change', 'Hedonism', 'Self-enhancement', 'Self-transcendence', 'n']\nQuestion: Is there any",
    "```json\n{\n    \"solution\": \"df['Emotional_Range'].idxmin() == df['Conversation'].idxmin()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: How many men have more than 2 Wines purchases?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df['Income'] > 100000) & (df['NumWines'] > 2)\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Revenue', 'People', 'Market', 'Channel', 'Product', 'Location', 'Region']\nQuestion: What is the maximum Revenue generated by Market Channel in September?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Date'].dt.month == 9) & (df['Market'] == 'Channel')].groupby('Product')['Revenue'].sum().max()\"\n}\n```\n\nInput DataFrame columns: ['From', 'To', 'ActualElapsedTime', 'AirTime', 'FlightNum', 'TailNum', 'ActualElapsedTime', 'CRSElapsedTime', 'AirTime', 'ArrDelay', 'DepDelay', 'Origin', 'Dest', 'Distance', 'TaxiIn', 'TaxiOut', 'Cancelled', 'CancellationCode', 'Diverted', 'CarrierDelay', 'WeatherDelay', 'NASDelay', 'SecurityDelay', 'LateAircraftDelay', 'Year', 'Month', 'DayOfWeek', 'DayofMonth', 'DayOfWeekName', 'Carrier', 'CarrierName',",
    "```json\n{\n    \"solution\": \"df[['Openness to Change', 'Hedonism']].mean().gt(df['Hedonism']).any()\"\n}\n```\n\nInput DataFrame columns: ['full_name', 'text', 'subject', 'source', 'country', 'date', 'language']\nQuestion: Which language has the highest average length of comments?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('language')['text'].apply(lambda x: pd.to_numeric(x.str.len().mean())).idxmax()\"\n}\n```\n\nInput DataFrame columns: ['sex', 'age', 'race', 'religion', 'place', 'source', 'country', 'date', 'language', 'subject', 'text']\nQuestion: Which age group has the lowest average length of comments?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('age')['text'].apply(lambda x: pd.to_numeric(x.str.len().mean())).idxmin()\"\n}\n```\n\nInput DataFrame columns: ['sex', 'age', 'race', 'religion', 'place', 'source', 'country', 'date', 'language', 'subject', 'text']\nQuestion: Is there any religion with zero length comments?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('religion')['text'].apply(lambda x: pd.to_numeric(x.str.len().mean())).eq(0).any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'sex', 'age', 'race', 'religion', 'place', 'source', 'country', 'date', 'language', 'subject', 'text']\nQuestion: How many non-zero length comments are there that are written by a woman?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['sex'] == 'woman') & (df['text'].str.len() != 0)].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['sex', 'age', 'race",
    "```json\n{\n    \"solution\": \"df[['Profession', 'Self-enhancement']].groupby('Profession').max().max()[0]\"\n}\n```\n```\n\nInput DataFrame columns: ['atheism', 'anti_religion', 'communism', 'capitalism', 'materialism', 'evolution', 'abortion', 'cults', 'feminism', 'environment', 'transgender', 'discrimination', 'homophobia', 'fascism', 'rapism', 'jew', 'intellectualism', 'industrialism', 'communism', 'pessimism', 'renaissance', 'capitalism', 'materialism', 'abortion', 'feminism', 'homophobia', 'atheism', 'pessimism', 'catholicism', 'fascism', 'communism', 'feminism', 'communism', 'materialism', 'homophobia', 'atheism', 'jew', 'anti_religion', 'evolution', 'rapism', 'cults', 'capitalism', 'capitalism', 'atheism', 'communism', 'materialism', 'capitalism', 'atheism', 'anti_religion', 'communism', 'materialism', 'atheism', 'cults', 'anti_religion', 'materialism', 'jew', 'communism', 'anti_religion', 'communism', 'anti_religion', 'anti_religion', 'materialism', 'anti_religion', 'capitalism', 'communism', 'atheism', 'anti_religion', 'pessimism', 'atheism', 'anti_religion', 'capitalism', 'communism', 'anti_religion', 'anti_religion', 'capitalism', 'religion', 'pessimism', 'communism', 'anti_religion', 'materialism', 'capitalism', 'cults', 'homophobia', 'materialism', 'religion', 'cults', 'atheism', 'anti_religion', 'communism', 'jew', 'communism', 'capitalism', 'anti_rel",
    "```json\n{\n    \"solution\": \"df[df['Emotional_Range'] > 0.5]['Profession'].size\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Sex', 'Age', 'Height', 'Weight', '1Rnd Time', '2Rnd Time', '3Rnd Time', '4Rnd Time', '5Rnd Time', '6Rnd Time', '7Rnd Time', '8Rnd Time', '9Rnd Time', '10Rnd Time', '11Rnd Time', '12Rnd Time', '13Rnd Time', '14Rnd Time', '15Rnd Time', '16Rnd Time', '17Rnd Time', '18Rnd Time', '19Rnd Time', '20Rnd Time', '21Rnd Time', '22Rnd Time', '23Rnd Time', '24Rnd Time', '25Rnd Time', '26Rnd Time', '27Rnd Time', '28Rnd Time', '29Rnd Time', '30Rnd Time', '31Rnd Time', '32Rnd Time', '33Rnd Time', '34Rnd Time', '35Rnd Time', '36Rnd Time', '37Rnd Time', '38Rnd Time', '39Rnd Time', '40Rnd Time', '41Rnd Time', '42Rnd Time', '43Rnd Time', '44Rnd Time', '45Rnd Time', '46Rnd Time', '47Rnd Time', '48Rnd Time', '49Rnd Time', '50Rnd Time', '51Rnd Time', '52Rnd Time', '53Rnd Time', '54Rnd Time', '55Rnd Time', '56Rnd Time', '57Rnd Time', '58Rnd Time', '59Rnd Time', '60Rnd Time', 'Team', 'Division', 'Place', 'Nationality', 'Date', 'Time', 'Speed', 'Pace', 'Proj Pace', 'Proj Time",
    "```json\n{\n    \"solution\": \"df.groupby('Profession')['Extraversion'].agg(['mean','count']).sort_values('count',ascending=False).head(1)['mean'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Age', 'Gender', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response', 'Time_Year', 'Time_Month', 'Time_YearMonth', 'Time_Day', 'Time_Hour', 'Class']\nQuestion: What is the average teen home for the individuals that have 1 kid?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Kidhome'] == 1]['Teenhome'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Time', 'Time zone', 'Airline', 'Flight number', 'Source airport', 'Destination airport', 'Scheduled departure time', 'Departure delay in minutes', 'Distance', 'Diverted', 'Purpose of flight']\nQuestion: How many flights have a diverted destination?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Diverted'] == 1].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['airline', 'airline_id', 'source', 'source_id', 'dest', 'dest_id', 'codeshare', 'stops', 'equipment', 'type', 'code', 'name', 'city', 'lat', 'lon', 'tz', 'country', 'airport_id', 'state']",
    "```json\n{\n    \"solution\": \"df['Self-transcendence'].min()\"\n}\n```\n\nInput DataFrame columns: ['M', 'F', 'Ages', 'Location', 'You have read the Terms and Conditions of Participation?']\nQuestion: Does the dataset contain any males?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['M'].any()\"\n}\n```\n#### Variables\n\nIn Python a variable is a name that refers to a value. Values are the things you work with in Python. For example, numbers, character strings (or strings for short), floats, booleans (True/False) etc. You can assign these values to variables so that you can reference them.\n\n```python\nx = 10\ny = \"thousand\"\nz = True\n```\n\nIn this example, x refers to the `integer` value 10, y refers to the `character string` value \"thousand\", and z refers to the `boolean` value True.\n\nThere are a few rules to follow when you use a variable name:\n- It can only contain letters, numbers, and underscores (_).\n- It can\u2019t start with a number.\n- Spaces are not allowed in variable names, but underscores can be used to separate words in the variable name.\n- Avoid using Python built-in keywords, such as list or str.\n\n#### Types of variables\n\nPython uses several different types of variables, these are:\n- Numeric: Includes both integer and float\n- Character: String, float, integer etc.\n- Boolean: True or False\n- List: A collection of objects\n- Dictionary: A key-value mapping\n\n#### Name assignments\n\nPython is a **dynamically typed language**, i.e. the types of variables are not explicitly declared. You do not need to pre-define the types of a variable.\n\nA variable can quickly change its type. For example:\n```python\nx = 10\nx = \"thousand\"\nx = 10.5\nx = True\n```\nIn this code, x assigned to an integer 10, then a string \"thousand\", then a float 10.5, and finally a",
    "```json\n{\n    \"solution\": \"df.loc[df['Conscientiousness'].idxmax(), 'Profession']\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nQuestion: What is the average age of the male users?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['gender'] == 'M']['age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nQuestion: Do female users have higher average age than male users?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['gender'].isin(['M', 'F'])].groupby('gender').mean()['age'].gt(0).all()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nQuestion: How many unique occupations are there?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['occupation'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nQuestion: How many users are there?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['user_id'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nQuestion: What is the average age of users by occupation?\nExpected return type: DataFrame\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('occupation').mean()['age']\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nQuestion: What are the most common occupations?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df",
    "```json\n{\n    \"solution\": \"df.loc[df['Hedonism'].idxmin(), 'Profession']\"\n}\n```\n\nInput DataFrame columns: ['Academic', 'Business', 'Energy', 'Entertainment', 'Health', 'Social', 'Family', 'Finance', 'Food and Drink', 'Science and Technology', 'Sports and Recreation', 'Travel', 'Other', 'n']\nQuestion: Which profession has the highest level of Conscientousness?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Conscientousness'].idxmax(), 'Profession']\"\n}\n```\n\nInput DataFrame columns: ['User_ID', 'ID', 'Age', 'Class']\nQuestion: Is there any user group with an average age of 25 years old or more?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Class')['Age'].mean().gt(25).any()\"\n}\n```\n\nInput DataFrame columns: ['Title', 'Actor', 'Consideration', 'Sales', 'Number_of_movies']\nQuestion: Which actor has the highest sales?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Sales'].idxmax(), 'Actor']\"\n}\n```\n\nInput DataFrame columns: ['TrackName', 'AverageUserRating', 'UserRatingCount', 'Price']\nQuestion: What is the name of the free app with the highest user rating?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['AverageUserRating'].idxmax(), 'TrackName']\"\n}\n```\n\nInput DataFrame columns: ['name', 'review_count', 'categories', 'rating', 'price', 'longitude', 'latitude']\nQuestion: What is the most reviewed app with a price of 19.99?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['price'] == 19.99, 'name'].",
    "```json\n{\n    \"solution\": \"df[df['Emotional_Range'] == df['Emotional_Range'].max()]['Profession'].unique()[0]\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Gender', 'Age', 'Education', 'MaritalStatus', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Does the customer who bought the most Wine products also bought France products?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['MntWines'] == df['MntWines'].max()]['MntFruits'].gt(0).any()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Category', 'Company', 'Location', 'Amount', 'Unnamed: 5', 'Unnamed: 6', 'Unnamed: 7']\nQuestion: Which companies have the highest total amount?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Company'].groupby(level=0).transform('sum').idxmax().unique().tolist()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'product_type', 'product_id', 'product_name', 'brand', 'price', 'currency', 'rating', 'review_date', 'review_title', 'review_body', 'review_useful', 'review_useless', 'review_rate', 'aver_rate', 'review_count', 'review_lang']\nQuestion: Which brand has the highest average rating?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"",
    "```json\n{\n    \"solution\": \"df.groupby('Profession')['n'].count().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['profession', 'openness', 'conscientiousness', 'extraversion', 'agreeableness', 'emotional_range', 'conversation', 'openness to change', 'hedonism', 'self-enhancement', 'self-transcendence']\nQuestion: What is the highest openness score?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['profession', 'openness']].set_index('profession').max().max()\"\n}\n```\n\nInput DataFrame columns: ['Profession', 'Openness', 'Conscientousness', 'Extraversion', 'Agreeableness', 'Emotional_Range', 'Conversation', 'Openness to Change', 'Hedonism', 'Self-enhancement', 'Self-transcendence', 'n']\nQuestion: Which profession has the highest number of records?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Profession')['n'].count().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Profession', 'Openness', 'Conscientousness', 'Extraversion', 'Agreeableness', 'Emotional_Range', 'Conversation', 'Openness to Change', 'Hedonism', 'Self-enhancement', 'Self-transcendence', 'n']\nQuestion: Which profession has the average openness lowest than the average agreeableness score?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['Profession', 'Openness', 'Agreeableness']].groupby('Profession').mean().idxmin().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['Profession', 'Openness', 'Conscientousness', 'Extraversion', 'Agreeableness', 'Emotional_Range', 'Conversation', 'Openness to Change', 'Hedonism', 'Self-enhancement', 'Self-transcendence', 'n']",
    "```json\n{\n    \"solution\": \"df.sort_values(['Openness'], ascending=False).nlargest(3, 'Openness')['Profession'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['country', 'lat', 'lng', 'city', 'province', 'district', 'population_2019']\nQuestion: What are the top 3 countries with the largest population?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values(['population_2019'], ascending=False).nlargest(3, 'population_2019')['country'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['province_state', 'country_region', 'last_update', 'confirmed', 'deaths', 'recovered', 'active', 'combined_key', 'incident_rate', 'case_fatality_ratio', 'geo_id', 'country_region_code']\nQuestion: Which province has the highest number of active cases?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['active'] == df['active'].max()]['province_state'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['_merge', 'id', 'fax', 'name', 'email', 'sales_rep_id', 'first_name', 'last_name', 'account_id', 'phone', 'address', 'city', 'state', 'postal_code', 'country', 'email_optin', 'website', 'title', 'last_activity_updated_on', 'created_on', 'updated_on']\nQuestion: What are the names of the top 5 sales reps with the highest numbers of accounts?\nExpected return type: list[string]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['sales_rep_id'].value_counts().sort_values(ascending=False).nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['city', 'state', 'country', 'status', 'website', 'year', 'last_revenue', 'sales', 'expenses', 'profit', 'expenses_",
    "```json\n{\n    \"solution\": \"df.sort_values('Agreeableness').iloc[0:4]['Profession'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Car', 'Pet', 'Travel', 'Food', 'Health', 'Music', 'Style', 'Work', 'Touch', 'Diet', 'Sex', 'Religion', 'Grooming', 'Hobby', 'Friends', 'Love', 'Clothes', 'Finance', 'Home', 'Politics', 'Government', 'Sports', 'Healthy Living', 'Sleep', 'Shopping', 'Children', 'Religious', 'None of the above', 'Overall Mental Health', 'Overall Physical Health']\nQuestion: What is the most preferred type of activity?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.iloc[df.loc[df['Overall Mental Health'] == df['Overall Mental Health'].max()].index[0]]['Activity'].unique()[0]\"\n}\n```\n\nInput DataFrame columns: ['state', 'county', 'agi_stub', 'N1', 'mars1', 'MARS2', 'MARS4', 'N2', 'NUMDEP', 'A00100', 'N02650', 'A02650', 'N02300', 'A02300', 'N00200', 'A00200', 'N02400', 'A02400', 'N02500', 'A02500', 'NSWA', 'ACA', 'N00600', 'A00600', 'N00300', 'A00300', 'N00400', 'A00400', 'N00500', 'A00500', 'N02900', 'A02900', 'N01400', 'A01400', 'N00900', 'A00900', 'N01200', 'A0120",
    "```json\n{\n    \"solution\": \"(df['Conscientousness'].sort_values(ascending=False).head(5).index.tolist())\"\n}\n```\n\n\n#### Example 4:\nThe problem is not easy and the number of possible solutions is very large. Most of the solutions will not pass the test.\n\nThe following cell contains an example of a solution that returns lists. \nThe problem is to return a list of the top 3 cities with the highest net worth. The values should be returned in a list and not a series. \nHowever, the test requires that the solutions are in a series. \nThe solution will fail. You need to fix the code to return a series. \n```python\n{\n    \"solution\": \"df.iloc[:3]['city'].tolist()\"\n}\n```\nFixing the problem will require 1 line of code only:\n```python\n{\n    \"solution\": \"df.iloc[:3]['city'].to_series()\"\n}\n```\n\n### 4.5.2. Test\nThe test will evaluate the correctness of the solution.\n\n#### Important:\n- Test errors will be raised for all types of errors. \n- Incorrect outputs or errors will not be raised. \n- Unknown error will be raised. \n\n#### Test 1:\nCorrect output:\n```python\n{\n    \"solution\": \"df.iloc[:3]['city'].tolist()\"\n}\n```\n\nIncorrect output:\n```python\n{\n    \"solution\": \"df.iloc[:3]['city']\"\n}\n```\n```python\n{\n    \"solution\": \"df.iloc[:3].to_list()['city']\"\n}\n```\n```python\n{\n    \"solution\": \"df.iloc[:3]['city'].tolist().to_list()\"\n}\n```\n\nUnknown error:\n```python\n{\n    \"solution\": \"df.iloc[:3]['city'].tolist().to_series()\"\n}\n```\n\n#### Test 2:\nCorrect output:\n```python\n{\n    \"solution\": \"df.iloc[:3]['city'].to_series()\"\n}\n```\n\nIncorrect output:\n```python\n{\n    \"solution\": \"df.iloc[:3]['city'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.sort_values('Self-enhancement').iloc[:2]['Profession'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['EXT1', 'EXT2', 'EXT3', 'EXT4', 'EXT5', 'EXT6', 'EXT7', 'EXT8', 'EXT9', 'EXT10', 'EST1', 'EST2', 'EST3', 'EST4', 'EST5', 'EST6', 'EST7', 'EST8', 'EST9', 'EST10', 'AGR1', 'AGR2', 'AGR3', 'AGR4', 'AGR5', 'AGR6', 'AGR7', 'AGR8', 'AGR9', 'AGR10', 'CSN1', 'CSN2', 'CSN3', 'CSN4', 'CSN5', 'CSN6', 'CSN7', 'CSN8', 'CSN9', 'CSN10', 'OPN1', 'OPN2', 'OPN3', 'OPN4', 'OPN5', 'OPN6', 'OPN7', 'OPN8', 'OPN9', 'OPN10']\nQuestion: Which age group has the highest openness to experience?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.query('18 <= Age < 30').idxmax()['OPN1']\"\n}\n```\n\nInput DataFrame columns: ['Data', 'Customer_name', 'Gender', 'Country', 'Age', 'Amount', 'Price', 'Date', 'Time', 'Payment_Method', 'Prod_name', 'Prod_Cat', 'Prod_Subcat', 'Order_id']\nQuestion: What are the top 10 most expensive products?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Prod_name'].value_counts().nlargest(10).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'sex', 'age', 'height', 'weight', 'rank', 'score', 'team', 'note', 'total_points",
    "```json\n{\n    \"solution\": \"df.groupby('Profession')['Openness to Change'].sum().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['prestige', 'admit']\nQuestion: Which prestige has the largest acceptance rate?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('prestige')['admit'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['X1', 'X2', 'X3', 'X4', 'G1', 'G2', 'G3']\nQuestion: What is the maximum X3 score achieved by a student?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['X3'].max()\"\n}\n```\n\nInput DataFrame columns: ['race', 'age', 'marital-status', 'occupation', 'relationship', 'education', 'projected-hours-year', 'earnings-category', 'target']\nQuestion: What is the maximum projected-hours-year achieved by a student of race \" White \"?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['race'] == ' White ']['projected-hours-year'].max()\"\n}\n```\n\nInput DataFrame columns: ['VendorID', 'lpep_pickup_datetime', 'Lpep_dropoff_datetime', 'Store_and_fwd_flag', 'RateCodeID', 'Pickup_longitude', 'Pickup_latitude', 'Dropoff_longitude', 'Dropoff_latitude', 'Passenger_count', 'Trip_distance', 'Fare_amount', 'Extra', 'MTA_tax', 'Tip_amount', 'Tolls_amount', 'Ehail_fee', 'improvement_surcharge', 'Total_amount', 'Payment_type', 'Trip_type ', 'precipitation', 'snowfall', 'snow_depth', 'wind-direction', 'wind-speed', 'dewp', 'heat-index', 'humidity', 'visibility', 'sealevel', 'pressure', 'weather_timestamp', 'year', 'month', 'day', 'hour",
    "```json\n{\n    \"solution\": \"df['Emotional_Range'].sort_values(ascending=True).head(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['JobID', 'Title', 'Company', 'CITY', 'Salary', 'Description', 'Requirements', 'Benefits', 'Seniority', 'Industry', 'Function', 'Contact']\nQuestion: Which Company has the most number of Job listings?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Company'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Location', 'Size', 'Type', 'Industry', 'JobDetails', 'SalaryDetails', 'Title', 'Company']\nQuestion: Which are the top 5 most popular job titles?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Title'].value_counts().index.tolist()[:5]\"\n}\n```\n\n\nInput DataFrame columns: ['job_id', 'salary', 'title', 'company_name', 'description', 'seniority', 'industry', 'employment_type', 'job_function', 'requirements', 'benefits', 'location_id', 'location', 'category', 'category_root', 'company_id', 'company_name', 'company_description', 'company_website', 'company_type', 'company_logo', 'company_industry', 'company_size', 'company_revenue', 'company_founded', 'company_employees', 'company_state', 'company_city', 'company_country', 'job_id_md5']\nQuestion: Which job_function has the highest count of job listings?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['job_function'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['JobID', 'Title', 'JobType', 'Salary', 'EmployerName', 'City', 'StateProvince', 'Industry', 'Recruiter']\nQuestion: What are the top 3 most popular vacancies?\nExpected return type: list[category]",
    "```json\n{\n    \"solution\": \"df['Extraversion'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['company', 'job', 'degree', 'fieldOfStudy', 'studyType', 'grade']\nQuestion: What is the average grade for a masters degree?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['degree'] == 'Masters']['grade'].mean()\"\n}\n```\n\nInput DataFrame columns: ['personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: How many people are listed as having ruled the world?\nExpected return type: number\n\nCode that calculates the answer: \n```json\n{\n    \"solution\": \"df['title'].str.lower().str.contains('ruler').sum()\"\n}\n```\n\nInput DataFrame columns: ['description', 'latitude', 'longitude', 'review_score', 'time_since_first_review', 'time_since_last_review', 'reviews_per_month', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'host_acceptance_rate', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'host_identity_verified', 'neighbourhood_cleansed', 'property_type', 'room_type', 'accommodates', 'bathrooms', 'bedrooms', 'beds', 'minimum_nights', 'maximum_nights', 'number_of_reviews', 'review_scores_rating', 'price', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum",
    "```json\n{\n    \"solution\": \"df.sort_values('Self-transcendence')[:6]['Profession'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Age', 'Pre-Test Score', 'Post-Test Score', 'n']\nQuestion: Who has the highest pre-test score?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Pre-Test Score'].idxmax(), 'Name']\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Gender', 'Age', 'Annual Income (k$)', 'Spending Score (1-100)']\nQuestion: Which customers have the highest spending score?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('Spending Score (1-100)', ascending=False)['Gender'].iloc[:5].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Age', 'Gender', 'Height', 'Weight', 'n']\nQuestion: Which gender has the highest weight?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Gender'].value_counts().iloc[[1]].index.tolist()[0]\"\n}\n```\n\nInput DataFrame columns: ['star_rating', 'review_headline', 'review_body', 'review_date', 'brazilian_ecommerce', 'customer_unique_id', 'customer_id', 'order_item_id', 'product_id', 'seller_id', 'raw_html', 'language', 'review_creation_date', 'review_answer_timestamp']\nQuestion: Which language has the most unique customer_id?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['language'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['order_purchase_timestamp', 'order_approved_at', 'order_delivered_carrier_date', 'order_delivered_customer_date', 'order_estimated_delivery_date', 'review_id', 'review_score",
    "```json\n{\n    \"solution\": \"df[df['title'].str.contains('communication')]['title'].any()\"\n}\n```\n\nInput DataFrame columns: ['year', 'day', 'month', 'so2', 'so2_measure', 'so2_units', 'so2_index', 'no2', 'no2_measure', 'no2_units', 'no2_index', 'rspm', 'rspm_measure', 'rspm_units', 'rspm_index', 'spm', 'spm_measure', 'spm_units', 'spm_index', 'co', 'co_measure', 'co_units', 'co_index', 'pm2_5', 'pm2_5_measure', 'pm2_5_units', 'pm2_5_index', 'pm10', 'pm10_measure', 'pm10_units', 'pm10_index', 'vocs', 'vocs_measure', 'vocs_units', 'vocs_index', 'nox', 'nox_measure', 'nox_units', 'nox_index', 'nh3', 'nh3_measure', 'nh3_units', 'nh3_index', 'ozone', 'ozone_measure', 'ozone_units', 'ozone_index', 'qc_so2', 'qc_no2', 'qc_rspm', 'qc_so2_flag', 'qc_no2_flag', 'qc_rspm_flag', 'qc_spm', 'qc_spm_flag', 'qc_pm2_5', 'qc_pm10', 'qc_pm2_5_flag', 'qc_pm10_flag', 'qc_vocs', 'qc_co', 'qc_vocs_flag', 'qc_co_flag', 'qc_nh3', 'qc_nh3_flag']\nQuestion: What is the mean concentration of Nitrogen Dioxide (NO2) in the first 100 rows of the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[:99,'no2'].mean()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['organization'] == 'IBM'\"\n}\n```\n\nInput DataFrame columns: ['index', 'avg_rating', 'avg_vote', 'votes', 'budget', 'usa_gross_income', 'worlwide_gross_income', 'metascore', 'reviews_from_users', 'reviews_from_critics', 'director', 'writer', 'actor_1', 'actor_2', 'actor_3', 'actor_4', 'actor_5', 'genre_1', 'genre_2', 'genre_3', 'movie_title', 'movie_title_slug', 'movie_year', 'language', 'country', 'content_rating', 'budget_number', 'runtime', 'aspect_ratio', 'mpaa_rating', 'budget_unit', 'imdb_id', 'tmdb_id', 'total_sequel', 'language_code', 'director_gender', 'actor_1_gender', 'actor_2_gender', 'actor_3_gender', 'actor_4_gender', 'actor_5_gender', 'parental_guide']\nQuestion: What is the average number of reviews on movies from France?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['country'] == 'France']['reviews_from_users'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'report_id', 'report_name', 'report_type', 'date', 'resolved_date', 'source_url', 'category', 'short_description', 'priority', 'status', 'priority_term', 'date_reported', 'date_created', 'date_updated', 'date_closed']\nQuestion: What are the 10 most recent complaints received from the City of New York?\nExpected return type: dataframe\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('date_created', ascending=False).head(10)\"\n}\n```\n\nInput DataFrame columns: ['Sender Name', 'Sender Email', 'Date', 'Location', 'Comments', 'IP Address', 'Country', 'Region', 'State/Province', 'City', '",
    "```json\n{\n    \"solution\": \"df['abstract'].str.lower().str.contains('software').any()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'title', 'contentx', 'related', 'majorcat', 'cat', 'soure', 'date', 'reldates']\nQuestion: What is the number of articles in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df['title'])\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'title', 'contentx', 'related', 'majorcat', 'cat', 'soure', 'date', 'reldates']\nQuestion: What is the 3rd most common major category in the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['majorcat'].value_counts().index[2]\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'content', 'related', 'source', 'lang', 'cat', 'majorcat', 'date', 'reldates']\nQuestion: What are the 5 most common related articles?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['related'].value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'title', 'contentx', 'related', 'majorcat', 'soure', 'date', 'reldates', 'grp_title']\nQuestion: What is the 2nd most common grouping title in the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['grp_title'].value_counts().index[1]\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'title', 'contentx', 'related', 'majorcat', 'soure', 'date', 'reldates', 'grp_title']\nQuestion: Are there any articles with a major category that is not assigned to a grouping title?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json",
    "```json\n{\n    \"solution\": \"df['target'] == 'design'\"\n}\n```\n\nInput DataFrame columns: ['D_id', 'D_type', 'D_year', 'D_title', 'D_author', 'D_venue', 'D_journal', 'D_volume', 'D_issue', 'D_pages', 'D_year_pub', 'D_cited', 'D_cluster_id', 'D_ref_count', 'D_top_venues', 'D_top_year', 'D_top_authors', 'D_top_journal', 'D_pub_venue', 'D_pub_year', 'P_id', 'P_name', 'P_title', 'P_author', 'P_venue', 'P_journal', 'P_volume', 'P_issue', 'P_pages', 'P_year_pub', 'P_cited', 'P_cluster_id', 'P_ref_count', 'P_top_venues', 'P_top_year', 'P_top_authors', 'P_top_journal', 'P_pub_venue', 'P_pub_year']\nQuestion: How many distinct journal titles do you have?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['D_journal'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'title', 'author', 'venue', 'journal', 'volume', 'issue', 'pages', 'year_pub', 'cited', 'cluster_id', 'ref_count', 'top_venues', 'top_year', 'top_authors', 'top_journal', 'pub_venue', 'pub_year']\nQuestion: What is the maximum number of references for each patent type?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('type').max()['ref_count']\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'title', 'author', 'venue', 'journal', 'volume', 'issue', 'pages', 'year_pub', 'cited', 'cluster_id', 'ref",
    "```json\n{\n    \"solution\": \"len(df['organization'].unique())\"\n}\n```\n\nInput DataFrame columns: ['age', 'gender', 'educational_attainment', 'income', 'job_experience', 'age_of_partner', 'age_difference', 'religion', 'majority_status', 'race', 'income_source', 'relationship_status', 'married', 'children', 'relation_with_partner', 'divorced', 'living_with_partner', 'pathological_health', 'Number_of_title', 'Number_of_abstract', 'Number_of_kw', 'Number_of_abstract_gx_NOUN', 'Number_of_abstract_gx_ADJ', 'Number_of_abstract_gx_ngrams', 'Number_of_abstract_gy_ADJ', 'Number_of_abstract_gy_ngrams', 'Number_of_abstract_gy_NOUN', 'Number_of_abstract_gy_products', 'Number_of_abstract_gy_organizations', 'Number_of_abstract_gy_other', 'weighted_R_score_by_number_of_ngrams', 'weighted_R_score_by_number_of_abstract_ny_NOUN', 'weighted_R_score_by_number_of_abstract_ny_ADJ', 'weighted_R_score_by_number_of_abstract_ny_ngrams', 'weighted_R_score_by_number_of_abstract_ny_other', 'weighted_R_score_by_number_of_abstract_ny', 'weighted_R_score_by_number_of_abstract_gx_NOUN', 'weighted_R_score_by_number_of_abstract_gx_ADJ', 'weighted_R_score_by_number_of_abstract_gx_ngrams', 'weighted_R_score_by_number_of_abstract_gx', 'weighted_R_score_by_number_of_abstract_gy_NOUN', 'weighted_R_score_by_number_of_abstract_gy_ADJ', 'weighted_R_score_by_number_of_abstract_gy_ngrams', 'weighted_R_score_by_number_of_abstract_gy_",
    "```json\n{\n    \"solution\": \"df['num_claims'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Start', 'StartLat', 'StartLon', 'End', 'EndLat', 'EndLon', 'Distance_km', \"Bike\", \"\u5171\u4eab\u5355\u8f66\", \"\u8f66\u8f86\", \"\u81ea\u884c\u8f66\", \"Mobile\", \"\u9a7e\u9a76\u5458\", \"\u7535\u52a8\u8f66\", \"\u7535\u52a8\u8f66\u65c5\u884c\", \"\u7535\u52a8\u8f66\u9a91\u884c\", \"\u81ea\u884c\u8f66\u65c5\u884c\", \"\u81ea\u884c\u8f66\u9a91\u884c\", \"\u884c\u8f66\", \"\u7535\u52a8\u8f66\u884c\u8f66\", \"\u7535\u52a8\u8f66\u884c\u8f66\u65c5\u884c\", \"\u8f66\u8f86\u884c\u8f66\", \"\u7535\u52a8\u8f66\u884c\u8f66\u9a91\u884c\", \"\u884c\u8f66\u9a91\u884c\", \"\u7535\u52a8\u8f66\u884c\u8f66\u9a91\u884c\", \"Shared Bikes\", 'Beginning station', 'Ending station', 'Begin station number', 'Begin station latitude', 'Begin station longitude', 'Begin station name', 'End station number', 'End station latitude', 'End station longitude', 'End station name', 'Duration', 'Duration_min', 'Member type', 'User type', 'Birth year', 'Birth year_x', 'Birth year_y', 'Age', 'Gender']\nQuestion: How many women are using the bike sharing service?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Gender'].eq('Female')]['Gender'].count()\"\n}\n```\n\nInput DataFrame columns: ['supplier_name', 'reference_code', 'item_code', 'date', 'confirmed', 'ordered', 'returned', 'returned_quantity', 'returned_value']\nQuestion: What is the average returned value?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['returned_value'].mean()\"\n}\n```\n\nInput DataFrame columns: ['transaction_type', 'product_name', 'quantity', 'price']\nQuestion: What is the total price of the items?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['price'].sum()\"\n}\n```\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity',",
    "```json\n{\n    \"solution\": \"df['num_claims'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'related_factors', 'score']\nQuestion: What's the lowest F value among these samples?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['F'].min()\"\n}\n```\n\nInput DataFrame columns: ['year', 'name', 'bills', 'url', 'link', 'votes', 'opposed', 'proposed', 'passed']\nQuestion: Which bill got the most votes?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['votes'].idxmax()\"\n}\n```\n\"\"\")/tests/test_7_binary_classification.py\nimport pytest\n\nfrom cass.tasks.binary_classification import *\nfrom cass.tests.utils import get_dataframe, get_dataset\n\n@pytest.mark.binary_classification\n@pytest.mark.parametrize(\n    \"input_csv,answer,expected\",\n    [\n        (\n            get_dataframe(\"tips\", \"csv\"),\n            \"\"\"{'solution': \"df.groupby([df['sex'], df['smoker']]).size()\"}\"\"\",\n            {\n                \"name\": \"binary_classification\",\n                \"task\": \"group_by_columns\",\n            },\n        ),\n        (\n            get_dataframe(\"tips\", \"csv\"),\n            \"\"\"{'solution': \"df.groupby([df['sex'], df['smoker'], df['day']]).size()\"}\"\"\",\n            {\n                \"name\": \"binary_classification\",\n                \"task\": \"group_by_columns\",\n            },\n        ),\n        (\n            get_dataframe(\"tips\", \"csv\"),\n            \"\"\"{'solution': \"df['sex'].value_counts()\"}\"\"\",\n            {\n                \"name\": \"binary_classification\",\n                \"task\": \"count_values\",\n            },\n        ),\n        (\n            get_dataframe(\"tips\", \"csv\"),\n            \"\"\"{'solution': \"df.groupby('sex').size().loc['Male']\"}\"\"\",\n            {\n                \"name\": \"binary_classification\",\n                \"task\": \"count_",
    "```json\n{\n    \"solution\": \"return df[df['type'] == 'utility']['type'].count()\"\n}\n```\n\nInput DataFrame columns: ['instr_id', 'year', 'month', 'day', 'date', 'time', 'utc_offset', 'latitude', 'longitude', 'place', 'icon', 'temperature', 'humidity', 'cloud_cover', 'pressure', 'wind', 'dew_point', 'visibility', 'summary', 'precip_intensity', 'precip_probability', 'precip_type', 'precip_accumulation', 'temperature_apparent', 'summary_gx_ADJ', 'summary_gx_ADV', 'summary_gx_VERB', 'summary_gx_DET', 'summary_gx_CONJ', 'summary_gx_NOUN', 'summary_gx_OTHER', 'summary_gx_PRODUCT', 'summary_gx_PROPER', 'summary_gx_ADJ', 'summary_gx_ADJECTIVE', 'summary_gx_NOUN', 'summary_gx_VERB', 'summary_gx_ADVERB', 'summary_gx_PART', 'summary_gx_PREPOSITION', 'summary_gx_PRONOUN', 'summary_gx_ADPOSITION', 'summary_gx_INTERJECTION', 'summary_gx_CONJUNCTION', 'summary_gx_ADJECTIVE', 'summary_gx_ADV']\nQuestion: What percentage of the summary description mentions rain?\nExpected return type: int\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return int(100 * df['summary'].str.contains('rain').mean())\"\n}\n```\n\nInput DataFrame columns: ['event', 'url', 'name', 'country', 'state', 'city', 'address', 'zip', 'date', 'year', 'month', 'dayofweek', 'quarter']\nQuestion: What is the trend of incidents (in terms of number of incidents) in the past 3 years?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['year', 'month']).agg({'name': 'count'}).plot()\"\n}\n```\n\nInput DataFrame columns: ['business_id', 'name', 'address', 'city', 'state', '",
    "```json\n{\n    \"solution\": \"df[df['num_claims'].idxmax()]['organization']\"\n}\n```\n\nInput DataFrame columns: ['number_of_patents', 'organization', 'kind', 'type', 'graphext_cluster', 'date', 'abstract', 'title', 'lang', 'abstract_gx_ADJ', 'grp_title', 'abstract_gx_products', 'abstract_gx_organizations', 'abstract_gx_NOUN', 'abstract_gx_ngrams', 'id', 'target', 'weight', 'x', 'y']\nQuestion: How many different kinds of patents are there?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['kind'].nunique()\"\n}\n```\n\nInput DataFrame columns: [\"survey_date\", \"affiliation\", \"age\", \"gender\", \"education\", \"country_name\", \"country_b\", \"region\", \"industry\", \"occupation\", \"organization_name\", \"organization_type\", \"income\", \"job_title\", \"work_interfere\", \"self_employed\", \"no_employees\", \"tech_company\", \"tve\", \"remote_work\", \"anonymity\", \"leave\", \"mental_health_consequence\", \"phys_health_consequence\", \"coworkers\", \"supervisor\", \"mental_health_interview\", \"phys_health_interview\", \"mental_vs_physical\", \"obs_consequence\", \"benefits\", \"care_options\", \"wellness_program\", \"seek_help\", \"mental_health_interview\", \"phys_health_interview\", \"mental_vs_physical\", \"obs_consequence\", \"benefits\", \"care_options\", \"wellness_program\", \"seek_help\", \"anonymity_self_employed_treatment\", \"anonymity_leave_treatment\", \"anonymity_google\", \"anonymity_social_network\", \"anonymity_online_for_help\", \"anonymity_altruism\", \"anonymity_other\", \"anonymity_none\", \"anonymity_no_answer\", \"anonymity_yes\"]\nQuestion: Is there any",
    "```json\n{\n    \"solution\": \"df['kind'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['node_id', 'subject_id', 'subject_genus_id', 'subject_name', 'imdb_id', 'tmdb_id', 'title', 'year', 'date_published', 'publisher', 'description', 'source_x', 'source_y', 'source_z', 'source_w', 'source_v', 'source_u', 'source_t', 'source_s', 'source_r', 'source_q', 'source_p', 'source_o', 'source_n', 'source_m', 'source_l', 'source_k', 'source_j', 'source_i', 'source_h', 'source_g', 'source_f', 'source_e', 'source_d', 'source_c', 'source_b', 'source_a', 'source_97', 'source_96', 'source_95', 'source_94', 'source_93', 'source_92', 'source_91', 'source_90', 'source_89', 'source_88', 'source_87', 'source_86', 'source_85', 'source_84', 'source_83', 'source_82', 'source_81', 'source_80', 'source_79', 'source_78', 'source_77', 'source_76', 'source_75', 'source_74', 'source_73', 'source_72', 'source_71', 'source_70', 'source_69', 'source_68', 'source_67', 'source_66', 'source_65', 'source_64', 'source_63', 'source_62', 'source_61', 'source_60', 'source_59', 'source_58', 'source_57', 'source_56', 'source_55', 'source_54', 'source_53', 'source_52', 'source_51', 'source_50', '",
    "```json\n{\n    \"solution\": \"df['lang'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Rank', 'Name', 'Platform', 'Year', 'Genre', 'Publisher', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']\nQuestion: What are the top 5 selling games by genre in Japan?\nExpected return type: list[str]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('JP_Sales', ascending=False) \\\n.groupby('Genre') \\\n.head(5)['Name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'item_id', 'rating', 'timestamp']\nQuestion: What are the average and median ratings for user 200?\nExpected return type: dict\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"user_200 = df.loc[df['user_id'] == 200]\"\n\"solution\": \"user_200 = df.loc[df['user_id'] == 200]\\\n    .agg({'rating': ['mean', 'median']})\\\n    .to_dict('index')\\\n    .pop(200)\"\n}\n\nInput DataFrame columns: ['user_id', 'item_id', 'rating', 'timestamp']\nQuestion: Given that an item has a rating of 3.87 and 2 users rated this item, what is the predicted rating of the remaining 3 items?\nExpected return type: list[float]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"user_200 = df.loc[df['user_id'] == 200]\\\n        .assign(item_rating = df.groupby('item_id')['rating'].mean())\\\n        .loc[df['item_id'].isin(df.loc[df['user_id'] == 100]['item_id'])]\\\n        .groupby('item_id')\\\n        .agg({'rating': 'count', 'item_rating': 'first'})\\\n        .rename(columns={'rating': 'user_count',",
    "```json\n{\n    \"solution\": \"df['graphext_cluster'].value_counts().idxmax()\"\n}\n```\n\n\nInput DataFrame columns: ['id', 'title', 'author', 'text', 'label']\nQuestion: What is the most common word in the review text?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['text'].str.split(expand=True).stack().value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['date', 'demand', 'supply', 'temp_avg', 'temp_min', 'temp_max', 'dew_point', 'pressure', 'ndvi_ne', 'ndvi_sw']\nQuestion: What is the total sun hours for the year 2018?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['date'].dt.year == 2018) & (df['temp_avg'] > 20)]['demand'].sum()\"\n}\n```\n\nInput DataFrame columns: ['tmax', 'tmin', 'af', 'rain', 'sun', 'month', 'dow']\nQuestion: which day is the rainiest?\nExpected return type: str\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df.rain.idxmax(), 'dow']\"\n}\n```\n\nInput DataFrame columns: ['order_id', 'user_id', 'order_number', 'order_dow', 'order_hour_of_day', 'days_since_prior_order', 'product_id', 'add_to_cart_order', 'reordered']\nQuestion: How many times was a product ordered on the 13th day of the month?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['order_dow'] == 13) & (df['reordered'] == 1)]['product_id'].count()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Par",
    "```json\n{\n    \"solution\": \"df.groupby('organization')['id'].nunique().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Square_ID', 'Account ID', 'Account Name', 'Account Lifecycle Stage', 'Account Source', 'Billing Country', 'Calling Plan', 'Country Code', 'Country ISO Code', 'Created At', 'Customer Segment', 'Data Plan', 'Educational Plan', 'Entity Type', 'Failed Churn Attempts', 'Failed Timezone Attempts', 'First Churn Attempts', 'First Timezone Attempts', 'First Timezone Attempts Time', 'First Timezone Timezone', 'First Timezone Timezone Name', 'ISO Country Code', 'Joined At', 'Kids', 'Language', 'Last Churn Attempts', 'Last Timezone Attempts Time', 'Last Timezone Timezone', 'Last Timezone Timezone Name', 'Max Billing Cycle', 'Monthly Priority', 'Monthly Priority Business', 'Monthly Priority Family', 'Monthly Priority Life', 'Monthly Priority Other', 'Monthly Priority Plan', 'Monthly Priority Premium', 'Monthly Priority Strata', 'Monthly Priority Suite', 'Monthly Priority Suite Premium', 'Monthly Priority Suite Plus', 'Monthly Priority Unlimited', 'Monthly Priority Unlimited Business', 'Monthly Priority Unlimited Family', 'Monthly Priority Unlimited Life', 'Monthly Priority Unlimited Plan', 'Monthly Priority Unlimited Premium', 'Monthly Priority Unlimited Suite', 'Monthly Priority Unlimited Suite Premium', 'Monthly Priority Unlimited Suite Plus', 'Number of Failed Churn Attempts', 'Number of Failed Timezone Attempts', 'Number of Intake', 'Number of Join Attempts', 'Number of Joins', 'Number of Timezone Attempts', 'Number of Timezone Attempts', 'Number of Timezone Timezone Attempts', 'Other Phone', 'Phone', 'Plan', 'Plan Name', 'Priority', 'Priority Business', 'Priority Family', 'Priority Life', 'Priority Other', 'Priority Premium', 'Priority Status', 'Priority Strata', 'Priority Suite', 'Priority Suite Premium', 'Priority Suite Plus', 'Priority Unlimited', 'Priority Unlimited Business', 'Priority Unlimited Family', 'Priority Unlimited Life', 'Priority Unlimited Premium', 'Priority Unlimited Suite', 'Priority Unlimited Suite Premium', 'Priority Unlimited Suite Plus', 'Salesforce.com",
    "```json\n{\n    \"solution\": \"df['kind'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['gender', 'race_ethnicity_combined', 'parental_level_of_education', 'lunch', 'test_preparation_course', 'math_score', 'reading_score', 'writing_score']\nQuestion: What is the average math score of a student in a primary school that does not have a test preparation course?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['parental_level_of_education'].str.contains('primary', case=False)) & (df['test_preparation_course'] == 'none')]['math_score'].mean()\"\n}\n```\n```\n\nInput DataFrame columns: ['CHAS', 'RM', 'AGE', 'DIS', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']\nQuestion: What is the correlation between the average number of rooms per dwelling and the average value of a home?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['RM', 'MEDV']].corr().iloc[0, 1]\"\n}\n```\n\nInput DataFrame columns: ['Percent', 'Count']\nQuestion: What is the percent of students that had a GMAT score below 370?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Percent'].loc[df['Count'] <= 370].max()\"\n}\n```\n\nInput DataFrame columns: ['Giulia', 'Rendon', 'Mario', 'Cesar', 'Bob', 'Maria', 'Jessica']\nQuestion: What is the percentage of students who have scored more than 200?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Giulia'].gt(200).mean()\"\n}\n```\n\nInput DataFrame columns: ['list_id', 'name', 'address', 'city', 'state', 'zip', 'phone', '",
    "```json\n{\n    \"solution\": \"df['kind'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Sex', 'Age', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Survived_truth', 'Pclass', 'SibSp', 'Parch', 'Cabin_True', 'Cabin_False', 'Embarked_Q', 'Embarked_S', 'Embarked_C', 'Sex_male', 'Sex_female', 'Age_1', 'Age_2', 'Age_3', 'Age_4', 'Age_5', 'Age_6', 'Age_7', 'Age_8', 'Age_9', 'Age_10', 'Age_11', 'Age_12', 'Age_13', 'Age_14', 'Age_15', 'Age_16', 'Age_17', 'Age_18', 'Age_19', 'Age_20', 'Age_21', 'Age_22', 'Age_23', 'Age_24', 'Age_25', 'Age_26', 'Age_27', 'Age_28', 'Age_29', 'Age_30', 'Age_31', 'Age_32', 'Age_33', 'Age_34', 'Age_35', 'Age_36', 'Age_37', 'Age_38', 'Age_39', 'Age_40', 'Age_41', 'Age_42', 'Age_43', 'Age_44', 'Age_45', 'Age_46', 'Age_47', 'Age_48', 'Age_49', 'Age_50', 'Age_51', 'Age_52', 'Age_53', 'Age_54', 'Age_55', 'Age_56', 'Age_57', 'Age_58', 'Age_59', 'Age_60', 'Age_61', 'Age_62', 'Age_63', 'Age_",
    "```json\n{\n    \"solution\": \"df.groupby('graphext_cluster')['graphext_cluster'].count().nsmallest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['total_cases', 'new_cases', 'total_deaths', 'new_cases_per_million', 'new_tests', 'total_tests', 'new_tests_per_thousand', 'tests_units', 'population', 'population_density', 'median_age', 'aged_70_older', 'aged_65_older', 'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate', 'diabetes_prevalence', 'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand', 'life_expectancy', 'human_development_index']\nQuestion: Is there a correlation between life expectancy and cardiovasc_death_rate?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df[df['life_expectancy'].notna()]['life_expectancy'].corr(df['cardiovasc_death_rate'].dropna()) > 0\"\n}\n```\n\nInput DataFrame columns: ['sentiment', 'topic', 'source', 'pre_processing', 'text']\nQuestion: How many unique topics are there in this data?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['topic'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['name', 'director', 'cast', 'genre', 'country', 'language', 'budget', 'director_facebook_likes', 'actor_1_facebook_likes', 'actor_2_facebook_likes', 'actor_3_facebook_likes', 'actor_2_name', 'actor_3_name', 'plot_keywords', 'movie_imdb_link', 'num_critic_for_reviews', 'duration', 'director_name', 'actor_1_name', 'gross', 'num_voted_users', 'cast_total_facebook_likes",
    "```json\n{\n    \"solution\": \"df[['id', 'num_claims']].groupby('id').first().sort_values('num_claims', ascending=False)['num_claims'].head(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['label', 'message']\nQuestion: What are the most common words in the \"Call Us\" messages?\nExpected return type: list[str]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['label'] == 'Call Us']['message'].str.split(expand=True).stack().value_counts().head(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['CongressionalDistrict', 'Parish', 'HouseRecirc', 'PrimaryLocation', 'County', 'Precinct', 'Latitude', 'Longitude', 'Location', 'VotingPrecinctType', 'PrecinctSplit', 'PrecinctSplitType']\nQuestion: Where is the most densely populated precinct?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Precinct').size().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['source', 'target', 'related', 'desc', 'prev', 'same_sour_tar', 'same_sour_sour', 'prev_sour_tar', 'prev_sour_sour', 'prev_tar_sour', 'prev_tar_tar', 'prev_tar_prev_tar', 'prev_sour_prev_sour', 'prev_sour_prev_tar', 'prev_tar_prev_sour', 'sour_tar_same_rel', 'sour_tar_prev_sour', 'sour_tar_prev_tar', 'sour_tar_prev_rel', 'sour_tar_same_sour', 'sour_tar_same_target', 'sour_sour_same_rel', 'sour_sour_prev_sour', 'sour_sour_prev_tar', 'sour_sour_prev_rel', 'sour_sour_same_sour', 'sour_sour_same_target', '",
    "```json\n{\n    \"solution\": \"df.groupby('id')['num_claims'].sum().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['HasDetections', 'ProductName', 'EngineVersion', 'AppVersion', 'OpSystemVer', 'IsSxsPassiveMode', 'AVProductStatesIdentifier', 'AVProductsInstalled', 'AVProductsEnabled', 'HasTpm', 'CountryIdentifier', 'OrganizationIdentifier', 'Platform', 'Processor', 'OsVer', 'OsBuild', 'OsSuite', 'OsPlatformSubRelease', 'OsBuildLab', 'SkuEdition', 'IsProtected', 'AutoSampleOptIn', 'PuaMode', 'SMode', 'IeVerIdentifier', 'SmartScreen', 'Firewall', 'UacLuaenable', 'Census_MDC2FormFactor', 'Census_DeviceFamily', 'Census_OEMNameIdentifier', 'Census_OEMModelIdentifier', 'Census_ProcessorCoreCount', 'Census_ProcessorManufacturerIdentifier', 'Census_ProcessorModelIdentifier', 'Census_ProcessorClass', 'Census_PrimaryDiskTotalCapacity', 'Census_PrimaryDiskTypeName', 'Census_SystemVolumeTotalCapacity', 'Census_HasOpticalDiskDrive', 'Census_TotalPhysicalRAM', 'Census_ChassisTypeName', 'Census_InternalPrimaryDiagonalDisplaySizeInInches', 'Census_InternalPrimaryDisplayResolutionHorizontal', 'Census_InternalPrimaryDisplayResolutionVertical', 'Census_PowerPlatformRoleName', 'Census_InternalBatteryType', 'Census_InternalBatteryNumberOfCharges', 'Census_OSVersion', 'Census_OSArchitecture', 'Census_OSBranch', 'Census_OSBuildNumber', 'Census_OSBuildRevision', 'Census_OSEdition', 'Census_OSSkuName', 'Census_OSInstallTypeName', 'Census_OSInstallLanguageIdentifier', 'Census_OSUILocaleIdentifier', 'Census_OSWUAutoUpdateOptionsName', 'Census_IsPortableOperatingSystem', 'Census_GenuineStateName', 'Census_ActivationChannel', 'Census_IsFlightingInternal', 'Census_IsFlightsDisabled', 'Census_FlightRing', 'Census_ThresholdOptIn', '",
    "```json\n{\n    \"solution\": \"df.groupby(['kind'])['num_claims'].median().tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'state', 'area', 'pop2000', 'pop2008', 'pop2013', 'pop2017']\nQuestion: What are the states with the highest population growth between 2000 and 2017?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['pop2008'] > df['pop2000']].sort_values('pop2008', ascending=False)['state'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'park_type', 'area', 'state_id', 'eruptions', 'waiting', 'foci', 'latitude', 'longitude', 'elevation']\nQuestion: What is the mean waiting time for areas located in California?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['state_id'] == 'CA']['waiting'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'official_name', 'park_type', 'area', 'state_id', 'eruptions', 'area', 'state_id', 'eruptions', 'waiting', 'magnitude', 'foci', 'latitude', 'longitude', 'elevation', 'id', 'name', 'gsa_id', 'park_type', 'area', 'state_id', 'eruptions', 'waiting', 'magnitude', 'foci', 'latitude', 'longitude', 'elevation']\nQuestion: To what group of parks does Tambora belong?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['name'] == 'Tambora']['park_type'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'latitude', 'longitude', 'dlat_dd', 'dlon_dd', 'class', 'confidence']\nQuestion: What is the maximum confidence of an earthquake in Uta",
    "```json\n{\n    \"solution\": \"list(df.nlargest(3, 'date')['id'])\"\n}\n```\n\nInput DataFrame columns: ['id', 'lang', 'patent_number', 'assignee_id', 'assignee_type', 'title', 'abstract', 'claims', 'kind', 'date', 'wipo_subclass', 'nber_ subclass', 'cpc_subsection', 'sequence']\nQuestion: What is the ID of the patent that was filed first?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['date'].min()\"\n}\n```\n\nInput DataFrame columns: ['title', 'abstract', 'date', 'num_claims', 'assignee_id', 'assignee_type', 'organization', 'kind', 'id', 'weight', 'target', 'x', 'y', 'abstract_gx_NOUN', 'abstract_gx_ngrams']\nQuestion: How many patents have been filed with NIST in 2016?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['date'].dt.year == 2016]['organization'].eq('National Institute of Standards and Technology').sum()\"\n}\n```\n\nInput DataFrame columns: ['headline', 'image', 'source', 'date', 'url', 'summary', 'id', 'combined_score', 'image_face_count', 'image_faces', 'face_count', 'face_data', 'has_face', 'image_width', 'image_height', 'ocr_confidence', 'ocr_count', 'ocr_data', 'has_ocr', 'headless', 'headline_length', 'source_length', 'summary_length', 'ocr_words', 'age', 'gender', 'race', 'confidence', 'target', 'x', 'y']\nQuestion: How long has the average tweet been in circulation?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['date'].dt.days_in_month.mean()\"\n}\n```\n\nInput DataFrame columns: ['language', 'head_line', 'abstract', 'url',",
    "```json\n{\n    \"solution\": \"df[df['user_favourites_count'].idxmax(), 'user_verified']\"\n}\n```\n\nInput DataFrame columns: ['source', 'description', 'hashtags', 'tweet_id', 'name', 'location', 'user_location', 'user_name', 'user_screen_name', 'user_description', 'user_verified', 'user_follower_count', 'user_following_count', 'user_tweet_count', 'user_created_at', 'user_listed_count', 'user_url', 'user_favourite_count', 'user_native_lang_code', 'user_time_zone', 'user_utc_offset', 'user_phone_type', 'user_photo_url', 'user_photo_type', 'user_photo_crop_y', 'user_photo_crop_x', 'user_photo_crop_w', 'user_photo_crop_h', 'media_type', 'media_url', 'media_player_url', 'media_duration', 'text', 'reply_to_status_id', 'reply_to_user_id', 'reply_to_user_name', 'is_reply', 'is_retweet', 'retweet_status_id', 'retweet_user_id', 'retweet_user_name', 'retweet_timestamp', 'is_quote', 'quote_status_id', 'quote_user_id', 'quote_user_name', 'quote_status_timestamp', 'like_count', 'retweet_count', 'quote_count', 'reply_count', 'quote_url', 'image_url_https', 'entities_hashtags', 'entities_media', 'entities_user_mentions', 'entities_urls', 'lang_text', 'lang_code']\nQuestion: Has the same number of hashtags been used for the most recent tweet?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['hashtags'].value_counts().max() == df['hashtags'].value_counts().max()\"\n}\n```\n\nInput DataFrame columns: ['sentiment', 'id', 'query_string', 'user', 'text', '",
    "```json\n{\n    \"solution\": \"df['user_favourites_count<gx:number>'].max() == df['retweets<gx:number>'].max()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: How many customers do not have any purchase made by them?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df.loc[:, 'MntWines':'Z_Revenue'].sum(axis=1) == 0].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['Product', 'Year', 'TotalSales', 'GoldPrice', 'DS_Sales', 'SaleDate']\nQuestion: What is the maximum sales of all products?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['TotalSales'].max()\"\n}\n```\n\nInput DataFrame columns: ['Product', 'Year', 'TotalSales', 'GoldPrice', 'DS_Sales', 'SaleDate']\nQuestion: What is the second largest sale date by value?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['SaleDate'].sort_values().unique()[-2]\"\n}\n```\n\nInput DataFrame columns: ['image', 'classe']\nQuestion: How many images are in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.shape[0]\"\n}\n```\n\nInput DataFrame columns:",
    "```json\n{\n    \"solution\": \"return df['mention_names'].explode().value_counts().idxmax() == df['rp_user_name'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What is the proportion of males who survived in each class?\nExpected return type: dict[category, number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.groupby(['Pclass', 'Sex'])['Survived'].sum() / df.groupby('Pclass')['Survived'].count() * 100\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What is the median age of passengers with more than 2 siblings/spouse?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.loc[df['SibSp'] > 2, 'Age'].median()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What is the median age of passengers who have no siblings, spouse or parents on board?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.loc[(df['SibSp'] == 0) & (df['Parch'] == 0), 'Age'].median()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What",
    "```json\n{\n    \"solution\": \"df['retweets'].max() == df.loc[df['retweets'].idxmax(), 'replies']\"\n}\n```\n\nInput DataFrame columns: ['id_str<gx:category>', 'retweet_count<gx:number>', 'favorite_count<gx:number>', 'created_at<gx:date>', 'text<gx:text>', 'entities_hashtags<gx:list[category]>', 'entities_user_mentions<gx:list[category]>', 'entities_urls<gx:list[category]>']\nQuestion: Has the number of retweets of the most retweeted tweet changed?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['retweet_count'].max() != df.loc[df['retweet_count'].idxmax(), 'retweet_count']\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'City', 'Category', 'Start Date', 'End Date', 'Venue', 'Location', 'Additional Info', 'State', 'Poster URL']\nQuestion: Which state has the most number of festivals?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['State'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Race and Ethnicity (Census)', 'Father\u2019s education', 'Mother\u2019s education', 'Mother\u2019s Occupation', 'Father\u2019s Occupation', 'Year', 'How old were you when you first started to studies? (%)', 'Did you ever take a math test? (%)', 'Which month did you take that math test? (%)', 'Which grade did you get on that test? (%)', 'How long have you been studying math? (%)', 'How many hours per day have you been studying math? (%)', 'How many hours per week have you been studying math? (%)', 'In general, how do you feel about your math learning? (%)', 'How difficult was your math lessons? (%)', 'How likely are you to take another math test?: (%)', 'Which part of your math is most interesting to you? (%)', 'How often do you",
    "```json\n{\n    \"solution\": \"df['user_followers_count<gx:number>'].max()\"\n}\n```\n\nInput DataFrame columns: ['n_clicks', 'n_impressions', 'impressions']\nQuestion: Does the number of impressions stay the same across all the ads?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['impressions'].nunique() == 1\"\n}\n```\n\nInput DataFrame columns: ['id', 'user', 'po', 'st', 'se', 'af', 'at', 'ad', 'cr', 'ci', 'ti', 'di', 'ni', 'dn', 'tm', 'ca', 'ed', 'pu']\nQuestion: What is the highest number of purchases made by the user with the ID 1700657?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['user'] == '1700657']['pu'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'user', 'po', 'st', 'se', 'af', 'at', 'ad', 'cr', 'ci', 'ti', 'di', 'ni', 'dn', 'tm', 'ca', 'ed', 'pu']\nQuestion: Which country has the most purchases made by the user with the ID 1700657?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['user'] == '1700657']['ad'].mode()[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'user', 'po', 'st', 'se', 'af', 'at', 'ad', 'cr', 'ci', 'ti', 'di', 'ni', 'dn', 'tm', 'ca', 'ed', 'pu']\nQuestion: What is the total number of purchases made by the user with the ID 1533298?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['user']",
    "```json\n{\n    \"solution\": \"df.groupby('author_id')['favorites'].sum()[df.groupby('author_id')['favorites'].sum() > 10000].count()\"\n}\n```\n\nInput DataFrame columns: ['trip_id', 'route_id', 'service_id', 'trip_start_time', 'trip_stop_time', 'trip_duration_seconds', 'trip_distance_miles', 'street_for_location', 'street_to_location', 'direction_id', 'direction_name', 'block_id', 'wheelchair_accessible', 'bikes_allowed', 'stop_sequence', 'stop_headsign', 'pickup_type', 'dropoff_type', 'shape_id', 'shape_pt_lat', 'shape_pt_lon', 'shape_pt_sequence', 'shape_dist_traveled']\nQuestion: If there is any null value in the data frame, return the column name with the most null values first.\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.isnull().sum().sort_values().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['truck_id', 'year', 'make', 'model', 'color', 'sticker_price', 'location', 'city', 'vin', 'latitude', 'longitude', 'state', 'country']\nQuestion: What is the most expensive car made in 2019?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['year'] == 2019)]['sticker_price'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['country', 'description', 'province', 'region_1', 'region_2', 'winery', 'designation', 'points', 'price', 'variety', 'winery_id', 'winery_name', 'id', 'latitude', 'longitude', 'taster_name', 'title', 'taster_twitter_handle', 'points', 'price', 'vintage']\nQuestion: What is the most expensive wine in the data frame?\nExpected return type: number\n\nCode that calculates",
    "```json\n{\n    \"solution\": \"df['retweets'].max()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'screen_name<gx:category>', 'tweet_link<gx:url>', 'text<gx:text>', 'mentions<gx:list[category]>', 'hashtags<gx:list[category]>', 'urls<gx:list[url]>', 'photo_urls<gx:list[url]>', 'replies_to<gx:category>']\nQuestion: Is there any tweet with no mentions?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['mentions'].isna().any()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>', 'search<gx:category>', 'video_urls<gx:list[url]>', 'video_links<gx:list[url]>', 'video_",
    "```json\n{\n    \"solution\": \"df['mention_ids<gx:list[category]>\"].explode().value_counts().max()\"\n}\n```\n\nInput DataFrame columns: ['latitude', 'longitude']\nQuestion: What is the average latitude and longitude?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['latitude', 'longitude']].mean().values.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'text', 'date', 'tags', 'replies_count', 'retweets_count', 'likes_count', 'hashtags', 'user_id', 'user_name', 'user_username', 'user_followers', 'user_following', 'user_tweets', 'user_likes', 'user_verified', 'user_created', 'user_description', 'user_location', 'user_avatar', 'retweet']\nQuestion: How many tweets are replies from user id 2?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['author_id'] == 2].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'created_at', 'reply_to_tweet_id', 'reply_to_user_id', 'user_id', 'user_name', 'content', 'lang', 'retweet_count', 'reply_count', 'like_count', 'quote_count', 'possibly_sensitive', 'user_mention_ids', 'hashtags', 'urls', 'photos', 'poll', 'geo', 'place', 'source', 'user_id_str', 'text', 'display_text_range', 'source_url', 'source_name', 'quote_tweet_id', 'in_reply_to_user_id']\nQuestion: How many tweets are replies from the same user?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('user_id').filter(lambda x: x.shape[0] > 1).shape[0]\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'username', 'name', '",
    "```json\n{\n    \"solution\": \"df['author_name'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'post_created_at<gx:datetime>', 'post_updated_at<gx:datetime>', 'post_published_at<gx:datetime>', 'post_text<gx:text>', 'post_author_id<gx:category>', 'post_lang<gx:category>', 'post_type<gx:category>', 'post_title<gx:text>', 'post_url<gx:url>', 'post_url_domain<gx:text>', 'post_url_display<gx:text>', 'post_latitude<gx:number>', 'post_longitude<gx:number>', 'post_image_link<gx:url>', 'post_num_tags<gx:number>', 'post_num_images<gx:number>', 'reblogged_by<gx:list[category]>', 'liked_by<gx:list[category]>', 'num_reblogs<gx:number>', 'num_likes<gx:number>', 'num_replies<gx:number>', 'num_reshares<gx:number>', 'excerpt<gx:text>', 'link_tags<gx:list[url]>', 'link_domains<gx:list[text]>', 'link_urls<gx:list[text]>', 'link_urls_first<gx:text>', 'link_images<gx:list[url]>', 'link_images_first<gx:url>']\nQuestion: Who has reblogged the most posts? \nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['reblogged_by'].explode().mode()[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'text', 'user', 'author_id', 'author_name', 'language', 'lang', 'favorites', 'date', 'mentions', 'urls', 'urls_first', 'images', 'images_first', 'retweets', 'replies', 'retweet', 'quote', 'is_quote', 'is_reply', 'is_retweet']\nQuestion: Which tweet has the highest number of likes?\nExpected",
    "```json\n{\n    \"solution\": \"df['author_id<gx:category>'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Time', 'IP Address', 'User Agent', 'Host']\n```\nQuestion: What is the most frequent IP address?\nExpected return type: category\n\nInput DataFrame columns: ['listing_id', 'date', 'price', 'reviewer_id', 'reviewer_name', 'comments']\nQuestion: Which listing has the least number of reviews?\nExpected return type: category\n\nInput DataFrame columns: ['listing_id', 'date', 'price', 'reviewer_id', 'reviewer_name', 'comments']\nQuestion: Which listing has the highest mean price?\nExpected return type: category\n\nInput DataFrame columns: ['listing_id', 'date', 'price', 'reviewer_id', 'reviewer_name', 'comments']\nQuestion: Which reviewer has the most reviews?\nExpected return type: category\n\nInput DataFrame columns: ['listing_id', 'date', 'price', 'reviewer_id', 'reviewer_name', 'comments']\nQuestion: Which reviewer has the highest number of comments?\nExpected return type: category\n\nInput DataFrame columns: ['listing_id', 'date', 'price', 'reviewer_id', 'reviewer_name', 'comments']\nQuestion: Which reviewer has the highest mean price?\nExpected return type: category\n\nInput DataFrame columns: ['listing_id', 'date', 'price', 'reviewer_id', 'reviewer_name', 'comments']\nQuestion: Which reviewers have the highest mean price?\nExpected return type: list[category]\n\nInput DataFrame columns: ['listing_id', 'date', 'price', 'reviewer_id', 'reviewer_name', 'comments']\nQuestion: What are the top 5 most frequent hosts?\nExpected return type: list[category]\n\nInput DataFrame columns: ['listing_id', 'date', 'price', 'reviewer_id', 'reviewer_name', 'comments']\nQuestion: List the top 5 most frequent reviewers.\nExpected return type: list[category]\n\nInput DataFrame columns: ['listing_id', 'date', 'price', 'reviewer_id', 'reviewer_name', 'comments']\nQuestion: What are the top 5 most frequent",
    "```json\n{\n    \"solution\": \"df['author_name<gx:category>'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>', 'search<gx:category>']\nQuestion: Which tweet is the most unfavourited?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['favorites<gx:number>'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_",
    "```json\n{\n    \"solution\": \"df['retweets'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['salary', 'name', 'nationality', 'dob', 'height (in)', 'weight (in)', 'position', 'team', 'season', 'games', 'minutes_played', 'field_goals_made', 'field_goals_att', 'field_goals_pct', 'minutes_played_per_game', 'points_per_game', 'offensive_rebounds_per_game', 'defensive_rebounds_per_game', 'total_rebounds_per_game', 'assists_per_game', 'steals_per_game', 'blocks_per_game', 'turnovers_per_game', 'personal_fouls_per_game', 'points_off_turnovers_per_game', 'effective_field_goal_pct', 'true_shooting_pct', 'player_efficiency_rating', 'net_rating', 'pace', 'minutes_played_flag', 'field_goals_made_flag', 'field_goals_att_flag', 'field_goals_pct_flag', 'minutes_played_per_game_flag', 'points_per_game_flag', 'offensive_rebounds_per_game_flag', 'defensive_rebounds_per_game_flag', 'total_rebounds_per_game_flag', 'assists_per_game_flag', 'steals_per_game_flag', 'blocks_per_game_flag', 'turnovers_per_game_flag', 'personal_fouls_per_game_flag', 'points_off_turnovers_per_game_flag', 'effective_field_goal_pct_flag', 'true_shooting_pct_flag', 'player_efficiency_rating_flag', 'net_rating_flag', 'pace_flag', 'seasons_played', 'ppg', 'rpg', 'apg', 'spg', 'bpg', 'tpg', 'fpg', 'ppp', 'rpp', 'app', 'spp', 'bpp', 'tpp', 'fgp', 'ftp', 'ts', 'fg",
    "```json\n{\n    \"solution\": \"df.groupby('author_id<gx:category>')['user_followers_count<gx:number>'].max().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: []\nQuestion: What are the top 5 most common words in the text column?\nExpected return type: list[str]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"from nltk.tokenize import word_tokenize\\nstopwords = set(stopwords.words('english'))\\ndef tokenize(text): return [word.lower() for word in word_tokenize(text) if word.isalpha() and word not in stopwords]\\n\\n df['text<gx:text>'].str.lower().str.replace('[^\\\\w\\\\s]','').str.split().explode().value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['datetime', 'temperature', 'pressure', 'humidity', 'wind_speed', 'wind_deg', 'rain_1h', 'rain_3h', 'snow_1h', 'snow_3h']\nQuestion: What is the average wind speed?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['wind_speed'].mean()\"\n}\n```\n\nInput DataFrame columns: ['datetime', 'Tem0jI', 'Tem1AM', 'Tem1PM', 'Tem2AM', 'Tem2PM', 'Tem3AM', 'Tem3PM', 'Tem4AM', 'Tem4PM', 'Tem5AM', 'Tem5PM', 'Tem6AM', 'Tem6PM', 'Tem7AM', 'Tem7PM', 'Tem8AM', 'Tem8PM', 'Tem9AM', 'Tem9PM', 'Tem10AM', 'Tem10PM', 'Tem11AM', 'Tem11PM', 'Tem12AM', 'Tem12PM', 'Prec0jI', 'Prec1AM', 'Prec1PM', 'Prec2AM', 'Prec2PM', 'Prec3AM",
    "```json\n{\n    \"solution\": \"df.nlargest(4, 'favorites')['author_name<gx:category>'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['url', 'path', 'contents', 'scrape_status', 'status_type', 'status', 'logged_in_status', 'logged_in_user', 'logged_in', 'time', 'id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>']\nQuestion: Which author is the most favorited?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['favorites'].max()\"\n}\n```\n\nInput DataFrame columns: ['tfs_id', 'tfs_title', 'tfs_url', 'tfs_author', 'tfs_date', 'tfs_reply_date', 'tfs_num_reactions', 'tfs_replies', 'tfs_ret",
    "```json\n{\n    \"solution\": \"df.loc[df['mention_names'].explode().value_counts().nlargest(4).index.tolist()]['author_name<gx:category>'].tolist()\"\n}\n```\n\nInput Dataframe columns: ['id<gn:integer>', 'category_id<gn:integer>', 'parent_category_id<gn:integer>', 'category_name<gn:text>', 'parent_category_name<gn:text>', 'created_at<gn:date>', 'category_index<gn:integer>', 'parent_category_index<gn:integer>', 'level<gn:integer>', 'total_items<gn:integer>', 'depth<gn:integer>']\nQuestion: What is the most common category name in the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['category_name<gn:text>'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'rumor_type<gx:category>', 'tweet_id<gx:category>', 'tweet_text<gx:text>', 'tweet_lang<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'date<gx:date>', 'source<gx:text>', 'is_retweet<gx:boolean>', 'is_quote<gx:boolean>', 'in_reply_to_status_id<gx:category>', 'in_reply_to_user_id<gx:category>', 'in_reply_to_user_name<gx:category>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:",
    "```json\n{\n    \"solution\": \"df['author_name<gx:category>'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'message<gx:text>', 'created_at<gx:datetime>', 'location<gx:text>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'type<gx:category>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'source<gx:text>', 'search<gx:category>', 'geo<gx:tuple[number,number]>', 'mentions<gx:list[category]>', 'in_reply_to_message_id<gx:category>', 'in_reply_to_author_id<gx:category>', 'in_reply_to_author_name<gx:category>', 'in_reply_to_author_handler<gx:category>', 'in_reply_to_author_avatar<gx:url>', 'has_media<gx:boolean>', 'entities<gx:dict>', 'mentions_user_ids<gx:list[category]>', 'mentions_handlers<gx:list[category]>', 'mentions_names<gx:list[category]>', 'mentions_avatars<gx:list[url]>', 'hashtags<gx:list[category]>', 'tweet_link<gx:url>', 'source_url<gx:url>', 'specific_source<gx:text>', 'user_id<gx:category>', 'user_name<gx:category>', 'user_handler<gx:category>', 'user_avatar<gx:url>', 'user_location<gx:text>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx",
    "```json\n{\n    \"solution\": \"df['user_followers_count<gx:number>'].nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>', 'search<gx:category>']\nQuestion: What are the top 3 number of users who were mentioned (mention_names) in the dataset?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['mention_names<gx:list[category]>'].explode().value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['index', 'Room.name', 'Room.assigned_bed_type', 'Room.number', 'Room.room_set_id']\nQuestion\n\nQuestion: What is the maximum number of rooms_number?\nExpected return type: number\n\nCode that calculates",
    "```json\n{\n    \"solution\": \"df['favorites'].head(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'user_id', 'likes', 'replies', 'retweets', 'media', 'device', 'hashtags', 'source', 'created_at', 'text', 'urls', 'user_mention_ids', 'user_mention_names', 'entities_hashtags']\nQuestion: What are the top 4 numbers of likes a tweet in the dataset has?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['likes'].head(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'user_id', 'likes', 'replies', 'retweets', 'media', 'device', 'hashtags', 'source', 'created_at', 'text', 'urls', 'user_mention_ids', 'user_mention_names', 'entities_hashtags']\nQuestion: What are the top 4 numbers of likes a tweet in the dataset has?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['likes'].head(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'created_at', 'source_user_id', 'text', 'source_label', 'source_url', 'related_users', 'related_docs', 'gplus_url', 'content_type', 'related_contents', 'related_events', 'related_places', 'source_start_time', 'source_end_time', 'related_trends', 'related_users_in_timeline', 'related_contents_in_timeline', 'related_events_in_timeline', 'related_places_in_timeline', 'related_trends_in_timeline']\nQuestion: What are the top 4 numbers of likes a tweet in the dataset has?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['likes'].head(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['ad_id', 'display_url', 'account_id', 'url', '",
    "```json\n{\n    \"solution\": \"df['mention_ids'].explode().value_counts().dropna().nlargest(5).tolist()\"\n}\n```\n```\n/exercises/python/src/hello/solution.pydef hello(name):\n    return \"Hello, {}\".format(name)/exercises/python/test/test_hello.pyimport unittest\n\nfrom hello.solution import hello\n\n\nclass HelloTest(unittest.TestCase):\n    def test_hello(self):\n        self.assertEqual(\n            hello(\"World\"), \"Hello, World\"\n        )\n\n\nif __name__ == '__main__':\n    unittest.main()/exercises/python/src/reverse_string/solution.pydef reverse_string(str):\n    return str[::-1]/exercises/python/test/test_reverse_string.pyimport unittest\n\nfrom reverse_string.solution import reverse_string\n\n\nclass ReverseStringTest(unittest.TestCase):\n    def test_reverse_string(self):\n        self.assertEqual(\n            reverse_string(\"Hello, World\"), \"dlroW ,olleH\"\n        )\n\n\nif __name__ == '__main__':\n    unittest.main()/exercises/python/test/test_fibonacci.pyimport unittest\n\nfrom fibonacci.solution import fibonacci\n\n\nclass FibonacciTest(unittest.TestCase):\n    def test_fibonacci(self):\n        self.assertEqual(fibonacci(10), 55)\n\n\nif __name__ == '__main__':\n    unittest.main()/exercises/fsharp/test/Test.FSharp.fsmodule Test\n\nopen FsUnit\n      \nopen FSharp.\n\n[<Tests>]\nlet ``are divisible by 9`` =\n    let a = 18\n    9 |> should equal (a / 9)\n\nlet ``get the sum of even Fibonacci numbers less than 4,000,000`` =\n    let a = [1; 2; 3; 5; 8; 13]\n    23 |> should equal (a |> filter (fun x -> x % 2 = 0) |> sum)\n\nlet ``get the largest palindrome made from the product of two 3-digit numbers`` =",
    "```json\n{\n    \"solution\": \"df['retweets'].nlargest(2).tolist()\"\n}\n```\n\nInput DataFrame columns: ['q001', 'q002', 'q003', 'q004', 'q005', 'q006', 'q007', 'q008', 'q009', 'q010', 'q011', 'q012', 'q013', 'q014', 'q015', 'q016', 'q017', 'q018', 'q019', 'q020', 'q021', 'q022', 'q023', 'q024', 'q025', 'q026', 'q027', 'q028', 'q029', 'q030', 'q031', 'q032', 'q033', 'q034', 'q035', 'q036', 'q037', 'q038', 'q039', 'q040', 'q041', 'q042', 'q043', 'q044', 'q045', 'q046', 'q047', 'q048', 'q049', 'q050', 'q051', 'q052', 'q053', 'q054', 'q055', 'q056', 'q057', 'q058', 'q059', 'q060', 'q061', 'q062', 'q063', 'q064', 'q065', 'q066', 'q067', 'q068', 'q069', 'q070', 'q071', 'q072', 'q073', 'q074', 'q075', 'q076', 'q077', 'q078', '",
    "```json\n{\n    \"solution\": \"df[df['Loan Amount'] == df['Loan Amount'].max()]['Loan Duration - Months'].gt(df['Loan Duration - Months'].max()).any()\"\n}\n```\n\nInput DataFrame columns: ['Apartment_ID', 'Location_ID', 'Apartment', 'Housing_Type', 'Area_sqm', 'Built_Year', 'Area_sqm2', 'Floor', 'Price_sqm', 'No_Rooms', 'No_Toilet_Bath', 'Price', 'Price_m2', 'Price_m2_nominal', 'Anonymized_Location', 'Longitude', 'Latitude', 'Zip', 'City']\nQuestion: Is it cheaper to rent an apartament with 2 rooms or with 3 rooms?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Price_m2'].gt(df['Price_m2_nominal']).any()\"\n}\n```\n\nInput DataFrame columns: ['mean_rss_2','mean_rss_3','mean_rss_4','mean_rss_5','mean_rss_6','mean_rss_7','mean_rss_8','mean_rss_9','mean_rss_10','mean_rss_11','modularity','mean_rss_average']\nQuestion: What is the modularity of the network?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"round(df['modularity'].mean(), 5)\"\n}\n```\n\nInput DataFrame columns: ['abs_min','abs_max','minimum','maximum','mean','stdev']\nQuestion: How big is the maximum range of values in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['stdev'] == df['stdev'].max()]['maximum'].iloc[0] - df[df['stdev'] == df['stdev'].max()]['minimum'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Study_0', 'Study_1', 'Study_2', 'Study_3', 'Study_4', 'Study_5",
    "```json\n{\n    \"solution\": \"banks.loc[banks['Number of Existing Loans'].idxmax(), 'Loan Amount'] == banks.loc[banks['Number of Existing Loans'].idxmax(), 'Number of Existing Loans']\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Address', 'Sector', 'Capital', 'CEO', 'Turnover', 'Number of Employees']\nQuestion: Is the company with the highest turnover also the company with the highest number of employees?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"companies.loc[companies['Turnover'].idxmax(), 'Number of Employees'] == companies.loc[companies['Turnover'].idxmax(), 'Turnover']\"\n}\n```\n\nInput DataFrame columns: ['country_code', 'name', 'alpha_2', 'alpha_3', 'numeric', 'region', 'sub_region', 'large_regions', 'intermediate_region', 'region_code', 'sub_region_code']\nQuestion: How many countries are in the Northern Africa region?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"countries[countries['region'] == 'Northern Africa'].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'publication_id', 'author_id', 'headline_text', 'subject', 'headline_category']\nQuestion: What is the most frequent headline category?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['headline_category'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['station_id', 'longitude', 'latitude', 'elevation', 'state', 'name', 'gsn', 'wban', 'line_id', 'order', 'primary_function', 'time_zone', 'square_km', 'independent_station', 'gmt', 'dst', 'make', 'model', 'iserv', 'mfr', 'type', 'deploy_year', 'owner', 'operator', 'date_commissioned', 'date_retired', 'date_modified', 'date_closed', 'data_source',",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].max() == df['Number of Existing Loans'].max()\"\n}\n```\n\nInput DataFrame columns: ['SeriousDlqin2yrs', 'RevolvingUtilizationOfUnsecuredLines', 'age', 'NumberOfTime30-59DaysPastDueNotWorse', 'DebtRatio', 'MonthlyIncome', 'NumberOfOpenCreditLinesAndLoans', 'NumberOfTimes90DaysLate', 'NumberRealEstateLoansOrLines', 'NumberOfTime60-89DaysPastDueNotWorse', 'NumberOfDependents']\nQuestion: Which age group has the largest number of times 30-59 days past due?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.nlargest(5, columns='NumberOfTime30-59DaysPastDueNotWorse')['age'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['LoanDuration', 'CreditScore', 'PropertyValuation', 'Debt', 'AmountFinanced', 'Non-financedCosts', 'Valuation', 'Equity', 'OccupationType', 'MonthlySalary', 'IncomeType', 'NetWorth']\nQuestion: Is there any people who has 100 million in valuation?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Valuation'].isin(['100000000']).any()\"\n}\n```\n\nInput DataFrame columns: ['Year', 'Month', 'Day', 'Number_of_Accidents', 'Number_of_Serious_Accidents', 'Number_of_Slight_Accidents', 'Number_of_Vehicles', 'Number_of_Casualties', 'Number_of_Vehicles_involved', 'Number_of_Casualties_Severity_0', 'Number_of_Casualties_Severity_1', 'Number_of_Casualties_Severity_2', 'Number_of_Casualties_Severity_3', 'Type_of_Accident', 'Speed_limit', 'Road_surface', 'Road_class', 'Police_force', 'Light',",
    "```json\n{\n    \"solution\": \"df['Age'].eq(df['Age'].max()).any()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Unnamed: 0', 'Unnamed: 0.1', 'Year', 'Month', 'Day', 'Hour', 'Minute', 'Second', 'time_stamp', 'Dew Point (C)', 'Humidity (%)', 'Temp (C)', 'Pressure (millibars)', 'Visibility (km)', 'Wind Direction', 'Wind Speed (km/h)', 'Gust Speed (km/h)', 'Precip Type', 'Daily Summary']\nQuestion: What is the maximum Wind Speed (km/h)?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Wind Speed (km/h)'].max()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: Is there any passenger with Cabin information?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Cabin'].notna().any()\"\n}\n```\n\nInput DataFrame columns: ['date', 'name', 'url', 'title', 'text', 'source', 'city', 'state', 'country', 'category', 'keyword', 'lat', 'lng']\nQuestion: What is the name of the source with the highest number of articles about 'war'?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['text'].str.lower().str.contains('war')]['source'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['entity', 'title', 'per_capita_gdp_2019', 'pop_in_2019', 'pop_change_2019', 'country_code', 'region', 'income_group', 'income_group_id', 'income_group_norm', 'income_group_norm_id', 'gdp_per_capita', 'g",
    "```json\n{\n    \"solution\": \"df['Loan Amount'].max()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10', 'X11', 'X12', 'X13', 'X14', 'X15', 'X16', 'X17', 'X18', 'X19', 'X20']\nQuestion: Which is the unique ID in the X20 column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['X20'].unique()\"\n}\n```\n\nInput DataFrame columns: ['state', 'city', 'name', 'sex', 'age', 'race', 'date', 'include_2020']\nQuestion: How many males over 40 are in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['age'] > 40) & (df['sex'] == 'Male')].count().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Sex', 'Age', 'Occupation', 'Civil', 'Nationality', 'religion', 'Birth Place', 'Ecode']\nQuestion: What is the nationality of the person with the highest age?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['age', 'Nationality']].sort_values('Age', ascending=False).head(1)['Nationality'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['TotalCharges', 'customerID', 'gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod', 'MonthlyCharges', 'Churn']\nQuestion: How many people are paying more than 1000 euros",
    "```json\n{\n    \"solution\": \"df['Number of Existing Loans'].gt(1).sum()\"\n}\n```\n\nInput DataFrame columns: ['External risk rating', 'Good Loan', 'Loan amount', 'Loan duration', 'Interest rate', 'age', 'sex', 'marital status', 'job', 'other loan', 'housing', 'credit history', 'purpose', 'cmnt', 'contact', 'day', 'month', 'year', 'duration', 'y', 'y_prob']\nQuestion: How many loans are good loans?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Good Loan'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Original_start_date', 'Date', 'Type', 'Geographical_area_name', 'Contracting_authority_name', 'Order_reference_number', 'Contract_type', 'Contracting_authority_class', 'Procurement_method_type', 'Procurement_method', 'Duration', 'Amendment_Number', 'Delivery_or_Article', 'Contract_Value', 'Duration_in_month', 'Violation_of_terms', 'Start_date', 'End_date', 'Start_date_year', 'End_date_year', 'Total_contract_value_year', 'Timestamp', 'Source_URL', 'Main_contract_document_URL']\nQuestion: How many contracts are of a duration of more than 1 year?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Duration'].str.split(' ').str[0].str.replace(',', '', regex=False).astype(int).gt(12).sum()\"\n}\n```\n\nInput DataFrame columns: ['duration', 'sex', 'age', 'race', 'hispanic_origin', 'purpose', 'borrow_amount', 'label']\nQuestion: Of all borrowers who are Female and more than 50 years old, how many of them have a purpose of 'small business'? \nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['sex'] == 'F') & (df",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].max()\"\n}\n```\n\nInput DataFrame columns: ['LoanDuration', 'LoanAmount', 'Installment', 'Gender', 'Age', 'ExistingLoans', 'Dependents', 'ExistingCredits', 'Job', 'Purpose', 'Telephone', 'Fax', 'ProbationPeriod', 'ForeignWorker', 'CheckingAccount', 'Status', 'CreditHistory', 'CreditAmount', 'JobDuration', 'SavingsAccount', 'Risk', 'MaritalStatus']\nQuestion: What are the top 3 purposes for taking out loans?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Purpose'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'skew', 'pval', 'winsorized', 'treatment', 'size', 'building_id', 'dwelling_id', 'dwelling_number', 'street_address', 'city', 'state', 'zip', 'latitude', 'longitude', 'year_built', 'dorms', 'beds', 'baths', 'sq_ft', 'type', 'listing_url', 'scrape_id', 'image_url', 'zipcode', 'hoa', 'rent', 'sq_ft_2', 'rent_2', 'rent_3', 'beds_2', 'baths_2', 'sq_ft_3', 'rent_4', 'beds_3', 'baths_3', 'sq_ft_4', 'floors', 'unit', 'sq_ft_5', 'beds_4', 'baths_4', 'sq_ft_6', 'notes', 'open_house', 'last_update']\nQuestion: Which postal code has the most properties?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['zipcode'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'price', 'property_type', 'room_type', 'neighborhood', 'bathrooms', 'bedrooms', 'amenities', 'instant_bookable",
    "```json\n{\n    \"solution\": \"df['Age'].gt(50).sum()\"\n}\n```\n\nInput DataFrame columns: ['Gender', 'Age', 'Occupation', 'Marital Status', 'Education Level', 'Years of Education', 'Number of Children', 'Yearly Income in addition to Social Security', 'Household Size', 'Age Category', 'Years of Education Category', 'Relationship', 'Work Performance', 'Genetic Risk', 'Muscle Weak', 'Obesity', 'Genetic Disease', 'Chronic Liver Disease', 'Alcohol intake', 'Drugs', 'Smoking Habits', 'Physical Activity', 'Alcohol Consumption', 'Obesity']\nQuestion: How many men are between 30 to 39 years old, have graduated, has 0 children, and earns more than 100000?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Age'].between(30, 39)) & (df['Education Level'] == 'Graduated') & (df['Number of Children'] == 0) & (df['Yearly Income in addition to Social Security'] > 100000) & (df['Gender'] == 'Man')].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['duration', 'protocol_type', 'service', 'flag', 'src_bytes', 'dst_bytes', 'land', 'wrong_fragment', 'urgent', 'hot', 'num_failed_logins', 'logged_in', 'num_compromised', 'root_shell', 'su_attempted', 'num_root', 'num_file_creations', 'num_shells', 'num_access_files', 'num_outbound_cmds', 'is_host_login', 'is_guest_login', 'count', 'srv_count', 'serror_rate', 'srv_serror_rate', 'rerror_rate', 'srv_rerror_rate', 'same_srv_rate', 'diff_srv_rate', 'srv_diff_host_rate', 'dst_host_count', 'dst_host",
    "```json\n{\n    \"solution\": \"df['Purpose of Loan'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'user_id', 'product', 'amount', 'refund_date', 'refund_amount', 'status', 'name', 'phone', 'address', 'email', 'order_id', 'shipment_id', 'transaction_id']\nQuestion: What is the most bought product?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['product'].value_counts().idxmax()\"\n}\n```\n\n\nInput DataFrame columns: ['Postal Code', 'Latitude', 'Longitude', 'Zone', 'Region', 'Population', 'Area', 'Population Change', 'Density', 'Land Area', 'Water Area', 'Coastline Area', 'Elevation', 'Latitude', 'Longitude', 'Elevation', 'Population Density', 'Population Growth Rate', 'Land Area', 'Water Area', 'Coastline Area', 'Urban Area', 'Major Cities Area', 'Major Cities Populaton', 'Cities Population Density', 'Cities Growth Rate']\nQuestion: What is the difference between city population density in Bahrain and Qatar?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Country'].isin(['Bahrain', 'Qatar']), 'Population Density'].mean()\"\n}\n```\n\nInput DataFrame columns: ['index', 'Date', 'Time', 'City', 'Temperature', 'Humidity', 'Day', 'Wind Speed', 'Weather Description']\nQuestion: What is the minimum temperature recorded in Jan 2018?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Date'].dt.year == 2018, 'Temperature'].min()\"\n}\n```\n\nInput DataFrame columns: ['index', 'Date', 'Time', 'City', 'Temperature', 'Humidity', 'Day', 'Wind Speed', 'Weather Description']\nQuestion: What are the maximum temperatures recorded in Jan 2018?\nExpected return type: list\n\nCode that calculates the",
    "```json\n{\n    \"solution\": \"df['Job'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Gender', 'Age', 'Purpose', 'Credit History', 'Loan Amount', 'Loan Duration', 'Number of Existing Credits at the time of application, for approved applications', 'Number of Dependants', 'Capital Gain', 'Marital Status', 'Monthly Income', 'Property Ownership', 'Residence Duration', 'Telephone', 'Residence Type']\nQuestion: Is there any missing values in the dataset?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.isna().any(axis=None)\"\n}\n```\n\nInput DataFrame columns: ['HHS Region', 'Issuer Name', 'County Name', 'Issue', 'Sub Issue', 'Status', 'Issue Date', 'Due Date', 'Resolution', 'Resolution Action Description', 'Company Response', 'Timely Response', 'Consumer Disputed?', 'Complaint ID', 'Product', 'Subproduct', 'Issue', 'Submitted Via', 'State', 'Zip Code', 'Tags']\nQuestion: How many complaints have been resolved within 10 days of the day it was submitted?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Issue Date'].dt.day_name().str.contains('Monday').sum()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Experience', 'Job Role', 'Monthly Income(\u20b9)', 'Company ID', 'Employee ID']\nQuestion: What is the minimum age of a new employee?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Age'].min()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Education', 'Experience', 'Target Variable', 'Job City', 'Annual Salary', 'Gender', 'Company ID', 'employee_id']\nQuestion: Which job role has the most number of employees?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Job Role')['employee_id'].count().idxmax()\"\n}\n```\n\nInput DataFrame columns:",
    "```json\n{\n    \"solution\": \"df['Credit History'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Loan Duration - Months', 'Credit History', 'Purpose of Loan', 'Loan Amount', 'Savings Account', 'Length of Current Employment', 'Installment Rate as % of Income', 'Guarantors', 'Length of Current Property Residence', 'Age', 'Housing', 'Number of Existing Loans', 'Job', 'Number of Dependants', 'Foreign Worker', 'Risk', 'Sex', 'Status']\nQuestion: What is the mean age of all loans?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Loan Duration - Months', 'Credit History', 'Purpose of Loan', 'Loan Amount', 'Savings Account', 'Length of Current Employment', 'Installment Rate as % of Income', 'Guarantors', 'Length of Current Property Residence', 'Age', 'Housing', 'Number of Existing Loans', 'Job', 'Number of Dependants', 'Foreign Worker', 'Risk', 'Sex', 'Status']\nQuestion: What is the total loan amount of all loans made in the United States?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Purpose of Loan'].str.contains('United States'), 'Loan Amount'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Loan Duration - Months', 'Credit History', 'Purpose of Loan', 'Loan Amount', 'Savings Account', 'Length of Current Employment', 'Installment Rate as % of Income', 'Guarantors', 'Length of Current Property Residence', 'Age', 'Housing', 'Number of Existing Loans', 'Job', 'Number of Dependants', 'Foreign Worker', 'Risk', 'Sex', 'Status']\nQuestion: What is the mean loan amount of all loans made in Poland?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Purpose of Loan'] == 'Poland', 'Loan Amount",
    "```json\n{\n    \"solution\": \"df['Savings Account'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['userAccount', 'username', 'title', 'body', 'link', 'created', 'domain', 'threadId', 'isPublic', 'isPaid', 'isSubscribed', 'isActive', 'score', 'numComments']\nQuestion: What is the username of most recent post?\nExpected return type: str\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('created', ascending=False)['username'].iloc[0]\"\n}\n```\n```\nInput DataFrame columns: ['userAccount', 'username', 'title', 'body', 'link', 'created', 'domain', 'threadId', 'isPublic', 'isPaid', 'isSubscribed', 'isActive', 'score', 'numComments']\nQuestion: What is the most popular post title?\nExpected return type: str\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['title'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['reviewId', 'url', 'name', 'author', 'title', 'reviewBody', 'likes', 'publishedAt', 'lastUpdatedAt', 'lastRefreshedAt', 'category', 'languageLocale', 'language', 'country', 'locale', 'userLocation', 'userAge', 'gender', 'userVerified', 'userReviewCount', 'userFollowsCount']\nQuestion: Which is the largest number of likes for a review?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['likes'].max()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Var1', 'Var2', 'Var3', 'Var4', 'Var5', 'Var6', 'Var7', 'Var8', 'Var9', 'Var10', 'Var11', 'Var12', 'Var13', 'Var14', 'Var15', 'Var16', 'Var17', 'Var18', 'Var19', 'Var20', 'Var21', 'Var22', 'Var23', 'Var24',",
    "```json\n{\n    \"solution\": \"df.loc[df['Loan Amount'].idxmax(), 'Job'].split(', ')[:3]\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'year', 'quarter', 'month', 'week', 'day', 'day_of_year', 'day_of_week', 'unique_id', 'pub_date', 'headline', 'short_description', 'source_article', 'link', 'short_headline', 'texttt_description', 'date_published', 'date_created', 'date_sent_to_editor', 'date_created', 'date_created:1', 'type', 'subject_matter', 'source', 'location_description', 'country', 'language', 'folders', 'keywords', 'themes', 'editor_notes', 'source_name', 'source_name:1', 'section_name', 'sub_section_name', 'classification', 'crawled', 'date_updated', 'slideshow_credits', 'slideshow_image_caption', 'slideshow_caption_public', 'template', 'article_type']\nQuestion: Are there any article in the dataset with the headline \"The Scottish royal family say they will no longer refuse to honour specific foods\"?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['short_headline'].eq('The Scottish royal family say they will no longer refuse to honour specific foods').any()\"\n}\n```\n\nInput DataFrame columns: ['level_0', 'index', 'num', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nQuestion: Which letters appear most frequently in the column \"b\"?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['b'].str.split(', ').explode().value_counts().idxmax().split(', ')\"\n}",
    "```json\n{\n    \"solution\": \"df[df['Loan Duration - Months'].lt(24)].groupby('Job')['Job'].count().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Android', 'iPhone', 'Blackberry', 'Amazon Kindle', 'Nokia', 'Windows Mobile', 'iPad', 'Win32']\nQuestion: Is there a dominant phone type in the dataset?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['Android', 'iPhone', 'Blackberry', 'Amazon Kindle', 'Nokia', 'Windows Mobile', 'iPad', 'Win32']].mean().gt(0.5).any()\"\n}\n```\n\nInput DataFrame columns: ['Employee Count', 'Postal Code', 'Hour', 'Typed', 'Duration', 'Call Type Group', 'City', 'State', 'Weighted Value', 'Returning Customer', 'Country']\nQuestion: Which city has the maximum number of unique phone calls?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.groupby('City')['City'].count().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Date of Joining', 'Last Stay', 'Room Type', 'Price', 'Meals', 'Bookings Cancelled', 'Previous Booking Not Cancelled', 'Age', 'Male', 'Female', 'Total Visits', 'Lead Time', 'Total_kudos', 'Total_Reviews', 'Average_Review_Rating', 'Total_Booking_in_Month', 'Total_Negative_Review', 'Total_Positive_Review', 'Reviewer_Score', 'Tags', 'Location', 'Review_Month', 'Avg_Rev_per_Month', 'Review_Year', 'No_Of_Nights', 'No_Of_Adults', 'No_Of_Children', 'No_Of_Rooms', 'Type_of_meal_plan', 'Required_Car_Parking_Space', 'Http_in_Tags', 'Cancellation_Last_Month', 'Category_1', 'Category_2', 'Category_3', 'Category_4', 'Category_5', 'Category_",
    "```json\n{\n    \"solution\": \"df[df['Number of Existing Loans'] == df['Number of Existing Loans'].max()]['Job'].value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['age_of_person', 'gender', 'is_male', 'is_female', 'is_ethnicity_mentioned', 'is_other_ethnicity', 'ethnicity', 'is_hispanic', 'is_other_hispanic', 'is_american_indian_or_alaskan_native', 'american_indian_or_alaskan_native', 'is_asian', 'asian', 'is_black_or_african_american', 'black_or_african_american', 'is_pacific_islander', 'pacific_islander', 'is_white', 'white', 'is_other_race_or_ethnicity', 'other_race_or_ethnicity', 'race_or_ethnicity', 'age_of_person']\nQuestion: Are there any people older than 70 with Hispanic ethnicity?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['is_hispanic'] == True) & (df['age_of_person'] > 70)].any().any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'age', 'gender', 'height', 'weight', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio']\nQuestion: Are there any people with non-zero cardio disease health risk that are 27 years old?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['cardio'] == 1) & (df['age'] == 27) & (df['height'] != 0)].any().any()\"\n}\n```\n\nInput DataFrame columns: ['tweet_id', 'airline_sentiment', 'airline_sentiment_confidence', 'negativereason', 'negativereason",
    "```json\n{\n    \"solution\": \"df.nlargest(2,'Age')['Job'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['NAME', 'AGE', 'SEX', 'FERTILITY', 'RELATIONSHIP', 'SPOUSE', 'CHILDREN', 'INCOME', 'DATE OF BIRTH', 'HEIGHT', 'WEIGHT', 'BMI', 'SPORTS', 'EXERCISE', 'DIET', 'DRUGS', 'SATISFACTION', 'MENTAL', 'PHYSICAL', 'FEMALE', 'MALE', 'RAG', 'DIAMOND', 'GOLD', 'SOLID', 'SILVER', 'GOLD', 'PLATINUM']\nQuestion: How many people have been born in America?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['NAME'].str.contains(',.*,USA').sum()\"\n}\n```\n\nInput DataFrame columns: ['Num', 'Link', 'Date', 'Title', 'Word', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Year', 'Total', 'Male', 'Female', 'Female', 'Female', 'Female', 'Female', 'Male', 'Male', 'Male']\nQuestion: What is the Zipf's Law coefficient for the word \"the\"?\nExpected return type: double\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Word'] == 'the', 'Total'].values[0] / df['Total'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Movie', 'Release Date', 'Budget', 'Domestic Gross', 'Worldwide Gross', 'Imdb']\nQuestion: What is the ceiling of the budget amount in millions?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Budget'].apply(lambda x: int(x.replace(' $', '').replace(',','')) // 1000000).max()\"\n}\n```\n\nInput DataFrame columns: ['tconst', 'titleType', 'primaryTitle', '",
    "```json\n{\n    \"solution\": \"df['Loan Amount'].nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['credit_score', 'purpose', 'credit_amount', 'years_employed', 'income', 'int_rate', 'payment_pc', 'defaulted', 'dependents', 'age', 'gender', 'city', 'state', 'zip_code']\nQuestion: Is there any record of credit card users with credit score higher than 800?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['credit_score'].gt(800).any()\"\n}\n```\n\nInput DataFrame columns: ['Y', 'X', 'CATEGORY', 'VEHICLE_TYPE', 'YEAR', 'MAKE', 'MODEL', 'COLOR', 'CITY', 'STATE', 'YEAR_LINCENSE', 'VIN', 'LATITUDE', 'LONGITUDE', 'DRIVING_EXPERIENCE', 'REPORT_DATE', 'REPORTING_AREA', 'REPORT_DATE_2']\nQuestion: What are the top 3 vehicle types found in the dataset?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['VEHICLE_TYPE'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'VIN', 'Make', 'Year', 'Model', 'Color', 'Fuel Type', 'Odometer', 'Engine', 'Transmission', 'Drivetrain', 'Body style', 'Description', 'Body_type', 'Mileage', 'Miles_per_Year', 'Horsepower', 'Torque', 'Energy_label', 'Manufacturer', 'Natural_gas', 'Date', 'Time', 'Address', 'City', 'State', 'Zip', 'County', 'Country', 'VIN_state', 'Vehicle_type', 'Vehicle_age', 'Vehicle_age_label', 'Exterior_color', 'Interior_color', 'Engine_type', 'Fuel_type', 'Fuel_ economy', 'Fuel_ economy_city', 'Fuel_ economy_hwy', 'Fuel_ economy_",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].nlargest(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'CUSTID', 'Avgas', 'Age', 'Salary', 'Marital_Status', 'City', 'Gender', 'EDUCATION', 'Credit_Card', 'Education_Level', 'Married', 'Income_Category', 'Card_Category', 'Months_on_book', 'Total_Relationship_Count', 'Months_Inactive_12_mon', 'Contacts_Count_12_mon', 'Credit_Limit', 'Total_Revolving_Bal', 'Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1', 'Total_Trans_Amt', 'Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1', 'Avg_Utilization_Ratio', 'Attrition_Flag']\nQuestion: How many females are in the dataset?\nExpected return type: integer\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Gender'] == 'F', 'Gender'].count()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'CUSTID', 'Avgas', 'Age', 'Salary', 'Marital_Status', 'City', 'Gender', 'EDUCATION', 'Credit_Card', 'Education_Level', 'Married', 'Income_Category', 'Card_Category', 'Months_on_book', 'Total_Relationship_Count', 'Months_Inactive_12_mon', 'Contacts_Count_12_mon', 'Credit_Limit', 'Total_Revolving_Bal', 'Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1', 'Total_Trans_Amt', 'Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1', 'Avg_Utilization_Ratio', 'Attrition_Flag']\nQuestion: What is the average age for customers with income greater than 212000?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Income_",
    "```json\n{\n    \"solution\": \"df['Number of Existing Loans'].nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['index', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'F20', 'F21', 'F22', 'F23', 'F24', 'F25', 'F26', 'F27', 'F28', 'F29', 'F30', 'F31', 'F32', 'F33', 'F34', 'F35', 'F36', 'F37', 'F38', 'F39', 'F40', 'F41', 'F42', 'F43', 'F44', 'F45', 'F46', 'F47', 'F48', 'F49', 'F50', 'F51', 'F52', 'F53', 'F54', 'F55', 'F56', 'F57', 'F58', 'F59', 'F60', 'F61', 'F62', 'F63', 'F64', 'F65', 'F66', 'F67', 'F68', 'F69', 'F70', 'F71', 'F72', 'F73', 'F74', 'F75', 'F76', 'F77', 'F78', 'F79', 'F80', 'F81', 'F82', 'F83', 'F84', 'F85', 'F86', 'F87', 'F88', 'F89', 'F90', 'F91', 'F92', 'F93', 'F94', 'F",
    "```json\n{\n    \"solution\": \"df.sort_values('Age', ascending=False).iloc[:2]['Age']\"\n}\n```\n\nInput DataFrame columns: ['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term', 'Credit_History', 'Married', 'Education', 'Property_Area', 'Loan_ID', 'Gender', 'ApplicantIncome_z_score', 'CoapplicantIncome_z_score', 'LoanAmount_z_score', 'Loan_Amount_Term_z_score', 'Credit_History_z_score', 'Gender_z_score', 'Married_z_score', 'Education_z_score', 'Property_Area_z_score', 'Loan_ID_z_score']\nQuestion: What is the average income of applicants who have a lower credit history score?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Credit_History_z_score'] < df['Credit_History_z_score'].mean()) & (df['Credit_History'] == 1)]['ApplicantIncome'].mean()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'age', 'gender', 'family_history', 'personal_history', 'race', 'education', 'year_of_experience', 'annual_income', 'risk_factor', 'insurance_history', 'number_of_vehicles_involved', 'driver_injuries', 'total_claim_amount', 'property_damage', 'witness', 'police_report_available', 'fraudulent']\nQuestion: Is there a discrepancy between people with high income and high risk factor?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df['risk_factor'] == 'High').any() and (df['annual_income'] > 150000)\"\n}\n```\n\nInput DataFrame columns: ['ID', 'age', 'gender', 'family_history', 'personal_history', 'race', 'education', 'year_of_experience', 'annual_income', 'risk_factor', 'insurance_history', 'number_of",
    "```json\n{\n    \"solution\": \"df['Calories (kcal)'].eq(0).any()\"\n}\n```\n# Python - Searching and Sorting Algorithms\n\n## Table of contents\n- [Introduction](#introduction)\n- [Searching Algorithms](#searching-algorithms)\n- [Sorting Algorithms](#sorting-algorithms)\n- [Exercise - Implementing Searching and Sorting Algorithms](#exercise---implementing-searching-and-sorting-algorithms)\n- [Exercise - Implementing Searching and Sorting Algorithms (Part 2)](#exercise---implementing-searching-and-sorting-algorithms-part-2)\n\n## Introduction\n\nSearching is one of the most common operations we do while working with datasets. We are asked to search for certain elements in a dataset, and sometimes the dataset is very large. We can't possibly search through all the items in the dataset. Fortunately, we can employ more advanced techniques when it comes to searching through our datasets.\n\nThere are many different ways to search through a dataset. Of course, one could just manually look at each element in the dataset to find a match. Although this is often the simplest method, it sucks in terms of efficiency. Imagine if your dataset was of size 10 million elements, and you had to manually look at each element. That would take a long time.\n\nWe can speed up our search by employing different algorithms. And luckily for us, Python comes with a bunch of different implementations of these algorithms already implemented!\n\nSo, before we get started, I would like to clarify something. I know, it's a bit confusing, but Python's built-in searching and sorting methods are actually different algorithms. They are not guaranteed to be the most efficient algorithms out there. However, they are more than efficient enough for our purposes. Therefore, we will use them in our exercises.\n\nHere's a small demonstration of one of Python's built-in algorithms.\n\n```python\n# search_in_list.py\n\nlist_of_elements = [1, 3, 4, 6, 8]\n\n# Python's built-in binary search algorithm\n# can be found in the built-in'scientific' module.\nimport scientific.binarysearch as binarysearch\n\n# The search method can find an element",
    "```json\n{\n    \"solution\": \"return all([df[i].str.contains('sugar') for i in df.columns])\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Response', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Age', 'Marital_Status', 'Kidhome', 'Teenhome', 'Income', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Days_Customer', 'Response_n', 'Education', 'Marital_Status', 'Age', 'Marital_Status', 'Kidhome', 'Teenhome', 'Income', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Days_Customer', 'Response_n', 'Education', 'Marital_Status', 'Age', 'Marital_Status', 'Kidhome', 'Teenhome', 'Income', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Days_Customer', 'Response_n']\nQuestion: Does education play a part in",
    "```json\n{\n    \"solution\": \"df['Total Fat (g)'].eq(0).any()\"\n}\n```\n\nInput DataFrame columns: ['store', 'item', 'sales', 'first_day', 'last_day']\nQuestion: Which store has the highest total sales?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('store')['sales'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['time', 'Tracer', 'Track (in)', 'Track (out)', 'Spark (in)', 'Spark (out)', 'Capacitor (in)', 'Capacitor (out)', 'Bolt', 'Plate']\nQuestion: Which Track has the lowest average spark value?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Track (in)')['Spark (in)'].mean().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['time', 'Torque Capacitor', 'Torque Bolt', 'Torque Plate', 'Torque Track', 'Torque Foot Plate', 'Pressure Foot Plate', 'Pressure Top Plate', 'Pressure Track (in)', 'Pressure Track (out)', 'Temperature Foot Plate', 'Temperature Top Plate', 'Temperature Track (in)', 'Temperature Track (out)', 'Voltage Foot Plate', 'Voltage Top Plate', 'Voltage Track (in)', 'Voltage Track (out)', 'Current Bolt', 'Current Capacitor', 'Current Foot Plate', 'Current Top Plate', 'Current Track (in)', 'Current Track (out)', 'Power Foot Plate', 'Power Top Plate', 'Power Track (in)', 'Power Track (out)', 'Torque Plate (out)', 'Torque Bolt (out)', 'Torque Track (out)', 'Power Bolt', 'Power Capacitor', 'Power Plate', 'Power Track']\nQuestion: Which track has the highest average pressure?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Track (in)')['Pressure Track (in)'].mean().idxmax()\"\n}\n```\n\nInput DataFrame",
    "```json\n{\n    \"solution\": \"return df['Protein (g)'].eq(0).any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'nppes_provider_state', 'nppes_provider_city', 'nppes_entity_code', 'nppes_provider_zip', 'nppes_provider_zip4', 'nppes_provider_country', 'nppes_provider_phone', 'nppes_provider_phone_ext', 'nppes_provider_website', 'nppes_provider_gender', 'nppes_provider_medicare_participation_indicator', 'nppes_provider_nurse_participation_indicator', 'nppes_provider_optometrist_indicator', 'nppes_provider_optician_indicator', 'nppes_provider_optometric_provider_indicator', 'nppes_provider_ophthalmologist_indicator', 'nppes_provider_dental_hygienist_indicator', 'nppes_provider_dental_indicator', 'nppes_provider_hospitalist_indicator', 'nppes_provider_physician_indicator', 'nppes_provider_primary_care_physician_indicator', 'nppes_provider_specialist_indicator', 'nppes_provider_certificate_indicator', 'npi', 'nppes_provider_last_name', 'nppes_provider_first_name', 'provider_type', 'medicare_participation_indicator', 'medicaid_participation_indicator', 'behavioral_surveillance_participation_indicator', 'opportunity_indicator', 'hospital_institutional_facility_indicator', 'device_indicator', 'outpatient_indicator', 'inpatient_indicator', 'pcp_indicator', 'specialist_indicator', 'place_of_service', 'hvbp_hcp_ indicator', 'hcpcs_code', 'hcpcs_description', 'hcpcs_drug_indicator', 'HCPCS_DRUG_UNIT_COUNT', 'line_srvc_cnt', 'bene_unique_cnt', 'bene_day_srvc_cnt', 'average_Medicare",
    "```json\n{\n    \"solution\": \"df[df['Calories (kcal)'] > 500]['name'].count()\"\n}\n```\n\nInput DataFrame columns: ['title', 'date', 'date_created', 'feature', 'recommendations', 'author', 'author_id', 'content_id', 'channel', 'category', 'thumbnail', 'image', 'views', 'videos', 'url', 'comments_count', 'shares_count', 'likes_count', 'dislikes_count', 'created_utc', 'domain', 'reactions.like', 'reactions.love', 'reactions.wow', 'reactions.haha', 'reactions.sad', 'reactions.angry', 'reactions.thankful', 'reactions.significant_other', 'reactions.humor', 'reactions.sad', 'reactions.music', 'reactions.question', 'reactions.politics', 'reactions.dating', 'reactions.diet', 'reactions.military', 'reactions.news', 'reactions.wedding', 'reactions.scholarship', 'reactions.religion', 'reactions.relationships', 'reactions.kids', 'reactions.education', 'reactions.travel', 'reactions.career', 'reactions.sports', 'reactions.aww', 'reactions.guns', 'reactions.health', 'reactions.business', 'reactions.fatal_trauma', 'reactions.psychology', 'reactions.fitness', 'reactions.technology', 'reactions.family', 'reactions.animals', 'reactions.lifestyle', 'reactions.science', 'reactions.animals', 'reactions.style', 'reactions.decor', 'reactions.fashion', 'reactions.shopp', 'reactions.comedy', 'reactions.art']\nQuestion: Where are the authors from?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['author'].str.split('|', expand=True)[1].str.split('(', expand=True)[0].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['",
    "```json\n{\n    \"solution\": \"df['Total Fat (g)'].mean()\"\n}\n```\n\nInput DataFrame columns: ['name', 'id', 'url', 'mobile_url', 'image_url', 'subtitle', 'label_name', 'description', 'display_times', 'start_date', 'end_date', 'status', 'sale_id', 'vendor_id', 'organizer_id', 'parent_id', 'updated_at', 'time_commitment', 'num_purchase_min', 'num_purchase_max', 'is_series', 'is_series_parent', 'is_series_child', 'is_series_lead', 'is_official', 'is_online_only', 'is_active', 'is_reserved_seating', 'is_waitlist_enabled', 'is_external_ticketing_only', 'is_free', 'is_canceled', 'is_closed', 'is_semifinals_series', 'is_finals_series', 'rsvp_limit', 'maximum_age', 'minimum_age', 'info_url', 'info_url_text', 'images', 'hide_from_lists', 'date', 'sold_out', 'is_presale', 'is_event_schedulable', 'is_webflow_event', 'is_user_challengable', 'is_mediasite_event', 'is_mediasite_outbound_event', 'is_mediasite_inbound_event', 'is_mediasite_iframe_event', 'is_mediasite_mobile', 'is_mediasite_over_capacity', 'is_mediasite_foreign_locale', 'is_mediasite_event_cancelled', 'is_mediasite_user_cancelled', 'is_mediasite_user_approved', 'is_mediasite_user_profile_complete', 'is_mediasite_user_phone_verified', 'is_mediasite_user_id_verified', 'is_mediasite_campaign_event', 'is_mediasite_staff_event', 'is_mediasite_load_complete', 'is_mediasite_event_rescheduled_to_next_year',",
    "```json\n{\n    \"solution\": \"df['Sodium (g)'].gt(1).sum()\"\n}\n```\n\n\nInput DataFrame columns: ['id', 'timestamp', 'city_id', 'day', 'hour', 'device_id', 'ip_address', 'site_id', 'app_id', 'app_domain', 'app_category', 'device_type', 'device_conn_type', 'C1', 'C15', 'C16', 'C18', 'C21', 'C20', 'C29', 'C23', 'C25', 'C26', 'C28', 'hour_col', 'day_col', 'app_id_col', 'app_domain_col', 'app_category_col', 'device_type_col', 'device_conn_type_col', 'C1_col', 'C15_col', 'C16_col', 'C18_col', 'C21_col', 'C20_col', 'C29_col', 'C23_col', 'C25_col', 'C26_col', 'C28_col', 'hour_cat', 'day_cat', 'app_id_cat', 'app_domain_cat', 'app_category_cat', 'device_type_cat', 'device_conn_type_cat', 'C1_cat', 'C15_cat', 'C16_cat', 'C18_cat', 'C21_cat', 'C20_cat', 'C29_cat', 'C23_cat', 'C25_cat', 'C26_cat', 'C28_cat', 'hour_num', 'day_num', 'app_id_num', 'app_domain_num', 'app_category_num', 'device_type_num', 'device_conn_type_num', 'C1_num', 'C15_num', 'C16_num', 'C18_num', 'C21_num', 'C20_num', 'C29_num', 'C23_num', 'C25_num",
    "```json\n{\n    \"solution\": \"df['Protein (g)'].max()\"\n}\n```\n\nInput DataFrame columns: ['neighbourhood_group', 'neighbourhood', 'room_type', 'price', 'minimum_nights', 'number_of_reviews', 'calculated_host_listings_count', 'availability_365']\nQuestion: How many rooms of type Entire home/apt in Manhattan are available for minimum stay of 7 days?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df.query('neighbourhood_group == \"Manhattan\" and minimum_nights == 7 and room_type == \"Entire home/apt\"'))\"\n}\n```\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Which of the following statements is true for pregnant women with diabetes?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.query('Pregnancies > 0 and DiabetesPedigreeFunction > 1.5')['Outcome'].all()\"\n}\n```\n\nInput DataFrame columns: ['Sex', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Cabin']\nQuestion: How many females are under the age of 30?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df.query('Age < 30 and Sex == \"female\"'))\"\n}\n```\n\nInput DataFrame columns: ['price', 'minimum_nights', 'number_of_reviews', 'review_scores_rating', 'calculated_host_listings_count', 'availability_365']\nQuestion: What is the average price of a room at the hotel?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['price'].mean()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Calories (kcal)'].idxmax()]['name']\"\n}\n```\n\nInput DataFrame columns: ['CustomerID', 'Gender', 'Age', 'Occupation', 'City_Category', 'Stay_In_Current_City_Years', 'Marital_Status', 'Product_Category_1', 'Product_Category_2', 'Product_Category_3', 'Purchase']\nQuestion: What product category has the most purchases?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Product_Category_1').apply(lambda g: g['Purchase'].max()).idxmax()\"\n}\n```\n\nInput DataFrame columns: ['children', 'school', 'sex', 'address', 'famsize', 'Pstatus', 'Medu', 'Fedu', 'Mjob', 'Fjob', 'reason', 'guardian', 'traveltime', 'studytime', 'failures', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences', 'G1', 'G2', 'G3']\nQuestion: How many students study for more than 3 hours per week?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['studytime'] > 3]['studytime'].count()\"\n}\n```\n\nInput DataFrame columns: ['SocialStatus', 'Age', 'Profession', 'CurrentEarnings', 'Sex', 'Education', 'HispanicEasternLatino', 'Race', 'MaritalStatus', 'Children', 'VehicleOccupied', 'HomeOwnerStatus', 'HomeOwnerStatus', 'HomeValue', 'HomeNetWorth', 'HomeEquity', 'HomeIncome', 'HomeMortgage', 'AnnualIncome', 'AnnualExpenses', 'Debt', 'AvgLengthOfResidence', 'AvgMonthlyHousingPayment']\nQuestion: Is there any person with a \"SocialStatus\" above 10?\nExpected return type: boolean\n\nCode that calculates the",
    "```json\n{\n    \"solution\": \"df['Total Sugar (g)'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23', 'x24', 'x25', 'x26', 'x27', 'x28', 'x29', 'x30', 'x31', 'x32', 'x33', 'x34', 'x35', 'x36', 'x37', 'x38', 'x39', 'x40', 'x41', 'x42', 'x43', 'x44', 'x45', 'x46', 'x47', 'x48', 'x49', 'x50', 'x51', 'x52', 'x53', 'x54', 'x55', 'x56', 'x57', 'x58', 'x59', 'x60', 'x61', 'x62', 'x63', 'x64', 'x65', 'x66', 'x67', 'x68', 'x69', 'x70', 'x71', 'x72', 'x73', 'x74', 'x75', 'x76', 'x77', 'x78', 'x79', 'x80', 'x81', 'x82', 'x83', 'x84', 'x85', 'x86', 'x87', 'x88', 'x89', 'x90', 'x91', 'x92', 'x93', 'x94', 'x95",
    "```json\n{\n    \"solution\": \"df.loc[df['Total Fat (g)'].idxmin(), 'name']\"\n}\n```\n\nInput DataFrame columns: ['recipe_id', 'title', 'preparation_time', 'cook_time', 'ingredients', 'instructions', 'rating', 'total_time', 'n_comments', 'date', 'author', 'author_url', 'n_views', 'n_people', 'n_servings', 'nutrition_per_serving', 'nutrition', 'tags']\nQuestion: Which cook time has the highest average rating?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['cook_time'])['rating'].mean().sort_values(ascending=False).index[0]\"\n}\n```\n\nInput DataFrame columns: ['reviews', 'date', 'reviewer', 'rating', 'food', 'service', 'ambience', 'value', 'comments']\nQuestion: Which reviewer gave the highest food rating?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['reviewer'])['food'].mean().sort_values(ascending=False).index[0]\"\n}\n```\n\nInput DataFrame columns: ['index', 'Term', 'Company', 'Rating', 'Sector', 'Type', 'Size', 'Id', 'Firm', 'Revenue', 'Founded', 'Address', 'City', 'State', 'Phone', 'Zip', 'Industry', 'Country', 'Constituency', 'Sector', 'Url', 'Date', 'Time', 'Comments']\nQuestion: What is the average rating of firms that are located in the United States?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Country'] == 'United States']['Rating'].mean()\"\n}\n```\n\nInput DataFrame columns: ['years', 'gender', 'age', 'race', 'university', 'job', 'degree', 'major', 'profession', 'industry', 'country', 'experience', 'salary', 'educational_level', 'profession_status', 'rpa_level', 'f1_degree_score',",
    "```json\n{\n    \"solution\": \"df[df['Protein (g)'].gt(0)].sort_values('Protein (g)').iloc[-1,'name']\"\n}\n```\n\nInput DataFrame columns: ['male', 'age', 'female', 'married', 'location']\nQuestion: How many people are married per country?\nExpected return type: dict[country->number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('location')['married'].sum().to_dict()\"\n}\n```\n\nInput DataFrame columns: ['male', 'age', 'female', 'married', 'location']\nQuestion: What is the median age for male users in Canada?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['location'] == 'Canada') & (df['male'] == 1)]['age'].median()\"\n}\n```\n\nInput DataFrame columns: ['Number', 'Owner', 'Area_km2', 'Population', 'Country', 'District', 'County', 'Region', 'Road_name']\nQuestion: Which city has the largest number of residents?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('District')['Population'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['customerID', 'gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod', 'MonthlyCharges', 'TotalCharges', 'Churn']\nQuestion: Is there any person with phone service, no internet service, no online security, no online backup?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup']].eq('No').any(axis=1).all()\"\n}\n```\n\nInput DataFrame columns: ['customerID', 'gender', 'Senior",
    "```json\n{\n    \"solution\": \"df.nlargest(5, 'Calories (kcal)')['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['sequence', 'id', 'reference', 'length', 'date', 'species', 'filename']\nQuestion: List the 3 most common sequences.\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['sequence'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nData set columns: ['date', 'time', 'low_battery', 'capacity_level', 'C_capacity_level', 'temperature', 'humidity', 'PM1_0', 'PM2_5', 'PM10', 'TSP', 'station_code', 'pollutant', 'unit', 'value']\nQuestion: How many samples are above pollutant limit?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['value'] > 100]['value'].count()\"\n}\n```\n\nInput DataFrame columns: ['count', 'date', 'lifetime', 'status', 'mark_id', 'name', 'owner', 'comment', 'created_date', 'available', 'annotation', 'tags', 'photo_count', 'type', 'videos', 'location_id', 'location']\nQuestion: What is the x coordinate of the location with the most photos?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['location']['location'].apply(lambda x: x['latitude']).max()\"\n}\n```\n\nInput DataFrame columns: ['source', 'destination', 'distance_km', 'travel_time_minutes', 'traffic_volume', 'traffic_volume_historical_average', 'date']\nQuestion: What is the average travel time in minutes?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['travel_time_minutes'].mean()\"\n}\n```\n\nInput DataFrame columns: ['speed_limit', 'speed', 'date', 'time', 'location_id']\nQuestion: Is there any speed above 8",
    "```json\n{\n    \"solution\": \"df['Total Sugar (g)'].nsmallest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'company_id', 'employee_id', 'points', 'log_id', 'branch_id', 'branch_name', 'grading_date', 'date_of_creation', 'created_by', 'last_updated', 'last_updated_by', 'is_deleted', 'status', 'comments']\nQuestion: What is the most common status of the log entries?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['status'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'log_id', 'company_id', 'branch_id', 'branch_name', 'status', 'is_deleted', 'created_by', 'last_updated_by', 'grading_date', 'date_of_creation', 'last_updated', 'comments', 'points']\nQuestion: What is the company with the highest number of log entries?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['company_id'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['accident_id', 'sex', 'air_bag_location', 'year_of_birth', 'day_of_week', 'month_of_accident', 'number_of_vehicles_involved', 'weather_condition', 'road_surface_condition', 'atmospheric_condition', 'work_zone', 'first_harmful_event', 'light_condition', 'vehicle_maneuver', 'vehicle_type', 'vehicle_configuration', 'name_of_driver', 'action_taken', 'age_of_driver', 'sex_of_driver', 'age_of_vehicle', 'location_of_the_vehicle', 'distance_from_the_scene_of_the_accident_to_the_nearest_intersection', 'could_fire_extinguisher', 'could_use_cellphone', 'could_use_safety_belt', 'could_use_other",
    "```json\n{\n    \"solution\": \"df.sort_values('Total Fat (g)', ascending=False).head(4)['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['health_status', 'country', 'user_id', 'likes_Men', 'likes_Women', 'likes_Transgender', 'likes_Nonbinary', 'likes_Genderqueer', 'likes_Other', 'likes_Bi', 'likes_Democrat', 'likes_Libertarian', 'likes_Green', 'likes_Unaffiliated', 'likes_Republican', 'likes_Conservative', 'likes_Protestant', 'likes_Jewish', 'likes_Rastafarian', 'likes_Islamic', 'likes_Buddhist', 'likes_Hindu', 'likes_Sikh', 'likes_Bahai', 'likes_OtherChristian', 'likes_Spiritual', 'likes_Catholic', 'likes_Evangelical', 'likes_OtherReligious', 'likes_None', 'user_name', 'user_bio', 'user_created_date', 'user_verified_date', 'user_verified_reason', 'user_verified_photo', 'user_profile_photo', 'user_profile_photo_width', 'user_profile_photo_height', 'user_profile_photo_size', 'user_cover_photo', 'user_cover_photo_width', 'user_cover_photo_height', 'user_cover_photo_size', 'user_pinned_post_id', 'user_pinned_post_date', 'user_pinned_post_text', 'user_pinned_post_picture', 'pinned_post_likes_count', 'pinned_post_comments_count', 'pinned_post_reactions_count', 'pinned_post_shares_count', 'pinned_post_type', 'pinned_post_status', 'pinned_post_created_date', 'pinned_post_last_activity_date', 'pinned_post_last_update_date', 'pinned_post_video_duration', 'pinned_post_video_url', 'pinned_post_video_id', 'pinned_post_video_width', 'pinned_post",
    "```json\n{\n    \"solution\": \"df.nsmallest(6, 'Protein (g)')['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['first_date', 'last_date', 'last_date_x', 'last_date_y', 'age', 'age_range', 'age_range_category', 'gender', 'gender_category', 'gender_range', 'gender_range_category', 'age_gender', 'age_gender_category', 'race', 'race_category', 'lat', 'lng', 'place', 'state', 'state_name', 'county', 'county_fips', 'county_name', 'msa', 'msa_name', 'census_tract', 'census_block', 'census_block_group', 'census_block_group_number', 'census_block_id', 'census_block_pop', 'acs_1yr', 'acs_5yr', 'acs_1yr_data_id', 'acs_5yr_data_id']\nQuestion: What is the most common race?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['race'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['product_name', 'aisle', 'department', 'aisle_id', 'product_id', 'add_to_cart_order', 'reordered', 'eval_set']\nQuestion: What is the most common aisle?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['aisle'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['name', 'review_date', 'review_year', 'review_month', 'review_day_of_week', 'product_id', 'product_name', 'product_category_name', 'rating', 'review_text', 'review_title', 'review_do_recommend', 'num_helpful', 'num_total_reviews', 'year_month']\nQuestion: What is the name of the product with the most helpful reviews?\nExpected return type: category\n\nCode that calculates the answer",
    "```json\n{\n    \"solution\": \"df['Calories (kcal)'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'emoji', 'Calories (kcal)', 'Carbohydrates (g)', 'Total Sugar (g)', 'Protein (g)', 'Total Fat (g)', 'Saturated Fat (g)', 'Monounsaturated Fat (g)', 'Polyunsaturated Fat (g)', 'Total Fiber (g)', 'Cholesterol (mg)', 'Vitamin B6 (mg)', 'Vitamin A (IU)', 'Vitamin B12 (ug)', 'Vitamin C (mg)', 'Vitamin D (IU)', 'Vitamin E (IU)', 'Vitamin K (ug)', 'Thiamin (mg)', 'Riboflavin (mg)', 'Niacin (mg)', 'Folate (ug)', 'Pantothenic Acid (mg)', 'Choline (mg)', 'Calcium (g)', 'Copper (mg)', 'Iron (mg)', 'Magnesium (mg)', 'Manganese (mg)', 'Phosphorus (g)', 'Potassium (g)', 'Selenium (ug)', 'Sodium (g)', 'Zinc (mg)']\nQuestion: List all of the unique names of the products that contain more than 1000 calories.\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Calories (kcal)'] > 1000]['name'].unique().tolist()\"\n}\n```\n\nInput DataFrame columns: ['step_title', 'step_title_en', 'step_description', 'step_description_en', 'step_image_url', 'display_title', 'display_title_en', 'display_description', 'display_description_en', 'display_image_url', 'display_video_url', 'display_video_url_en', 'requires_suggester', 'has_completed_step', 'has_live_step', 'display_order', 'step_order', 'author_username', 'author_display_name', 'author_",
    "```json\n{\n    \"solution\": \"df['Total Sugar (g)'].nsmallest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['index', 'name', 'calories', 'carbs', 'sugars', 'protein', 'fat', 'saturated', 'monounsaturated', 'polyunsaturated', 'fiber', 'cholesterol', 'vitamin_b6', 'vitamin_a', 'vitamin_b12', 'vitamin_c', 'vitamin_d', 'vitamin_e', 'vitamin_k', 'thiamin', 'riboflavin', 'niacin', 'folate', 'pantothenic_acid', 'choline', 'calcium', 'copper', 'iron', 'magnesium', 'manganese', 'phosphorus', 'potassium', 'selenium', 'sodium', 'zinc']\nQuestion: Which 3 foods have the lowest amount of carbohydrate?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['carbs'].nsmallest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'calories', 'carbs', 'sugars', 'protein', 'fat', 'saturated', 'monounsaturated', 'polyunsaturated', 'fiber', 'cholesterol', 'vitamin_b6', 'vitamin_a', 'vitamin_b12', 'vitamin_c', 'vitamin_d', 'vitamin_e', 'vitamin_k', 'thiamin', 'riboflavin', 'niacin', 'folate', 'pantothenic_acid', 'choline', 'calcium', 'copper', 'iron', 'magnesium', 'manganese', 'phosphorus', 'potassium', 'selenium', 'sodium', 'zinc']\nQuestion: What are the 3 foods with the lowest amount of protein?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['protein'].nsmallest",
    "```json\n{\n    \"solution\": \"df['Total Fat (g)'].nlargest(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'calories', 'total_fat', 'saturated_fat', 'sodium', 'protein', 'carbohydrates', 'sugars', 'calcium', 'iron', 'badge_type', 'badge_name', 'badges', 'badge_description', 'badge_background_color', 'badge_title', 'badge_text_color']\nQuestion: Which category of food has the highest amount of saturated fat?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['saturated_fat'].idxmax(), 'badge_type']\"\n}\n```\n\nInput DataFrame columns: ['Year', 'Month', 'Day', 'TempC', 'Dew PointC', 'Humidity', 'Sea Level PressurehPa', 'VisibilityKm', 'Wind SpeedKm/h', 'Wind Direction', 'Gust SpeedKm/h', 'Precipitationmm']\nQuestion: What are the top 5 highest temperatures recorded in the dataset?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['TempC'].nlargest(5).tolist()\"\n}\n```\nimport json\nimport os\nimport re\n\nimport numpy as np\nimport pandas as pd\nimport pytest\n\nfrom exercise1 import read_data, parse_data, get_solution\n\n_dataset = \"comp551_exercise1_dataset\"\n_input_dir = f\"data/{_dataset}/input\"\n_solution_dir = f\"data/{_dataset}/solution\"\n_parameters_dir = f\"data/{_dataset}/parameters\"\n_output_dir = f\"data/{_dataset}/output\"\n\n_output_files = os.listdir(_output_dir)\n\n_all_files = [ _input_dir + \"/\" + f for f in _output_files]\n\n\ndef pytest_generate_tests(metafunc):\n    if 'dataset' in metafunc.fixturenames:\n        metafunc.parametrize(\"dataset\", [_input",
    "```json\n{\n    \"solution\": \"df.sort_values('Protein (g)')['Protein (g)'].head(6).tolist()\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Which source has the highest average age?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('source')['age'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Are any of the customers with income higher than 100,000 married?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['Income'].gt(100000)) & (df['Marital_Status'].str.contains('Married'))].size > 0\"\n}\n```\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_list",
    "```json\n{\n    \"solution\": \"df['edu'].str.contains('Primary').any()\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'user', 'newquestion', 'answer', 'question_id', 'user_id']\nQuestion: Are there any respondents who said their favorite color was purple?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['answer'].str.contains('purple').any()\"\n}\n```\n\nInput DataFrame columns: ['Timestamp', 'What is your age?', 'What is your gender?', 'What is your ethnicity?', 'What is your nationality?', 'What is the highest level of education you have completed?', 'Do you have children?', 'Do you have a dog?', 'Do you have cats?', 'Do you have pet dogs?', 'Do you have pet cats?', 'Do you have pets?', 'What is your marital status?', 'Is your partner in a relationship?', 'Are you in a relationship?', 'How often do you go on holiday?', 'How often do you travel?', 'How frequently do you visit your partner?', 'Do you own your own home?', 'Do you rent your home?', 'Are you planning on buying your own home?', 'How likely are you to receive aid/support from your partner?', 'How likely are you to receive aid/support from your partner when you need it?', 'In a month, how many times do you go to your partner?', 'In a month, how many times do you go to your partner when you need it?', 'In a month, how many times do you spend time with your partner?', 'On average, how many times do you sleep with your partner per night?', 'How often do you use a condom?', 'How often do you use a condom when sleeping with your partner?', 'How often do you use a condom when going out?', 'Before going out at night with your partner, do you wash your hands?', 'Before going out at night with your partner, do you wash your hands when using a condom?', 'Before going out at night with your partner, do you wash your hands when not using a condom?', 'Before going out at night with your partner, do you wash your hands when not using a condom and you do not",
    "```json\n{\n    \"solution\": \"df['polInterest'].eq(1).all()\"\n}\n```\n\nInput DataFrame columns: ['id_music', 'id_preg', 'id_izq', 'id_der', 'id_danz', 'id_cine', 'id_teatro', 'id_musica', 'id_cocina', 'id_literatura', 'id_lectura', 'id_television', 'id_deportes', 'id_cuad', 'id_museo', 'id_tecnologia', 'id_familia', 'id_cultura', 'id_artistica', 'id_ciencia', 'id_trabajo', 'id_moda', 'id_comunicacion', 'id_terceraedad', 'id_otros', 'id_lista']\nQuestion: Which of the following groups of activities do you consider part of your life? 0 = No, 1 = Yes\nExpected return type: category[0, 1]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['id_familia'].mode()[0]\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'age', 'gender', 'escolaridad', 'ocupacion', 'estado_civil', 'edad_hijos', 'hijos', 'trabajo_hijos', 'trabajo_hijos_cols', 'edad_companero', 'trabajo_companero', 'trabajo_companero_cols', 'user_id_2', 'partyId', 'prevVoteCat', 'prevVote', 'partyId_2', 'prevVoteCat_2', 'prevVote_2']\nQuestion: Who is more likely to have been allied to the parties that supported the government in the last election?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.corr().loc['partyId', 'prevVote'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['b', 'fever', 'cough', 'fatigue', 'sore_throat', 'headache', 'shortness_of",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].str.contains('No').any()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Education', 'Gender', \"I'm not sure (I won't choose)\", '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'Post-Communist', 'Spain should be in the EU', 'The interests of the working class (as opposed to those of the rich and powerful) should be the main purpose of the Political System', 'The government is doing a good job', 'Does not matter (I don\\'t vote)', 'France', 'French law is the stylus of the Spanish people', 'I understand and accept the main points of the Constitution', 'It is necessary that the future of Spain is the one determined by the interests of the working class, which is why the political system should be extremely conservative', 'I will not vote for ', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].eq('Right-Left').any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'host_name', 'host_id', 'host_since', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_listings_count', 'host_has_profile_pic', 'host_identity_verified', 'neighbourhood', 'neighbourhood_cleansed', 'neighbourhood_group_cleansed', 'city', 'state', 'market', 'smart_location', 'latitude', 'longitude', 'is_location_exact', 'property_type', 'room_type', 'accommodates', 'bathrooms', 'bedrooms', 'beds', 'bed_type', 'amenities', 'square_feet', 'price', 'weekly_price', 'monthly_price', 'security_deposit', 'cleaning_fee', 'guests_included', 'extra_people', 'minimum_nights', 'maximum_nights', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'number_of_reviews', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'first_review', 'last_review', 'review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'requires_license', 'license', 'jurisdiction_names', 'instant_bookable', 'cancellation_policy', 'require_guest_profile_picture', 'require_guest_phone_verification', 'calculated_host_listings_count', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'reviews_per_month', 'is_business_travel_ready']\nQuestion: Which host has the most number of listings?\nExpected return type: category",
    "```json\n{\n    \"solution\": \"df[df['userSelfPlacement'] == 'Progressive'] == 10).sum()\"\n}\n```\n\nInput DataFrame columns: ['TimeInvested', 'ID', 'Divorce', 'Country', 'Political', 'Opposition', 'Economy', 'Society', 'Health', 'Security', 'Age', 'Education', 'Profession', 'Party', 'Income', 'Gender', 'Years', 'Hours', 'Country', 'City', 'Vegetarian', 'Diet', 'Smoking', 'Alcohol', 'FeelHealthy', 'Technology', 'TechSupport', 'Relationship', 'Religious', 'Healthcare', 'GeneralHealth', 'Internet', 'Freedom', 'Economy', 'PublicService', 'PublicAdministration', 'Education', 'Research', 'Innovation', 'Medicine']\nQuestion: How many respondents took less than 50% of their life to informally learn about politics at home?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['TimeInvested'].le(50).sum()\"\n}\n```\n\nInput DataFrame columns: ['Education', 'Gender', 'Age', 'CreditScore', 'Country', 'Ethnicity', 'Profession', 'NumberCars', 'AgeOfCars', 'Profession', 'EstimatedSalary']\nQuestion: Is there any person with salary higher than 200000?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['EstimatedSalary'].gt(200000).any()\"\n}\n```\n\nInput DataFrame columns: ['Hour', 'Minute', 'Duration', 'Protocol', 'Src_Bytes', 'Dst_Bytes', 'Land', 'Wrong_Fragment', 'Urgent', 'Hot', 'Num_failed_logins', 'Logged_in', 'Num_compromised', 'Root_shell', 'Su_attempted', 'Num_root', 'Num_file_creations', 'Num_shells', 'Num_access_files', 'Num_outbound_cmds', 'Is_host_login', 'Is_guest_login', 'Count',",
    "```json\n{\n    \"solution\": \"df['Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Zipcode', 'Gender', 'Income', 'Occupation', 'Marital Status', 'ProductID', 'CategoryID', 'PurchaseAmount']\nQuestion: What is the maximum purchase amount paid by customers?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['PurchaseAmount'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'member_id', 'loan_amnt', 'funded_amnt', 'funded_amnt_inv', 'term', 'int_rate', 'installment', 'grade', 'sub_grade', 'issue_d', 'loan_status', 'purpose', 'title', 'dti', 'delinq_2yrs', 'earliest_cr_line', 'inq_last_6mths', 'mths_since_last_delinq', 'mths_since_last_record', 'open_acc', 'pub_rec', 'revol_bal', 'revol_util', 'total_acc', 'initial_list_status', 'out_prncp', 'out_prncp_inv', 'total_pymnt', 'total_pymnt_inv', 'total_rec_prncp', 'total_rec_int', 'total_rec_late_fee', 'recoveries', 'collection_recovery_fee', 'last_pymnt_d', 'last_pymnt_amnt', 'next_pymnt_d', 'last_credit_pull_d', 'collections_12_mths_ex_med', 'mths_since_last_major_derog', 'policy_code', 'application_type', 'annual_inc_joint', 'dti_joint', 'verification_status', 'verification_status_joint', 'acc_now_delinq', 'tot_coll_amt', 'tot_cur_bal', 'open_acc_6m', 'open_act_il', 'open_il_12m', 'open_il_24m', 'mths_since_rcnt_il', 'total_bal_il', '",
    "```json\n{\n    \"solution\": \"df['voteReason'].str.contains('It should be more difficult for companies to lay off workers').sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'file_name', 'label', 'dataset_label']\nQuestion: What is the ratio between \"Darwin\" and \"Darwin, Darwin\" labels?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['label'].str.split(',').str.contains('Darwin')])/len(df)\"\n}\n```\n\nInput DataFrame columns: ['id', 'file_name', 'label', 'dataset_label']\nQuestion: What is the most common label?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['label'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'file_name', 'label', 'dataset_label']\nQuestion: What is the ratio between \"Einstein\" and \"Einstein, Einstein\" labels?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['label'].str.split(',').str.contains('Einstein')])/len(df)\"\n}\n```\n\nInput DataFrame columns: ['id', 'file_name', 'label', 'dataset_label']\nQuestion: What is the ratio between \"Hoffmann\" and \"Hoffmann, Hoffmann\" labels?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['label'].str.split(',').str.contains('Hoffmann')])/len(df)\"\n}\n```\n\nInput DataFrame columns: ['id', 'file_name', 'label', 'dataset_label']\nQuestion: What is the ratio between \"Huppert\" and \"Huppert, Huppert\" labels?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['label'].str.split(',').str.contains('Huppert')])/len(",
    "```json\n{\n    \"solution\": \"df[(df['Vote Intention'].str.contains('Do not disclose my gender')) & (~df['gender'].str.contains('Do not disclose'))]['Age'].max()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: What is the minimum number of deal purchases made by a customer in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['NumDealsPurchases'].min()\"\n}\n```\n\nInput DataFrame columns: ['SK_ID_CURR', 'SK_ID_PREV', 'NAME_CONTRACT_TYPE', 'AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE', 'NAME_CONTRACT_STATUS', 'DAYS_DECISION', 'NAME_PAYMENT_TYPE', 'CODE_REJECT_REASON', 'NAME_TYPE_SUITE', 'NAME_CLIENT_TYPE', 'NAME_GOODS_CATEGORY', 'NAME_PORTFOLIO', 'NAME_PRODUCT_TYPE', 'CHANNEL_TYPE', 'SELLERPLACE_AREA', 'NAME_SELLER_INDUSTRY', 'CNT_PAYMENT', 'DAYS_FIRST_DRAWING', 'DAYS_FIRST_DUE', 'DAYS_LAST_DUE_1ST_VERSION', 'DAYS_LAST_DUE', 'DAYS_TERMINATION', 'NFLAG_INSURED_ON_APPROVAL']\nQuestion: Which channel_type has the maximum number of applications that have been rejected?\nExpected return type: category\n\nCode that calculates",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].mode().iloc[0]\"\n}\n\nInput DataFrame columns: ['AGREEMENT', 'PARTICIPATIO', 'ELECTORALA', 'REPUBLICAN', 'ESTATUTO', 'SATISFAC', 'SATISFACI', 'NOVICIA', 'LEYD', 'ADMINISTRACION', 'ENFRENTAMIENTO', 'POLITICOS', 'AMARILLO', 'CONSTITUCION', 'CIUDADAN', 'AMBOS', 'SOBREVIVIO', 'LEYES', 'LIBERTAD', 'LUJO', 'AMERICAN', 'PLURALISMO', 'ESTADO', 'ESTABLEC', 'DESEST', 'ACERCARSE', 'ABANDONAR', 'RESPALDO', 'BANQUIST', 'SOCIALISTA', 'ECONOMI', 'NO', 'VOLUNTARIOS', 'CULTURA', 'PREOCUPAC', 'DR', 'PERU', 'POBLACION', 'VERDADERO', 'FEDERAL', 'NACIONAL', 'ESTADO', 'SOCIALIST', 'MASIVOS', 'DISTRITOS', 'CANDIDATOS', 'REVOLUCION', 'DEFENSA', 'AGRUPACION', 'NACIMIENTO', 'VARIAS', 'CACER', 'CABILDO', 'GALLEGOS', 'ATENCION', 'DEFENSA', 'LEGALES', 'REPRESENTACION', 'ABIERTO', 'SOCIALISTA', 'ETIQUETA', 'NINGUNA', 'DESECHOS', 'SERVICIOS', 'LEYES', 'SEN', 'PARTIDOS', 'SOCIALISTA', 'ESTADO', 'VICTIMAS', 'LIBERTAD', 'VERDADERO', 'FEDERAL', 'NACIONAL', 'ESTADO', 'SOCIALISTA', 'INDIVIDUAL', 'PRIORIDAD', 'RENUNCIA', 'LLAMA', 'DERECHO', 'ANTECEDENTES', 'PRIMEROS', 'GOBIANOS', 'MASIVOS', 'PEREZ', 'AMIGOS', 'SEN', '",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['page', 'article_id', 'language', 'region', 'year', 'month', 'day', 'hour', 'min', 'sec', 'author_id', 'author_name', 'author_email', 'article_name', 'article_url', 'article_text', 'total_links']\nQuestion: How many articles are republished in English?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['language'].value_counts()[1]\"\n}\n```\n\nInput DataFrame columns: ['date', 'report', 'date_complaint', 'ZIP_code', 'Location', 'city', 'state', 'facility_name', 'street_address', 'bldg_number', 'bldg_use', 'str_number', 'str_name', 'str_direction', 'street_type', 'occupant_type', 'owner_landlord', 'cause_of_complaint', 'number_of_units', 'estimated_cost', 'address_notes', 'address_notes_2', 'fee_waived', 'fee_assessed', 'fee_waived_text', 'fee_assessed_text', 'ward_1', 'ward_2', 'community_district', 'police_district', 'latitude', 'longitude', 'facility_type', 'date_closed', 'officer_id', 'officer_name', 'updated_at']\nQuestion: What is the total number of units in the building with the most complaints?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['number_of_units'].astype('int').max()\"\n}\n\nInput DataFrame columns: ['id', 'type', 'entity_cd', 'name', 'city', 'state', 'line1', 'line2', 'longitude', 'latitude', 'created_at', 'updated_at']\nQuestion: Which business has the most employees?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['id'].",
    "```json\n{\n    \"solution\": \"df['partyId'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['partyID', 'Voted', 'VoteIntention', 'Age', 'Gender', 'Lang', 'Marital status', 'Loc', 'Ideo', 'Ideo1', 'Ideo2', 'Ideo3', 'Ideo4', 'Ideo5', 'Ideo6', 'Ideo7', 'Ideo8', 'Ideo9', 'Ideo10', 'Ideo11', 'Ideo12', 'Ideo13', 'Ideo14', 'Ideo15', 'Ideo16', 'Ideo17', 'Ideo18', 'Ideo19', 'Ideo20', 'Ideo21', 'Ideo22', 'Ideo23', 'Ideo24', 'Ideo25', 'Ideo26', 'Ideo27', 'Ideo28', 'Ideo29', 'Ideo30', 'Ideo31', 'Ideo32', 'Ideo33', 'Ideo34', 'Ideo35', 'Ideo36', 'Ideo37', 'Ideo38', 'Ideo39', 'Ideo40', 'Ideo41', 'Ideo42', 'Ideo43', 'Ideo44', 'Ideo45', 'Ideo46', 'Ideo47', 'Ideo48', 'Ideo49', 'Ideo50', 'Ideo51', 'Ideo52', 'Ideo53', 'Ideo54', 'Ideo55', 'Ideo56', 'Ideo57', 'Ideo58', 'Ideo59', 'Ideo60', 'Ideo61', 'Ideo62', 'Ideo63', 'Ideo64', 'Ideo65', 'Ideo66', 'Ideo67', 'Ideo68', 'Ideo69', 'Ideo70', 'Ideo71', 'Ideo72', 'Ideo73', 'Ideo74', '",
    "```json\n{\n    \"solution\": \"df['lang'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['userID', 'itemID', 'rating', 'timestamp', 'jobID', 'title', 'genres']\nQuestion: Which movie got the highest average rating?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('title')['rating'].mean().nlargest(1).index[0]\"\n}\n```\n\nInput DataFrame columns: ['userId', 'movieId', 'rating', 'timestamp']\nQuestion: How many movies have more than 30 ratings?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['movieId'].value_counts()[df['movieId'].value_counts() > 30].size\"\n}\n```\n\n### Not a question:\n* Clean names:\n```\nselect distinct title from movie_titles where title like '%(2020)%'\nselect distinct title from movie_titles where title like '%(2018)%'\nselect distinct title from movie_titles where title like '%(2017)%'\nselect distinct title from movie_titles where title like '%(2016)%'\nselect distinct title from movie_titles where title like '%(2015)%'\nselect distinct title from movie_titles where title like '%(2014)%'\nselect distinct title from movie_titles where title like '%(2013)%'\nselect distinct title from movie_titles where title like '%(2012)%'\nselect distinct title from movie_titles where title like '%(2011)%'\nselect distinct title from movie_titles where title like '%(2010)%'\nselect distinct title from movie_titles where title like '%(2009)%'\nselect distinct title from movie_titles where title like '%(2008)%'\nselect distinct title from movie_titles where title like '%(2007)%'\nselect distinct title from movie_titles where title like '%(2006)%'\nselect distinct title from movie_titles where title like '%(2005)%'\nselect distinct",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Car_Owner', 'Married', 'Rating', 'Children', 'Credit_card', 'Education', 'Employment_Status', 'Gender', 'Income_Range', 'Location_Type', 'Marital_Status', 'Product_Purchasing_Cost', 'Requirement', 'Religion', 'Residence_Duration', 'Spending_Score', 'Var_1']\nQuestion: Is there any woman who is a member of the \u201cLevel_Low\u201d Spending Score?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Gender'].gt('Female').any()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Income', 'Education_Level', 'Marital_Status', 'Occupation', 'Annual_Income', 'Gender', 'Warehouse_block', 'Mode_of_Shipment', 'Customer_Segment', 'Product_importance', 'Gender_Male', 'Gender_Female', 'Product_importance_low', 'Product_importance_medium', 'Product_importance_high', 'Product_importance_low_Medium', 'Product_importance_low_High', 'Product_importance_medium_High', 'Mode_of_Shipment_Ship', 'Mode_of_Shipment_Flight', 'Customer_Segment_Mass Customer', 'Customer_Segment_High Net Worth', 'Customer_Segment_Needful Customer', 'Warehouse_block_B', 'Warehouse_block_C', 'Warehouse_block_D', 'Warehouse_block_F', 'Warehouse_block_R', 'Warehouse_block_S']\nQuestion: What is the maximum number of annual incomes?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Annual_Income'].max()\"\n}\n```\n\nInput DataFrame columns: ['\r\n                                        x', '\r\n                                        y', '\r\n                                        primary_complete_name', '\r\n                                        primary_location', '\r\n                                        primary_location_score', '\r\n                                        primary_location_score_1', '\r\n                                        primary_location_score_2', '\r\n                                        secondary_complete_name",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].str.split(' - ').explode().value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['age', 'education_level', 'race', 'gender', 'political_channels', 'income', 'vote']\nQuestion: Who is more likely to vote right-wing and left-wing?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[~df['vote'].isin(['Independent', 'Other'])]['vote'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Gender', 'Income', 'Education_Level', 'Household_Size', 'Education_Stay', 'Party_Affiliation', 'Voted', 'State', 'zipcode', 'Income_Type']\nQuestion: List the 5 most common party affiliations among the respondents.\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Party_Affiliation'].value_counts().index[:5].tolist()\"\n}\n```\n\nInput DataFrame columns: ['party_coding', 'age', 'gender', 'income', 'education_level', 'household_size', 'past_vote_party', 'past_vote_ideology', 'fpl', 'political_interest_party_id', 'political_interest_ideology_id', 'racist_or_being_racist', 'racist_or_being_racist_all_the_time', 'racist_or_being_racist_most_of_the_time', 'racist_or_being_racist_some_of_the_time', 'racist_or_being_racist_never', 'racist_or_being_racist_with_thinking', 'racist_or_being_racist_with_doing', 'racist_or_being_racist_with_feeling', 'racist_or_being_racist_with_being', 'racist_or_being_racist_with_having', 'racist_or_being_racist",
    "```json\n{\n    \"solution\": \"df['partyId'].head(3).value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Adj Close', 'Label', 'Class']\nQuestion: Which stock has the lowest closing price?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['Label'] == 'benign'),'Close'].idxmin()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What does the person with the highest age?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Age'].idxmax(), 'Name']\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What does the person with the highest fare?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Fare'].idxmax(), 'Name']\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'Close', 'High', 'Low', 'Volume', 'Adj Close']\nQuestion: What is the day with the highest high?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['High'].idxmax(), 'Date']\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Fare_group']\nQuestion: What does the person with the lowest fare?\nExpected return type: string\n\nCode that",
    "```json\n{\n    \"solution\": \"df['edu'].value_counts().nlargest(3).index.to_list()\"\n}\n```\n\nInput DataFrame columns: ['id', 'rrss', 'date', 'text']\nQuestion: How many times in total was an image present in a tweet?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return (df['text'].str.contains(r'https://t.co/[a-zA-Z0-9]{10}').sum() + df['text'].str.contains(r'http://t.co/[a-zA-Z0-9]{10}').sum() + df['text'].str.contains(r'http://[a-zA-Z0-9]{10}').sum())\"\n}\n```\n\nInput DataFrame columns: ['id', 'date', 'source', 'likes', 'retweets', 'text', 'has_link', 'has_video', 'has_photos']\nQuestion: How many tweets have images in them?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.where(df['has_photos'] == True).dropna().shape[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'date', 'source', 'likes', 'retweets', 'text', 'has_link', 'has_video', 'has_photos']\nQuestion: How many tweets have links in them?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.where(df['has_link'] == True).dropna().shape[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'date', 'source', 'likes', 'retweets', 'text', 'has_link', 'has_video', 'has_photos']\nQuestion: How many tweets have videos in them?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.where(df['has_video'] == True).dropna().shape[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'date', '",
    "```json\n{\n    \"solution\": \"df['Age'].value_counts().iloc[:3].index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'abstract', 'text', 'bow', 'label', 'topic_label', 'topic_index']\nQuestion: Is there any article with topic label 126?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['topic_label'].eq(126).any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'question', 'answer', 'topic', 'user_id']\nQuestion: Which is the most common question among respondents?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['question'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'question', 'answer', 'topic', 'user_id']\nQuestion: Which is the most common topic of the respondents?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['topic'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'question', 'answer', 'topic', 'user_id']\nQuestion: Which is the most common topic of respondents who answered a question?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['answer'].notnull()]['topic'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'question', 'answer', 'topic', 'user_id']\nQuestion: Which is the most common topic of respondents who didn't answer a question?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['answer'].isnull()]['topic'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'question', 'answer', 'topic', 'user_id']\nQuestion: What are the 3 most common questions among respondents that answered a question?\nExpected return type: list[category]\n\nCode",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].str.split('\\\\b(\\\\-\\\\d*\\\\.\\\\d+)|(\\\\-?\\\\d+\\\\.\\\\d*)\\\\b').loc[df['Vote Intention'].str.split('\\\\b(\\\\-\\\\d*\\\\.\\\\d+)|(\\\\-?\\\\d+\\\\.\\\\d*)\\\\b').map(len).gt(1)].explode().value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Alcoholic_beverage_consumption', 'Alcoholic_beverages_frequency', 'Alcoholism', 'Average_monthly_household_income', 'Body_image_cocaine', 'Body_image_herbal_medicines', 'Body_image_methadone', 'Body_image_natural_drugs', 'Body_image_nicotine', 'Body_image_other_drugs', 'Body_image_peace', 'Body_image_pt_penicillin', 'Body_image_pyrazinamide', 'Body_image_ragweed', 'Body_image_salvia', 'Body_image_seemly', 'Body_image_steroids_vh', 'Body_image_theophylline', 'Body_image_vitamins_supplements', 'Body_image_water', 'Body_image_yoga', 'Body_image_zinc', 'Country_of_origin', 'Depression', 'Drug_consumption_cocaine', 'Drug_consumption_herbal_medicines', 'Drug_consumption_methadone', 'Drug_consumption_nicotine', 'Drug_consumption_other_drugs', 'Drug_consumption_pt_penicillin', 'Drug_consumption_ragweed', 'Drug_consumption_salvia', 'Drug_consumption_seemly', 'Drug_consumption_steroids_vh', 'Drug_consumption_theophylline', 'Drug_consumption_vitamins_supplements', 'Drug_consumption_water', 'Drug_consumption_yoga',",
    "```json\n{\n    \"solution\": \"df['User self- placement on Progressive-Conservative economic values axis'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['User self-placement on Left-Right economic values axis', 'User self-placement on Progressive-Conservative economic values axis', 'User self-placement on conservative economic values axis', 'User self-placement on liberal economic values axis', 'User self- placement on Conservative economic values axis', 'What kind of terrorist do you consider yourself?', 'What is your occupation?', 'What is the nature of your household?', 'What is your monthly income? Income refers to the amount of money a person earns in a given month', 'What is the main reason you are not vote?', 'What kind of job do you look for in the future?', 'What kind of job do you want to have in the future?', 'When we think about your future plans, what is the highest priority for you?', 'What is the main reason why you are not voting?', 'What kind of job do you look for in the future?', 'What kind of job do you want to have in the future?', 'Do you usually go to the polls?', 'When we think about your future plans, what is the highest priority for you?', 'What kind of job do you look for in the future?', 'What kind of job do you want to have in the future?', 'What are your thoughts on the economy?', 'What is the nature of your household?', 'What is your monthly income? Income refers to the amount of money a person earns in a given month', 'What is the main reason you are not vote?', 'What kind of job do you look for in the future?', 'What kind of job do you want to have in the future?', 'When we think about your future plans, what is the highest priority for you?', 'What kind of job do you look for in the future?', 'What kind of job do you want to have in the future?', 'What is the main reason why you are not voting?', 'What is your occupation?', 'What is the nature of your household?', 'What is your monthly income? Income refers to the amount of money a person earns in a",
    "```json\n{\n    \"solution\": \"df['Constitutional organisation of the country (More Descentralization)'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['cement', 'slag', 'ash', 'water', 'superplasticizer', 'coarseaggregate', 'fineaggregate', 'age', 'csMPa']\nQuestion: What is the minimum water requirement to achieve the maximum compressive strength?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df[df['csMPa'] == df['csMPa'].max()]['water'].min()\"\n}\n```\n\nInput DataFrame columns: ['LotArea', 'BedroomAbvGr', 'OverallQual', 'OverallCond', 'KitchenAbvGr', 'BsmtUnfSF', 'HeatingQC', 'YearBuilt', 'YearRemodAdd', 'TotRmsAbvGrd', 'Fireplaces', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'TotalBsmtSF', '1stFlrSF', 'GrLivArea', 'FullBath', 'HalfBath', 'LotFrontage', 'MasVnrArea', 'TotRmsAbvGrd', 'MoSold', 'YrSold', 'SalePrice']\nQuestion: Which house has the greatest living area?\nExpected return type: string\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['GrLivArea'] == df['GrLivArea'].max()]['Id'].values[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'date', 'season', 'holiday', 'workingday', 'weather', 'temp', 'atemp', 'humidity', 'windspeed', 'casual', 'registered', 'count']\nQuestion: Which date had the greatest number of registered users?\nExpected return type: datetime\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['registered'] == df['registered'].max()]['date'].values[0]\"\n}\n```\n\nInput DataFrame columns: ['label', 'title', 'body', 'tags', 'published']\nQuestion: What is the average"
]