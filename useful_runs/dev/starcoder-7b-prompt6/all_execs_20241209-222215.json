[
    "global ans\n\ndef answer(df):\n    return df[df['lang'].eq('es')]['favorites'].max() > df[df['lang'].ne('es')]['favorites'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['author_name'].str.len().gt(df['author_name'].str.len().max()).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].eq(0).any()\nans = answer(df)",
    "{\n    \"solution\": \"return list(df['links_first'].isna()).count(True) == len(df['links_first'])\"\n}\n\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What's the average number of characters in a tweet, if the type is text?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.loc[df['type'] == 'text', 'text'].str.len().mean()\"\n}\n\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: What is the maximum number of unique mentions?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"return df['mention_ids'].apply(lambda x: len(x.split(', '))).max()\"\n}\n\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'rp_user_id', 'rp_user_name', 'location', 'tweet_link', 'search']\nQuestion: How many tweets are of type image?\nExpected return type: number\n\nCode that",
    "global ans\n\ndef answer(df):\n    return pd.unique(df['author_name']).shape[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['text'].str.split(' ').str.len().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['mention_ids'].isna().sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['retweets'].idxmax(), 'author_name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['favorites'].idxmax(), 'lang']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['text'].str.split().apply(len).idxmax(), 'author_name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'retweets')['author_name'].tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df['lang'].nsmallest(5).tolist()\"\n}\n\n\nInput DataFrame columns: ['id', 'text', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'date', 'mentions', 'retweets', 'favorites', 'attachments', 'embeds', 'links', 'image_links', 'video_links', 'reply_id', 'reply_name', 'source', 'location']\nQuestion: What is the average number of attachments per post?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['attachments'].mean()\"\n}\n\n\nInput DataFrame columns: ['type', 'id', 'text', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'date', 'mentions', 'retweets', 'favorites', 'attachments', 'embeds', 'links', 'image_links', 'video_links', 'reply_id', 'reply_name', 'source', 'location']\nQuestion: What are the types of the 5 most favorited posts?\nExpected return type: list[category]\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['type'].nlargest(5).tolist()\"\n}\n\n\nInput DataFrame columns: ['id', 'text', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'date', 'mentions', 'retweets', 'favorites', 'attachments', 'embeds', 'links', 'image_links', 'video_links', 'reply_id', 'reply_name', 'source', 'location']\nQuestion: What is the average number of favorites per post?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['favorites'].mean()\"\n}\n\n\nInput DataFrame columns: ['id', 'text', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'type', 'date', 'mentions', 'retweets', 'favorites', 'attachments', 'embeds', 'links",
    "global ans\n\ndef answer(df):\n    return df['text'].str.split().str.len().nsmallest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type'].value_counts().index[:6].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['favorites'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['text'].str.strip().str.split().apply(len).nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].nsmallest(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['text'].str.split(' ').apply(len).nsmallest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['name'].str.contains('Pikachu').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['total'].gt(700).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['generation'] == 1]['legendary'].all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['speed'].gt(150).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type1'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['total'].max()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[(df['generation'] == 3), 'number'].count()\"\n}\n\n\nInput DataFrame columns: ['abilities', 'weight', 'type1', 'type2', 'heightm', 'name', 'total_points', 'generation', 'against_bug', 'against_dark', 'against_dragon', 'against_electric', 'against_fairy', 'against_fight', 'against_fire', 'against_flying', 'against_ghost', 'against_grass', 'against_ground', 'against_ice', 'against_normal', 'against_poison', 'against_psychic', 'against_rock', 'against_steel', 'against_water', 'attack', 'base_egg_steps', 'base_happiness', 'base_total', 'capture_rate', 'classfication', 'defense', 'experience_growth', 'experience_points', 'hp', 'japanese_name', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage_male', 'percentage",
    "global ans\n\ndef answer(df):\n    return df['attack'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['defense'].idxmax(), 'type1']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['name'][df['speed'].idxmin()]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['legendary']]['type1'].mode().iloc[0]\nans = answer(df)",
    "{\n    \"solution\": \"df[df['sp_attack'].gt(df['sp_attack'].max())]['name'].iloc[0]\"\n}\n\n\nInput DataFrame columns: ['Pokedex#', 'Name', 'Type 1', 'Type 2', 'Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary']\nQuestion: Which Pok\u00e9mon has the highest defense?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[df['Defense'].gt(df['Defense'].max())]['Name'].iloc[0]\"\n}\n\n\nInput DataFrame columns: ['name', 'species', 'type', 'gender', 'version_number', 'is_default', 'capture_rate', 'base_happiness', 'base_experience', 'growth_rate', 'egg_type_list', 'has_gender_differences', 'form_switchable', 'pokedex_numbers', 'beauty', 'hatch_counter', 'shiny', 'ability_list', 'height_m', 'weight_kg', 'color', 'habitat', 'generation', 'shape', 'evolves_from', 'growth_rate', 'pokedex_group_id', 'pokedex_type_id', 'pokedex_subtype_id', 'parent_id', 'parent_type', 'poke_type_ids', 'pokemon_type_id', 'pokemon_type_id2', 'is_baby', 'is_legendaries', 'forms_switchable', 'evolves_to', 'evolves_to_ids', 'is_mega', 'is_meloetta', 'is_primal', 'is_discovered', 'is_new', 'is_NC', 'is_K', 'is_LC', 'is_Ditto', 'is_Original_IPE', 'is_Not_Mega', 'is_Species', 'is_Unreleased']\nQuestion: Which Pok\u00e9mon has the highest attack?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[df",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'total')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['hp'].nsmallest(5).index]['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[['type1','type2']].melt().value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df[df['generation'] == 2]['name'].nlargest(6).tolist()\"\n}\n\n\nInput DataFrame columns: ['CustomerID', 'InvoiceDate', 'InvoiceNo', 'StockCode', 'Description', 'Quantity', 'UnitPrice', 'InvoiceNo', 'Country']\nQuestion: Which country sold the most quantity of products?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['Country'].value_counts().idxmax()\"\n}\n\n\nInput DataFrame columns: ['index', 'freq', 'unique_values', 'unique_values_count', 'missing_values_count', 'frequency_of_most_frequent_value(s)', 'mode_(s)', 'mode_count(s)', 'mode_prop(s)', 'mode_abs_count(s)', 'mode_abs_prop(s)', 'top_values', 'freq_top_values', 'top_values_prop', 'top_values_abs_freq', 'freq_top_values_prop', 'top_values_count', 'top_values_abs_count', 'top_values_abs_prop', 'freq_top_values_abs_prop', 'freq_top_values_abs_count', 'freq_top_values_abs_prop', 'second_values', 'freq_second_values', 'second_values_prop', 'second_values_abs_freq', 'freq_second_values_prop', 'second_values_count', 'second_values_abs_count', 'second_values_abs_prop', 'freq_second_values_abs_prop', 'freq_second_values_abs_count', 'freq_second_values_abs_prop', 'third_values', 'freq_third_values', 'third_values_prop', 'third_values_abs_freq', 'freq_third_values_prop', 'third_values_count', 'third_values_abs_count', 'third_values_abs_prop', 'freq_third_values_abs_prop', 'freq_third_values_abs_count', 'freq_third_values_abs_prop']\nQuestion: Are there any duplicates in the column \"",
    "global ans\n\ndef answer(df):\n    return df['sp_defense'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['legendary'] == True, 'defense'].nsmallest(2).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['generation'] == 4, ['speed']].nlargest(2, 'speed').iloc[:, 0].tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df[df['legendar'] == False][['total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed']].nsmallest(6, 'total').sum(axis=1).tolist()\"\n}\n\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: When did the oldest person not self-made join the site and assign themselves the make-it list?\nExpected return type: datetime64\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[df['selfMade'] == False]['year'].min()\"\n}\n\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Which product has the highest average number of purchases per month?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[['MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds']].sum().idxmax()\"\n}\n\n\nInput DataFrame columns: ['yes_no', 'product', 'items_purchased']\nQuestion: Which product has the highest average number of purchases per month?\nExpected return type: number\n\nCode that calculates the answer",
    "global ans\n\ndef answer(df):\n    return df['Extraversion'].max() > df['Agreeableness'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Openness'].idxmax() == df['Conscientousness'].idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Emotional_Range'].idxmin() == df['Conversation'].idxmin()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[['Openness to Change', 'Hedonism']].mean().gt(df['Hedonism']).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[['Profession', 'Self-enhancement']].groupby('Profession').max().max()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Emotional_Range'] > 0.5]['Profession'].size\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Profession')['Extraversion'].agg(['mean','count']).sort_values('count',ascending=False).head(1)['mean'].iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Self-transcendence'].min()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['Conscientiousness'].idxmax(), 'Profession']\"\n}\n\n\nInput DataFrame columns: ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nQuestion: What is the average age of the male users?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[df['gender'] == 'M']['age'].mean()\"\n}\n\n\nInput DataFrame columns: ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nQuestion: Do female users have higher average age than male users?\nExpected return type: boolean\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[df['gender'].isin(['M', 'F'])].groupby('gender').mean()['age'].gt(0).all()\"\n}\n\n\nInput DataFrame columns: ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nQuestion: How many unique occupations are there?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['occupation'].nunique()\"\n}\n\n\nInput DataFrame columns: ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nQuestion: How many users are there?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['user_id'].nunique()\"\n}\n\n\nInput DataFrame columns: ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nQuestion: What is the average age of users by occupation?\nExpected return type: DataFrame\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.groupby('occupation').mean()['age']\"\n}\n\n\nInput DataFrame columns: ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nQuestion: What are the most common occupations?\nExpected return type: list[category]\n\nCode that calculates the answer:\n{\n    \"solution\": \"df",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Hedonism'].idxmin(), 'Profession']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Emotional_Range'] == df['Emotional_Range'].max()]['Profession'].unique()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Profession')['n'].count().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.sort_values(['Openness'], ascending=False).nlargest(3, 'Openness')['Profession'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.sort_values('Agreeableness').iloc[0:4]['Profession'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['Conscientousness'].sort_values(ascending=False).head(5).index.tolist())\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.sort_values('Self-enhancement').iloc[:2]['Profession'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Profession')['Openness to Change'].sum().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Emotional_Range'].sort_values(ascending=True).head(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Extraversion'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.sort_values('Self-transcendence')[:6]['Profession'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['title'].str.contains('communication')]['title'].any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['organization'] == 'IBM'\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['abstract'].str.lower().str.contains('software').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['target'] == 'design'\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return len(df['organization'].unique())\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['num_claims'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['num_claims'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['type'] == 'utility']['type'].count()\nans = answer(df)",
    "{\n    \"solution\": \"df[df['num_claims'].idxmax()]['organization']\"\n}\n\n\nInput DataFrame columns: ['number_of_patents', 'organization', 'kind', 'type', 'graphext_cluster', 'date', 'abstract', 'title', 'lang', 'abstract_gx_ADJ', 'grp_title', 'abstract_gx_products', 'abstract_gx_organizations', 'abstract_gx_NOUN', 'abstract_gx_ngrams', 'id', 'target', 'weight', 'x', 'y']\nQuestion: How many different kinds of patents are there?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"return df['kind'].nunique()\"\n}\n\n\nInput DataFrame columns: [\"survey_date\", \"affiliation\", \"age\", \"gender\", \"education\", \"country_name\", \"country_b\", \"region\", \"industry\", \"occupation\", \"organization_name\", \"organization_type\", \"income\", \"job_title\", \"work_interfere\", \"self_employed\", \"no_employees\", \"tech_company\", \"tve\", \"remote_work\", \"anonymity\", \"leave\", \"mental_health_consequence\", \"phys_health_consequence\", \"coworkers\", \"supervisor\", \"mental_health_interview\", \"phys_health_interview\", \"mental_vs_physical\", \"obs_consequence\", \"benefits\", \"care_options\", \"wellness_program\", \"seek_help\", \"mental_health_interview\", \"phys_health_interview\", \"mental_vs_physical\", \"obs_consequence\", \"benefits\", \"care_options\", \"wellness_program\", \"seek_help\", \"anonymity_self_employed_treatment\", \"anonymity_leave_treatment\", \"anonymity_google\", \"anonymity_social_network\", \"anonymity_online_for_help\", \"anonymity_altruism\", \"anonymity_other\", \"anonymity_none\", \"anonymity_no_answer\", \"anonymity_yes\"]\nQuestion: Is there any",
    "global ans\n\ndef answer(df):\n    return df['kind'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['lang'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['graphext_cluster'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('organization')['id'].nunique().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['kind'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['kind'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('graphext_cluster')['graphext_cluster'].count().nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[['id', 'num_claims']].groupby('id').first().sort_values('num_claims', ascending=False)['num_claims'].head(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('id')['num_claims'].sum().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby(['kind'])['num_claims'].median().tolist()\nans = answer(df)",
    "{\n    \"solution\": \"list(df.nlargest(3, 'date')['id'])\"\n}\n\n\nInput DataFrame columns: ['id', 'lang', 'patent_number', 'assignee_id', 'assignee_type', 'title', 'abstract', 'claims', 'kind', 'date', 'wipo_subclass', 'nber_ subclass', 'cpc_subsection', 'sequence']\nQuestion: What is the ID of the patent that was filed first?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['date'].min()\"\n}\n\n\nInput DataFrame columns: ['title', 'abstract', 'date', 'num_claims', 'assignee_id', 'assignee_type', 'organization', 'kind', 'id', 'weight', 'target', 'x', 'y', 'abstract_gx_NOUN', 'abstract_gx_ngrams']\nQuestion: How many patents have been filed with NIST in 2016?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[df['date'].dt.year == 2016]['organization'].eq('National Institute of Standards and Technology').sum()\"\n}\n\n\nInput DataFrame columns: ['headline', 'image', 'source', 'date', 'url', 'summary', 'id', 'combined_score', 'image_face_count', 'image_faces', 'face_count', 'face_data', 'has_face', 'image_width', 'image_height', 'ocr_confidence', 'ocr_count', 'ocr_data', 'has_ocr', 'headless', 'headline_length', 'source_length', 'summary_length', 'ocr_words', 'age', 'gender', 'race', 'confidence', 'target', 'x', 'y']\nQuestion: How long has the average tweet been in circulation?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['date'].dt.days_in_month.mean()\"\n}\n\n\nInput DataFrame columns: ['language', 'head_line', 'abstract', 'url',",
    "{\n    \"solution\": \"df[df['user_favourites_count'].idxmax(), 'user_verified']\"\n}\n\n\nInput DataFrame columns: ['source', 'description', 'hashtags', 'tweet_id', 'name', 'location', 'user_location', 'user_name', 'user_screen_name', 'user_description', 'user_verified', 'user_follower_count', 'user_following_count', 'user_tweet_count', 'user_created_at', 'user_listed_count', 'user_url', 'user_favourite_count', 'user_native_lang_code', 'user_time_zone', 'user_utc_offset', 'user_phone_type', 'user_photo_url', 'user_photo_type', 'user_photo_crop_y', 'user_photo_crop_x', 'user_photo_crop_w', 'user_photo_crop_h', 'media_type', 'media_url', 'media_player_url', 'media_duration', 'text', 'reply_to_status_id', 'reply_to_user_id', 'reply_to_user_name', 'is_reply', 'is_retweet', 'retweet_status_id', 'retweet_user_id', 'retweet_user_name', 'retweet_timestamp', 'is_quote', 'quote_status_id', 'quote_user_id', 'quote_user_name', 'quote_status_timestamp', 'like_count', 'retweet_count', 'quote_count', 'reply_count', 'quote_url', 'image_url_https', 'entities_hashtags', 'entities_media', 'entities_user_mentions', 'entities_urls', 'lang_text', 'lang_code']\nQuestion: Has the same number of hashtags been used for the most recent tweet?\nExpected return type: boolean\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['hashtags'].value_counts().max() == df['hashtags'].value_counts().max()\"\n}\n\n\nInput DataFrame columns: ['sentiment', 'id', 'query_string', 'user', 'text', '",
    "global ans\n\ndef answer(df):\n    return df['user_favourites_count<gx:number>'].max() == df['retweets<gx:number>'].max()\nans = answer(df)",
    "{\n    \"solution\": \"return df['mention_names'].explode().value_counts().idxmax() == df['rp_user_name'].value_counts().idxmax()\"\n}\n\n\nInput DataFrame columns: ['Unnamed: 0', 'PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What is the proportion of males who survived in each class?\nExpected return type: dict[category, number]\n\nCode that calculates the answer:\n{\n    \"solution\": \"return df.groupby(['Pclass', 'Sex'])['Survived'].sum() / df.groupby('Pclass')['Survived'].count() * 100\"\n}\n\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What is the median age of passengers with more than 2 siblings/spouse?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"return df.loc[df['SibSp'] > 2, 'Age'].median()\"\n}\n\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What is the median age of passengers who have no siblings, spouse or parents on board?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"return df.loc[(df['SibSp'] == 0) & (df['Parch'] == 0), 'Age'].median()\"\n}\n\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What",
    "{\n    \"solution\": \"df['retweets'].max() == df.loc[df['retweets'].idxmax(), 'replies']\"\n}\n\n\nInput DataFrame columns: ['id_str<gx:category>', 'retweet_count<gx:number>', 'favorite_count<gx:number>', 'created_at<gx:date>', 'text<gx:text>', 'entities_hashtags<gx:list[category]>', 'entities_user_mentions<gx:list[category]>', 'entities_urls<gx:list[category]>']\nQuestion: Has the number of retweets of the most retweeted tweet changed?\nExpected return type: boolean\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['retweet_count'].max() != df.loc[df['retweet_count'].idxmax(), 'retweet_count']\"\n}\n\n\nInput DataFrame columns: ['Unnamed: 0', 'City', 'Category', 'Start Date', 'End Date', 'Venue', 'Location', 'Additional Info', 'State', 'Poster URL']\nQuestion: Which state has the most number of festivals?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['State'].value_counts().idxmax()\"\n}\n\n\nInput DataFrame columns: ['Race and Ethnicity (Census)', 'Father\u2019s education', 'Mother\u2019s education', 'Mother\u2019s Occupation', 'Father\u2019s Occupation', 'Year', 'How old were you when you first started to studies? (%)', 'Did you ever take a math test? (%)', 'Which month did you take that math test? (%)', 'Which grade did you get on that test? (%)', 'How long have you been studying math? (%)', 'How many hours per day have you been studying math? (%)', 'How many hours per week have you been studying math? (%)', 'In general, how do you feel about your math learning? (%)', 'How difficult was your math lessons? (%)', 'How likely are you to take another math test?: (%)', 'Which part of your math is most interesting to you? (%)', 'How often do you",
    "global ans\n\ndef answer(df):\n    return df['user_followers_count<gx:number>'].max()\nans = answer(df)",
    "{\n    \"solution\": \"df.groupby('author_id')['favorites'].sum()[df.groupby('author_id')['favorites'].sum() > 10000].count()\"\n}\n\n\nInput DataFrame columns: ['trip_id', 'route_id', 'service_id', 'trip_start_time', 'trip_stop_time', 'trip_duration_seconds', 'trip_distance_miles', 'street_for_location', 'street_to_location', 'direction_id', 'direction_name', 'block_id', 'wheelchair_accessible', 'bikes_allowed', 'stop_sequence', 'stop_headsign', 'pickup_type', 'dropoff_type', 'shape_id', 'shape_pt_lat', 'shape_pt_lon', 'shape_pt_sequence', 'shape_dist_traveled']\nQuestion: If there is any null value in the data frame, return the column name with the most null values first.\nExpected return type: list[category]\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.isnull().sum().sort_values().index.tolist()\"\n}\n\n\nInput DataFrame columns: ['truck_id', 'year', 'make', 'model', 'color', 'sticker_price', 'location', 'city', 'vin', 'latitude', 'longitude', 'state', 'country']\nQuestion: What is the most expensive car made in 2019?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[(df['year'] == 2019)]['sticker_price'].idxmax()\"\n}\n\n\nInput DataFrame columns: ['country', 'description', 'province', 'region_1', 'region_2', 'winery', 'designation', 'points', 'price', 'variety', 'winery_id', 'winery_name', 'id', 'latitude', 'longitude', 'taster_name', 'title', 'taster_twitter_handle', 'points', 'price', 'vintage']\nQuestion: What is the most expensive wine in the data frame?\nExpected return type: number\n\nCode that calculates",
    "{\n    \"solution\": \"df['retweets'].max()\"\n}\n\n\nInput DataFrame columns: ['tweet_id', 'screen_name<gx:category>', 'tweet_link<gx:url>', 'text<gx:text>', 'mentions<gx:list[category]>', 'hashtags<gx:list[category]>', 'urls<gx:list[url]>', 'photo_urls<gx:list[url]>', 'replies_to<gx:category>']\nQuestion: Is there any tweet with no mentions?\nExpected return type: boolean\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['mentions'].isna().any()\"\n}\n\n\nInput DataFrame columns: ['tweet_id', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>', 'search<gx:category>', 'video_urls<gx:list[url]>', 'video_links<gx:list[url]>', 'video_",
    "{\n    \"solution\": \"df['mention_ids<gx:list[category]>\"].explode().value_counts().max()\"\n}\n\n\nInput DataFrame columns: ['latitude', 'longitude']\nQuestion: What is the average latitude and longitude?\nExpected return type: list[number]\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[['latitude', 'longitude']].mean().values.tolist()\"\n}\n\n\nInput DataFrame columns: ['id', 'author_id', 'text', 'date', 'tags', 'replies_count', 'retweets_count', 'likes_count', 'hashtags', 'user_id', 'user_name', 'user_username', 'user_followers', 'user_following', 'user_tweets', 'user_likes', 'user_verified', 'user_created', 'user_description', 'user_location', 'user_avatar', 'retweet']\nQuestion: How many tweets are replies from user id 2?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[df['author_id'] == 2].shape[0]\"\n}\n\n\nInput DataFrame columns: ['id', 'created_at', 'reply_to_tweet_id', 'reply_to_user_id', 'user_id', 'user_name', 'content', 'lang', 'retweet_count', 'reply_count', 'like_count', 'quote_count', 'possibly_sensitive', 'user_mention_ids', 'hashtags', 'urls', 'photos', 'poll', 'geo', 'place', 'source', 'user_id_str', 'text', 'display_text_range', 'source_url', 'source_name', 'quote_tweet_id', 'in_reply_to_user_id']\nQuestion: How many tweets are replies from the same user?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.groupby('user_id').filter(lambda x: x.shape[0] > 1).shape[0]\"\n}\n\n\nInput DataFrame columns: ['user_id', 'username', 'name', '",
    "{\n    \"solution\": \"df['author_name'].value_counts().index[0]\"\n}\n\n\nInput DataFrame columns: ['id<gx:category>', 'post_created_at<gx:datetime>', 'post_updated_at<gx:datetime>', 'post_published_at<gx:datetime>', 'post_text<gx:text>', 'post_author_id<gx:category>', 'post_lang<gx:category>', 'post_type<gx:category>', 'post_title<gx:text>', 'post_url<gx:url>', 'post_url_domain<gx:text>', 'post_url_display<gx:text>', 'post_latitude<gx:number>', 'post_longitude<gx:number>', 'post_image_link<gx:url>', 'post_num_tags<gx:number>', 'post_num_images<gx:number>', 'reblogged_by<gx:list[category]>', 'liked_by<gx:list[category]>', 'num_reblogs<gx:number>', 'num_likes<gx:number>', 'num_replies<gx:number>', 'num_reshares<gx:number>', 'excerpt<gx:text>', 'link_tags<gx:list[url]>', 'link_domains<gx:list[text]>', 'link_urls<gx:list[text]>', 'link_urls_first<gx:text>', 'link_images<gx:list[url]>', 'link_images_first<gx:url>']\nQuestion: Who has reblogged the most posts? \nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['reblogged_by'].explode().mode()[0]\"\n}\n\n\nInput DataFrame columns: ['id', 'text', 'user', 'author_id', 'author_name', 'language', 'lang', 'favorites', 'date', 'mentions', 'urls', 'urls_first', 'images', 'images_first', 'retweets', 'replies', 'retweet', 'quote', 'is_quote', 'is_reply', 'is_retweet']\nQuestion: Which tweet has the highest number of likes?\nExpected",
    "global ans\n\ndef answer(df):\n    return df['author_id<gx:category>'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['author_name<gx:category>'].value_counts().idxmax()\nans = answer(df)",
    "{\n    \"solution\": \"df['retweets'].idxmax()\"\n}\n\n\nInput DataFrame columns: ['salary', 'name', 'nationality', 'dob', 'height (in)', 'weight (in)', 'position', 'team', 'season', 'games', 'minutes_played', 'field_goals_made', 'field_goals_att', 'field_goals_pct', 'minutes_played_per_game', 'points_per_game', 'offensive_rebounds_per_game', 'defensive_rebounds_per_game', 'total_rebounds_per_game', 'assists_per_game', 'steals_per_game', 'blocks_per_game', 'turnovers_per_game', 'personal_fouls_per_game', 'points_off_turnovers_per_game', 'effective_field_goal_pct', 'true_shooting_pct', 'player_efficiency_rating', 'net_rating', 'pace', 'minutes_played_flag', 'field_goals_made_flag', 'field_goals_att_flag', 'field_goals_pct_flag', 'minutes_played_per_game_flag', 'points_per_game_flag', 'offensive_rebounds_per_game_flag', 'defensive_rebounds_per_game_flag', 'total_rebounds_per_game_flag', 'assists_per_game_flag', 'steals_per_game_flag', 'blocks_per_game_flag', 'turnovers_per_game_flag', 'personal_fouls_per_game_flag', 'points_off_turnovers_per_game_flag', 'effective_field_goal_pct_flag', 'true_shooting_pct_flag', 'player_efficiency_rating_flag', 'net_rating_flag', 'pace_flag', 'seasons_played', 'ppg', 'rpg', 'apg', 'spg', 'bpg', 'tpg', 'fpg', 'ppp', 'rpp', 'app', 'spp', 'bpp', 'tpp', 'fgp', 'ftp', 'ts', 'fg",
    "global ans\n\ndef answer(df):\n    return df.groupby('author_id<gx:category>')['user_followers_count<gx:number>'].max().nlargest(3).index.tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df.nlargest(4, 'favorites')['author_name<gx:category>'].tolist()\"\n}\n\n\nInput DataFrame columns: ['url', 'path', 'contents', 'scrape_status', 'status_type', 'status', 'logged_in_status', 'logged_in_user', 'logged_in', 'time', 'id<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'author_avatar<gx:url>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'type<gx:category>', 'text<gx:text>', 'date<gx:date>', 'mention_ids<gx:list[category]>', 'mention_names<gx:list[category]>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:number>', 'links<gx:list[url]>', 'links_first<gx:url>', 'image_links<gx:list[url]>', 'image_links_first<gx:url>', 'rp_user_id<gx:category>', 'rp_user_name<gx:category>', 'location<gx:text>', 'tweet_link<gx:url>', 'source<gx:text>']\nQuestion: Which author is the most favorited?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['favorites'].max()\"\n}\n\n\nInput DataFrame columns: ['tfs_id', 'tfs_title', 'tfs_url', 'tfs_author', 'tfs_date', 'tfs_reply_date', 'tfs_num_reactions', 'tfs_replies', 'tfs_ret",
    "{\n    \"solution\": \"df.loc[df['mention_names'].explode().value_counts().nlargest(4).index.tolist()]['author_name<gx:category>'].tolist()\"\n}\n\n\nInput Dataframe columns: ['id<gn:integer>', 'category_id<gn:integer>', 'parent_category_id<gn:integer>', 'category_name<gn:text>', 'parent_category_name<gn:text>', 'created_at<gn:date>', 'category_index<gn:integer>', 'parent_category_index<gn:integer>', 'level<gn:integer>', 'total_items<gn:integer>', 'depth<gn:integer>']\nQuestion: What is the most common category name in the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['category_name<gn:text>'].mode().iloc[0]\"\n}\n\n\nInput DataFrame columns: ['id<gx:category>', 'rumor_type<gx:category>', 'tweet_id<gx:category>', 'tweet_text<gx:text>', 'tweet_lang<gx:category>', 'author_id<gx:category>', 'author_name<gx:category>', 'author_handler<gx:category>', 'user_created_at<gx:date>', 'user_description<gx:text>', 'user_favourites_count<gx:number>', 'user_followers_count<gx:number>', 'user_following_count<gx:number>', 'user_listed_count<gx:number>', 'user_tweets_count<gx:number>', 'user_verified<gx:boolean>', 'user_location<gx:text>', 'lang<gx:category>', 'date<gx:date>', 'source<gx:text>', 'is_retweet<gx:boolean>', 'is_quote<gx:boolean>', 'in_reply_to_status_id<gx:category>', 'in_reply_to_user_id<gx:category>', 'in_reply_to_user_name<gx:category>', 'retweets<gx:number>', 'favorites<gx:number>', 'replies<gx:number>', 'quotes<gx:",
    "global ans\n\ndef answer(df):\n    return df['author_name<gx:category>'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['user_followers_count<gx:number>'].nlargest(3).tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df['favorites'].head(3).tolist()\"\n}\n\n\nInput DataFrame columns: ['tweet_id', 'user_id', 'likes', 'replies', 'retweets', 'media', 'device', 'hashtags', 'source', 'created_at', 'text', 'urls', 'user_mention_ids', 'user_mention_names', 'entities_hashtags']\nQuestion: What are the top 4 numbers of likes a tweet in the dataset has?\nExpected return type: list[number]\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['likes'].head(4).tolist()\"\n}\n\n\nInput DataFrame columns: ['tweet_id', 'user_id', 'likes', 'replies', 'retweets', 'media', 'device', 'hashtags', 'source', 'created_at', 'text', 'urls', 'user_mention_ids', 'user_mention_names', 'entities_hashtags']\nQuestion: What are the top 4 numbers of likes a tweet in the dataset has?\nExpected return type: list[number]\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['likes'].head(4).tolist()\"\n}\n\n\nInput DataFrame columns: ['id', 'created_at', 'source_user_id', 'text', 'source_label', 'source_url', 'related_users', 'related_docs', 'gplus_url', 'content_type', 'related_contents', 'related_events', 'related_places', 'source_start_time', 'source_end_time', 'related_trends', 'related_users_in_timeline', 'related_contents_in_timeline', 'related_events_in_timeline', 'related_places_in_timeline', 'related_trends_in_timeline']\nQuestion: What are the top 4 numbers of likes a tweet in the dataset has?\nExpected return type: list[number]\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['likes'].head(4).tolist()\"\n}\n\n\nInput DataFrame columns: ['ad_id', 'display_url', 'account_id', 'url', '",
    "{\n    \"solution\": \"df['mention_ids'].explode().value_counts().dropna().nlargest(5).tolist()\"\n}\n\n\n/exercises/python/src/hello/solution.pydef hello(name):\n    return \"Hello, {}\".format(name)/exercises/python/test/test_hello.pyimport unittest\n\nfrom hello.solution import hello\n\n\nclass HelloTest(unittest.TestCase):\n    def test_hello(self):\n        self.assertEqual(\n            hello(\"World\"), \"Hello, World\"\n        )\n\n\nif __name__ == '__main__':\n    unittest.main()/exercises/python/src/reverse_string/solution.pydef reverse_string(str):\n    return str[::-1]/exercises/python/test/test_reverse_string.pyimport unittest\n\nfrom reverse_string.solution import reverse_string\n\n\nclass ReverseStringTest(unittest.TestCase):\n    def test_reverse_string(self):\n        self.assertEqual(\n            reverse_string(\"Hello, World\"), \"dlroW ,olleH\"\n        )\n\n\nif __name__ == '__main__':\n    unittest.main()/exercises/python/test/test_fibonacci.pyimport unittest\n\nfrom fibonacci.solution import fibonacci\n\n\nclass FibonacciTest(unittest.TestCase):\n    def test_fibonacci(self):\n        self.assertEqual(fibonacci(10), 55)\n\n\nif __name__ == '__main__':\n    unittest.main()/exercises/fsharp/test/Test.FSharp.fsmodule Test\n\nopen FsUnit\n      \nopen FSharp.\n\n[<Tests>]\nlet ``are divisible by 9`` =\n    let a = 18\n    9 |> should equal (a / 9)\n\nlet ``get the sum of even Fibonacci numbers less than 4,000,000`` =\n    let a = [1; 2; 3; 5; 8; 13]\n    23 |> should equal (a |> filter (fun x -> x % 2 = 0) |> sum)\n\nlet ``get the largest palindrome made from the product of two 3-digit numbers`` =",
    "{\n    \"solution\": \"df['retweets'].nlargest(2).tolist()\"\n}\n\n\nInput DataFrame columns: ['q001', 'q002', 'q003', 'q004', 'q005', 'q006', 'q007', 'q008', 'q009', 'q010', 'q011', 'q012', 'q013', 'q014', 'q015', 'q016', 'q017', 'q018', 'q019', 'q020', 'q021', 'q022', 'q023', 'q024', 'q025', 'q026', 'q027', 'q028', 'q029', 'q030', 'q031', 'q032', 'q033', 'q034', 'q035', 'q036', 'q037', 'q038', 'q039', 'q040', 'q041', 'q042', 'q043', 'q044', 'q045', 'q046', 'q047', 'q048', 'q049', 'q050', 'q051', 'q052', 'q053', 'q054', 'q055', 'q056', 'q057', 'q058', 'q059', 'q060', 'q061', 'q062', 'q063', 'q064', 'q065', 'q066', 'q067', 'q068', 'q069', 'q070', 'q071', 'q072', 'q073', 'q074', 'q075', 'q076', 'q077', 'q078', '",
    "global ans\n\ndef answer(df):\n    return df[df['Loan Amount'] == df['Loan Amount'].max()]['Loan Duration - Months'].gt(df['Loan Duration - Months'].max()).any()\nans = answer(df)",
    "{\n    \"solution\": \"banks.loc[banks['Number of Existing Loans'].idxmax(), 'Loan Amount'] == banks.loc[banks['Number of Existing Loans'].idxmax(), 'Number of Existing Loans']\"\n}\n\n\nInput DataFrame columns: ['Name', 'Address', 'Sector', 'Capital', 'CEO', 'Turnover', 'Number of Employees']\nQuestion: Is the company with the highest turnover also the company with the highest number of employees?\nExpected return type: boolean\n\nCode that calculates the answer:\n{\n    \"solution\": \"companies.loc[companies['Turnover'].idxmax(), 'Number of Employees'] == companies.loc[companies['Turnover'].idxmax(), 'Turnover']\"\n}\n\n\nInput DataFrame columns: ['country_code', 'name', 'alpha_2', 'alpha_3', 'numeric', 'region', 'sub_region', 'large_regions', 'intermediate_region', 'region_code', 'sub_region_code']\nQuestion: How many countries are in the Northern Africa region?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"countries[countries['region'] == 'Northern Africa'].shape[0]\"\n}\n\n\nInput DataFrame columns: ['timestamp', 'publication_id', 'author_id', 'headline_text', 'subject', 'headline_category']\nQuestion: What is the most frequent headline category?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['headline_category'].mode().iloc[0]\"\n}\n\n\nInput DataFrame columns: ['station_id', 'longitude', 'latitude', 'elevation', 'state', 'name', 'gsn', 'wban', 'line_id', 'order', 'primary_function', 'time_zone', 'square_km', 'independent_station', 'gmt', 'dst', 'make', 'model', 'iserv', 'mfr', 'type', 'deploy_year', 'owner', 'operator', 'date_commissioned', 'date_retired', 'date_modified', 'date_closed', 'data_source',",
    "global ans\n\ndef answer(df):\n    return df['Loan Duration - Months'].max() == df['Number of Existing Loans'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Age'].eq(df['Age'].max()).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Amount'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Number of Existing Loans'].gt(1).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Duration - Months'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Age'].gt(50).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Purpose of Loan'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Job'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Credit History'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Savings Account'].value_counts().index[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Loan Amount'].idxmax(), 'Job'].split(', ')[:3]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Loan Duration - Months'].lt(24)].groupby('Job')['Job'].count().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Number of Existing Loans'] == df['Number of Existing Loans'].max()]['Job'].value_counts().index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(2,'Age')['Job'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Amount'].nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Duration - Months'].nlargest(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Number of Existing Loans'].nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.sort_values('Age', ascending=False).iloc[:2]['Age']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Calories (kcal)'].eq(0).any()\nans = answer(df)",
    "{\n    \"solution\": \"return all([df[i].str.contains('sugar') for i in df.columns])\"\n}\n\n\nInput DataFrame columns: ['ID', 'Response', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Age', 'Marital_Status', 'Kidhome', 'Teenhome', 'Income', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Days_Customer', 'Response_n', 'Education', 'Marital_Status', 'Age', 'Marital_Status', 'Kidhome', 'Teenhome', 'Income', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Days_Customer', 'Response_n', 'Education', 'Marital_Status', 'Age', 'Marital_Status', 'Kidhome', 'Teenhome', 'Income', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Days_Customer', 'Response_n']\nQuestion: Does education play a part in",
    "global ans\n\ndef answer(df):\n    return df['Total Fat (g)'].eq(0).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Protein (g)'].eq(0).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Calories (kcal)'] > 500]['name'].count()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Fat (g)'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Sodium (g)'].gt(1).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Protein (g)'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Calories (kcal)'].idxmax()]['name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Sugar (g)'].idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Total Fat (g)'].idxmin(), 'name']\nans = answer(df)",
    "{\n    \"solution\": \"df[df['Protein (g)'].gt(0)].sort_values('Protein (g)').iloc[-1,'name']\"\n}\n\n\nInput DataFrame columns: ['male', 'age', 'female', 'married', 'location']\nQuestion: How many people are married per country?\nExpected return type: dict[country->number]\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.groupby('location')['married'].sum().to_dict()\"\n}\n\n\nInput DataFrame columns: ['male', 'age', 'female', 'married', 'location']\nQuestion: What is the median age for male users in Canada?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[(df['location'] == 'Canada') & (df['male'] == 1)]['age'].median()\"\n}\n\n\nInput DataFrame columns: ['Number', 'Owner', 'Area_km2', 'Population', 'Country', 'District', 'County', 'Region', 'Road_name']\nQuestion: Which city has the largest number of residents?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.groupby('District')['Population'].sum().idxmax()\"\n}\n\n\nInput DataFrame columns: ['customerID', 'gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod', 'MonthlyCharges', 'TotalCharges', 'Churn']\nQuestion: Is there any person with phone service, no internet service, no online security, no online backup?\nExpected return type: boolean\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[['PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup']].eq('No').any(axis=1).all()\"\n}\n\n\nInput DataFrame columns: ['customerID', 'gender', 'Senior",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'Calories (kcal)')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Sugar (g)'].nsmallest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.sort_values('Total Fat (g)', ascending=False).head(4)['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(6, 'Protein (g)')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Calories (kcal)'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Sugar (g)'].nsmallest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Fat (g)'].nlargest(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.sort_values('Protein (g)')['Protein (g)'].head(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['edu'].str.contains('Primary').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['polInterest'].eq(1).all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].str.contains('No').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].eq('Right-Left').any()\nans = answer(df)",
    "{\n    \"solution\": \"df[df['userSelfPlacement'] == 'Progressive'] == 10).sum()\"\n}\n\n\nInput DataFrame columns: ['TimeInvested', 'ID', 'Divorce', 'Country', 'Political', 'Opposition', 'Economy', 'Society', 'Health', 'Security', 'Age', 'Education', 'Profession', 'Party', 'Income', 'Gender', 'Years', 'Hours', 'Country', 'City', 'Vegetarian', 'Diet', 'Smoking', 'Alcohol', 'FeelHealthy', 'Technology', 'TechSupport', 'Relationship', 'Religious', 'Healthcare', 'GeneralHealth', 'Internet', 'Freedom', 'Economy', 'PublicService', 'PublicAdministration', 'Education', 'Research', 'Innovation', 'Medicine']\nQuestion: How many respondents took less than 50% of their life to informally learn about politics at home?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['TimeInvested'].le(50).sum()\"\n}\n\n\nInput DataFrame columns: ['Education', 'Gender', 'Age', 'CreditScore', 'Country', 'Ethnicity', 'Profession', 'NumberCars', 'AgeOfCars', 'Profession', 'EstimatedSalary']\nQuestion: Is there any person with salary higher than 200000?\nExpected return type: boolean\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['EstimatedSalary'].gt(200000).any()\"\n}\n\n\nInput DataFrame columns: ['Hour', 'Minute', 'Duration', 'Protocol', 'Src_Bytes', 'Dst_Bytes', 'Land', 'Wrong_Fragment', 'Urgent', 'Hot', 'Num_failed_logins', 'Logged_in', 'Num_compromised', 'Root_shell', 'Su_attempted', 'Num_root', 'Num_file_creations', 'Num_shells', 'Num_access_files', 'Num_outbound_cmds', 'Is_host_login', 'Is_guest_login', 'Count',",
    "global ans\n\ndef answer(df):\n    return df['Age'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['voteReason'].str.contains('It should be more difficult for companies to lay off workers').sum()\nans = answer(df)",
    "{\n    \"solution\": \"df[(df['Vote Intention'].str.contains('Do not disclose my gender')) & (~df['gender'].str.contains('Do not disclose'))]['Age'].max()\"\n}\n\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: What is the minimum number of deal purchases made by a customer in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['NumDealsPurchases'].min()\"\n}\n\n\nInput DataFrame columns: ['SK_ID_CURR', 'SK_ID_PREV', 'NAME_CONTRACT_TYPE', 'AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE', 'NAME_CONTRACT_STATUS', 'DAYS_DECISION', 'NAME_PAYMENT_TYPE', 'CODE_REJECT_REASON', 'NAME_TYPE_SUITE', 'NAME_CLIENT_TYPE', 'NAME_GOODS_CATEGORY', 'NAME_PORTFOLIO', 'NAME_PRODUCT_TYPE', 'CHANNEL_TYPE', 'SELLERPLACE_AREA', 'NAME_SELLER_INDUSTRY', 'CNT_PAYMENT', 'DAYS_FIRST_DRAWING', 'DAYS_FIRST_DUE', 'DAYS_LAST_DUE_1ST_VERSION', 'DAYS_LAST_DUE', 'DAYS_TERMINATION', 'NFLAG_INSURED_ON_APPROVAL']\nQuestion: Which channel_type has the maximum number of applications that have been rejected?\nExpected return type: category\n\nCode that calculates",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['partyId'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['lang'].value_counts().index[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].value_counts().nlargest(5).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].str.split(' - ').explode().value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['partyId'].head(3).value_counts().index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['edu'].value_counts().nlargest(3).index.to_list()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Age'].value_counts().iloc[:3].index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].str.split('\\\\b(\\\\-\\\\d*\\\\.\\\\d+)|(\\\\-?\\\\d+\\\\.\\\\d*)\\\\b').loc[df['Vote Intention'].str.split('\\\\b(\\\\-\\\\d*\\\\.\\\\d+)|(\\\\-?\\\\d+\\\\.\\\\d*)\\\\b').map(len).gt(1)].explode().value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['User self- placement on Progressive-Conservative economic values axis'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Constitutional organisation of the country (More Descentralization)'].value_counts().nlargest(2).index.tolist()\nans = answer(df)"
]