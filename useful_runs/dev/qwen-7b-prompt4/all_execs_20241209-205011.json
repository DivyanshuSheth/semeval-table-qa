[
    "global ans\n\ndef answer(df):\n    return df.loc[df['favorites'].idxmax(), 'lang'] == 'es'\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['author_name'].str.len().idxmax(), 'type'] == 'original'\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].eq(0).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['links'].eq('').any()\nans = answer(df)",
    "{\n    \"solution\": \"df['author_id'].nunique()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['text'].str.split().str.len().max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['mention_ids'].str.len().eq(0).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['retweets'].idxmax(), 'author_name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['favorites'].idxmax(), 'lang']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['text'].str.len().idxmax(), 'author_name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type'].mode().iloc[0]\nans = answer(df)",
    "{\n    \"solution\": \"df['author_name'][df['retweets'].idxnlargest(3)].tolist()\"\n}",
    "{\n    \"solution\": \"df.loc[df.sort_values(by='favorites').head(5), 'lang'].tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['author_name'][df['text'].str.split().str.len().nlargest(4).index].unique().tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type'].value_counts().nlargest(6).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'favorites')['retweets'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['text'].apply(lambda x: len(x.split())).nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.sort_values('favorites').tail(4)['retweets'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['text'].str.split().str.len().nlargest(6).sort_values(ascending=True).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['name'].isin(['Pikachu']).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['total'].gt(700).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['generation'] == 1]['legendary'].all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['speed'].max() > 150\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type1'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['total'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['generation'] == 3].shape[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['attack'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['defense'].idxmax(), 'type1']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['speed'].idxmin(), 'name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['legendary'] == True]['type1'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['sp_attack'].idxmax(), 'name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'total')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.sort_values(by='hp').head(5)['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type1'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[(df['generation'] == 2) & (df['attack'] == df.loc[df['generation'] == 2, 'attack'].max()), 'name'].head(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['sp_defense'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['legendary'] == True, 'defense'].nsmallest(2).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['generation'] == 4, 'speed'].nlargest(2).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[~df['legendary']]['total'].nsmallest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Extraversion'].max() > df['Agreeableness'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Openness'].idxmax(), 'Profession'] == df.loc[df['Conscientousness'].idxmax(), 'Profession']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Emotional_Range'].idxmin(), 'Conversation'] == df['Conversation'].min()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Openness to Change'].mean() > df['Hedonism'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Self-enhancement'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Emotional_Range'].gt(0.5).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['n'].idxmax(), 'Extraversion']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Self-transcendence'].min()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Conscientousness'].idxmax(), 'Profession']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Profession'][df['Hedonism'].idxmin()]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Profession'][df['Emotional_Range'].idxmax()]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Profession'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Openness'].argsort()[-3:]]['Profession'].tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df['Profession'].nlargest(4, 'Agreeableness').tolist()\"\n}",
    "{\n    \"solution\": \"df['Profession'].nlargest(5, 'Conversation').tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['Profession'].value_counts().nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Profession')['Openness to Change'].max().nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Emotional_Range'].nsmallest(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Extraversion'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Self-transcendence'].nsmallest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['title'].str.contains('communication', case=False).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['organization'].isin(['IBM']).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['abstract'].str.contains('software', case=False, na=False).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type'].eq('design').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['organization'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['num_claims'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['num_claims'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type'].value_counts()['utility']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['num_claims'].idxmax(), 'organization']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['kind'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['lang'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['graphext_cluster'].mode().item()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['organization'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['type'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['kind'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['graphext_cluster'].value_counts(ascending=True).index[:2].tolist()[::-1]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['num_claims'].nlargest(4).tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['num_claims'].idxnlargest(3), 'id'].tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df[df['kind'].isin(['B2', 'S1'])]['num_claims'].groupby(df['kind']).median().tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['id'].sort_values(ascending=False).head(3).tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['user_followers_count'].idxmax(), 'user_verified']\"\n}",
    "{\n    \"solution\": \"df.loc[df['favorites'].idxmax(), 'retweets'] == df.loc[df['favorites'].idxmax(), 'retweets'].max()\"\n}",
    "{\n    \"solution\": \"df['mention_ids'].explode().mode()[0] == df['tweet_link'].str.extract(r'/status/(\\d+)').astype(int).mode()[0]\"\n}",
    "{\n    \"solution\": \"(df.loc[df['retweets'].idxmax(), 'replies'] == df['replies'].max())\"\n}",
    "global ans\n\ndef answer(df):\n    return df['user_followers_count<gx:number>'].max()\nans = answer(df)",
    "{\n    \"solution\": \"df[df['favorites'] > 10000]['author_id<gx:category>'].nunique()\"\n}",
    "{\n    \"solution\": \"df['retweets'].max()\"\n}",
    "{\n    \"solution\": \"df['mention_ids'].str.split(', ').explode().value_counts().max()\"\n}",
    "global ans\n\ndef answer(df):\n    return df.loc[df['user_followers_count<gx:number>'].idxmax(), 'author_name<gx:category>']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['author_name<gx:category>'].loc[df['user_favourites_count<gx:number>'].idxmax()]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['author_name<gx:category>'].mode().iloc[0]\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['retweets'].idxmax(), 'author_name<gx:category>']\"\n}",
    "global ans\n\ndef answer(df):\n    return df.groupby('author_name<gx:category>')['user_followers_count<gx:number>'].sum().nlargest(3).index.tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df['author_name<gx:category>'].groupby('author_id<gx:category>').sum().nlargest(4).index.tolist()\"\n}",
    "{\n    \"solution\": \"df[df['author_name'] != df['mention_names'].explode()]['mention_names'].explode().value_counts().head(4).index.tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['author_name<gx:category>'].loc[df.groupby('author_name<gx:category>')['retweets<gx:number>'].idxmax()].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['user_followers_count<gx:number>'].nlargest(3).tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df['favorites'].nlargest(3).tolist()\"\n}",
    "{\n    \"solution\": \"df['mention_ids'].str.len().value_counts().nlargest(5).index.tolist()\"\n}",
    "{\n    \"solution\": \"df['retweets'].nlargest(2).tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Loan Amount'].idxmax(), 'Loan Duration - Months'] == df['Loan Duration - Months'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Number of Existing Loans'].idxmax(), 'Loan Amount'] == df['Loan Amount'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Loan Duration - Months'].idxmax(), 'Number of Existing Loans'] == df['Number of Existing Loans'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Age'].idxmax(), 'Loan Amount'] == df['Loan Amount'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Amount'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Number of Existing Loans'].gt(1).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Duration - Months'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Age'].gt(50).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Purpose of Loan'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Job'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Credit History'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Savings Account'].mode().iloc[0]\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['Loan Amount'].idxmax(), 'Job'].tolist()[:3]\"\n}",
    "{\n    \"solution\": \"df.loc[df['Loan Duration - Months'].idxmax(), 'Job':df['Loan Duration - Months'].idxmax(), 'Job'].value_counts().nlargest(4).index.tolist()\"\n}",
    "{\n    \"solution\": \"df.loc[df['Number of Existing Loans'].idxmax()]['Job'].value_counts().nlargest(5).index.tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['Job'].iloc[df['Age'].nlargest(2).index].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Amount'].nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Loan Duration - Months'].nlargest(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Number of Existing Loans'].nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Age'].nlargest(2).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Calories (kcal)'].eq(0).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Sugar (g)'].gt(0).all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Fat (g)'].eq(0).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return not df['Protein (g)'].gt(0).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Calories (kcal)'].gt(500).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Fat (g)'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Sodium (g)'].gt(1).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Protein (g)'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Calories (kcal)'].idxmax(), 'name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Total Sugar (g)'].idxmax(), 'name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Total Fat (g)'].idxmin(), 'name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Protein (g)'].idxmax(), 'name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'Calories (kcal)')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(3, 'Total Sugar (g)')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(4, 'Total Fat (g)')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['name'][df.sort_values('Protein (g)').head(6).index].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Calories (kcal)'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Sugar (g)'].nsmallest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Total Fat (g)'].nlargest(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Protein (g)'].nsmallest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['edu'] == 'Primary education'\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['polInterest'].all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].eq('None').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['User self-placement on Left-Right economic values axis'].eq('extreme right').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['User self- placement on Progressive-Conservative economic values axis'].eq(10).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Age'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['It should be more difficult for companies to lay off workers'].sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['gender'] == 'Not Specified', 'Age'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['voteReason'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['partyId'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['lang'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Vote Intention'].mode().iloc[:5].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['voteReason'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['partyId'].mode().head(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['edu'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Age'].mode().tolist()[:3]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['User self-placement on Left-Right economic values axis'].mode().tolist()[:3]\nans = answer(df)",
    "{\n    \"solution\": \"df['User self-placement on Progressive-Conservative economic values axis'].value_counts().nlargest(4).index.tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['Constitutional organisation of the country (More Descentralization)'].mode().tolist()[:2]\nans = answer(df)"
]