[
    "```json\n{\n    \"solution\": \"df.loc[df['favorites'].idxmax(), 'lang'] == 'es'\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['author_name'].str.len().idxmax() in df[df['type'] == 'original']['author_id'].values\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.groupby('author_id')['retweets'].sum().eq(0).any()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['links'].isnull().all()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['author_id'].nunique()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['text'].str.split().str.len().max()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['retweets'].sum()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return (df['mention_ids'].str.len() == 0).sum()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['retweets'].idxmax(), 'author_name'].astype('category')\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['favorites'].idxmax(), 'lang'].astype('category')\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['text'].str.split().str.len().idxmax(), 'author_name']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['type'].mode()[0].astype('category')\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nlargest(3, 'retweets')['author_name'].unique().tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nsmallest(5, 'favorites')['lang'].astype('category').tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nsmallest(4, df['text'].str.split().str.len()).author_name.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['type'].value_counts().nlargest(6).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nlargest(5, 'favorites')['retweets'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['text'].str.split().str.len().nlargest(3).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nsmallest(4, 'favorites')['retweets'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['text'].str.split().str.len().nsmallest(6).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['name'].eq('Pikachu').any()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['total'].gt(700).any()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['generation'].eq(1).all() and df['legendary'].all()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return (df['speed'] > 150).any()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['type1'].nunique()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['total'].max()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df[df['generation'] == 3].shape[0]\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['attack'].mean()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['defense'].idxmax(), 'type1']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['speed'].idxmin(), 'name'].astype('category')\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['legendary'], 'type1'].mode()[0]\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['sp_attack'].idxmax(), 'name'].astype('category')\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nlargest(3, 'total')['name'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nsmallest(5, 'hp')['name'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['type1'].value_counts().nlargest(2).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df[df['generation'] == 2].nlargest(6, 'attack')['name'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['sp_defense'].nlargest(5).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df[df['legendary'] == True].nsmallest(2, 'defense')['number'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df[df['generation'] == 4]['speed'].nlargest(2).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df[df['legendary'] == False]['total'].nsmallest(6).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Extraversion'].max() > df['Agreeableness'].max()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Openness'].idxmax(), 'Profession'] == df.loc[df['Conscientousness'].idxmax(), 'Profession']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Emotional_Range'].idxmin(), 'Conversation'] == df['Conversation'].min()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Openness to Change'].mean() > df['Hedonism'].mean()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['Self-enhancement'].max()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return (df['Emotional_Range'] > 0.5).sum()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['n'].idxmax(), 'Extraversion']\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['Self-transcendence'].min()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Conscientousness'].idxmax(), 'Profession']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Hedonism'].idxmin(), 'Profession']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Emotional_Range'].idxmax(), 'Profession'].astype('category')\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['n'].idxmax(), 'Profession'].astype('category')\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nlargest(3, 'Openness')['Profession'].astype('category').tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nsmallest(4, 'Agreeableness')['Profession'].astype('category').tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nlargest(5, 'Conversation')['Profession'].astype('category').tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nsmallest(2, 'Self-enhancement')['Profession'].astype('category').tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Openness to Change'].nlargest(3).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nsmallest(4, 'Emotional_Range')['Emotional_Range'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Extraversion'].nlargest(5).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.n.nlargest(6).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['title'].str.contains('communication', case=False).any()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['organization'].eq('IBM').any()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['abstract'].str.contains('software', case=False, na=False).any()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['type'].eq('design').any()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['organization'].nunique()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['num_claims'].mean()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['num_claims'].max()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df[df['type'] == 'utility'].shape[0]\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['num_claims'].idxmax(), 'organization']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['kind'].mode()[0]\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['lang'].astype('category').cat.categories\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['graphext_cluster'].mode().astype('category').iloc[0]\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['organization'].value_counts().nlargest(3).index.sort_values().tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['type'].value_counts().nlargest(2).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['kind'].value_counts().nlargest(2).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['graphext_cluster'].value_counts().nsmallest(2).index.tolist()[::-1]\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['num_claims'].nlargest(4).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nlargest(3, 'num_claims')['id'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.groupby('kind')['num_claims'].median().reindex(['B2', 'S1']).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nlargest(3, 'date')['id'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['user_followers_count'].idxmax(), 'user_verified<gx:boolean>']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['user_favourites_count'].idxmax(), 'user_favourites_count'] == df.loc[df['retweets'].idxmax(), 'retweets']\"\n}\n```",
    "```json\n{\n    \"solution\": \"(most_mentioned := df['mention_ids'].explode().value_counts().idxmax(), most_retweeted := df[df['mention_ids'].apply(lambda x: most_mentioned in x)]['retweets'].idxmax()) and most_mentioned == df.loc[most_retweeted, 'mention_ids'].explode().value_counts().idxmax()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['retweets'].idxmax(), 'replies'] == df['replies'].max()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['user_followers_count<gx:number>'].max()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df[df['favorites'] > 10000]['author_id<gx:category>'].nunique()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['retweets'].max()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['mention_ids<gx:list[category]>'].explode().value_counts().max()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['user_followers_count'].idxmax(), 'author_name<gx:category>']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['user_favourites_count'].idxmax(), 'author_name<gx:category>']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['mention_names<gx:list[category]>'].explode().value_counts().idxmax()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['retweets'].idxmax(), 'author_name<gx:category>']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nlargest(3, 'user_followers_count<gx:number>')['author_name<gx:category>'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.groupby('author_name<gx:category>')['favorites<gx:number>'].sum().nlargest(4).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.explode('mention_names').groupby('mention_names').size().nlargest(4).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nlargest(2, 'retweets')['author_name<gx:category>'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['user_followers_count<gx:number>'].nlargest(3).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['favorites'].nlargest(3).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df[df['mention_ids<gx:list[category]>'].str.len() > 0]['mention_ids<gx:list[category]>'].explode().value_counts().head(5).values.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['retweets'].nlargest(2).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].iloc[df['Loan Amount'].idxmax()] == df['Loan Duration - Months'].max()\"\n}\n```",
    "```json\n{\n    \"solution\": \"(df['Number of Existing Loans'] == df['Number of Existing Loans'].max()).any() and (df.loc[df['Number of Existing Loans'].idxmax(), 'Loan Amount'] == df['Loan Amount'].max())\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].idxmax() == df['Number of Existing Loans'].idxmax()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Age'].max() == df.loc[df['Age'].idxmax(), 'Loan Amount']\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['Loan Amount'].max()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df[df['Number of Existing Loans'] > 1].shape[0]\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['Loan Duration - Months'].max()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return (df['Age'] > 50).sum()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Purpose of Loan'].mode()[0].astype('category')\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Job'].mode()[0].astype('category')\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Credit History'].mode()[0]\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Savings Account'].mode()[0]\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nlargest(3, 'Loan Amount')['Job'].astype('category').tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Loan Duration - Months'].idxmax(), 'Job'].value_counts().nlargest(4).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Number of Existing Loans'] == df['Number of Existing Loans'].max(), 'Job'].astype('category').unique()[:5].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Age'].nlargest(2).index, 'Job'].astype('category').tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Loan Amount'].nlargest(3).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Loan Duration - Months'].value_counts().nlargest(4).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Number of Existing Loans'].nlargest(3).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Age'].nlargest(2).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Calories (kcal)'].eq(0).any()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Total Sugar (g)'].nunique() > 1\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Total Fat (g)'].eq(0).any()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Protein (g)'].isna().any() or (df['Protein (g)'] == 0).any()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return (df['Calories (kcal)'] > 500).sum()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['Total Fat (g)'].mean()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return (df['Sodium (g)'] > 1).sum()\"\n}\n```",
    "```json\n{\n    \"solution\": \"return df['Protein (g)'].max()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Calories (kcal)'].idxmax(), 'name']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Total Sugar (g)'].idxmax(), 'name']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Total Fat (g)'].idxmin(), 'name']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['Protein (g)'].idxmax(), 'name']\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nlargest(5, 'Calories (kcal)')['name'].astype('category').tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nsmallest(3, 'Total Sugar (g)')['name'].astype('category').tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nlargest(4, 'Total Fat (g)')['name'].astype('category').tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nsmallest(6, 'Protein (g)')['name'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Calories (kcal)'].nlargest(5).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nsmallest(3, 'Total Sugar (g)')['Total Sugar (g)'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Total Fat (g)'].nlargest(4).tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.nsmallest(6, 'Protein (g)')['Protein (g)'].tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['edu'].str.contains('didn\\'t complete primary education').any()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['polInterest'].notna().all()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].eq('No').any()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['User self-placement on Left-Right economic values axis'].eq(10).any()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['User self- placement on Progressive-Conservative economic values axis'].eq(10).sum()\"\n}\n```",
    "```json\n{\n    \"solution\": \"def answer(df: pd.DataFrame) -> float: return df['Age'].mean()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['It should be more difficult for companies to lay off workers'].value_counts().get(1, 0)\"\n}\n```",
    "```json\n{\n    \"solution\": \"df.loc[df['gender'] == 'prefer not to say', 'Age'].max()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].mode()[0]\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['voteReason'].mode()[0]\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['partyId'].mode()[0]\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['lang'].mode()[0].astype('category')\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Vote Intention'].value_counts().nlargest(5).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['voteReason'].value_counts().nlargest(3).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['partyId'].value_counts().nlargest(3).index.to_list()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['edu'].value_counts().nlargest(3).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Age'].value_counts().nlargest(3).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['User self-placement on Left-Right economic values axis'].value_counts().nlargest(3).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['User self- placement on Progressive-Conservative economic values axis'].value_counts().nlargest(4).index.tolist()\"\n}\n```",
    "```json\n{\n    \"solution\": \"df['Constitutional organisation of the country (More Descentralization)'].value_counts().head(2).index.tolist()\"\n}\n```"
]