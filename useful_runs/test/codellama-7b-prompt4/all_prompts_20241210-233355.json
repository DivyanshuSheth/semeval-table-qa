[
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Are there survey participants who are not registered to vote?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Are there survey participants who are not registered to vote?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Are there any respondents who participated in the 2016 Presidential election (four years ago) but are not planning to do so in the upcoming election?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Are there any respondents who participated in the 2016 Presidential election (four years ago) but are not planning to do so in the upcoming election?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Do we have any respondents in the dataset who didn't participate in the 2016 Presidential election (four years ago) but intend to do so in the upcoming election?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Do we have any respondents in the dataset who didn't participate in the 2016 Presidential election (four years ago) but intend to do so in the upcoming election?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Do we have respondents who have shifted their voting preference from the 2016 election (four years ago) to the upcoming one?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Do we have respondents who have shifted their voting preference from the 2016 election (four years ago) to the upcoming one?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: How many respondents in the survey are eligible to vote?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: How many respondents in the survey are eligible to vote?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: What is the count of respondents who are most likely to vote for Biden in the upcoming day of the election?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: What is the count of respondents who are most likely to vote for Biden in the upcoming day of the election?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: How many respondents have a high school degree or less as their highest level of education?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: How many respondents have a high school degree or less as their highest level of education?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: How many respondents are from the region adjacent to the South Atlantic Ocean?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: How many respondents are from the region adjacent to the South Atlantic Ocean?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: What is the most frequent age group among the respondents?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: What is the most frequent age group among the respondents?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Who is the preferred choice among the respondents for the upcoming election?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Who is the preferred choice among the respondents for the upcoming election?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: What is the most commonly achieved educational level among the respondents?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: What is the most commonly achieved educational level among the respondents?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Which geographical division has the greatest representation among the respondents? If there is a tie solve it by reverse alphabetical order. \nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Which geographical division has the greatest representation among the respondents? If there is a tie solve it by reverse alphabetical order. \nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Identify the top 6 states with the greatest number of respondents.\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Identify the top 6 states with the greatest number of respondents.\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Enumerate the 2 most common professions among the respondents. If two or more have the same number sort them out by alphabetical order.\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Enumerate the 2 most common professions among the respondents. If two or more have the same number sort them out by alphabetical order.\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Identify the top 2 ethnic groups with the most representation among the respondents.\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Identify the top 2 ethnic groups with the most representation among the respondents.\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Enumerate the top 6 most represented age groups among the respondents.\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Enumerate the top 6 most represented age groups among the respondents.\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Identify the highest 3 unique county codes present in the dataset.\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Identify the highest 3 unique county codes present in the dataset.\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Enumerate the highest 4 unique weight values in the dataset.\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Enumerate the highest 4 unique weight values in the dataset.\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: List the top 4 urban/rural categories (using NCHS codes) with the greatest number of respondents.\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: List the top 4 urban/rural categories (using NCHS codes) with the greatest number of respondents.\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Enumerate the 2 most common likelihood values among the respondents.\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intimidation at polling place', 'If you have any concerns about the US election, what are they? - Foreign interference/influence on the election', 'If you have any concerns about the US election, what are they? - The losing candidate not accepting the result', 'If you have any concerns about the US election, what are they? - Fake news/ disinformation', 'If you have any concerns about the US election, what are they? - Other', 'If you have any concerns about the US election, what are they? - I don't have any specific concerns about the election', 'Which of these best describes the kind of work you do?', 'likelihood', 'NCHS Urban/rural (long form)', 'Local time', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'weight_by_2016_vote', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'likely_voter', 'likely_decided_voter']\nQuestion: Enumerate the 2 most common likelihood values among the respondents.\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Is there a car model named 'Golf' listed?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Is there a car model named 'Golf' listed?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Are there cars associated with the dealer 'Autos Raymara'?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Are there cars associated with the dealer 'Autos Raymara'?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Is there a car version that mentions 'BMW'?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Is there a car version that mentions 'BMW'?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Are there cars with a 'Manual' shift?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Are there cars with a 'Manual' shift?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: How many unique car models are listed?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: How many unique car models are listed?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: On average, how many photos are provided for the cars?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: On average, how many photos are provided for the cars?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What's the highest price a car is listed for?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What's the highest price a car is listed for?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: How many cars are from the year 2020?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: How many cars are from the year 2020?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Which dealer has the car with the highest price listed?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Which dealer has the car with the highest price listed?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Which car maker is the most common? If there is a tie then use alphabetical order.\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Which car maker is the most common? If there is a tie then use alphabetical order.\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What type of fuel is the most common for the cars?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What type of fuel is the most common for the cars?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: In which province are the most cars located?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: In which province are the most cars located?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Which are the 3 provinces with the most car listings? If there is a tie then use reverse alphabetical order.\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Which are the 3 provinces with the most car listings? If there is a tie then use reverse alphabetical order.\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: List the 3 most common car colors in the dataset.\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: List the 3 most common car colors in the dataset.\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Which 5 car makes are the most prevalent?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Which 5 car makes are the most prevalent?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: List the 2 least common fuels used in the cars.\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: List the 2 least common fuels used in the cars.\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What are the 4 most common years of the cars?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What are the 4 most common years of the cars?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: List the 3 highest mileages present.\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: List the 3 highest mileages present.\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What are the 5 highest amount of pictures associated?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What are the 5 highest amount of pictures associated?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: List the 6 highest power values.\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: List the 6 highest power values.\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Are all transactions IDs unique?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Are all transactions IDs unique?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Is there any transaction that took place during the night?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Is there any transaction that took place during the night?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Do all items have transactions recorded on weekdays?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Do all items have transactions recorded on weekdays?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Are there any transactions recorded in the evening on weekends?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Are there any transactions recorded in the evening on weekends?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: How many unique items are there in the dataset?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: How many unique items are there in the dataset?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: On how many different days were transactions recorded?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: On how many different days were transactions recorded?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: What's the highest transaction number?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: What's the highest transaction number?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: How many different IDs are there in the transactions that were made during the afternoon?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: How many different IDs are there in the transactions that were made during the afternoon?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Which day period has the highest number of unique transaction IDs?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Which day period has the highest number of unique transaction IDs?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: On weekdays, what's the most commonly bought item?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: On weekdays, what's the most commonly bought item?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: What's the least popular item bought during weekdays?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: What's the least popular item bought during weekdays?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: During which period of the day is Brownie\" most frequently bought?\"\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: During which period of the day is Brownie\" most frequently bought?\"\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: List the top 3 items most frequently bought in the morning.\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: List the top 3 items most frequently bought in the morning.\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Name the top 2 most purchased during the afternoon.\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Name the top 2 most purchased during the afternoon.\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Identify the top 2 items sold on weekends. If a tie then sort alphabetical.\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Identify the top 2 items sold on weekends. If a tie then sort alphabetical.\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: What are the 4 items that were bought two times in the evening?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: What are the 4 items that were bought two times in the evening?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Which are the 4 transaction numbers with the most items bought?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Which are the 4 transaction numbers with the most items bought?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Identify the highest 5 transaction numbers.\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Identify the highest 5 transaction numbers.\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: List the highest 4 transaction numbers during which 'Bread' was purchased.\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: List the highest 4 transaction numbers during which 'Bread' was purchased.\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Name the lowest 2 transaction numbers where purchases were made in the morning.\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Name the lowest 2 transaction numbers where purchases were made in the morning.\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: Are all the reviews from Australia positive (rating > 3)?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: Are all the reviews from Australia positive (rating > 3)?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: Is Disneyland_HongKong the most reviewed branch?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: Is Disneyland_HongKong the most reviewed branch?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: Are there any reviews with a rating of 1?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: Are there any reviews with a rating of 1?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: Does every reviewer location have at least one review with a rating of 5?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: Does every reviewer location have at least one review with a rating of 5?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: How many unique reviewer locations are there?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: How many unique reviewer locations are there?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What is the average rating for Disneyland_HongKong?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What is the average rating for Disneyland_HongKong?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What is the maximum review ID? If there is a tie then pick the highest ID.\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What is the maximum review ID? If there is a tie then pick the highest ID.\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: How many reviews were made in 2019?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: How many reviews were made in 2019?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What is the most common reviewer location?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What is the most common reviewer location?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What is the branch with the lowest average rating?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What is the branch with the lowest average rating?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: In which date was the first most negative review (rating=1) made?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: In which date was the first most negative review (rating=1) made?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What is the reviewer location with the highest average rating? If there is a tie then pick the first one alphabetically\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What is the reviewer location with the highest average rating? If there is a tie then pick the first one alphabetically\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the top 3 reviewer locations with the most reviews?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the top 3 reviewer locations with the most reviews?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the bottom 2 branches in terms of average rating?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the bottom 2 branches in terms of average rating?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the 4 dates with the most reviews? Include those missing.\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the 4 dates with the most reviews? Include those missing.\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the bottom 3 reviewer locations in terms of average rating?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the bottom 3 reviewer locations in terms of average rating?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the highest 5 review IDs in terms of rating? If you find a tie then keep the highest IDs.\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the highest 5 review IDs in terms of rating? If you find a tie then keep the highest IDs.\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the lowest 4 review IDs in terms of rating? If there are more than four with the same rating keep the lowest IDs\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the lowest 4 review IDs in terms of rating? If there are more than four with the same rating keep the lowest IDs\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the top 3 (not necessarily unique) ratings given by reviewers from Australia?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the top 3 (not necessarily unique) ratings given by reviewers from Australia?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the lowest 2 ratings given for Disneyland_HongKong?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the lowest 2 ratings given for Disneyland_HongKong?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: Are all the tweets in English?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: Are all the tweets in English?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: Has the author ever been retweeted?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: Has the author ever been retweeted?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: Are there any tweets with more than 10000 retweets?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: Are there any tweets with more than 10000 retweets?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: Have any of the tweets been favorited more than 50000 times?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: Have any of the tweets been favorited more than 50000 times?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: How many unique authors are there?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: How many unique authors are there?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What is the average number of retweets?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What is the average number of retweets?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What is the maximum number of favorites received for a single tweet?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What is the maximum number of favorites received for a single tweet?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: How many tweets were posted in 2018?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: How many tweets were posted in 2018?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What is the most common author name?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What is the most common author name?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What is the tweet with the most favorites?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What is the tweet with the most favorites?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: In which language is the tweet with the most retweets written?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: In which language is the tweet with the most retweets written?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What is the most common language of the tweets?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What is the most common language of the tweets?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the top 3 author handlers with the most tweets?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the top 3 author handlers with the most tweets?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the bottom 2 languages in terms of tweet count? If there are more than two give priority to those starting with the letter p\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the bottom 2 languages in terms of tweet count? If there are more than two give priority to those starting with the letter p\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the top 4 mentioned names in the tweets?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the top 4 mentioned names in the tweets?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the bottom 3 author names in terms of tweet count?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the bottom 3 author names in terms of tweet count?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the top 5 tweet IDs in terms of retweet count?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the top 5 tweet IDs in terms of retweet count?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the bottom 4 tweet IDs in terms of favorite count?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the bottom 4 tweet IDs in terms of favorite count?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the top 6 favorite counts of the tweets?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the top 6 favorite counts of the tweets?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the bottom 3 retweet counts of the tweets?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the bottom 3 retweet counts of the tweets?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Are there any organizations in the dataset?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Are there any organizations in the dataset?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Are there any individuals (non-organizations) in the dataset?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Are there any individuals (non-organizations) in the dataset?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Do all entities have a picture?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Do all entities have a picture?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Are there any entities with a weight greater than 500?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Are there any entities with a weight greater than 500?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: How many unique communities are there?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: How many unique communities are there?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the average page rank norm?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the average page rank norm?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the maximum weight of an entity?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the maximum weight of an entity?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: How many entities have a community identifier of 16744206?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: How many entities have a community identifier of 16744206?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the most common name?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the most common name?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Which entity has the highest page rank norm?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Which entity has the highest page rank norm?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the picture URL of the entity with the maximum weight?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the picture URL of the entity with the maximum weight?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Which entity has the highest y-coordinate?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Which entity has the highest y-coordinate?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the top 3 entity names with the highest weights?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the top 3 entity names with the highest weights?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the bottom 2 entities in terms of page rank norm?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the bottom 2 entities in terms of page rank norm?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the top 4 entities with the highest x-coordinates?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the top 4 entities with the highest x-coordinates?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the bottom 3 entities in terms of y-coordinates?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the bottom 3 entities in terms of y-coordinates?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the top 5 entity IDs in terms of weight?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the top 5 entity IDs in terms of weight?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the bottom 4 entity IDs in terms of page rank norm?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the bottom 4 entity IDs in terms of page rank norm?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the top 6 page rank norms of the entities?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the top 6 page rank norms of the entities?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the bottom 3 weights of the entities?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the bottom 3 weights of the entities?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: Are there any animals with feathers in the dataset?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: Are there any animals with feathers in the dataset?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: Are there any venomous animals in the dataset?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: Are there any venomous animals in the dataset?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: Do all animals breathe?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: Do all animals breathe?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: Are there any domesticated animals in the dataset?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: Are there any domesticated animals in the dataset?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: How many unique types of animals are there?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: How many unique types of animals are there?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What is the average number of legs?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What is the average number of legs?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What is the maximum number of legs an animal has?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What is the maximum number of legs an animal has?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: How many animals are there with 2 legs?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: How many animals are there with 2 legs?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What is the most common class type?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What is the most common class type?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What is the name of the first animal with 8 legs?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What is the name of the first animal with 8 legs?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What is the class type of the animals with the most legs?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What is the class type of the animals with the most legs?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What is the name of the first animal in the dataset that is venomous?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What is the name of the first animal in the dataset that is venomous?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the top 3 animal names with the most legs? If there are more than two with the lowest number go with alphabetical order\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the top 3 animal names with the most legs? If there are more than two with the lowest number go with alphabetical order\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the bottom 2 animal names in terms of the number of legs? If there are more than two with the lowest number go with alphabetical order\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the bottom 2 animal names in terms of the number of legs? If there are more than two with the lowest number go with alphabetical order\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the most common 4 class types with the most animals?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the most common 4 class types with the most animals?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the least common 3 class types with the least animals?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the least common 3 class types with the least animals?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the most common 5 class types with the most combined total legs?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the most common 5 class types with the most combined total legs?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the bottom 4 class types with the least combined total legs?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the bottom 4 class types with the least combined total legs?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the most common 4 numbers of legs that animals have?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the most common 4 numbers of legs that animals have?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the least common 3 numbers of legs that animals have?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: What are the least common 3 numbers of legs that animals have?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Are all the quantities greater than 0?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Are all the quantities greater than 0?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Are all the unit prices greater than 0?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Are all the unit prices greater than 0?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Are there any missing customer IDs?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Are there any missing customer IDs?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Are there any transactions from the United Kingdom?\nExpected return type: boolean\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Are there any transactions from the United Kingdom?\nExpected return type: boolean\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: How many unique stock codes are there?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: How many unique stock codes are there?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What is the average unit price?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What is the average unit price?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What is the maximum quantity ordered in a single transaction?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What is the maximum quantity ordered in a single transaction?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: How many transactions were made in the United Kingdom?\nExpected return type: number\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: How many transactions were made in the United Kingdom?\nExpected return type: number\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Which country made the most transactions?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Which country made the most transactions?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What is the description of the item with the highest unit price?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What is the description of the item with the highest unit price?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What is the description of the item with the highest quantity ordered?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What is the description of the item with the highest quantity ordered?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Which country does the customer with the lowest ID come from?\nExpected return type: category\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Which country does the customer with the lowest ID come from?\nExpected return type: category\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What are the descriptions of the 3 items with the highest quantities ordered?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What are the descriptions of the 3 items with the highest quantities ordered?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What are the descriptions of the 2 items with the lowest quantities ordered? If there is a tie then solve it with the alphabetical order of descriptions.\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What are the descriptions of the 2 items with the lowest quantities ordered? If there is a tie then solve it with the alphabetical order of descriptions.\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Which 2 countries made the most transactions?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Which 2 countries made the most transactions?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Which 2 countries made the least transactions?\nExpected return type: list[category]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: Which 2 countries made the least transactions?\nExpected return type: list[category]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What are the invoice numbers of the top 5 transactions with the highest quantities ordered?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What are the invoice numbers of the top 5 transactions with the highest quantities ordered?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What are the stock codes of the bottom 5 transactions with the lowest quantities ordered? If there is a tie go with numerical order.\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What are the stock codes of the bottom 5 transactions with the lowest quantities ordered? If there is a tie go with numerical order.\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What are the four most commonly ordered quantities?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What are the four most commonly ordered quantities?\nExpected return type: list[number]\n\nOutput: [/INST]",
    "<s>[INST] <<SYS>>\nYou are a helpful assistant.\n<</SYS>>\n\nYou are an expert data scientist working at a large company. You have been tasked with writing a function that will gather insights from a dataset. The function should take a pandas DataFrame as input and return the requested information. \nGiven the following input DataFrame columns, question, and expected return type, complete the function in one line.\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What are the times the two most common descriptions are repeated?\nExpected return type: list[number]\n\nExample format:\ndef answer(df: pd.DataFrame) -> float:\n    df.columns = ['A', 'B', 'C']\n    return ...\n\nWrite a single line of code to replace the ... that:\n1. Uses the DataFrame 'df' as input\n2. Returns the exact type specified in the return type\n3. Solves the given question\n4. Uses pandas operations efficiently\n5. Avoids loops or multiple statements\n\nThe solution should be ONLY one line and use pandas vectorized operations when possible. \n\nFormat your output as follows:\n```json\n{\n    \"solution\": \"your one line of code here\"\n}\n```\n\nHere are a few examples:\n\nExample 1:\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Is the person with the highest net worth self-made?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df.loc[df['finalWorth'].idxmax(), 'selfMade']\"\n}\n```\n\nExample 2:\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: Which passenger class has the highest number of survivors?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Pclass'].mode().iloc[0]\"\n}\n```\n\nExample 3:\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: Are there any individuals in the dataset who are above 60 years of age?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"return df['Age'].gt(60).any()\"\n}\n```\n\nExample 4:\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners? (Neighbors)', 'Where have you met your sexual partners? (in Church)', 'Where have you met your sexual partners? (Other)', 'How many people have you kissed?', 'How many sexual partners have you had?', 'How many people have you considered as your boyfriend_girlfriend?', 'How many times per month did you practice sex lately?', 'Happiness scale', 'What area of knowledge is closer to you?', 'If you are in a relationship, how long have you been with your partner?']\nQuestion: What are the top 4 maximum gross annual salaries?\nExpected return type: list[number]\n\nOutput:\n```json\n{\n    \"solution\": \"df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\"\n}\n```\n\nExample 5:\n\nInput DataFrame columns: ['segmentation_1', 'descriptor', 'complaint_type', 'created_date', 'borough', 'hour', 'month_name', 'weekday_name', 'agency', 'resolution_description', 'agency_name', 'city', 'location_type', 'incident_zip', 'incident_address', 'street_name', 'cross_street_1', 'cross_street_2', 'intersection_street_1', 'intersection_street_2', 'address_type', 'landmark', 'facility_type', 'status', 'due_date', 'resolution_action_updated_date', 'community_board', 'x_coordinate', 'y_coordinate', 'park_facility_name', 'park_borough', 'bbl', 'open_data_channel_type', 'vehicle_type', 'taxi_company_borough', 'taxi_pickup_location', 'bridge_highway_name', 'bridge_highway_direction', 'road_ramp', 'bridge_highway_segment', 'latitude', 'longitude', 'location', 'unique_key', 'Unnamed_0', 'closed_date']\nQuestion: Which 4 agencies handle the most complaints?\nExpected return type: list[category]\n\nOutput:\n```json\n{\n    \"solution\": \"df['agency'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nExample 6:\n\nInput DataFrame columns: ['yr', 'mo', 'dy', 'date', 'st', 'mag', 'inj', 'fat', 'slat', 'slon', 'elat', 'elon', 'len', 'wid']\nQuestion: What is the maximum number of injuries caused by a single tornado?\nExpected return type: number\n\nOutput:\n```json\n{\n    \"solution\": \"df['inj'].max()\"\n}\n```\n\nExample 7:\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nOutput:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nExample 8:\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'source', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_thumbnail_url', 'host_picture_url', 'host_listings_count', 'host_total_listings_count', 'host_has_profile_pic', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms', 'x', 'y', 'price_M0jI']\nQuestion\nQuestion: Which host verification method is the least used?\nExpected return type: category\n\nOutput:\n```json\n{\n    \"solution\": \"df['host_verifications'].str.split(', ').explode().value_counts().idxmin()\"\n}\n```\n\nNow it's your turn! Give me the output for the following:\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: What are the times the two most common descriptions are repeated?\nExpected return type: list[number]\n\nOutput: [/INST]"
]