[
    "global ans\n\ndef answer(df):\n    return df['Are you registered to vote?'].eq('No').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[(df['Did you vote in the 2016 Presidential election? (Four years ago)'] == 'Yes') & (df['How likely are you to vote in the forthcoming US Presidential election? Early Voting Open'] != 'Very likely')].any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[(df['Did you vote in the 2016 Presidential election? (Four years ago)'] == 'No') & (df['How likely are you to vote in the forthcoming US Presidential election? Early Voting Open'] != 'Not likely')].any()\nans = answer(df)",
    "{\n    \"solution\": \"df['Who did you vote for in the 2016 Presidential election? (Four years ago)'] != df['If you had to choose a candidate today, who would you vote for?']\"\n}",
    "global ans\n\ndef answer(df):\n    return df['Are you registered to vote?'].eq('Yes').sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Who are you most likely to vote for on election day?'].str.contains('Biden', na=False).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['What is the highest degree or level of school you have *completed* ?'].isin(['Less than high school', 'High school diploma']).sum()\nans = answer(df)",
    "{\n    \"solution\": \"df['Region'].str.contains('South Atlantic', case=False, na=False).sum()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['How old are you?'].mode()[0]\nans = answer(df)",
    "{\n    \"solution\": \"df['If you had to choose a candidate today, who would you vote for?'].mode().iloc[0]\"\n}",
    "global ans\n\ndef answer(df):\n    return df['What is the highest degree or level of school you have *completed* ?'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Division'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['State'].value_counts().nlargest(6).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Which of these best describes the kind of work you do?'].value_counts().nlargest(2).index.sort_values().tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Which of the following best describes your ethnic heritage?'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['How old are you?'].value_counts().nlargest(6).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['County FIPS'].drop_duplicates().nlargest(3).tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df['Weight'].unique().nlargest(4).tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['NCHS Urban/rural'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['likelihood'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['model'].eq('Golf').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['dealer'].eq('Autos Raymara').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['version'].str.contains('BMW', case=False).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['shift'].eq('Manual').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['model'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['photos'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['price'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['year'].eq(2020).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['price'].idxmax(), 'dealer']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['make'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['fuel'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['province'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['province'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['color'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['make'].value_counts().nlargest(5).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['fuel'].value_counts().nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['year'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['kms'].nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['photos'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['power'].nlargest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Transaction'].is_unique\nans = answer(df)",
    "{\n    \"solution\": \"df['date_time'].dt.hour.isin(range(0, 6)).any()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['Item'].isin(df.loc[df['weekday_weekend'] == 'weekday', 'Item']).all()\nans = answer(df)",
    "{\n    \"solution\": \"df[(df['weekday_weekend'] == 'weekend') & (df['date_time'].dt.hour >= 17)].any().any()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['Item'].nunique()\nans = answer(df)",
    "{\n    \"solution\": \"df['date_time'].dt.date.nunique()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['Transaction'].max()\nans = answer(df)",
    "{\n    \"solution\": \"df[df['date_time'].dt.hour.between(12, 17)]['Transaction'].nunique()\"\n}",
    "global ans\n\ndef answer(df):\n    return df.groupby('period_day')['Transaction'].nunique().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['weekday_weekend'] == 'weekday']['Item'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['weekday_weekend'] == 'weekday']['Item'].value_counts().idxmin()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Item'] == 'Brownie']['period_day'].mode()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['period_day'] == 'morning']['Item'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df[df['date_time'].dt.hour.between(12, 17)]['Item'].value_counts().nlargest(2).index.tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df[df['weekday_weekend'] == 'Weekend']['Item'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['period_day'] == 'evening']['Item'].value_counts().loc[lambda x: x == 2].index[:4].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Transaction')['Item'].count().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Transaction'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Item'] == 'Bread']['Transaction'].nlargest(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['period_day'] == 'morning', 'Transaction'].nsmallest(2).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Reviewer_Location'] == 'Australia']['Rating'].gt(3).all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Branch'].value_counts().idxmax() == 'Disneyland_HongKong'\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Rating'].eq(1).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Reviewer_Location'].nunique() == df[df['Rating'] == 5]['Reviewer_Location'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Reviewer_Location'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Branch'] == 'Disneyland_HongKong']['Rating'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Review_ID'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Year_Month'].str.startswith('2019').sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Reviewer_Location'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Branch')['Rating'].mean().idxmin()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Rating'] == 1, 'Year_Month'].min()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Reviewer_Location')['Rating'].mean().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Reviewer_Location'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Branch')['Rating'].mean().nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Year_Month'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Reviewer_Location')['Rating'].mean().nsmallest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'Rating')['Review_ID'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(4, 'Rating')['Review_ID'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Reviewer_Location'] == 'Australia']['Rating'].nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Branch'] == 'Disneyland_HongKong', 'Rating'].nsmallest(2).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['lang'].eq('en').all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].gt(0).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].gt(10000).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['favorites'].gt(50000).any()\nans = answer(df)",
    "{\n    \"solution\": \"df['author_id'].nunique()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['retweets'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['favorites'].max()\nans = answer(df)",
    "{\n    \"solution\": \"df['date'].dt.year.eq(2018).sum()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['author_name'].mode()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['favorites'].idxmax(), 'text']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['retweets'].idxmax(), 'lang']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['lang'].mode()[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['author_handler'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df['lang'].value_counts(ascending=True).reset_index().query('index.str.startswith(\\\"p\\\") or index == \\\"p\\\"').head(2)['index'].tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['mention_names'].str.split(', ').explode().value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['author_name'].value_counts().nsmallest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'retweets')['id'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(4, 'favorites')['id'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['favorites'].nlargest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].nsmallest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['is_organization'].any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['is_organization'].eq(False).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['pic'].notna().all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['weight'].gt(500).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['community'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['page_rank_norm'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['weight'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['community'].eq(16744206).sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['name'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['page_rank_norm'].idxmax(), 'name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['weight'].idxmax(), 'pic']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['y'].idxmax(), 'name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'weight')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(2, 'page_rank_norm')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(4, 'x')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(3, 'y')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'weight')['id'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(4, 'page_rank_norm')['id'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['page_rank_norm'].nlargest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['weight'].nsmallest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['feathers'].any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['venomous'].any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['breathes'].all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['domestic'].any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['animal_name'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['legs'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['legs'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['legs'] == 2].shape[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['class_type'].mode()[0]\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['legs'] == 8, 'animal_name'].iloc[0]\"\n}",
    "global ans\n\ndef answer(df):\n    return df.loc[df['legs'].idxmax(), 'class_type']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['venomous'] == True, 'animal_name'].iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'legs').sort_values('animal_name')['animal_name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(2, 'legs')['animal_name'].sort_values().tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['class_type'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['class_type'].value_counts().nsmallest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('class_type')['legs'].sum().nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('class_type')['legs'].sum().nsmallest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['legs'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['legs'].value_counts().nsmallest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Quantity'].gt(0).all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['UnitPrice'].gt(0).all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['CustomerID'].isnull().any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Country'].eq('United Kingdom').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['StockCode'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['UnitPrice'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('InvoiceNo')['Quantity'].sum().max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Country'] == 'United Kingdom']['InvoiceNo'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Country'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['UnitPrice'].idxmax(), 'Description']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Quantity'].idxmax(), 'Description']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['CustomerID'].idxmin(), 'Country']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Description')['Quantity'].sum().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(2, 'Quantity').sort_values('Description')['Description'].astype('category').tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Country'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Country'].value_counts().nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'Quantity')['InvoiceNo'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(5, 'Quantity')[['StockCode']].sort_values('StockCode').values.flatten().tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Quantity'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Description'].value_counts().nlargest(2).tolist()\nans = answer(df)"
]