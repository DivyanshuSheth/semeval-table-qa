[
    "```json\n{\n    \"solution\": \"('Are you registered to vote? Not open to vote' in df.columns) and df['Are you registered to vote? Not open to vote'].notna().any()\"\n}\n```\n\nInput DataFrame columns: ['ain', 'treatment_code', 'year', 'month', 'average_u_revenue', 'average_u_taxes_and_fees', 'nurses_licensees_per_100_000_population', 'average_unemployment_rate', 'population_estimate', 'population_estimate_low', 'population_estimate_high', 'percentage_of_coverage_cigarettes', 'percentage_of_adults_with_a_bachelors_degree_or_higher', 'percentage_of_population_with_a_bachelors_degree_or_higher', 'percentage_of_population_with_a_high_school_diploma', 'percentage_of_population_with_less_than_a_high_school_diploma' 'total_number_of_drug_discharges', 'average_drug_discharge_per_1000_population', 'average_drug_discharge_per_100000_residents']\nQuestion: What is the ratio of drug discharges to population?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['total_number_of_drug_discharges'] / df['population_estimate']\"\n}\n```\n\nInput DataFrame columns: ['age', 'country_of_origin', 'sex', 'race_ethnicity', 'income', 'marital_status', 'education', 'census_region', 'total_population', 'population_density', 'health_expenditure_capita', 'alcohol_capita', 'tobacco_capita', 'obesity_percentage', 'smoking_prevalence', 'smoking_cumulative_perc', 'smoking_cumulative_perc_from', 'smoking_cumulative_perc_to', 'smoking_cumulative_perc_source', 'smoking_samples', 'smoking_samples_source', 'smoking",
    "```json\n{\n    \"solution\": \"df['Did you vote in the 2016 Presidential election? (Four years ago)'].eq('No').any()\"\n}\n```\n\nInput DataFrame columns: ['state_name', 'state_ab', 'county_fips', 'county_name', 'tract_fips', 'tract_name', 'block_fips', 'block_name', 'precise_ssac', 'block_group_name', 'total_pop', 'total_pop_margin_err', 'total_pop_margin_err_low', 'total_pop_margin_err_high', 'total_pop_percent_margin_err', 'total_pop_percent_margin_err_low', 'total_pop_percent_margin_err_high', 'total_hh', 'total_hh_margin_err', 'total_hh_margin_err_low', 'total_hh_margin_err_high', 'total_hh_percent_margin_err', 'total_hh_percent_margin_err_low', 'total_hh_percent_margin_err_high', 'total_hu', 'total_hu_margin_err', 'total_hu_margin_err_low', 'total_hu_margin_err_high', 'total_hu_percent_margin_err', 'total_hu_percent_margin_err_low', 'total_hu_percent_margin_err_high', 'total_pop_25_and_over', 'total_pop_25_and_over_margin_err', 'total_pop_25_and_over_margin_err_low', 'total_pop_25_and_over_margin_err_high', 'total_pop_25_and_over_percent_margin_err', 'total_pop_25_and_over_percent_margin_err_low', 'total_pop_25_and_over_percent_margin_err_high', 'total_nh_white', 'total_nh_white_margin_err', 'total_nh_white_margin_err_low', 'total_nh_white_margin_err_high', 'total_nh_white_percent_margin_",
    "```json\n{\n    \"solution\": \"df[(df['vote_choice'].eq('I plan to vote for {answer:Candidate}')) & (df['Did you vote in the 2016 Presidential election? (Four years ago)'].eq('No, but I still plan to vote'))].any().any()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Gender', 'Country', 'Profession', 'State', 'Instagram', 'Facebook', 'Twitter', 'Pinterest', 'Tumblr', 'Google Plus', 'LinkedIn', 'Viber', 'Skype', 'WhatsApp', 'Messenger', 'Signal', 'Yahoo Messenger', 'Line', 'WeChat', 'Viber', 'Slack', 'Telegram', 'WeChat', 'WeChat', 'WeChat', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'WhatsApp', 'WhatsApp', 'WhatsApp', 'WhatsApp', 'WhatsApp', 'WhatsApp', 'WhatsApp', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr",
    "```json\n{\n    \"solution\": \"df['vote_choice'].ne(df['simple_2016_vote']).any()\"\n}\n```\n\nInput DataFrame columns: ['Country code', 'Series code', 'Country', 'Series', 'Topic', 'Industry', 'CAE', 'Seasonally adjusted', 'Units', 'Frequency', 'Type', 'Ref Period', 'Unit', 'Time Period', 'Value', 'Footnote']\nQuestion: Which are the ten countries with the most annual GDP in 2017?\nExpected return type: list[country]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Time Period'] == 2017].groupby('Country')['Value'].sum().nlargest(10).index.to_list()\"\n}\n```\n\nInput DataFrame columns: ['Country Name', 'Region', 'Income Group', 'Lending Category', 'Other groups', 'Major Fragments', 'Currency Unit', '2018', '2017', '2016', '2015', '2014', '2013', '2012', '2011', '2010', '2009', '2008', '2007', '2006', '2005', '2004', '2003', '2002', '2001', '2000', '1999', '1998', '1997', '1996', '1995', '1994', '1993', '1992', '1991', '1990', '1989', '1988', '1987', '1986', '1985', '1984', '1983', '1982', '1981', '1980', '1979', '1978', '1977', '1976', '1975', '1974', '1973', '1972",
    "```json\n{\n    \"solution\": \"df['Are you registered to vote?'].eq('Registered').sum()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: How much do all the customers spent on fruits?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['MntFruits'].sum()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: What is the maximum number of deals purchased?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['NumDealsPurchases'].max()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntW",
    "```json\n{\n    \"solution\": \"((df['likelihood'] == 'Very likely') | (df['likelihood'] == 'Most likely')).sum()\"\n}\n```\n\nInput DataFrame columns: ['no', 'gender', 'age', 'education', 'income', 'race', 'trust_police', 'trust_local_government', 'trust_cn_police', 'trust_us_military', 'trust_foreign_government', 'trust_government_officials', 'trust_people_near_me', 'trust_senior_citizens', 'trust_healthcare_system', 'trust_local_news', 'trust_political_parties', 'trust_recycling', 'trust_stupid_people', 'trust_self_made_wealth', 'trust_black_people', 'trust_family', 'trust_long_distance_isolation', 'trust_close_friends', 'trust_couples', 'trust_children', 'trust_elderly', 'trust_others', 'trust_elderly_women', 'trust_fraternal_organizations', 'trust_local_government_women', 'trust_elderly_men', 'trust_white_people', 'trust_foreign_money', 'trust_traditional_values', 'trust_local_government_men', 'trust_fraternal_organizations_women', 'trust_close_friends_men', 'trust_black_women', 'trust_traditional_values_women', 'trust_country_men', 'trust_local_government_children', 'trust_black_men', 'trust_white_women', 'trust_couples_women', 'trust_fraternal_organizations_men', 'trust_sisterhoods', 'trust_white_men', 'trust_country_women', 'trust_country_children', 'trust_country_elderly', 'trust_sisterhoods_women', 'trust_friends_housemates', 'trust_others_women', 'trust_elderly_children', 'trust_local_news_women', 'trust_local_government_children_women', 'trust_elderly_men_women",
    "```json\n{\n    \"solution\": \"df['Which of the following best describes your current employment status?'].value_counts()['High school degree or less']\"\n}\n```\n\nInput DataFrame columns: ['Title', 'First Name', 'Last Name', 'Email', 'Phone']\nQuestion: What percentage of the phone column contains only digits?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Phone'].str.isnumeric().mean()\"\n}\n```\n\nInput DataFrame columns: ['Season', 'City', 'State', 'Year']\nQuestion: What percentage of the State column contains Arizona?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['State'].str.contains('Arizona').mean()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Time', 'City', 'State', 'Address', 'Zip', 'Battalion', 'Person In-Charge', 'Scenes of Crime']\nQuestion: How many times was the string 'guilty' in the second_column column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['second_column'].str.contains('guilty').sum()\"\n}\n```\n\nInput DataFrame columns: ['zip', 'county', 'x', 'y', 'city', 'state', 'location', 'latitude', 'longitude', 'census_tract']\nQuestion: What is the value of the 'county' column for the second row?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['county'][1]\"\n}\n```\n\nInput DataFrame columns: ['index', 'season', 'city', 'state', 'location', 'latitude', 'longitude', 'census_tract', 'haunting_frequency', 'haunting_type', 'haunting_count', 'is_haunting', 'haunting_date', 'type', 'haunting_confirmed']\nQuestion: What is the percentage of hauntings that were confirmed?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"",
    "```json\n{\n    \"solution\": \"df['Region'].eq('South Atlantic').sum()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'id', 'state', 'gender', 'gender_confidence_level', 'gender_reveal', 'age', 'age_confidence_level', 'age_reveal', 'race', 'race_confidence_level', 'race_reveal', 'political_alignment', 'political_alignment_confidence_level', 'political_alignment_reveal', 'donor_status', 'donor_status_confidence_level', 'donor_status_reveal', 'vote', 'vote_confidence_level', 'vote_reveal', 'vote_intention', 'vote_intention_confidence_level', 'vote_intention_reveal', 'vote_past', 'vote_past_confidence_level', 'vote_past_reveal', 'vote_unsure', 'vote_unsure_confidence_level', 'vote_unsure_reveal', 'vote_no_idea', 'vote_no_idea_confidence_level', 'vote_no_idea_reveal', 'vote_other', 'vote_other_confidence_level', 'vote_other_reveal', 'vote_other_text', 'vote_other_confidence_level_text', 'vote_other_reveal_text', 'vote_other_per_vote_reveal', 'vote_other_per_vote_confidence_level', 'vote_other_per_vote_reveal_text', 'vote_other_per_vote_confidence_level_text', 'vote_other_per_vote_reveal_other_text', 'vote_other_per_vote_confidence_level_text_other', 'vote_other_per_vote_reveal_other_text', 'vote_other_per_vote_confidence_level_text_other', 'vote_other_per_vote_reveal_other', 'vote_other_per_vote_confidence_level_other', 'vote_other_per_vote_reveal_other_text', 'vote_other_per_vote_confidence_level_text_other', 'vote_other_per_vote_reveal_other_text', 'vote_other_per_vote_confidence_level_",
    "```json\n{\n    \"solution\": \"df['How old are you?'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['age', 'gender', 'race', 'hispanic_latino_origin', 'education', 'income', 'marital', 'employment_status', 'vote']\nQuestion: What is the most frequent marital status?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['marital'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['overall', 'controlled', 'enjoy', 'disappointed', 'stimulated', 'annoyed', 'intoxicated', 'non_stop', 'sleep', 'difficulty', 'tired', 'relaxed', 'enjoyed', 'relaxing', 'no_effect', 'meh', 'excellent', 'better_than_expected', 'amazing', 'no_impact', 'fun', 'interested_in', 'do_it_now', 'long_term_impact', 'long_term', 'new', 'tops', 'just_right', 'highly_recommended', 'for_fun', 'really_popular', 'popular', 'clickbait', 'depressing', 'sad', 'highly_enjoyed', 'wasted', 'repulsive', 'disliked', 'worst_song', 'better', 'angry', 'super_boring', 'easy_today', 'never_again', 'useless', 'bad', 'disappointing', 'worst', 'cheap', 'worthless', 'hate', 'unfair', 'disappointment', 'boring', 'cheap_and_shitty', 'boring_and_shitty', 'bad_choice', 'bad_choice_and_shitty', 'salt', 'salt_and_pepper', 'forgot_about', 'forgot_about_and_shitty']\nQuestion: How many different parts of the happy movie are there?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.count(axis='columns').max()\"\n}\n```\n\nInput DataFrame columns: ['",
    "```json\n{\n    \"solution\": \"df['vote_choice'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'Feeling', 'Frustration', 'Excitement', 'Work', 'Work to be done', 'Interview', 'Job', 'Salary', 'Financial issues', 'Social environment', 'Company culture', 'To what extent do you agree or disagree that the work environment here at this company is creative, challenging, difficult and stressful', 'To what extent do you agree or disagree that the work environment here at this company is focuses on doing great work', 'To what extent do you agree or disagree that the work environment here at this company is a place where you feel comfortable', 'To what extent do you agree or disagree that the work environment here at this company is based on a solid commitment to excellence', 'To what extent do you agree or disagree that the work environment here at this company provides opportunities to seek new skills and grow in both personal and professional ways', 'To what extent do you agree or disagree that the work environment here at this company is an atmosphere that inspires confidence and pride in the employees', 'To what extent do you agree or disagree that the work environment here at this company is a place where you feel safe and you can devote your full attention to your work', 'To what extent do you agree or disagree that the work environment here at this company is a place where your career is valued and where you are comfortable doing what you do', 'To what extent do you agree or disagree that the work environment here at this company is a place where you feel you fit in', 'To what extent do you agree or disagree that the work environment here at this company is a place where you feel you fit in and where you feel confident and respected', 'To what extent do you agree or disagree that the work environment here at this company is a place where it is important to be a part of the mission', 'To what extent do you agree or disagree that the work environment here at this company is a place where you can grow and develop personally', 'To what extent do you agree or disagree that the work environment here at this company is a place where you can grow and develop professionally', 'To what extent do you",
    "```json\n{\n    \"solution\": \"df['What is the highest degree or level of school you have *completed* ?'].value_counts().idxmax()\"\n}\n``````\n# Form answers\n\nThese are the recommended answers to each question. It should be a string.\n\n### Sample form 1\n\n```json\n[\n  {\n    \"question\": \"Which product has the highest number of purchases?\",\n    \"answer\": \"544538\"\n  },\n  {\n    \"question\": \"What is the total amount spent on science and technology category in Mexico?\",\n    \"answer\": \"10134.63\"\n  },\n  {\n    \"question\": \"What is the total amount spent on home appliances?\",\n    \"answer\": \"10134.63\"\n  },\n  {\n    \"question\": \"What is the total amount spent on cosmetics and beauty?\",\n    \"answer\": \"11868.09\"\n  },\n  {\n    \"question\": \"What is the total amount spent on home and garden?\",\n    \"answer\": \"15489.79\"\n  },\n  {\n    \"question\": \"What is the total amount spent on pet supplies?\",\n    \"answer\": \"23371.39\"\n  },\n  {\n    \"question\": \"What is the total amount spent on furniture, home furnishings and lighting?\",\n    \"answer\": \"23643.89\"\n  },\n  {\n    \"question\": \"What is the total amount spent on prepaid card?\",\n    \"answer\": \"28833.19\"\n  },\n  {\n    \"question\": \"Which is the aisle with the highest number of purchases?\",\n    \"answer\": \"24286\"\n  },\n  {\n    \"question\": \"What is the total amount spent on frozen meat and other meat products?\",\n    \"answer\": \"29168.89\"\n  },\n  {\n    \"question\": \"What is the total amount spent on pet products?\",\n    \"answer\": \"54234.3\"\n  },\n  {\n    \"question\": \"What is the total amount spent on alcoholic beverages?\",\n    \"answer\": \"54608.9",
    "```json\n{\n    \"solution\": \"df['NCHS Urban/rural'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['question_id', 'question_text', 'question_type']\nQuestion: What are the 5 most popular question_text?\nExpected return type: list[string]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['question_text']).size().sort_values(ascending=False).head(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['index', 'question_id', 'question_text', 'question_type']\nQuestion: Which questions do not have any answers?\nExpected return type: list[string]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.loc[df['question_text'].isna(), 'question_id'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['index', 'question_id', 'question_text', 'question_type']\nQuestion: How many 'Numeric' answers with a numeric question_type are there?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df[(df['question_type'] == 'Numeric') & (df['question_text'].str.isnumeric())].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['index', 'question_id', 'question_text', 'question_type']\nQuestion: How many 'Numeric' answers with a non-numeric question_type are there?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df[(df['question_type'] == 'Numeric') & (~df['question_text'].str.isnumeric())].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['index', 'question_id', 'question_text', 'question_type']\nQuestion: Which question_text has the greatest ratio of 'Numeric' to 'Text' answers?\nExpected return type: string\n\nCode that calculations the answer:\n```json\n{\n    \"solution\": \"return df.loc[df.groupby(['question_text'])['question_",
    "```json\n{\n    \"solution\": \"df['State'].value_counts().nlargest(6).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Timestamp', 'Age', 'Gender', 'Country', 'state', 'email', 'What is your occupation?', 'Which of the following best describes your coworker(s)?', 'How do you get along with coworkers?', 'How do you get along with your co-workers?', 'How are you getting along with your co-workers?', 'How do you get along with your co-workers?', 'How do you get along with your co-workers?', 'How do you get along with your co-workers?', 'How do you get along with your co-workers?', 'How do you get along with your co-workers?', 'Do you feel like you are conflicted to work together?', 'Do you feel like you are conflicted to work together?', 'Do you feel like you are conflicted to work together?', 'Do you feel like you are conflicted to work together?', 'Would you describe yourself as a?', 'Is the company where you work in a good place to work?', 'Has your employer ever discriminated against you or your family based on your religion or beliefs?', 'Would you be open to hiring anyone from any part of the country to be your supervisor?', 'What kind of challenges are you feeling for your current next job?', 'What are some of the best traits you have discovered about your co-workers?', 'What trait did you discover about your co-workers that you wanted to share with them?', 'What is your favourite trait that you have discovered from your co-workers?', 'What is your favorite trait that you have discovered from your co-workers?', 'What is your favorite trait that you have discovered from your co-workers?', 'What is your favorite trait that you have discovered from your co-workers?', 'Do you like working with your co-workers?', 'Do you like working with your co-workers?', 'Do you like working with your co-workers?', 'Do you like working with your co-workers?', 'Would you be open to working at a company where you would be able to work remotely?', 'Is there a specific part of your job that you enjoy?', 'What is the most important thing you as a supervisor care about?', 'What are",
    "```json\n{\n    \"solution\": \"df['Which of these best describes the kind of work you do?'].value_counts().head(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Name', 'Age', 'Company', 'Job Title', 'Job Family Count', 'Good or bad', 'Work at Home', 'Tracking', 'Speed', 'Accountability', 'Recommend', 'Recommend_Comment', 'Compensation', 'Compensation_Comment', 'Job Level', 'Job Strengths', 'Job Description', 'Pros', 'Cons']\nQuestion: Who is the most expensive person to work for?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Compensation'].notnull()]['Compensation'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'What is your current employment status?', 'Income range', 'Age group', 'Gender', 'Education', 'What is your current employment status?', 'Which of the following roles can you consider yourself to play in your career?', 'What is your current employment status?', 'How does your current job affect your health?', 'How does your current job affect your health?', 'How does your current job affect your health?', 'How does your current job affect your health?', 'How does your current job affect your health?', 'How easy is it to get a raise?', 'How easy is it to get a raise?']\nQuestion: Can you guess which is the most predominant gender in this survey?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Gender'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'age', 'gender', 'education', 'job_position', 'career_level', 'career_satisfaction', 'posts_on_cross_platform_social_media', 'months_using_cross_platform_social_media', 'months_using_social_media_in_general', 'social_media_profile_other', 'years_using_social_media', 'social_media_relatives', 'social_media_friends', 'social_media_family', 'social_media_acqu",
    "```json\n{\n    \"solution\": \"df[df['race_ethnicity_grouped'].notna()]['race_ethnicity_grouped'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['RACE', 'AGE', 'SEX', 'EDUCATION', 'EMPLOYMENT', 'OCCUPATION', 'INCOME', 'HISPANIC', 'MARRY', 'WORK_EX', 'REGION', 'NUM_CHILDREN', 'NUM_OTHER_CHILDREN', 'GENDER', 'STATUS', 'POL_INTEREST', 'VI_TREND', 'VOTE', 'WEIGHT']\nQuestion: What is the most common education level among the respondents?\nExpected return type: category\nSolution:\n```json\n{\n    \"solution\": \"df['EDUCATION'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['state', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_about', 'host_thumbnail_url', 'host_picture_url', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_check",
    "```json\n{\n    \"solution\": \"df['How old are you?'].value_counts().nlargest(6).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['age', 'gender', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: What is the mean score of the philanthropyScore column for the group of female respondents?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['gender'] == 'female']['philanthropyScore'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: What is the 95th percentile of the age column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Age'].quantile(q=0.95)\"\n}\n```\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: What is the standard deviation of the age column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Age'].std()\"\n}\n```\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: What is the minimum BMI?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['BMI'].min()\"\n}\n```\n\nInput DataFrame columns: ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction",
    "```json\n{\n    \"solution\": \"df['County FIPS'].unique().tolist()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Location', 'Pesticide', 'Units of Measure (Short)', 'Total Nitrogen (tonnes)', 'Total Phosphorus (tonnes)', 'Total Potassium (tonnes)']\nQuestion: What are the top 3 locations in terms of total nitrogen?\nExpected return type: list[string]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Location')['Total Nitrogen (tonnes)'].sum().sort_values().tail(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['State', 'City', 'County', 'NumCensusTracts', 'PopTotal', 'PopTotMale', 'PopTotFemale', 'Pop75+', 'PopUnder5', 'Pop65+', 'Pop16+', 'Pop18+', 'Pop25+', 'Pop35+', 'Pop45+', 'Pop55+', 'Pop65+', 'Pop75+', 'Pop85+', 'Pop25-34', 'Pop35-44', 'Pop45-54', 'Pop55-64', 'Pop65-74', 'Pop75-84', 'Pop85+', 'MedianAge', 'PopMedianAgeMale', 'PopMedianAgeFemale', 'MalePct', 'FemalePct', 'TotalPct', 'PopMalePct', 'PopFemalePct', 'Pct65+', 'PctUnder5', 'PctFemale', 'PctWhite', 'PctBlack', 'PctAsian', 'PctOther', 'PctHisp', 'PctPopOfTotalInsured', 'PctPrivateCoverage', 'PctPrivateCoverageAlone', 'PctEmpPrivCoverage', 'PctEmpPrivCoverageNoSelf', 'PctEmpPrivHealthInsurance', 'PctEmpSourceEdu', 'PctPubCoverage', 'PctPubHealthInsurance', 'PctEmergencyResp', 'PctEmpNotPubHealthIns', 'PctEmployed16+', 'PctUnemployed', 'PctPrivateCoverageAlone', 'PctEmpPrivCoverageNoSelf', 'PctEmpSourceNilf', 'PctPublicCoverageAlone', '",
    "```json\n{\n    \"solution\": \"df['Weight'].nlargest(4).unique().tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'Please rate yourself on a scale of 1-5', 'How would you rate yourself on the following 6 aspects? - I feel happy and full of energy', 'How would you rate yourself on the following 6 aspects? - I can be selective about what I eat', 'How would you rate yourself on the following 6 aspects? - I feel comfortable around people', 'How would you rate yourself on the following 6 aspects? - I think that most people get along', 'How would you rate yourself on the following 6 aspects? - I feel satisfied with my life', 'How would you rate yourself on the following 6 aspects? - I am able to express my emotions freely', 'NCHS Urban/rural', 'Which one does your household pick more often? - Change your mind or vote', 'Which one does your household pick more often? - Vote', 'Which one does your household pick more often? - Don\u2019t vote. Choose not to vote', 'Which one does your household pick more often? - Dont care', 'Which of the following best describes your natural career path? - Information Technology, Management, and Marketing Occupations', 'Which of the following best describes your natural career path? - Education, Academics, and Teaching Occupations', 'Which of the following best describes your natural career path? - Business, Finance, and Administrative Support Occupations', 'Which of the following best describes your natural career path? - Production, Transportation, and Material Moving Occupations', 'Which of the following best describes your natural career path? - Laborer and Life Skilled Work Occupations', 'Which of the following best describes your natural career path? - Other', 'Which of the following best describes your natural career path? - None', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Early', 'What is your advice to a young student who is considering whether to vote in the presidential election? - Do not vote early', 'What is your advice to a young student who is considering whether to vote in the presidential election? - Do not vote if you have concerns about the",
    "```json\n{\n    \"solution\": \"df['NCHS Urban/rural'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['age_x', 'gender', 'education', 'race_ethnicity', 'income', 'weight', 'weight_by_2016_vote', 'likely_voter', 'likely_decided_voter', 'race_ethnicity_grouped', 'education_grouped_by_gender', 'vote_choice', 'age_by_gender', 'region_x_gender', 'simple_2016_vote', 'NCHS Urban/rural', 'Income by gender', 'ID', 'wave', 'age_2016', 'region_x', 'weight_2016', 'state', 'County FIPS', 'race_ethnicity_x', 'NCHS Urban/rural (long form)', 'Division', 'Very likely', 'Not at all likely', 'Undecided', 'Favorable', 'Low', 'Do not vote', 'More likely', 'Not sure', 'Not sure', 'Not sure', 'Not sure', 'Not sure']\nQuestion: Which group of individuals has the most respondents?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['race_ethnicity'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'age', 'gender', 'weight', 'Income by gender', 'ID', 'wave', 'age_2016', 'region_x', 'weight_2016', 'state', 'County FIPS', 'NCHS Urban/rural', 'NCHS Urban/rural (long form)', 'Division', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your eth",
    "```json\n{\n    \"solution\": \"df['likelihood'].value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'Weight', 'NCHS Urban/rural', 'Division', 'Wave', 'Start time', 'County FIPS', 'How old are you?', 'Are you', \"Would you say you follow what's going on in government and public affairs\", 'Are you registered to vote?', 'Are you registered to vote? Not open to vote', 'How likely are you to vote in the forthcoming US Presidential election? Early Voting Open', 'Headline vote share (intention and already voted combined)', 'Who did you vote for?', 'Who are you most likely to vote for on election day?', 'Did you vote in the 2016 Presidential election? (Four years ago)', 'Who did you vote for in the 2016 Presidential election? (Four years ago)', 'Which of the following best describes your ethnic heritage?', 'What is the highest degree or level of school you have *completed* ?', 'Which of the following best describes your current employment status?', 'What was your yearly household income at the end of last year (before tax)?', 'If you had to choose a candidate today, who would you vote for?', 'Again, for statistical purposes only, what is your age?', 'State', 'Region', 'To what extent do you agree or disagree that the election will be fair, and you will trust the result?', 'How confident are you in the security and effectiveness of mail-in ballots when voting for president?', 'In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?', 'If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station', 'If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud', 'If you have any concerns about the US election, what are they? - Polling place reduction and changes', 'If you have any concerns about the US election, what are they? - Long wait times at polling place', 'If you have any concerns about the US election, what are they? - Voter intim",
    "```json\n{\n    \"solution\": \"df['model'].str.contains('Golf').any()\"\n}\n```\nInput DataFrame columns: ['id', 'artist_id', 'title', 'year']\nQuestion: Which artist has more songs?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df.groupby('artist_id')['id'].count().to_frame('n_songs').groupby('artist_id')\\\n    .agg('max')\\\n    .index.values.tolist())[0]\"\n}\n```\nInput DataFrame columns: ['id', 'title', 'year', 'genres', 'artist', 'acousticness', 'danceability', 'duration_ms', 'energy', 'instrumentalness', 'key', 'liveness', 'loudness', 'mode', 'speechiness', 'tempo', 'time_signature', 'valence']\nQuestion: What is the most popular genre?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('genres').agg('sum').sort_values('popularity', ascending=False).index[0]\"\n}\n```\nInput DataFrame columns: ['Unemployed', 'Homemaker', 'Children', 'Armed Forces', 'Military', 'Not in Labor Force', 'Other', 'Retired', 'Employed', 'Agriculture', 'Business', 'Clerical', 'Computer', 'Construction', 'Education', 'Executive', 'Farmer', 'Fishing', 'Food Service', 'Hospitality', 'Information', 'Legal', 'Manufacturing', 'Media', 'Other Service', 'Personal', 'Professional', 'Transportation', 'Utilities', 'Wholesale', 'Retired']\nQuestion: Which of the above categories has the highest number of individuals?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sum().idxmax()\"\n}\n```\nInput DataFrame columns: ['Continent', 'Country', 'Sub Region', 'Region']\nQuestion: What is the most popular sub region?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.",
    "```json\n{\n    \"solution\": \"return df['company'].str.lower() == 'autos raymara'\"\n}\n```\n\nInput DataFrame columns: ['ticker', 'company', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Which are the 3 most expensive cars?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['price'].nlargest(3).keys().tolist()\"\n}\n```\n\nInput DataFrame columns: ['ticker', 'company', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What is the car with the highest price?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['price'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['ticker', 'company', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: How many cars are in the database from Argentina?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['country'].str.lower() == 'ar'\"\n}\n```\n\nInput DataFrame columns: ['ticker', 'company', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: How many cars do not have photos?\nExpected return type: number\n\nCode that calculates the answer:",
    "```json\n{\n    \"solution\": \"df['version'].str.contains('BMW').any()\"\n}\n```\n\nInput DataFrame columns: ['speed', 'mpg_highway', 'mpg_city', 'highway_08', 'city_08', 'comb_08', 'highway_18', 'city_18', 'comb_18', 'year', 'epa_class', 'fuel_type', 'fuel_cost_08', 'fuel_cost_18', 'dist_highway', 'dist_city', 'guzzler', 'smartway', 'air_pollution_score', 'city_mpg', 'hwy_mpg', 'cmb_mpg', 'greenhouse_gas_score', 'co2', 'co2_tailpipe_gpm', 'fuel_cost_combined', 'ghg_score', 'fuel_cost_per_country']\nQuestion: Is there a vehicle that has a fuel type of 'LPG'?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['fuel_type'].str.contains('LPG').any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'content', 'date', 'author', 'number_of_comments', 'everything_news']\nQuestion: Which news article has the highest number of comments?\nExpected return type: title\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['number_of_comments'].idxmax(), 'title']\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'content', 'date', 'author', 'number_of_comments', 'everything_news']\nQuestion: Which news article has the most comments?\nExpected return type: title\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['number_of_comments'].idxmax(), 'title']\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'content', 'date', 'author', 'number_of_comments', 'everything_news']\nQuestion: Which news article has the highest number of comments?\nExpected",
    "```json\n{\n    \"solution\": \"df['shift'].str.contains('Manual', na=False).any()\"\n}\n```\n\nInput DataFrame columns: ['rank', 'personName', 'age', 'finalWorth', 'category', 'source', 'country', 'state', 'city', 'organization', 'selfMade', 'gender', 'birthDate', 'title', 'philanthropyScore', 'bio', 'about']\nQuestion: Who has the philanthropy score on historical context?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.query('philanthropyScore > 100')\"\n}\n```\n\nInput DataFrame columns: ['Submitted at', 'What is your age? \ud83d\udc76\ud83c\udffb\ud83d\udc75\ud83c\udffb', \"What's your nationality?\", 'What is your civil status? \ud83d\udc8d', \"What's your sexual orientation?\", 'Do you have children? \ud83c\udf7c', 'What is the maximum level of studies you have achieved? \ud83c\udf93', 'Gross annual salary (in euros) \ud83d\udcb8', \"What's your height? in cm \ud83d\udccf\", \"What's your weight? in Kg \u2696\ufe0f\", 'What is your body complexity? \ud83c\udfcb\ufe0f', 'What is your eye color? \ud83d\udc41\ufe0f', 'What is your hair color? \ud83d\udc69\ud83e\uddb0\ud83d\udc71\ud83c\udffd', 'What is your skin tone?', 'How long is your hair? \ud83d\udc87\ud83c\udffb\u2640\ufe0f\ud83d\udc87\ud83c\udffd\u2642\ufe0f', 'How long is your facial hair? \ud83e\uddd4\ud83c\udffb', 'How often do you wear glasses? \ud83d\udc53', 'How attractive do you consider yourself?', 'Have you ever use an oline dating app?', 'Where have you met your sexual partners? (In a Bar or Restaurant)', 'Where have you met your sexual partners? (Through Friends)', 'Where have you met your sexual partners? (Through Work or as Co-Workers)', 'Where have you met your sexual partners? (Through Family)', 'Where have you met your sexual partners? (in University)', 'Where have you met your sexual partners? (in Primary or Secondary School)', 'Where have you met your sexual partners?",
    "```json\n{\n    \"solution\": \"df['model'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['neighborhood', 'id', 'neighborhood_group', 'listing_url', 'name', 'host_id', 'host_name', 'host_since', 'host_response_time', 'host_response_rate', 'host_acceptance_rate', 'host_is_superhost', 'host_listings_count', 'host_total_listings_count', 'latitude', 'longitude', 'city', 'state', 'zipcode', 'market', 'smart_location', 'country_code', 'country', 'is_location_exact', 'property_type', 'room_type', 'accommodates', 'bathrooms', 'bedrooms', 'beds', 'bed_type', 'amenities', 'square_feet', 'price', 'weekly_price', 'monthly_price', 'security_deposit', 'cleaning_fee', 'guests_included', 'extra_people', 'minimum_nights', 'maximum_nights', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'number_of_reviews', 'first_review', 'last_review', 'review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'instant_bookable', 'cancellation_policy', 'require_guest_profile_picture', 'require_guest_phone_verification', 'calculated_ host_listings_count', 'reviews_per_month']\nQuestion: What is the total number of listings in the city of New York?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['city'].eq('New York').sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'host_id', 'host_name', 'host_url', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response",
    "```json\n{\n    \"solution\": \"df['photos'].str.len().mean().round()\"\n}\n```\n\nInput DataFrame columns: ['start_date', 'end_date', 'campaign_id', 'web_id', 'source', 'medium', 'term', 'content', 'ad_id', 'ad_type', 'ad_status', 'location', 'device', 'query', 'matches', 'impressions', 'clicks', 'cost', 'numbers', 'placement', 'display_id', 'ad_campaign_id', 'ad_group_id', 'ad_unit_id']\nQuestion: What is the maximum number of clicks for the displayed ads?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['clicks'].max()\"\n}\n```\n\nInput DataFrame columns: ['business_id', 'name', 'review_count', 'categories', 'is_open', 'attributes', 'hours', ' neighborhoods', 'address', 'city', 'state', 'postal_code', 'latitude', 'longitude', 'stars', 'review_count', 'is_open', 'attributes', 'hours', 'neighborhoods', 'address', 'city', 'state', 'postal_code', 'latitude', 'longitude', 'categories', 'review_id', 'user_id', 'date', 'stars', 'text', 'funny', 'useful', 'cool', 'business_id']\nQuestion: What percentage of restaurants are open?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['is_open'].mean().round(2)\"\n}\n```\n\nInput DataFrame columns: ['title', 'overview', 'tagline', 'keywords', 'company', 'budget', 'revenue', 'original_language', 'popularity', 'runtime', 'vote_count', 'vote_average', 'release_date', 'genres', 'production_companies', 'production_countries', 'spoken_languages', 'cast', 'crew', 'id', 'belongs_to_collection', 'poster_path', 'imdb_id', 'status', 'production_status', 'adult', 'video', 'original_title', 'genre_ids",
    "```json\n{\n    \"solution\": \"df['price_financed'].max()\"\n}\n```\n\nInput DataFrame columns: ['URL', 'company', 'make', 'model', 'version', 'price', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'fuel', 'photos', 'description', 'dealer', 'province', 'country', 'insert_date']\nQuestion: What's the year the most cars were listed for?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['year'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['ID', 'user_id', 'activity_name', 'activity_timestamp', 'activity_id', 'activity_result', 'activity_class', 'activity_type', 'activity_type_name', 'distance', 'duration', 'duration_min', 'duration_max', 'duration_me', 'duration_sd', 'duration_p1', 'duration_p50', 'duration_p95', 'duration_p99', 'elevation_gain', 'elevation_loss', 'elevation_lo', 'elevation_max', 'elevation_me', 'elevation_p1', 'elevation_p50', 'elevation_p95', 'elevation_p99', 'elevation_sum', 'elevation_sd', 'elevation_p1p99', 'moving_time', 'heartrate', 'heartrate_me', 'heartrate_p1', 'heartrate_p50', 'heartrate_p95', 'heartrate_int', 'heartrate_sd', 'heartrate_p1p95', 'heartrate_p98p99', 'cadence', 'cadence_int', 'cadence_me', 'power', 'power_sum', 'power_avg', 'power_me', 'power_max', 'power_sd', 'power_first', 'power_p1', 'power_p50', 'power_p95', 'power_p98p99', 'power_p1p99', 'avg_speed', 'max",
    "```json\n{\n    \"solution\": \"return df['year'].str.contains('2020', na=False).sum()\"\n}\n```\n\nInput DataFrame columns: ['year', 'month', 'day', 'time', 'has_broadcast', 'has_live_tv', 'has_facebook', 'has_youtube', 'has_instagram', 'has_twitter', 'has_snapchat', 'has_whatsapp', 'has_tiktok', 'has_snapchat_live', 'has_tv', 'has_radio', 'has_youtube_live', 'has_instagram_live', 'has_twitter_live', 'has_access']\nQuestion: How many days have there been fewer than 10000 users of the platform?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['has_access'].value_counts().loc[False] if False in df['has_access'].value_counts() else 0\"\n}\n```\n\nInput DataFrame columns: ['date', 'title', 'name', 'description', 'address', 'lat', 'lng', 'city', 'state', 'zip', 'country', 'phone', 'fax', 'email', 'hours', 'owner', 'classification', 'facility_type', 'payment_type', 'park_id', 'owner_email', 'website', 'owner_phone', 'special_hours', 'amenities', 'owner_name', 'status', 'zip_4', 'count_phones', 'count_faxes', 'count_emails', 'count_urls', 'count_hours', 'count_payments', 'website_count', 'count_special_hours', 'count_amenities', 'hours_count']\nQuestion: How many parks contain the word \"trail\" in the title or description?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df[df['title'].str.contains('trail') | df['description'].str.contains('trail')].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['year', 'month', 'region', 'population', 'calories', 'fat', 'saturated_fat', 'sodium',",
    "```json\n{\n    \"solution\": \"df.loc[df['price'].idxmax(), 'dealer']\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'title', 'link', 'author', 'date', 'time', 'datetime', 'slp', 'st', 'lat', 'lon', 'elat', 'elon', 'selon', 'sllat', 'sqlat', 'dep', 'sdep', 'sbot', 'views', 'kills', 'country', 'name', 'casualties', 'ncommanders', 'commanderskills', 'assists', 'megacommanders', 'megassists', 'action', 'zone', 'game_type', 'region', 'map', 'stage', 'weapon', 'kill', 'killer', 'target', 'team', 'boogies', 'boogies_taken', 'boogies_given', 'fodder_kills', 'fodder_deaths', 'hero_kills', 'hero_deaths', 'weapon_kills', 'weapon_deaths', 'self_kills', 'self_named_deaths']\nQuestion: How many Killing Blows did the player who has the highest number of self named deaths score on?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['self_named_deaths'].idxmax(), 'hero_kills']\"\n}\n```\n\nInput DataFrame columns: ['score', 'map_title', 'game_type', 'boss_name', 'player_name', 'character_name', 'shot_type_name', 'weapon_type', 'is_special_weapon', 'special_weapon_type', 'team_name', 'hit_location_name', 'shooter_name', 'damage', 'headshot', 'damage_type', 'headshot_kills', 'frags', 'deaths', 'round', 'killer', 'is_killer', 'victim', 'is_victim', 'is_weapon_kill', 'is_special_weapon_kill', 'is_suicide', 'death_by', 'is_headshot', 'kill_time', 'match_id',",
    "```json\n{\n    \"solution\": \"df['make'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['admission_type_id', 'discharge_disposition_id', 'admission_source_id', 'payer_code', 'medical_specialty', 'num_lab_procedures', 'num_procedures', 'num_medications', 'number_outpatient', 'number_emergency', 'number_inpatient', 'number_diagnoses', 'diag_1', 'diag_2', 'diag_3', 'number_diagnoses', 'max_glu_serum', 'A1Cresult', 'metformin', 'repaglinide', 'nateglinide', 'chlorpropamide', 'glimepiride', 'acetohexamide', 'glipizide', 'glyburide', 'tolbutamide', 'pioglitazone', 'rosiglitazone', 'acarbose', 'miglitol', 'troglitazone', 'tolazamide', 'examide', 'citoglipton', 'insulin', 'glyburide_metformin', 'glipizide_metformin', 'glimepiride_pioglitazone', 'metformin_rosiglitazone', 'metformin_pioglitazone', 'change', 'diabetesMed', 'readmitted']\nQuestion: What is the average number of lab procedures for a male that has been readmitted?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.groupby(['gender', 'readmitted']).median()['num_lab_procedures']['Male']['Yes']\"\n}\n```\n\nInput DataFrame columns: ['clump_thickness', 'uniformity_of_cell_size', 'uniformity_of_cell_shape', 'marginal_adhesion', 'single_epithelial_cell_size', 'bare_nuclei', 'bland_chromatin', 'normal_nucleoli', 'mitoses', 'class']\nQuestion: What is the maximum number of mitoses for each class?\nExpected return type: dict\n\nCode that calculates the",
    "```json\n{\n    \"solution\": \"df['fuel'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['price', 'region', 'region_url', 'price_unf', 'price_fin', 'new_used', 'car_type', 'transmission', 'engine_cap', 'mileage', 'drivetrain', 'trim', 'title_status', 'vin', 'exterior_color', 'interior_color', 'exterior_cond', 'interior_cond', 'cert_region', 'country', 'sold_date', 'description', 'title', 'listing_num', 'seller_type', 'make', 'model', 'style', 'body', 'year', 'mileage_unf', 'mpg', 'specs', 'extras', 'location', 'latitude', 'longitude', 'price_M0jI', 'set_uid', 'set_name', 'set_title']\nQuestion: What was the average selling price of cars in the US?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['price'].sum() / len(df['price'])\"\n}\n```\n\nInput DataFrame columns: ['price', 'region', 'region_url', 'price_unf', 'price_fin', 'new_used', 'car_type', 'transmission', 'engine_cap', 'mileage', 'drivetrain', 'trim', 'title_status', 'vin', 'exterior_color', 'interior_color', 'exterior_cond', 'interior_cond', 'cert_region', 'country', 'sold_date', 'description', 'title', 'listing_num', 'seller_type', 'make', 'model', 'style', 'body', 'year', 'mileage_unf', 'mpg', 'specs', 'extras', 'location', 'latitude', 'longitude', 'price_M0jI', 'set_uid', 'set_name', 'set_title']\nQuestion: How many cars were sold in 2021?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['sold_date'].dt.year ==",
    "```json\n{\n    \"solution\": \"df['province'].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'state', 'city', 'viewCount', 'commentCount', 'dislikeCount', 'likeCount', 'duration', 'publishedAt', 'channelTitle', 'thumbnail_link', 'description']\nQuestion: How many comments were made on the video with the highest view count?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['commentCount'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'channelTitle', 'categoryId', 'channel_id', 'channel_title', 'trending_date', 'publish_time', 'tags', 'views', 'likes', 'dislikes', 'comment_count', 'thumbnail_link', 'comments_disabled', 'ratings_disabled', 'description', 'country']\nQuestion: What is the category id of the video with the highest number of likes?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['categoryId'].idxmax()\"\n}\n```\n/README.md\n# Question Answering Service\nThis service allows advanced question answering for any input DataFrame. \n\n# Usage\n1. Clone the repository\n2. Enter the repository directory\n3. Run the application with the following command: `python main.py`\n4. Open your browser and navigate to the link printed in the terminal\n\n# Configuration\nThe service can be configured with the following .env file:\n```\n# The name in which the service will be exposed\nSERVICE_NAME = 'question-answering-service'\n\n# The port on which the service will be exposed\nSERVICE_PORT = 5000\n\n# The description of the service\nSERVICE_DESCRIPTION = 'Question answering service'\n\n# The swagger title\nSWAGGER_TITLE = 'Question answering service'\n\n# The swagger description\nSWAGGER_DESC = 'This API can help you answer any question you want about any given Pandas DataFrame.'\n```/app/controllers/questions.py\nfrom flask import request\nfrom flask_restx import Resource\nfrom app.schemas.",
    "```json\n{\n    \"solution\": \"df['province'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'url', 'main_image_url', 'social_image_url', 'sales_info_availability', 'sales_info_price', 'sales_info_price_financed', 'sales_info_fuel_type', 'sales_info_year', 'sales_info_kms', 'sales_info_power', 'sales_info_doors', 'sales_info_shift', 'sales_info_color', 'sales_info_fuel', 'sales_info_package_type', 'extras', 'description', 'category_name', 'category_id']\nQuestion: What is the most common fuel_type?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['sales_info_fuel_type'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: What is the median kids' household?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Kidhome'].median()\"\n}\n```\n\nInput DataFrame columns: ['neighbourhood_cleansed', 'host_neighbourhood', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds',",
    "```json\n{\n    \"solution\": \"df['color'].value_counts().head(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['day', 'month', 'year', 'summary', 'preciptype', 'maxtempC', 'mintempC', 'totalSnow_cm', 'sunHour', 'uvIndex', 'moon_illumination', 'moon_phase', 'maxwind_kph', 'precipMM', 'tempC', 'winddir9am', 'winddir3pm', 'windspeed9am', 'windspeed3pm', 'pressure9am', 'pressure3pm', 'temp9am', 'temp3pm', 'rain_Today', 'rain_Tomorrow']\nQuestion: Which month has the most rain?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['rain_Tomorrow'].str.split().str[1].value_counts().index[0]\"\n}\n```\n\nInput DataFrame columns: ['date', 'time', 'open', 'high', 'low', 'close', 'volume', 'market_cap']\nQuestion: What is the 10 highest daily volume and market cap for the period of 2020-01-01 - 2020-04-30?\nExpected return type: list[dict]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['date'] = pd.to_datetime(df['date'])\\ndf[(df['date'] >= '2020-01-01') & (df['date'] <= '2020-04-30')].nlargest(10, ['volume', 'market_cap']).to_dict(orient='records')\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Year', 'Month', 'Number_of_Pets', 'Percentage_Sports']\nQuestion: What is the highest number of pets for the last 3 months of 2018?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Year'] == 2018) & (df['Month'].isin",
    "```json\n{\n    \"solution\": \"df['make'].value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['ranking', 'name', 'category', 'games', 'reviews', 'positive', 'score', 'score_phrase', 'author', 'title', 'content', 'date', 'game_url', 'site_url']\nQuestion: What is the maximum number of reviews for a game?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['reviews'].max()\"\n}\n```\n\nInput DataFrame columns: ['Census Tract', 'Census Block', 'BIN', 'BBL', 'CD', 'CT2010', 'CB2010', 'School Dist', 'Council', 'ZipCode', 'X Coordinate', 'Y Coordinate', 'Ward', 'Police District', 'Health Center District', 'Special District 1', 'Special District 2', 'Latitude', 'Longitude', 'Location']\nQuestion: What is the average latitude?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Latitude'].mean()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Name', 'Age', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer without children?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Kidhome'].eq(0).any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'country', 'year', 'genre', 'director', 'budget',",
    "```json\n{\n    \"solution\": \"df['fuel'].value_counts().nsmallest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['O', 'X', 'U', 'V', 'B', 'C', 'N', 'D', 'P', 'H', 'Z', 'J', 'I', 'T', 'E', 'F']\nQuestion: Are there any characters that only appear once in the following string?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return (''.join(df['O']) in df['O'].unique()) == False\"\n}\n```\n\nInput DataFrame columns: ['id', 'year', 'month', 'day', 'total_riders', 'number_of_turnstiles', 'station', 'latitude', 'longitude', 'c_a', 'unit', 's_t_name', 'division', 'line_name', 'stop_name', 'day_type', 'date']\nQuestion: Are there any stations in the dataset that have close to 1_000_000_000 total_riders?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['total_riders'].gt(1_000_000_000).any()\"\n}\n```\n\nInput DataFrame columns: ['service_code', 'date', 'vehicle_journey_id', 'operator', 'congestion', 'day_type', 'journey_pattern_id', 'timetable_id', 'location_id', 'latitude', 'longitude', 'stop_point_id', 'naptan_id', 'station_name', ' estar: 65,090.67\n# **2) Random Forest Classifier**\n\nRandom Forest Classifier\n\nRandom Forest Classifier: 66%\nRecall: 50.99%\nF1-score: 60.38%\nAccuracy: 66.04%\nPrecision: 65.23%\n\nConfusion Matrix:\n```json\n{\n    \"confusion_matrix\":\n    [\n        [\n            222",
    "```json\n{\n    \"solution\": \"pd.unique(df['year']).tolist()\"\n}\n```\n```json\n{\n    \"solution\": \"df['year'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'brand', 'model', 'year', 'condition', 'engine_power', 'torque', 'engine_volume', 'fuel_type', 'transmission', 'price', 'mileage', 'privod', 'city', 'state', 'owners', 'url', 'date_created']\nQuestion: How many mazda models have been sold in 2019?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"sum(df['brand'].eq('mazda').astype(int))\"\n}\n```\n```json\n{\n    \"solution\": \"df['brand'].eq('mazda').sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'brand', 'model', 'year', 'condition', 'engine_power', 'torque', 'engine_volume', 'fuel_type', 'transmission', 'price', 'mileage', 'privod', 'city', 'state', 'owners', 'url', 'date_created']\nQuestion: How many cars are produced by 'VW' with power of 180HP?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['brand'].eq('vw').sum()\"\n}\n```\n```json\n{\n    \"solution\": \"df.query('brand == \\\"vw\\\" and engine_power == 180').shape[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'brand', 'model', 'year', 'condition', 'engine_power', 'torque', 'engine_volume', 'fuel_type', 'transmission', 'price', 'mileage', 'privod', 'city', 'state', 'owners', 'url', 'date_created']\nQuestion: What is the average engine power of cars older than 2008?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.query",
    "```json\n{\n    \"solution\": \"df['kms'].nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'created_at', 'text', 'source', 'is_retweeted', 'is_quote_status', 'lang', 'place', 'coordinates', 'place_coord_boundaries', 'entities', 'withheld_copyright', 'withheld_in_countries', 'withheld_scope', 'quote_count', 'reply_count', 'retweet_count', 'favorite_count', 'entities_hashtags', 'entities_user_mentions', 'entities_urls', 'entities_media', 'entities_symbols', 'entities_polls', 'entities_cashtags']\nQuestion: Which language has the most tweets?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['lang'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['name', 'model', 'year', 'make', 'vin', 'interior_color', 'exterior_color', 'fuel_type', 'engine_size', 'engine_type', 'driven_wheels', 'number_of_doors', 'market_category', 'market_price', 'vehicle_size', 'vehicle_style', 'submodel', 'cylinders', 'transmission', 'drive', 'fuel_tank_size', 'highway_fuel_economy', 'city_fuel_economy', 'combined_fuel_economy', 'co2_emissions_norm', 'co2_emissions_norm_unit', 'unrounded_co2_emissions_norm', 'unrounded_co2_emissions_norm_unit']\nQuestion: How is the highest co2 emissions norm of the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['co2_emissions_norm'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'created_at', 'text', 'source', 'user_id', 'user_screen_name', 'user_name', 'user_created_at', 'user_location', 'user_description', 'user_",
    "```json\n{\n    \"solution\": \"df['photos'].str.split(',').explode().str.split('.jpg').apply(len).sort_values(ascending=False).nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What are the dearest 5 cars?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('price', ascending=False)['make'].head().tolist()\"\n}\n```\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What is the most common color of cars?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['color'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What are the dearest N cars?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['make'].nlargest(n).tolist()\"\n}\n```\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'do",
    "```json\n{\n    \"solution\": \"df['power'].sort_values(ascending=False).head(6).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'city', 'user_id', 'username', 'created_at', 'gender', 'age', 'occupation', 'zip_code', 'review', 'rating']\nQuestion: How many distinct occupations are there?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df['occupation'].unique())\"\n}\n```\n\nInput DataFrame columns: ['movie_id', 'imdb_id', 'title', 'genres']\nQuestion: What movie is the most rated?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('title')['rating'].count().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'movie_id', 'rating', 'timestamp']\nQuestion: What movie has the highest average rating? The result should be in the form of a string.\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('movie_id')['rating'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['userId', 'movieId', 'rating', 'timestamp']\nQuestion: Which movie has the most number of ratings?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('movieId')['rating'].count().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['IMDB_ID', 'TITLE', 'YEAR', 'RATING', 'GENRE', 'DIRECTOR', 'ACTORS', 'DESCRIPTION', 'TOP_CRITICS_REVIEW', 'TOP_CRITICS_RATING', 'TOP_USER_REVIEW', 'TOP_USER_RATING', 'AUDIENCE_SCORE', 'NUM_VOTERS']\nQuestion: What is the highest average rating?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['RATING'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id",
    "```json\n{\n    \"solution\": \"df['Transaction'].duplicated().any()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'rating', 'timestamp', 'imdb_id', 'title', 'genres', 'year', 'age', 'gender', 'imdb_url', 'occupation', 'zipcode', 'workclass', 'marital_status_binary', 'education', 'relationship', 'sex']\nQuestion: What is the age of the oldest female?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['gender'] == 'F']['age'].max()\"\n}\n```\n\nInput DataFrame columns: ['movie_id', 'movie_title', 'release_date', 'video_release_date', 'IMDb_URL', 'unknown', 'Action', 'Adventure', 'Animation', 'Childrens', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western', 'budget', 'gross', 'title_year', 'actor_2_facebook_likes', 'actor_3_facebook_likes', 'actor_1_facebook_likes', 'plot_keywords', 'facenumber_in_poster', 'num_user_for_reviews', 'num_critic_for_reviews', 'actors_facebook_likes', 'director_facebook_likes', 'content_rating', 'aspect_ratio', 'movie_facebook_likes']\nQuestion: What is the highest budget movie?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['budget'].idxmax(), 'movie_title']\"\n}\n```\n\nInput DataFrame columns: ['name', 'year', 'age', 'area', 'height', 'category', 'pp', 'rank']\nQuestion: Which athlete won the most medals?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['pp'].idxmax(), 'name']\"\n}",
    "```json\n{\n    \"solution\": \"return df['period_day'].eq('Night').any()\"\n}\n```\n\nInput DataFrame columns: ['No.', 'Year', 'Month', 'Date', 'Time', 'Time Zone', 'Coast', 'Region', 'City', 'Location', 'Distance', 'Category', 'Model', 'Engine Capacity', 'Max. RPM', 'Max. HP', 'Max. Torque', 'Fuel Capacity', 'Fuel Type', 'Transmission', 'Drive Type', 'Wheelbase', 'Length', 'Width', 'Height', 'Customer ', 'Above the Ground Weight', 'Ground Weight', 'Tare Weight', 'Brakes', 'Steering', 'Climate Control', 'ABS', 'Airbag', 'Suspension', 'Front Wheel Protection', 'Rear Wheel Protection', 'Comfort', 'Cold Weather Package', 'Power Steering', 'Power Windows', 'Power Door Locks', 'Central Locking', 'Keyless Entry', 'Leather Seats', 'Power Exterior Mirror', 'Power Interior Mirror', 'Primary Door Entry', 'Power Mirrors', 'Power Steering & Suspension', 'Power Seats', 'Alloy Wheels', 'Fog Lights', 'Rearview Mirror', 'Steering Wheel', 'Sun Roof', 'Tilt Steering Wheel', 'Trunk Lid', 'Trunk Release', 'Heated Seats', 'Rear Window Sunguard', 'Side Airbags', 'Side Impact Airbags', 'Curtain Airbags', 'Front Airbags', 'First Aid Kit', 'Bicycle Helmet', 'Seatbelts', 'Seatbelt Warning Lights', 'Turbo', 'Air Conditioning', 'Brake Drum Horn', 'Cruise Control', 'Parking Sensors', 'Power Windows (Locked)', 'Power Doors', 'Air Towing', 'Ignition Switch', 'Ignition Switch), ', 'Seat Belt', 'Seatbelt Locking', 'Passenger Airbag', 'Driver Airbag', 'Passenger Safety Boot', 'Driver Safety Boot', 'Anti-Lock Braking System', 'Emergency Brake Assist', 'Brake Assist', 'Steering Column Lock', 'Steering Wheel",
    "```json\n{\n    \"solution\": \"return (~df['period_day'].str.contains('weekend')).all()\"\n}\n```\n\nInput DataFrame columns: ['country', 'visitors', 'day', 'month', 'year', 'visitors_total_per_year', 'visitors_in_million_total_per_year', 'visitors_seasonal_','visitors_total_per_week', 'visitors_in_million_total_per_week', 'visitors_total_per_year_in_millions', 'visitors_total_per_week_in_millions']\nQuestion: How many countries have visitors greater than 100,000 in total?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df[df['visitors_total_per_year'] > 100000]['country'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'price', 'price_range', 'amenities', 'rating', 'rating_count', 'neighborhood', 'reviews_count', 'reviews_scores_rating', 'reviews_scores_accuracy', 'reviews_scores_cleanliness', 'reviews_scores_checkin', 'reviews_scores_communication', 'reviews_scores_location', 'reviews_scores_value', 'longitude', 'latitude']\nQuestion: What is the maximum number of reviews of a list?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['reviews_count'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'created_at', 'text', 'reply_to_status_id_str', 'reply_to_user_id_str', 'reply_to_screen_name', 'retweeted', 'retweet_count', 'favorite_count', 'favorited', 'possibly_sensitive', 'place_id', 'truncated', 'user_id', 'user_created_at', 'user_name', 'user_screen_name', 'user_description', 'user_location', 'user_url', 'user_expanded_url', 'user_time_zone', '",
    "```json\n{\n    \"solution\": \"|(df['period_day'].isin(['Evening', 'Night'])) & (df['weekday_weekend'].eq('Weekend'))\"\n}\n```\n\nInput DataFrame columns: ['id', 'year', 'month', 'day', 'judgement', 'country', 'designation', 'provenance', 'region_1', 'region_2', 'variety', 'winery']\nQuestion: Which variety is the most popular in the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['variety'].mode()[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'year', 'month', 'day', 'judgment', 'country', 'designation', 'provenance', 'region_1', 'region_2', 'variety', 'winery', 'points', 'wine_type', 'description', 'taster_name', 'taster_twitter_handle', 'price', 'title', 'taster_notes', 'taster_public_reivew_count', 'winery_review_count']\nQuestion: Which taster is the least favorite?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['taster_name'].value_counts().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['Country', 'Literacy', 'GDP']\nQuestion: What are the 5 countries that have the smallest GDP growth rate?\nExpected return type: list[str]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('GDP').head(5)['Country'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Country', 'Literacy', 'GDP']\nQuestion: Is there any country with literacy rate greater than 80 and GDP smaller than 5000?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df['GDP'] < 5000) & (df['Literacy'] > 80).any()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Brands',",
    "```json\n{\n    \"solution\": \"return len(df['Item'].unique())\"\n}\n```\n\nInput DataFrame columns: ['customer_id', 'Genre', 'Age', 'Rental_duration', 'Rating', 'No_of_unit_rentals', 'No_of_copies_rented', 'Total_cost_of_rentals', 'Total_cost_of_returns', 'Total_profit_generated']\nQuestion: Which customer_id had the highest number of rentals for the Movies genre?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Genre'] == 'Movies']['customer_id'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Cabin', 'Embarked', 'PassengerId', 'Pclass', 'Survived', 'Sex', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Name']\nQuestion: Number of people survived in each port that they embarked.\nExpected return type: dictionary\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return dict(df.groupby('Embarked')['Survived'].sum())\"\n}\n```\n\nInput DataFrame columns: ['tempC', 'ace_total', 'visibility_km', 'precipitation_sum_mm', 'wind_speed_km_h', 'pressure_mb', 'tempC_max', 'tempC_min', 'heating_degree_days_sum', 'tempC_max_10th', 'tempC_min_10th', 'tempC_avg', 'tempC_avg_10th', 'sun_hours', 'cloud_cover', 'dew_point_avg', 'humidity_max', 'visibility_max', 'wind_speed_max', 'humidity_min', 'visibility_min', 'wind_speed_min', 'dew_point_min', 'heat_index_min', 'heat_index_max', 'heat_index_avg', 'precipitation_intensity_max', 'precipitation_type_1h', 'precipitation_type_24h', 'wind_direction_avg', 'pressure_",
    "```json\n{\n    \"solution\": \"df['period_day'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['', 'age', 'sex', 'city', 'age_group', 'job_title', 'job_industry_category', 'job_title_1', 'job_industry_category_1', 'area', 'working_hours_per_week', 'salary_month_to_norm', 'salary_year_to_norm', 'salary_diff_to_norm', 'salary_diff_perc_to_norm', 'salary_month', 'salary_year']\nQuestion: What is the average salary for the age group \"25-34\"?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('age_group').mean().loc['25-34', 'salary_year']\"\n}\n```\n\nInput DataFrame columns: ['S.No.', 'Name', 'Student Affairs', 'Cultural Activities', 'Sports and Recreation', 'Health & Fitness', 'Contact Hours', 'Games', 'Photography', 'Music', 'Reading', 'Dance', 'Films', 'Water Sports and Outdoor Activities', 'Public Speaking', 'Volunteering', 'Travel', 'More Info', 'GPA', 'University Rating', 'Research', 'Admission Chances', 'Application_ID', 'Student_ID', 'Date', 'Time']\nQuestion: What is the average number of student affairs hours for the top 10 universities?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('University Rating')['Student Affairs'].mean().nlargest(10).mean()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Experience', 'Age', 'Gender', 'Income', 'Marital_Status', 'Customer_Type', 'Warehouse_Block', 'Mode_of_Shipment', 'Product_Import_Status', 'Product_Category', 'Product_Category_2', 'Product_Category_3', 'Date', 'Quantity', 'Discount', 'Profit', 'Order_Priority']\nQuestion: What is the total profit of all orders from",
    "```json\n{\n    \"solution\": \"df['Transaction'].max()\"\n}\n```\n\nInput DataFrame columns: ['Store', 'StoreType', 'Assortment', 'CompetitionDistance', 'CompetitionOpenSinceMonth', 'CompetitionOpenSinceYear', 'Promo2', 'Promo2SinceWeek', 'Promo2SinceYear', 'PromoInterval', 'Sales', 'Customers', 'Open', 'Promo', 'StateHoliday', 'SchoolHoliday']\nQuestion: Which store has the lowest total sales?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Store')['Sales'].sum().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Genre', 'Platform', 'Year', 'Publisher', 'Critic_Score', 'Critic_Count', 'User_Score', 'User_Count', 'Developer', 'Rating']\nQuestion: What's the highest number of critics for a game?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Critic_Count'].max()\"\n}\n```\n\nInput DataFrame columns: ['Year', 'Month', 'Day', 'AveragePrice', 'Total Volume', '4046', '4225', '4770', 'Total Bags', 'Small Bags', 'Large Bags', 'XLarge Bags']\nQuestion: How many products were sold in the month of August of the year 2018?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df2 = df.loc[(df['Year'] == 2018) & (df['Month'] == 8)]\"\n            \"df2['Total Volume'].sum()\"\n}\n```\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: How many orders are there?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['InvoiceNo'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', '",
    "```json\n{\n    \"solution\": \"df.loc[df['date_time'].between('12:00:00', '15:00:00'), 'Transaction'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['NAME', 'D', 'C', 'B', 'A', 'G', 'F']\nQuestion: What is the minimum number of grades obtained in class?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.min().min()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'Name', 'Sex', 'Age', 'Height', 'Weight', 'Season', 'Event', 'Sport', 'Team', 'NOC', 'Games', 'Year', 'City', 'Sport', 'Medal', 'Event', 'Medal']\nQuestion: What is the country that got the maximum number of gold medals?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['NOC'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'YEAR', 'LIMIT', 'DEBT', 'DEBT_MD', 'DEBT_LIMIT', 'GROWTH', 'SHA', 'GDP', 'PPP', 'NGDP_R', 'NGDP_RPCH', 'NGDP_R_KD', 'NGDP_RPCH_KD', 'NGDP_RPCH_KD_AG', 'NGDP_RPCH_KD_AG_KD', 'NGDP_RPCH_KD_AG_KD_KD', 'NGDP_value', 'NGDP_value_KD', 'NGDP_value_KD_AG', 'NGDP_value_KD_AG_KD', 'NGDP_value_KD_AG_KD_KD', 'NGDP_M', 'NGDPDPC', 'NGDPDPC_KD', 'NGDPDPC_KD_AG', 'NGDPDPC_KD_AG_KD', 'NGDPDPC_KD_AG_KD_KD', 'NGDPDPC_MRCH', 'NGDPDPC_MRCH_KD', 'NGDPDPC_MRCH_KD_",
    "```json\n{\n    \"solution\": \"df.groupby('period_day')['Transaction'].nunique().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['account_id', 'account_type', 'amount', 'date', 'popularity', 'category', 'sub_category', 'merchant', 'details', 'merchant_logo']\nQuestion: Which merchant has the highest average amount of payment received? (mean)\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('merchant')['amount'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['amount', 'name', 'gender', 'address', 'dob', 'ssn', 'state', 'city', 'state_abbrv', 'zipcode']\nQuestion: Which state has the highest average amount of payment received? (mean)\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('state')['amount'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['transaction_id', 'date', 'gender', 'city', 'state', 'zipcode', 'amount', 'account_id', 'merchant', 'category', 'sub_category', 'merchant_logo', 'year', 'month', 'quarter']\nQuestion: Which merchant has the highest average amount of payment received? (mean)\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('merchant')['amount'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['transaction_id', 'date', 'gender', 'city', 'state', 'zipcode', 'amount', 'account_id', 'merchant', 'category', 'sub_category', 'merchant_logo', 'year', 'month', 'quarter']\nQuestion: Which merchant has the highest average amount of payment received? (mean)\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('merchant')['amount'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['transaction_id', 'date', 'gender', 'city', 'state', 'zipcode', 'amount', 'account_",
    "```json\n{\n    \"solution\": \"df[df['period_day'] == 'weekday']['Item'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'genre', 'release_date', 'language', 'rating', 'duration', 'country']\nQuestion: What is the longest movie in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['duration'].max()\"\n}\n```\n\nInput DataFrame columns: ['cafe_id', 'chain', 'address_cafe', 'number_of_seats', 'geo_lat', 'geo_lon', 'address_restaurant', 'kitchen_id', 'id', 'object_name', 'address_object', 'object_type', 'chain_id', 'object_owner', 'object_type_id', 'object_id', 'open', 'closed', 'type_id', 'type', 'okato']\nQuestion: How many cafes have a type of \"Tea house\"?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['type'] == 'Tea house', 'cafe_id'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['OBJECTID', 'id', 'name', 'address', 'lat', 'lng', 'kind', 'year_from', 'year_to', 'type', 'time', 'value', 'year', 'source', 'source_year', 'source_organization', 'source_link', 'last_edited', 'editor', 'edit_year', 'lat_lon']\nQuestion: How many cultural objects were opened on the 1st of September, 1937?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['year'] == 1937) & (df['time'] == '1st of September')].count().id\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'address_lat', 'address_lng', 'type', 'address', 'lat', 'lng']\nQuestion: What is the most common type of objects",
    "```json\n{\n    \"solution\": \"df.loc[df['weekday_weekend'] == 'Weekday', 'Item'].value_counts().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['Transaction', 'Item']\nQuestion: Which item has the highest price?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Item'].map(df.groupby('Item')['Transaction'].sum()).sort_values(ascending=False).index[0]\"\n}\n```\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: How many weekdays have been in the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['weekday_weekend'].value_counts().loc['Weekday']\"\n}\n```\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: What's the count of items bought during weekdays?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['weekday_weekend'] == 'Weekday', 'Item'].value_counts()\"\n}\n```\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Which weekday has the highest count of items bought?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('weekday_weekend')['Item'].count().sort_values(ascending=False).index[0]\"\n}\n```\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: How many items were bought during the weekend?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('weekday_weekend')['Item'].count().loc['Weekend']\"\n}\n```\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period",
    "```json\n{\n    \"solution\": \"df[df['Item'].str.contains('Brownie')] \\\n                    .groupby('period_day')['period_day'] \\\n                    .count() \\\n                    .idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: What is the most popular item in the beginning of the week?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['weekday_weekend'] == 'weekend'] \\\n                    .groupby('Item')['Item'] \\\n                    .count() \\\n                    .idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: What is the total number of items that were bought by customers during the first 10 minutes of the day?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['period_day'] == 'first_10_minute')]['Transaction'].count()\"\n}\n```\n\nInput DataFrame columns: ['mode', 'content_id', 'title', 'tag', 'title_without_tag', 'pub_date', 'time-added', 'tags', 'tag_x', 'tag_y', 'num_tags', 'account_type', 'author_id', 'title_x', 'id_y']\nQuestion: How many tags does the most popular article have?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['content_id', 'title']).size().nlargest(1).tolist()\"\n}\n```\n\nInput DataFrame columns: ['question_id', 'tag', 'answer', 'answerer_id', 'question_date', 'question_time', 'question_title_length', 'answer_length', 'question_word_count', 'answer_word_count', 'question_unique_word_count', 'answer_unique_word_count', 'question_unique_stop_word_count', 'answer_unique_stop_word_count', 'question_",
    "```json\n{\n    \"solution\": \"df[df['period_day'] == 'morning']['Item'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'order_id', 'product_id', 'quantity', 'price', 'freight_value', 'payment_type', 'payment_value', 'payment_installments', 'order_purchase_timestamp', 'product_name_lenght', 'product_description_lenght', 'product_photos_qty', 'product_weight_g', 'product_length_cm', 'product_height_cm', 'product_width_cm', 'seller_id', 'seller_zip_code_prefix', 'seller_state', 'product_category_name']\nQuestion: What is the total sales volume for the top 3 selling products?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['product_id'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n```\n\nInput DataFrame columns: ['id', 'order_id', 'order_status', 'order_purchase_timestamp', 'order_approved_at', 'order_delivered_carrier_date', 'order_delivered_customer_date', 'order_estimated_delivery_date', 'customer_id', 'order_item_id', 'product_id', 'seller_id', 'shipping_limit_date', 'price', 'freight_value']\nQuestion: What is the total sales volume for the top 3 selling products?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['product_id'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'order_id', 'order_status', 'order_purchase_timestamp', 'order_approved_at', 'order_delivered_carrier_date', 'order_delivered_customer_date', 'order_estimated_delivery_date', 'customer_id', 'order_item_id', 'product_id', 'seller_id', 'shipping_limit_date",
    "```json\n{\n    \"solution\": \"df.query('period_day==\\'Afternoon\\'')['Item'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Company public response', 'Company', 'State', 'ZIP code', 'Tags', 'Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID']\nQuestion: Name the top 4 days where consumers submit the most complaints about mortgage.\nExpected return type: list[datetime]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.query('Product==\\'Mortgage\\'')['Date received'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['department', 'aisle', 'product_name', 'add_to_cart_order', 'reordered']\nQuestion: Which 2 products are most often reordered?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.query('reordered==1')['product_name'].value_counts().index.tolist()[0:2]\"\n}\n```\n\nInput DataFrame columns: ['order_id', 'product_id', 'add_to_cart_order', 'reordered']\nQuestion: Which 2 products are most often reordered?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.query('reordered==1')['product_id'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['order_id', 'user_id', 'order_number', 'order_dow', 'order_hour_of_day', 'days_since_prior_order']\nQuestion: Which hour of the day is the most busy in terms of orders?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['order_hour_of_day'].mode().iloc[0]\"",
    "```json\n{\n    \"solution\": \"df[df['weekday_weekend'] == 'weekend']['Item'].value_counts().head(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Country', 'Lat', 'Long', 'Location', 'Month (mm-yyyy)', 'Total cases', 'New cases', 'Total deaths', 'New deaths', 'Total recovered', 'Active cases', 'Serious, critical', 'Tot Cases/1M pop', 'Deaths/1M pop', 'Total Tests', 'Tests/ 1M pop', 'WHO Region']\nQuestion: Which WHO region has the nation with the highest total cases?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.iloc[df['Total cases'].idxmax()]['WHO Region']\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Age', 'Nationality', 'Overall', 'Potential', 'Club', 'Value', 'Wage', 'Special', 'Preferred Foot', 'International Reputation', 'Weak Foot', 'Skill Moves', 'Work Rate', 'Body Type', 'Real Face', 'Position', 'Jersey Number', 'Joined', 'Loaned From', 'Contract Valid Until', 'Height', 'Weight', 'LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB', 'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'Sl",
    "```json\n{\n    \"solution\": \"df[(df['period_day'] == 'night') & (df['weekday_weekend'] == 'weekend')]['Item'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'Unnamed: 0.1', 'id', 'slug', 'vendor', 'item_type', 'title', 'blurb', 'description', 'discount_rate', 'photo', 'tags', 'category_id', 'category_parent_id', 'loc.country', 'loc.state', 'loc.city', 'loc.displayable_name', 'loc.zip', 'latitude', 'longitude', 'state_taxed', 'total_on_sale', 'taxes_included', 'currency_symbol', 'currency_trailing_code', 'disable_communication', 'staff_pick', 'sold_quantity', 'friends_count', 'product_description', 'country_whitelist', 'country_blacklist', 'created_at', 'state_tax_rate', 'localized_shipping_rate', 'name', 'is_private', 'is_external_closet', 'notes']\nQuestion: What are the first 3 most sold items (not including the \"Other\" type of item)?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['item_type'] != 'Other'].groupby('title').sum().sort_values('sold_quantity', ascending=False).index.tolist()[:3]\"\n}\n```\n\nInput DataFrame columns: ['ID', 'name']\nQuestion: What are the first 5 names that start with a \"d\"?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": 'df[df[\"name\"].str.startswith(\"d\")].name.unique().tolist()[:5]'\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'building_id', 'timestamp', 'hour_slot', 'day_slot', 'month_slot', 'year_month_slot', 'week_slot', 'year_week_slot', 'day_of_week_slot', 'holidays_",
    "```json\n{\n    \"solution\": \"df.groupby('Transaction')['Item'].count().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20', 'C21', 'C22', 'C23', 'C24', 'C25', 'C26', 'C27', 'C28', 'C29', 'C30', 'C31', 'C32', 'C33', 'C34', 'C35', 'C36', 'C37', 'C38', 'C39', 'C40', 'C41', 'C42', 'C43', 'C44', 'C45', 'C46', 'C47', 'C48', 'C49', 'C50', 'C51', 'C52', 'C53', 'C54', 'C55', 'C56', 'C57', 'C58', 'C59', 'C60', 'C61', 'C62', 'C63', 'C64', 'C65', 'C66', 'C67', 'C68', 'C69', 'C70', 'C71', 'C72', 'C73', 'C74', 'C75', 'C76', 'C77', 'C78', 'C79', 'C80', 'C81', 'C82', 'C83', 'C84', 'C85', 'C86', 'C87', 'C88', 'C89', 'C90', 'C91', 'C92', 'C93', 'C94', '",
    "```json\n{\n    \"solution\": \"df['Transaction'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Store', 'StateHoliday', 'StoreType', 'Assortment', 'CompetitionDistance', 'CompetitionOpenSinceMonth', 'CompetitionOpenSinceYear', 'Promo2', 'Promo2SinceWeek', 'Promo2SinceYear', 'PromoInterval', 'DayOfWeek', 'Date', 'Sales', 'Customers', 'Open', 'Promo', 'State', 'SchoolHoliday', 'Year', 'Month', 'Day', 'WeekOfYear', 'Quarter', 'DayOfYear', 'Weekday']\nQuestion: Which year has the most sales in the retail industry?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Year')['Sales'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Store', 'DayOfWeek', 'Date', 'Sales', 'Customers', 'Open', 'Promo', 'StateHoliday', 'SchoolHoliday', 'Year', 'Month', 'Dayofweek', 'WeekOfYear', 'DayOfYear', 'Weekday', 'State', 'Promo2', 'Promo2SinceYear', 'Promo2SinceWeek', 'PromoInterval', 'CompetitionDistance', 'CompetitionOpenSinceYear', 'CompetitionOpenSinceMonth']\nQuestion: Which day of the week has the highest sales?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Weekday')['Sales'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['DayOfWeek', 'Sales', 'Customers', 'Open', 'Promo', 'StateHoliday', 'SchoolHoliday', 'Year', 'Month', 'Day', 'WeekOfYear', 'DayOfYear', 'Weekday']\nQuestion: Which day of the month has the highest sales?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Day')['Sales'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Store', 'DayOfWeek', 'Date', 'Sales', 'Customers', 'Open', 'Promo', 'StateHoliday', 'SchoolHoliday', 'Year', 'Month', '",
    "```json\n{\n    \"solution\": \"df['Item'].eq('Bread').idxmax()\"\n}\n```\n## Area of knowledge questions\n- If you are a developer/data scientist in Korea, which category would you focus on more?\n\n\"Software or Big Data\"\n\n- Which category deals with the most money?\n\"Big Data\"\n\n- Which category deals with the least money?\n\"Software\"\n\n## My Gross annual salary is 60, how would I answer the question \"What are the top 4 maximum gross annual salaries?\"\n\nIf I want to know the top 4 values:\n\n```python\ndf['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4)\n```\n\nThis will return:\n\n```text\n4    106000\n3    102000\n2    100000\n1     98000\nName: Gross annual salary (in euros) \ud83d\udcb8, dtype: int64\n```\n\n## I have a column named \"city\" that contains the name of a city, how would I get the city with 3rd most people?\n\n```python\ndf['city'].value_counts().nlargest(3).index.tolist()[2]\n```\n\n## What is the mean of my height?\n```python\ndf['height'].mean()\n```\n\n## How many people have a tall hair?\n```python\ndf['hair'].str.contains('Tall').sum()\n```\n\n## I want to sort from tallest to shortest, what do I need to change?\n\n```python\ndf['height'].sort_values(ascending=False)\n```\n\n## Which day of the week has the most number of accidents?\n```python\ndf['weekday'].value_counts().idxmax()\n```\n\n## What is the maximum number of injuries caused by a single tornado?\n```python\ndf['inj'].max()\n```\n\n## Which 4 agencies handle the most complaints?\n```python\ndf['agency'].value_counts().nlargest(4).index.tolist()\n```\n\n## What is the maximum number of survivors in Pclass",
    "```json\n{\n    \"solution\": \"df.loc[df['period_day'] == 'morning', 'Transaction'].nsmallest(2).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_response_rate', 'host_acceptance_rate', 'host_is_superhost', 'host_neighbourhood', 'host_listings_count', 'host_total_listings_count', 'host_verifications', 'host_has_profile_pic', 'host_identity_verified', 'street', 'neighbourhood', 'neighbourhood_cleansed', 'city', 'state', 'zipcode', 'market', 'smart_location', 'country_code', 'country', 'latitude', 'longitude', 'is_location_exact', 'property_type', 'room_type', 'accommodates', 'bathrooms', 'bedrooms', 'beds', 'bed_type', 'square_feet', 'price', 'weekly_price', 'monthly_price', 'security_deposit', 'cleaning_fee', 'guests_included', 'extra_people', 'minimum_nights', 'maximum_nights', 'calendar_updated', 'has_availability', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'calendar_last_scraped', 'number_of_reviews', 'number_of_reviews_ltm', 'first_review', 'last_review', 'review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'requires_license', 'license', 'jurisdiction_names', ' instant_bookable', 'cancellation_policy', 'require_guest_profile_picture', 'require_guest_phone_verification', 'calculated_host_listings_count', 'calculated_host_listings_count_entire_homes', 'calculated_host_listings_count_private_rooms', 'calculated_host_",
    "```json\n{\n    \"solution\": \"return df['Rating'].gt(3).all()\"\n}\n```\n# ProgrammerTest\n\n## Requirements:\n- Python 3.9\n- docker\n- docker-compose\n\n## Run the app:\n```sh\nexport PYTHONPATH=.\ndocker-compose up\n```\n\n## Run the tests:\n```sh\ndocker run --rm --entrypoint /bin/bash -v $(pwd):/app -t hopper_tests /app/run_tests.sh\n```\nimport json\nimport os\nfrom typing import Any, Iterable, List, Optional, Tuple\n\nfrom celery import Signature\n\nfrom . import serializers\nfrom .services.wunder_test_service import WunderTestService\nfrom .tasks.wunder_test_task import wunder_test_task\nfrom .types.wunder_test_types import (\n    TestAnswer,\n    TestAnswers,\n    TestCode,\n    TestInput,\n    TestQuestion,\n    TestResult,\n    TestSolution,\n)\n\n\nclass WunderTestServiceManager(WunderTestService):\n    def get_test_question(self, test_id: str) -> TestQuestion:\n        question = self.get_test_question_by_id(test_id)\n        return self._deserialize_question(question)\n\n    def get_test_question_by_id(self, test_id: str) -> Optional[TestQuestion]:\n        test = self.get_test_questions(test_id)\n        if not test:\n            return None\n        return test[0]\n\n    def get_test_questions(self, test_id: str) -> List[TestQuestion]:\n        answers = self.get_test_answers(test_id)\n        test_dict = self.get_test_by_id(test_id)\n        return [None] if not test_dict else self._deserialize_questions(test_dict, answers)\n\n    def get_test_answer(self, test_id: str) -> TestAnswer:\n        return self._deserialize_answer(self.get_test_answers(test_id)[0])\n\n    def get_test_answers(self, test_id: str) -> List[TestAnswer]:\n        return self._deserialize_answers(self.get_test",
    "```json\n{\n    \"solution\": \"df['Branch'].value_counts().idxmax() == 'Disneyland_HongKong'\"\n}\n```\n\nInput DataFrame columns: ['brand', 'item_id', 'name', 'category_id', 'category_name', 'price', 'total_reviews', 'rating', 'review_count', 'review_date', 'flagship_store', 'location', 'unit_price', 'num_units_sold', 'brand_id', 'store_id', 'Google_product_category']\nQuestion: Which item has the highest average rating?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df.groupby('item_id')['rating'].mean().idxmax(), 'item_id']\"\n}\n```\n\nInput DataFrame columns: ['date', 'event', 'type', 'location', 'description']\nQuestion: How many unique events have been recorded?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['event'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['Postal_Code', 'Unique_Carrier_1', 'Unique_Carrier_2', 'Unique_Carrier_3', 'Unique_Carrier_4', 'Unique_Carrier_5', 'Unique_Carrier_6', 'Reporting_Airline_1', 'Reporting_Airline_2', 'Cancellation_Code', 'diverted', 'ArrDelay', 'DepDelay', 'AirTime', 'Distance', 'TaxiIn', 'TaxiOut', 'Cancelled']\nQuestion: Is there any flight that was delayed at least 4 hours?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['DepDelay'].ge(4).any()\"\n}\n```\n\nInput DataFrame columns: ['VIN', 'Manufacturer', 'Model', 'Make', 'Model_Year', 'Vehicle_Type', 'Transmission_Type', 'Fuel_Type', 'Fuel_Economy', 'Highway_Economy', 'Combined_Economy', 'CO2_Emissions', 'CO2_Emissions_Score', 'CO2_Emissions_",
    "```json\n{\n    \"solution\": \"return df[df['Rating'] == 1].shape[0] > 0\"\n}\n```\n\nInput DataFrame columns: ['branch_id', 'branch_name', 'state', 'city', 'latitude', 'longitude', 'pincode']\nQuestion: What is the branch name with the highest number of stores?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['branch_name'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'product_id', 'quantity', 'price', 'user_id', 'created_at', 'timestamp', 'address_id', 'product_name', 'product_price', 'product_quantity', 'product_total']\nQuestion: How many products were sold in total on the 18th of September 2021 at 07:00?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df[(df['created_at'] == '2021-09-18 07:00:00') & (df['product_name'] == 'Product-1')].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'product_id', 'quantity', 'price', 'user_id', 'created_at', 'product_id', 'location_id', 'product_name', 'rating']\nQuestion: Which product has the highest rating?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.groupby('product_name')['rating'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Plan', 'Manager_ID', 'Employee_ID', 'Gender', 'DOB', 'Designation', 'DOJ', 'Salary', 'Joining_ Designation', 'Points in Previous Year', 'Age in Years', 'Last_Achievement_Age', 'Last_Achievement_Level', 'Achievement_Reward_points', 'Unit', 'Category', 'Achievement_Description', 'Last_Assessment_Score', 'Last_Performance_Score', 'Training', 'Training",
    "```json\n{\n    \"solution\": \"if (df['Rating'] == 5).any(): return True\"\n}\n```\n\nInput DataFrame columns: ['name', 'address', 'city', 'state', 'country', 'zip', 'category', 'lat', 'lng']\nQuestion: Is the restaurant with the highest rating in Hong Kong Chinese cuisine located in Shatin, Hong Kong?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['category'] == 'Chinese') & (df['rating'] == df['rating'].max()), 'name'].any()\"\n}\n```\n\nInput DataFrame columns: ['S.No', 'Name', 'Position', 'Club', 'Nationality', 'Wage', 'Salary', 'Age', 'Height', 'Weight', 'Preffered Foot', 'Weak Foot', 'Skill Moves', 'Work Rate', 'Body Type', 'Real Face', 'Release Clause', 'Joined', 'Loaned From', 'Contract Valid Until', 'Value', 'Wage', 'Origin', 'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause']\nQuestion: Is there any player with a contract valid until year 2024?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Contract Valid Until'].str.contains('2024'), 'Name'].any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'type', 'created_at', 'author', 'message', 'attachments', '",
    "```json\n{\n    \"solution\": \"df['Reviewer_Location'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Gender', 'Status', 'Children', 'Age', 'Customer_ID', 'Effort_Score', 'Gender_Male', 'PARTNER', 'REFERRAL', 'RELATIONSHIP', 'PHILOSOHY', 'PHILOSOHY_Books', 'PHILOSOHY_Movies_Tv', 'PHILOSOHY_Music', 'PHILOSOHY_Celebs', 'PHILOSOHY_Western', 'PHILOSOHY_Science', 'PHILOSOHY_Magazines_Journals', 'GENDER', 'AGE', 'UNIVERSITY_AT', 'WORK_LIFE_BALANCE', 'SCLUB_MEMBERSHIP', 'MUSIC', 'RIVES_AND_MAIL', 'GOOD_NEWS', 'MOVIES_AND_TV', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer with income higher than 100000?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Income'].gt(100000).any()\"\n}\n```\n\nInput DataFrame columns: ['Month', 'Day', 'Year', 'Category', 'Text', 'Location', 'Latitude', 'Longitude', 'Location_x', 'Location_y', 'Location_Accuracy', 'Source', 'Magnitude', 'Type', 'Depth', 'Depth_Error', 'Depth_Seismic_Stations', 'Magnitude_Error', 'Magnitude_Seismic_Stations', 'Azimuthal_Gap', 'Horizontal_Error', 'Horizontal_Error_Depth', 'Magnitude_Error_Depth', 'Minimum_Magnitude', 'Azimuthal_Gap_Uncertainty', 'Distance_From_Surface_In_Km', 'Mag_Error_Uncertainty', 'Hypocenter_Depth']\nQuestion: Which distress type had the most number of earthquakes in 2017?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['",
    "```json\n{\n    \"solution\": \"df[df['Branch'] == 'Disneyland_HongKong']['Rating'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Review_ID', 'Rating', 'Year_Month', 'Reviewer_Location', 'Review_Text', 'Branch']\nQuestion: What are the top 3 cities that customers give the most positive reviews?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Rating'] == 5]['Reviewer_Location'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '",
    "```json\n{\n    \"solution\": \"df['Review_ID'].max()\"\n}\n```\n\nInput DataFrame columns: ['account', 'amount', 'to', 'from', 'notes', 'created_at']\nQuestion: Which account has the most number of bank transactions?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['account'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['date', 'description', 'original_description', 'account', 'amount', 'category', 'type']\nQuestion: What is the average amount of each transaction type? (debits and credits)\nExpected return type: pandas.DataFrame\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('type').agg({'amount': 'mean'})\"\n}\n```\n\nInput DataFrame columns: ['purch_yr', 'purch_wk', 'store_nbr', 'item_nbr', 'unit_sales', 'onpromotion']\nQuestion: What is the average number of units sold for each year? (rounded to 2 decimal places)\nExpected return type: pandas.DataFrame\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('purch_yr').agg({'unit_sales': 'mean'}).round(2)\"\n}\n```\n\nInput DataFrame columns: ['item_nbr', 'family', 'class', 'perishable']\nQuestion: How many perishable items are sold in total?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['perishable'].sum()\"\n}\n```\n\nInput DataFrame columns: ['transaction_id', 'product_id', 'quantity', 'sales', 'store_id']\nQuestion: What is the average quantity of each product at each store?\nExpected return type: pandas.DataFrame\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby(['store_id', 'product_id']).agg({'quantity': 'mean'})\"\n}\n```\n```\n\nInput DataFrame columns: ['transaction_id', 'product_id', 'quantity', 'sales', 'store_id']\nQuestion",
    "```json\n{\n    \"solution\": \"df['Year_Month'].str.contains('2019').sum()\"\n}\n```\n\nInput DataFrame columns: ['Id', 'Name', 'Description', 'Enabl', 'Enabl.1', 'Latitude', 'Longitude', 'Postal', 'Municipality', 'Ward', 'District', 'Category', 'Tail', 'Region', 'Interch', 'Ds', 'Y', 'X', 'Source_system', 'Source_system_strcat', 'W3SV_X', 'W3SV_Y', 'W3SV_Zone', 'W3GP_X', 'W3GP_Y', 'W3GP_Zone', 'W3GP_Zone_F', 'W3GP_Zone_L', 'W3GP_Zone_M', 'W3GP_Zone_Z', 'Data_Date']\nQuestion: Which ward has the highest number of different categories?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['Ward'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['odometer', 'price', 'car_type', 'transmission', 'drive', 'paint_color', 'size', 'type', 'manufacturer', 'model', 'condition', 'cylinders', 'fuel', 'title_status', 'transmission_type', 'vin', 'drive_type', 'fuel_type', 'drive_id', 'car_id']\nQuestion: What is the manufacturer of the car with the highest odometer reading?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['odometer'].idxmax(), 'manufacturer']\"\n}\n```\n\nInput DataFrame columns: ['review_id', 'user_id', 'date', 'review_score', 'review_title', 'review_content', 'review_title_length', 'review_content_length']\nQuestion: What is the average length of the review titles of the top 10 reviewers?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('review_score', ascending=False).head(1",
    "```json\n{\n    \"solution\": \"df['Reviewer_Location'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'state', 'region', 'city', 'population', 'latitude', 'longitude']\nQuestion: What is the state with the highest population?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['population'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['OverallGrade', 'SalePrice', 'Neighborhood', 'Exterior1st', 'Exterior2nd', 'Area', 'SaleCondition', 'LotArea', 'LotFrontage', 'LotShape', 'OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'TotalBsmtSF', 'BsmtUnfSF', 'HeatingQC', 'GarageCars', 'PoolArea', '1stFlrSF', '2ndFlrSF', 'FireplaceQu', 'Fireplaces', 'GarageArea', 'PavedDrive', 'GarageQual', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'MiscVal', 'MoSold', 'YrSold', 'SaleType', 'MSZoning', 'RoofStyle', 'RoofMatl', 'Exterior2nd', 'MasVnrType', 'Electrical', 'Bsmt Qual', 'Fence', 'Garage Type', 'Heating', 'Exter Qual', 'BsmtFin Type 1', 'Central Air', 'BsmtFin Type 2', 'Kitchen Qual', 'Functional']\nQuestion: What is the most common neighborhood?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Neighborhood'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'age', 'gender', 'height', 'weight', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio']\nQuestion: What is the correlation between age and weight?\nExpected return type: number\n\nCode that calculates the",
    "```json\n{\n    \"solution\": \"df.groupby('Branch')['Rating'].mean().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Salary_Level', 'Years_Of_Experience', 'Previous_Years_As_A_Team_Leader', 'Previous_Years_As_A_Senior_Leadership_Position', 'Previously_Worked_As_A_Leader', 'Previously_Worked_As_A_Senior_Leadership_Position', 'Previously_Worked_As_A_Team_Leader', 'Previously_Worked_As_A_Middle_Management_Position', 'Previously_Worked_As_An_Entry_Level_Position', 'Previously_Worked_As_A_Junior_Management_Position', 'Previously_Worked_As_A_Junior_Leadership_Position', 'Previously_Worked_As_A_Vice_President', 'Previously_Worked_As_A_President', 'Previously_Worked_As_A_Supervisor', 'Previously_Worked_As_A_Manager']\nQuestion: Which of the available supervisors have been working longest in the company?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df[['Previously_Worked_As_A_Supervisor', 'Previously_Worked_As_A_Manager']].idxmax(axis=1), 'Name'].unique().tolist()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Date', 'Store_Type', 'Location_Type', 'Campaign', 'Customer_ID', 'Product', 'Quantity', 'Total_Sum']\nQuestion: Which product (column Product) has the lowest total_sum?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Product')['Total_Sum'].sum().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Location_ID', 'Transaction_Date', 'Transaction_ID', 'Product_ID', 'Product_Name', 'Gender', 'Subcategory', 'Product_Price', 'Quantity', 'Total_Sum",
    "```json\n{\n    \"solution\": \"df.loc[df['Rating']==1, 'Year_Month'].min()\"\n}\n```\n\nInput DataFrame columns: ['id', 'amenities', 'price', 'security_deposit', 'cleaning_fee', 'guests_included', 'extra_people', 'minimum_nights', 'maximum_nights', 'number_of_reviews', 'review_scores_rating', 'cancellation_policy', 'require_guest_phone_verification', 'require_guest_profile_picture', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'calculated_host_listings_count', 'reviews_per_month', 'availability_365']\nQuestion: How many amenities does the listing at index 3255 have?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.iloc[3255, 1].astype(str).count(',') + 1\"\n}\n```\n\nInput DataFrame columns: ['listings_id', 'name', 'host_id', 'host_name', 'accommodates', 'room_type', 'price', 'neighborhood_overview', 'latitude', 'longitude', 'bathrooms', 'bedrooms', 'beds', 'amenities', 'property_type', 'minimum_nights', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'number_of_reviews', 'number_of_reviews_ltm', 'first_review', 'last_review', 'review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'license', 'square_feet', 'weekly_price', 'monthly_price', 'security_deposit', 'clean",
    "```json\n{\n    \"solution\": \"df.groupby('Reviewer_Location')['Rating'].mean().nlargest(1).index[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'gender', 'timestamp', 'age', 'val1', 'val2', 'val3', 'val4', 'val5', 'val6', 'val7', 'val8']\nQuestion: Does any of the participants have a age above 60?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['age'].gt(60).any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'gender', 'timestamp', 'age', 'val1', 'val2', 'val3', 'val4', 'val5', 'val6', 'val7', 'val8']\nQuestion: Is there any missing values?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.isnull().values.any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'gender', 'timestamp', 'age', 'val1', 'val2', 'val3', 'val4', 'val5', 'val6', 'val7', 'val8']\nQuestion: What is the maximum age in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['age'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'gender', 'timestamp', 'age', 'val1', 'val2', 'val3', 'val4', 'val5', 'val6', 'val7', 'val8']\nQuestion: Which year was the oldest person born in?\nExpected return type: year\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['timestamp'].dt.year.min()\"\n}\n```\n\nInput DataFrame columns: ['id', 'gender', 'timestamp', 'age', 'val1', 'val2', 'val3', 'val4', 'val5', 'val6', 'val7', 'val8']\nQuestion: What is the average age of the participants?\nExpected return type: number",
    "```json\n{\n    \"solution\": \"df['Reviewer_Location'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'passed', 'var_0', 'var_1', 'var_2', 'var_3', 'var_4', 'var_5', 'var_6', 'var_7', 'var_8', 'var_9', 'var_10', 'var_11', 'var_12', 'var_13', 'var_14', 'var_15', 'var_16', 'var_17', 'var_18', 'var_19', 'var_20', 'var_21', 'var_22', 'var_23', 'var_24', 'var_25', 'var_26', 'var_27', 'var_28', 'var_29', 'var_30', 'var_31', 'var_32', 'var_33', 'var_34', 'var_35', 'var_36', 'var_37', 'var_38', 'var_39', 'var_40', 'var_41', 'var_42', 'var_43', 'var_44', 'var_45', 'var_46', 'var_47', 'var_48', 'var_49', 'var_50', 'var_51', 'var_52', 'var_53', 'var_54', 'var_55', 'var_56', 'var_57', 'var_58', 'var_59', 'var_60', 'var_61', 'var_62', 'var_63', 'var_64', 'var_65', 'var_66', 'var_67', 'var_68', 'var_69', 'var_70', 'var_71', 'var_72', 'var_73', 'var_74', 'var_75', 'var_76', 'var_7",
    "```json\n{\n    \"solution\": \"df.groupby('Branch')['Rating'].mean().nsmallest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['CustomerID', 'StockCode', 'InvoiceNo', 'InvoiceDate', 'Quantity']\nQuestion: Which product has been sold the most in a single invoice?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"invs = df.groupby('InvoiceNo')['Quantity'].sum().nlargest(1).index[0]; df.loc[df['InvoiceNo'] == invs, 'StockCode'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Country', 'CustomerID', 'InvoiceNo', 'InvoiceDate', 'Quantity']\nQuestion: Which country has the most sales?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Country')['Quantity'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']\nQuestion: What is the maximum value in the Adjusted Close column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Adj Close'].max()\"\n}\n```\n\nInput DataFrame columns: ['Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']\nQuestion: Is the max value in the Adjusted Close column more than the Adjusted Close value of the last row?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Adj Close'].max() > df.tail(1)['Adj Close'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Close', 'Volume']\nQuestion: How many days did the stock price go below its minimum value?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df.loc[df['Close'].gt(df['Close'].min())])\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Close', 'Volume']\nQuestion: How many days did",
    "```json\n{\n    \"solution\": \"df.groupby('Year_Month')['Review_ID'].nunique().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['customer_id', 'age', 'gender', 'membership_type', 'tenure', 'value', 'avg_num_photos', 'avg_num_videos', 'avg_rating', 'avg_days_per_visit', 'total_num_orders', 'total_amt_spent']\nQuestion: Who the most common membership type?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['membership_type'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Item_ID', 'Item_Name', 'Sales_Channel', 'Order_ID', 'Order_Date', 'Order_Region', 'Order_Country', 'Item_Region', 'Sales_Unit_Price', 'Sales_Total_Price', 'Discount_Amount', 'Shipping_Cost', 'Product_Profit', 'Returned']\nQuestion: What are the top 5 most common item names?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Item_Name'].value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate', 'UnitPrice', 'CustomerID', 'Country']\nQuestion: How many orders are there in total?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['InvoiceNo'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['customer_id', 'gender', 'age', 'occupation', 'zip_code', 'city', 'state']\nQuestion: What is the most common occupation?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['occupation'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['CustomerID', 'SeniorCitizen', 'Tenure', 'MonthlyCharges', 'TotalCharges', 'Churn', '",
    "```json\n{\n    \"solution\": \"df.groupby('Reviewer_Location')['Rating'].mean().nsmallest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Nino', 'Year', 'Month', 'Time', 'Region', 'Variable', 'Value']\nQuestion: How many regions have had an average value between 10 and 20?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return (df['Value'].between(10, 20)).sum()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Var1', 'Var2', 'Var3', 'Var4', 'Var5', 'Var6', 'Var7', 'Var8', 'Var9', 'Var10', 'Var11', 'Var12', 'Var13', 'Var14', 'Var15', 'Var16', 'Var17', 'Var18', 'Var19', 'Var20']\nQuestion: How many rows have the same value in all columns?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.count(axis=1).eq(20).sum()\"\n}\n```\n\nInput DataFrame columns: ['Date_of_Journey', 'Source', 'Destination', 'Route', 'Dep_Time', 'Arrival_Time', 'Duration', 'Total_Stops', 'Additional_Info', 'Price']\nQuestion: What are the 3 sources with the lowest average price?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Source')['Price'].mean().nsmallest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Seats', 'Max_Price', 'Cars', 'Min_Price', 'Fuel_Type', 'Seller_Type', 'Transmission', 'Owner']\nQuestion: What is the percentage of cars with less than 3 seats with a maximum price higher than 1000?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return (",
    "```json\n{\n    \"solution\": \"df['Review_ID'].loc[df['Rating'].isin(df['Rating'].value_counts().index[:5])].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Customer', 'Age', 'Gender', 'Total_Purchase', 'Frequency', 'Monetary', 'Time', 'Recency', 'Label']\nQuestion: Is there any outlier in the Monetary feature for the Cluster 0?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['Label'] == 'Cluster 0') & (df['Monetary'] > 200000)].empty\"\n}\n```\n\nInput DataFrame columns: ['message', 'label']\nQuestion: Is there any message with the word 'girlfriend' and 'boyfriend'?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['message'].str.contains('(girlfriend|boyfriend)', case=False).any()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'item_id', 'rating', 'timestamp']\nQuestion: Which movie got the highest mean rating?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['item_id'].loc[df.groupby('item_id')['rating'].transform('mean').idxmax()]\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'item_id', 'rating', 'timestamp']\nQuestion: Is there a movie with rating 1.0?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['rating'].eq(1.0).any()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'item_id', 'rating', 'timestamp']\nQuestion: Which movie got the highest number of ratings?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('item_id').size().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'item_id', 'rating', 'timestamp",
    "```json\n{\n    \"solution\": \"df.groupby('Year_Month')['Rating'].nlargest(4).groupby('Year_Month').agg(list).stack().reset_index().groupby('level_0').agg(list)['Rating'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Suburb', 'Address', 'Rooms', 'Type', 'Price', 'Method', 'SellerG', 'Date', 'Distance', 'Postcode', 'Bedroom2', 'Bathroom', 'Car', 'Landsize', 'BuildingArea', 'YearBuilt', 'CouncilArea', 'Lattitude', 'Longtitude', 'Regionname', 'Propertycount']\nQuestion: What is the average price per room type?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Type')['Price'].mean().mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'host_id', 'host_name', 'neighbourhood_group', 'neighbourhood', 'latitude', 'longitude', 'room_type', 'price', 'minimum_nights', 'number_of_reviews', 'last_review', 'reviews_per_month', 'calculated_host_listings_count', 'availability_365']\nQuestion: What is the price difference between entire room rentals and private room rentals?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['room_type'] != 'Entire home/apt']['price'].mode().iloc[0] - df[df['room_type'] == 'Entire home/apt']['price'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'host_id', 'host_name', 'neighbourhood_group', 'neighbourhood', 'latitude', 'longitude', 'room_type', 'price', 'minimum_nights', 'number_of_reviews', 'last_review', 'reviews_per_month', 'calculated_host_listings_count', 'availability_365']\nQuestion: Where do the most expensive Airbnb listings come from?\nExpected return type: category\n\nCode that calculates",
    "```json\n{\n    \"solution\": \"df[df['Reviewer_Location'] == 'Australia']['Rating'].nlargest(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'location', 'created_at', 'description', 'country', 'lat','lon','type','is_in_business', 'rating', 'review_count', 'price','distance']\nQuestion: What are the top 5 cities in the US with the most restaurants?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['country'] == 'United States', 'location'].value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings_Spouses Aboard', 'Parents_Children Aboard', 'Fare']\nQuestion: What is the average age of the survivors?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Survived'] == 1, 'Age'].mean()\"\n}\n```\n\nInput DataFrame columns: ['population', 'iso2', 'iso3', 'iso_numeric', 'fips', 'country', 'Admin2', 'Province_State', 'Country_Region', 'Lat', 'Long_', 'Combined_Key', 'Measure', 'Value', 'FootNote']\nQuestion: What are the number of US deaths caused by COVID-19 by county?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['country'] == 'United States') & (df['Measure'] == 'deaths'), 'Value'].sum()\"\n}\n```\n\nInput DataFrame columns: ['city', 'country', 'city_id', 'lat', 'lng', 'state_code', 'state_name', 'zip', 'zip_code', 'high_price', 'low_price', 'average_price', 'total_area', 'living_area', 'age']\nQuestion: What is the average age of Airbnb listings in St. Louis",
    "```json\n{\n    \"solution\": \"df[df['Branch'] == 'Disneyland_HongKong']['Rating'].nsmallest(2).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Title', 'Date', 'Hours', 'URL', 'Vid_URL', 'Description', 'language', 'Language', 'channel', 'related', 'Rating', 'View_Count', 'Like_Count', 'Dislike_Count', 'Comment_Count', 'Comments']\nQuestion: What is the maximum number of views counted for the video with title \"ESPN's SportsCenter - The Best Sports we Have in our Hands\"?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Title'] == \\\"ESPN's SportsCenter - The Best Sports we Have in our Hands\\\"][['View_Count']].max().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Short_Description', 'Command', 'Location', 'Category', 'Victim_Count', 'Incident_Date', 'Lat', 'Lng', 'Incident_Hour']\nQuestion: What is the maximum number of victims reported in a single incident?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Victim_Count'].max()\"\n}\n```\n\nInput DataFrame columns: ['Record_ID', 'Incident_Year', 'Incident_Month', 'Incident_Date', 'Incident_Hour', 'Light_Conditions', 'Day_of_Week', 'Police_District', 'Surface_Condition', 'Victim_Age', 'Victim_Gender', 'Victim_Race', 'Victim_Ethnicity', 'Victim_Descent', 'Premise_Description', 'Collision_Type', 'Collision_Role', 'Road_Surface_Conditions', 'Victim_Status', ' Investigation_Disposition', 'ID_1', 'ID_2', 'ID_3', 'ID_4']\nQuestion: What is the maximum age of a victim in a collision in a single incident?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Victim_Age",
    "```json\n{\n    \"solution\": \"df['lang'] == 'en'\"\n}\n```\n\nInput DataFrame columns: ['first_name', 'last_name', 'email', 'country', 'state', 'city', 'street_address']\nQuestion: Are all the emails in the form first.last@domain?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['email'].str.contains('@') and df['email'].str.contains('.')\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: Are all the tweets in English?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['lang'] == 'en'\"\n}\n```\n\nInput DataFrame columns: ['_id', 'event_id', 'block', 'page_id', 'step_name', 'user_id', 'collection', 'start_time', 'end_time', 'value', 'time', 'platform', 'version', 'dist', 'location', 'color_depth', 'screen_height', 'screen_width', 'ip_address', 'language', 'utc_offset', 'browser_version', 'browser_language', 'device_type', 'device_vendor', 'device_model', 'device_family', 'device_os', 'device_os_version', 'device_os_family', 'app_version', 'session_id', 'session_index', 'network_type', 'user_agent', 'user_agent_name', 'user_agent_version', 'user_agent_family', 'time_zone', 'x_axis', 'y_axis', 'coordinate_type', 'module_id', 'source_url', 'referrer_url', 'campaign_source_name', 'campaign_medium_name', 'campaign_name', 'campaign_keyword', 'campaign_content', 'network_country",
    "```json\n{\n    \"solution\": \"df['retweets'].gt(0).any()\"\n}\n```\n\nInput DataFrame columns: ['date', 'zscore_female_body_fat_percentage', 'zscore_male_body_fat_percentage', 'zscore_muscle_percentage', 'zscore_neck_circumference', 'zscore_height_meter', 'age', 'zscore_weight_kilogram', 'zscore_fat_free_weight_kilogram', 'zscore_pregnancy', 'bmi', 'bone_density', 'bmi_category', 'zscore_body_fat_percentage', 'zscore_triceps_skinfold_thickness', 'zscore_subscapular_skinfold_thickness', 'zscore_triceps_skinfold_thickness_mm', 'zscore_subscapular_skinfold_thickness_mm', 'zscore_mid_axilla_fat_free_mass', 'zscore_mid_axilla_fat_mass', 'zscore_mid_axilla_fat_mass_mm', 'zscore_mid_axilla_fat_free_mass_mm', 'zscore_mid_axilla_body_fat_percentage', 'zscore_adipose_tissue_percentage', 'zscore_subcutaneous_fat_percentage', 'zscore_visceral_fat_percentage', 'body_fat_percentage_category', 'muscle_percentage', 'muscle_mass', 'muscle_mass_mm', 'visceral_fat_mass', 'visceral_fat_mass_mm', 'subcutaneous_fat_mass', 'subcutaneous_fat_mass_mm', 'fat_free_mass', 'fat_free_mass_mm', 'weight_kg', 'weight_kg_category', 't_zscore_neck_circumference', 't_zscore_subscapular_skinfold_thickness', 't_zscore_mid_axilla_body_fat_percentage', 't_zscore_body_fat_percentage', 't_zscore_subcutaneous_fat_percentage', 't_zscore_fat_free_mass',",
    "```json\n{\n    \"solution\": \"df['retweets'].gt(10000).any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: Which tweet has the most retweets?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['retweets'].idxmax(), 'text']\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: Which tweet has the highest number of favorites?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['favorites'].idxmax(), 'text']\"\n}\n```\n\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: How many tweets were posted by the user with id: 40\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['author_id'] == 40,'text'].count()\"\n}\n```\n\nInput DataFrame columns:",
    "```json\n{\n    \"solution\": \"df['favorites'].gt(50000).any()\"\n}\n```\n\nInput DataFrame columns: ['pages_views', 'users_following', 'users_followers', 'timestamp', 'url', 'title', 'content', 'index']\nQuestion: What is the average number of followers for the most popular article?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['pages_views'].idxmax(), 'users_followers']\"\n}\n```\n\nInput DataFrame columns: ['timestamp', 'title', 'content', 'index', 'id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'favourites_count', 'retweet_count', 'location_code', 'in_reply_to_user_id', 'in_reply_to_status_id', 'in_reply_to_screen_name', 'source', 'user_id', 'user_name', 'user_screen_name', 'user_location', 'user_id_str', 'user_profile_image_url', 'user_description']\nQuestion: Which user has the most followers?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['user_followers_count'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'favourites_count', 'retweet_count', 'location_code', 'in_reply_to_user_id', 'in_reply_to_status_id', 'in_reply_to_screen_name', 'source',",
    "```json\n{\n    \"solution\": \"df['author_id'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: How many tweets are there that mention any of the following items? ['Fox News', 'CNN', 'New York Times', 'Washington Post', 'New York Post', 'Wall Street Journal']\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['mention_names'].str.contains('|'.join(['Fox News', 'CNN', 'New York Times', 'Washington Post', 'New York Post', 'Wall Street Journal'])).sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: Which author has the most retweets and favorites?\nExpected return type: list[string]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.nlargest(1, ['retweets', 'favorites'])[['author_id', 'author_name']].values.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', '",
    "```json\n{\n    \"solution\": \"df['retweets'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'user_id', 'user_name', 'user_screen_name', 'user_avatar', 'user_location', 'user_description', 'user_url', 'user_join_date', 'user_followers', 'user_following', 'user_tweets', 'user_likes', 'user_lists', 'user_favs', 'slug', 'username', 'name', 'description', 'url', 'join_date', 'followers', 'following', 'tweets', 'likes', 'lists', 'favs', 'verified', 'lang', 'location', 'geo', 'protected', 'user_mention_ids', 'user_mention_names', 'user_rp_user_id', 'user_rp_user_name', 'user_rp_user_screen_name', 'user_rp_user_avatar', 'user_rp_user_location', 'user_rp_user_description', 'user_rp_user_url', 'user_rp_user_join_date', 'user_rp_user_followers', 'user_rp_user_following', 'user_rp_user_tweets', 'user_rp_user_likes', 'user_rp_user_lists', 'user_rp_user_favs', 'user_rp_user_verified', 'user_rp_user_lang', 'user_rp_user_location', 'user_rp_user_geo', 'user_rp_user_protected', 'user_rp_user_mention_ids', 'user_rp_user_mention_names', 'user_rp_slug', 'user_rp_username', 'user_rp_name', 'user_rp_description', 'user_rp_url', 'user_rp_join_date', 'user_rp_followers', 'user_rp_following', 'user_rp_tweets', 'user_rp_likes', 'user_rp_lists', 'user_rp_favs', 'user_rp_verified', 'user_rp_lang', 'user_rp_location', 'user_rp_geo', 'user_rp_protected', 'media', 'user_media_",
    "```json\n{\n    \"solution\": \"df['favorites'].max()\"\n}\n```\n\nInput DataFrame columns: ['Time', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings', 'Parents', 'Fare', 'Survived']\nQuestion: What is the most frequent age of survivors?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Age'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Pclass', 'Sex', 'Age', 'Siblings', 'Parents', 'Fare', 'Survived']\nQuestion: Which title has the highest percentage of survivors?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Survived'] == 1, 'Sex'].value_counts(normalize=True).idxmax()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings', 'Parents', 'Fare']\nQuestion: What is the average fare paid by survivors?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Fare'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Pclass', 'Sex', 'Age', 'Siblings', 'Parents', 'Fare', 'Survived']\nQuestion: How many survivors are female?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Survived'] == 1]['Sex'].value_counts()['female']\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'Siblings', 'Parents', 'Fare']\nQuestion: What is the minimum fare paid by non-survivors?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"",
    "```json\n{\n    \"solution\": \"df['date'].dt.year.eq(2018).sum()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Sex', 'ChestPainType', 'RestingBP', 'Cholesterol', 'FastingBS', 'RestingECG', 'MaxHR', 'ExerciseAngina', 'Oldpeak', 'ST_Slope', 'HeartDisease']\nQuestion: Is there a person with a fasting blood sugar level > 120?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['FastingBS'].gt(120).any()\"\n}\n```\n\nInput DataFrame columns: ['name', 'sex', 'length', 'diameter', 'height_mm', 'weight_g', 'species', 'island', 'habitat']\nQuestion: What is the most common species?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['species'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'year', 'imdb_id', 'popularity', 'budget', 'revenue', 'original_language', 'genre', 'director', 'cast', 'overview', 'runtime', 'first_air_date', 'last_air_date', 'poster_path', 'backdrop_path', 'original_title', 'adult', 'vote_average', 'vote_count', 'genreIds', 'origin_country', 'overview', 'popularity', 'vote_count', 'video', 'poster_path', 'id', 'imdb_id', 'vote_average', 'vote_count', 'genreIds', 'type', 'poster_path', 'release_date']\nQuestion: How many films are there with a release date before 1990?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['release_date'].dt.year.lt(1990).sum()\"\n}\n```\n\nInput DataFrame columns: ['iso', 'name', 'sortname', 'capacity', 'population', 'area', 'region', 'sub",
    "```json\n{\n    \"solution\": \"df['author_name'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['user_id', 'user_name', 'sex', 'birthday', 'status_count', 'follower_count', 'following_count', 'category_name', 'likes', 'liked_count', 'category_code', 'post_comments', 'comments', 'post_likes', 'comments_count', 'post_time', 'post_images', 'post_videos', 'post_link', 'post_id', 'post_text', 'share_count', 'post_type', 'post_user_id', 'post_user_name', 'post_user_avatar']\nQuestion: Which user has the most followers?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['follower_count'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'user_id', 'user_name', 'body', 'emoji', 'replied_to_id', 'replied_to_user_id', 'replied_to_user_name', 'comments_count', 'likes_count', 'retweets_count', 'created_at', 'is_reply', 'is_retweet', 'is_quote_reply']\nQuestion: Which user has posted the most emoji?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['emoji'].dropna().value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Label', 'Features']\nQuestion: Split the Features column into a new DataFrame column with 9 columns.\nExpected return type: DataFrame\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Features'].str.split(',', expand=True)\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Name', 'Sex', 'Age', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: Which name occurs the most in the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Name'].value_",
    "```json\n{\n    \"solution\": \"df['favorites'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'date', 'timezone', 'date_gmt', 'weekday', 'type', 'status', 'business_status', 'business_name', 'address', 'city', 'state', 'zip', 'country', 'phone', 'url', 'display_phone', 'lat', 'long', 'location_type', 'hours', 'photos', 'menu_url', 'categories', 'main_category', 'slug', 'cross_streets', 'hours_display', 'hours_display_short', 'parking']\nQuestion: Which restaurant have the most hours of operation?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['hours'].str.split('\u2013').str[1].str.split(' ').str[0].astype(int).idxmax()\"\n}\n```\n\nInput DataFrame columns: ['user_name', 'user_id', 'user_location', 'gender', 'screen_name', 'description', 'profile_link', 'profile_image', 'verified', 'followers_count', 'friends_count', 'listed_count', 'created_at', 'favourites_count', 'statuses_count', 'lang']\nQuestion: Which user has the most friends?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['friends_count'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['name', 'id', 'url', 'description', 'verified', 'followers_count', 'friends_count', 'listed_count', 'favourites_count', 'statuses_count', 'created_at', 'location', 'default_profile', 'default_profile_image', 'profile_image_url', 'profile_image_url_https', 'profile_banner_url', 'profile_background_image_url', 'profile_background_image_url_https', 'profile_background_tile', 'profile_link_color', 'profile_sidebar_border_color', 'profile_sidebar_fill_color', 'profile_text_color', 'profile_use_background_image', 'has_extended",
    "```json\n{\n    \"solution\": \"df.loc[df['retweets'].idxmax(),'lang']\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'index', 'election_id', 'access_level', 'office_detail', 'race_id', 'office_id', 'office_detail_id', 'office_count', 'office_name', 'candidate_id', 'candidate_name', 'candidate_name_full', 'candidate_email', 'candidate_party_id', 'candidate_party_name', 'candidate_public_id', 'candidate_order', 'candidate_election_id', 'candidate_is_incumbent', 'office_district_id', 'office_district_name', 'total_votes']\nQuestion: Which office district has the most candidates (i.e. how many canididates run for office)?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['office_district_name'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['county', 'district_id', 'district_name', 'candidate_id', 'candidate_name', 'election_id', 'election_name', 'election_date', 'election_type', 'office_id', 'office_name', 'office_type', 'office_district_id', 'office_district_name', 'candidate_party_id', 'candidate_party_name', 'candidate_email', 'candidate_public_id', 'candidate_order', 'candidate_election_id', 'candidate_is_incumbent']\nQuestion: Which office district has the most candidates (i.e. how many canididates run for office)?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['office_district_name'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['district_id', 'district_name', 'candidate_id', 'candidate_name', 'election_id', 'election_name', 'election_date', 'election_type', 'office_id', 'office_name', 'office_type', 'office_district_id', 'office",
    "```json\n{\n    \"solution\": \"df['lang'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['User_ID', 'Book-Title', 'Book-Rating']\nQuestion: What is the maximum rating of book-titled 'The Lord of the Rings'?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Book-Title'].eq('The Lord of the Rings'), 'Book-Rating'].max()\"\n}\n```\n\nInput DataFrame columns: ['RNO', 'Location', 'Time', 'Description', 'WindSpeedMPH', 'WindGustMPH', 'Humidity', 'TemperatureF', 'PressureIn', 'VisibilityMPH', 'WindDirDegrees', 'icon']\nQuestion: What is the highest wind speed recorded during the period 1-28th June 2017?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Time'].between('2017-06-01', '2017-06-28'), 'WindSpeedMPH'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'user', 'average_rating', 'year_of_release', 'game_title', 'genre', 'na_sales', 'eu_sales', 'jp_sales', 'other_sales', 'critic_score', 'user_score', 'rating']\nQuestion: How many games were released in the year 2008?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['year_of_release'].eq('2008'), 'game_title'].count()\"\n}\n```\n\nInput DataFrame columns: ['index', 'review', 'reviewBody', 'reviewerName', 'helpful', 'submissionTime', 'rating', 'language', 'review_summary']\nQuestion: What is the average number of words used in the reviews?\nExpected return type: float\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['review'].str.split(expand=True).",
    "```json\n{\n    \"solution\": \"df['author_handler'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class']\nQuestion: Which of the three species has the highest petal width?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['petal_width'] == df['petal_width'].max()]['class'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['feature', 'property_type', 'price']\nQuestion: Which property type has the highest price on average?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('property_type')['price'].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'username', 'name', 'verified', 'follower_count', 'following_count', 'posts', 'following', 'muting', 'blocking', 'favorite_count', 'text', 'hashtags', 'likes', 'replies_count', 'video_views', 'created_at', 'language', 'timezone', 'utc_offset', 'timestamp', 'timestamp_ms', 'urls', 'user_mentions', 'photos', 'video', 'thumbnail', 'retweet_count', 'quote_count', 'reply_to_status_id', 'reply_to_user_id', 'reply_to_screen_name', 'retweeted_id', 'retweeted_user_id', 'retweeted_screen_name', 'is_quote_status', 'urls_expanded_url', 'symbols', 'did_reply', 'did_retweet', 'did_favorite', 'did_quote_tweet', 'quote_id', 'quote_user_id', 'quote_user_name', 'quote_text']\nQuestion: Of all the retweets that have been made, how many have been favorited?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['did_favorite'].sum()\"\n}\n```\n\nInput",
    "```json\n{\n    \"solution\": \"df['lang'].value_counts().nsmallest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: How many times has the same author (author_id) tweeted more than once?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.groupby('author_id').filter(lambda x: len(x) > 1)['author_id'].count()\"\n}\n```\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the 3 most mentioned tweets with number of retweets?\nExpected return type: list[tuple(text, retweets)]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"tuples = []\\nfor x in df.nlargest(3, 'retweets')['text']:\\n    tuples.append((x, df[df['text'] == x]['retweets'].max()))\\nreturn tuples\"\n}\n```\n\nInput DataFrame columns: ['original_title', 'overview', 'tagline', 'belongs_to_collection', 'genres', 'popularity', 'title', 'poster_path', 'id', 'imdb_id', 'status', 'runtime', 'spoken_languages', 'original_language', 'release_date', 'budget', 'revenue', 'vote_count', 'vote_average', 'release_year', 'budget_",
    "```json\n{\n    \"solution\": \"df['mention_ids'].explode().value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'age', 'city', 'state', 'zip', 'latitude', 'longitude', 'category', 'description', 'url', 'phone', 'date', 'image_url', 'website_url', 'neighborhood_overview', 'notes', 'transit', 'access', 'childcare', 'smoking', 'atmosphere', 'alcohol', 'price', 'price_range', 'izza_bar', 'karaoke', 'live_music', 'dj', 'video_games', 'pool', 'accessibility', 'wifi', 'ac', 'bike_rental', 'public_transit', 'shopping', 'splice', 'pets', 'outdoor_seating', 'credit_cards', 'good_for_kids', 'good_for_groups', 'drive_thru', 'variety', 'ambience_casual', 'ambience_divey', 'ambience_classy', 'ambience_romantic', 'ambience_intimate', 'ambience_hipster', 'ambience_touristy', 'ambience_trendy', 'ambience_upscale', 'ambience_casual', 'ambience_hipster', 'ambience_classy', 'ambience_cafe', 'noise_level_average', 'noise_level_loud', 'noise_level_quiet', 'noise_level_very_loud', 'noise_level_very_quiet', 'attire_casual', 'attire_dressy', 'attire_formal', 'attire_plain', 'attire_orkney', 'attire_sunday_cocktail', 'attire_business', 'attire_formal', 'attire_plain', 'attire_sunday_cocktail', 'attire_business', 'attire_casual', 'attire_dressy', 'attire_formal', 'attire_plain', 'attire_sunday_cocktail', 'attire_business', 'attire_casual', 'attire_dressy', 'attire_formal', 'attire",
    "```json\n{\n    \"solution\": \"df['author_name'].value_counts().nsmallest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['name', 'category', 'category_parent', 'country_code', 'country', 'state_code', 'state', 'market_cap_usd', 'employees', 'founded_at', 'founder', 'total_money_raised', 'total_money_raised_usd', 'company_url', 'twitter_url', 'number_of_employees', 'overview', 'products_and_services', 'category_list', 'ipo', 'headquarters_address', 'headquarters_city', 'headquarters_state', 'headquarters_zip', 'headquarters_country']\nQuestion: What is the average number of twitter_url per founder?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('founder')['twitter_url'].count().mean().round(2)\"\n}\n```\n\nInput DataFrame columns: ['latitude', 'longitude', 'name', 'alias', 'address', 'city', 'country_code', 'state_code', 'postal_code', 'id', 'cc1', 'hotel_chain', 'region_id', 'type', 'rating', 'price_level', 'parking_type', 'free_parking', 'wheelchair', 'good_for_kids', 'stars', 'longest_stay', '1_month_ago', '2_month_ago', '3_month_ago', '4_month_ago', '5_month_ago', 'last_updated']\nQuestion: What is the total number of hotels in United States?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['country_code'] == 'USA'])\"\n}\n```\n\nInput DataFrame columns: ['latitude', 'longitude', 'name', 'alias', 'address', 'city', 'country_code', 'state_code', 'postal_code', 'id', 'cc1', 'hotel_chain', 'region_id', 'type', 'rating",
    "```json\n{\n    \"solution\": \"df['retweets'].nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'created_at', 'source', 'full_text', 'truncated', 'display_text_range', 'entities', 'extended_entities', 'favorite_count', 'favorited', 'geo', 'possibly_sensitive', 'possibly_sensitive_appealable', 'lang', 'retweet_count', 'place', 'contributors', 'coordinates', 'user', 'is_quote_status', 'quoted_status', 'quoted_status_id', 'quoted_status_id_str', 'quoted_status_permalink', 'quoted_status_url', 'quoted_status_expanded_url', 'quoted_status_created_at', 'quoted_status_author_id', 'quoted_status_author_id_str', 'quoted_status_author_name', 'quoted_status_author_screen_name', 'quoted_status_author_description', 'quoted_status_author_url', 'quoted_status_author_entities', 'quoted_status_author_protected', 'quoted_status_author_followers_count', 'quoted_status_author_friends_count', 'quoted_status_author_listed_count', 'quoted_status_author_created_at', 'quoted_status_author_geo_enabled', 'quoted_status_author_verified', 'quoted_status_author_lang', 'quoted_status_place_id', 'quoted_status_place_url', 'quoted_status_description', 'quoted_status_country', 'quoted_status_country_code', 'quoted_status_place_type', 'quoted_status_url', 'quoted_status_ALLOW_TWEET', 'quoted_status_ALLOW_QUOTE_TWEET_URL', 'quoted_status_ALLOW_REPLY_TWEET_URL', 'quoted_status_IS_QUOTE_TWEET', 'quoted_status_IN_REPLY_TO_USER', 'quoted_status_IN_REPLY_TO_SCREEN_NAME', 'quoted_status_IS_TRASH', 'quoted_status_IS_RETWEET_STATUS', 'quoted_status_IS_RETWEET_",
    "```json\n{\n    \"solution\": \"df['favorites'].nsmallest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'user_id', 'user_name', 'user_handler', 'lang', 'text', 'date', 'retweets', 'favorites', 'links_first', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: What are the top 4 tweet IDs in terms of favorite count?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['favorites'].nlargest(4).index.tolist()\"\n}\n```\n```\nNote: You don't need to write anything extra for the pandas logic. All you need to do is to replace the word \"df\" with the actual dataframe variable\n```\n\n### 2. Continuous problem (60 pts)\nYou are an expert data scientist working at a large company. You have been tasked with building a model that predicts the net worth of people who have been identified in your own dataset. The dataset contains the following fields:\n\nField Name\tField Description\ncategory\tThe category of the individual\nselfMade\tWhether or not they are self-made (boolean)\ncity\tThe city they are in\nstate\tThe state they are in\ncountry\tThe country they are in\nbirthDate\tThe individuals' birth date\nage\tThe individuals' age\nsource\tHow they were identified (web site, TV, etc.)\ntitle\tThe individuals' title\nphilanthropyScore\tThe individuals' philanthropy score\nfinalWorth\tThe individuals' final worth\n\nFor this question you will need to use the model from the regression model question. The dataset you will train and test will be provided to you in the files `finalPredictionDataTrain.csv` and `finalPredictionDataTest.csv`. \n\nThe solution should be written as a model that takes a pandas DataFrame as input and return the predicted net worth. Note that the train and test files are separated. In order to create the model, you will need to use `pd.read_csv()` in combination with the `pd.concat()` method to create one file that contains both train",
    "```json\n{\n    \"solution\": \"df['favorites'].nlargest(6).tolist()\"\n}\n```\n\n\n### Source data link\n\n- Chicago Crime Data: https://data.cityofchicago.org/Public-Safety/Crimes-2001-to-present/ijzp-q8t2\n- Kaggle: https://www.kaggle.com/c/sberbank-russian-housing-market/data?select=test.csv\n- Kaggle: https://www.kaggle.com/c/sberbank-russian-housing-market/data?select=train.csv\n- Airbnb: http://insideairbnb.com/get-the-data.html\n- Spotify: https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/\n- NBA: https://www.kaggle.com/drgilermo/nba-players-data\n- Covid-19 Infections in Instagram: https://www.kaggle.com/ialfin/covid19-infections-in-instagram\n- CDC Weekly Report: https://www.kaggle.com/cdc/behavioral-risk-factor-surveillance-system\n- T-Mobile USA: https://www.kaggle.com/tmobile/t-mobile-us-custom-data-insights-competition\n- 5000 Galactic Suns: https://www.kaggle.com/davidxchen/5000-galactic-suns\n- 911 Calls: https://www.kaggle.com/kaggle/911-calls-dataset\n- Airbnb: https://www.kaggle.com/jefflirong/kaggle-airbnb-train-data\n- 2016 U.S. Presidential Debates: https://www.kaggle.com/rounakbanik/2016-us-election-debates\n- Citi Bike Bike Sharing Data: https://www.citibikenyc.com/system-data\n- Goodreads: https://www.kaggle.com/jealousleopard/goodreadsbooks",
    "```json\n{\n    \"solution\": \"df['retweets'].sort_values().head(3).tolist()\"\n}\n```\n\nInput DataFrame columns: ['surgery', 'breathes_air', 'breathes_liquid', 'breathes_water', 'breathes_fire', 'breathes_salt', 'breathes_lunar_light', 'breathes_moonlight', 'breathes_sunlight', 'breathes_hot_air', 'breathes_hot_water', 'breathes_electricity', 'breathes_blood', 'breathes_frozen_water', 'breathes_steam', 'breathes_gas', 'breathes_hydrogen', 'breathes_chlorine', 'breathes_nitrous_oxide', 'breathes_carbon_dioxide', 'breathes_nitrogen', 'breathes_oxygen', 'breathes_sulfur', 'breathes_exhaust', 'breathes_helium', 'breathes_hydrogen_peroxide', 'breathes_mercury', 'breathes_sugars', 'breathes_lava', 'breathes_ignition', 'breathes_plasma', 'breathes_glass', 'breathes_solid_mucus', 'breathes_lavender', 'breathes_fire_fumes', 'breathes_puke', 'breathes_feces', 'breathes_rotting_flesh', 'breathes_dung', 'breathes_sweat', 'breathes_dripping_splash', 'breathes_mist', 'breathes_urine', 'breathes_vomit', 'breathes_blood_serum', 'breathes_bile', 'breathes_spit', 'breathes_saliva', 'breathes_piss', 'breathes_bile_juice', 'breathes_mucus', 'breathes_urine_juice', 'breathes_tea', 'breathes_wine', 'breathes_",
    "```json\n{\n    \"solution\": \"return df['is_organization'].any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the top 3 most active communities in LinkedIn?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['community'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Which 3 communities have the highest page ranking?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['community'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Which 3 organizations have the highest number of connections?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['is_organization'] == True]['community'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', '",
    "```json\n{\n    \"solution\": \"df['is_organization'].eq('no').any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the host with the most followers?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['gx_link_should'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['temp', 'tmin', 'tmax', 'dewpt', 'hum', 'wspd', 'wdir', 'wgust', 'precip', 'pres', 'vis', 'tmax_measured', 'tmin_measured', 'date']\nQuestion: Which temperature (in degrees celsius) was not measured?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['tmax_measured'].eq(False).sum()\"\n}\n```\n\nInput DataFrame columns: ['Temp', 'Dew', 'Hum', 'WindSpd', 'Visibility', 'StnPressure', 'WindDir', 'Hmdx', 'Hmdy', 'Precip', 'WindGustSpd', 'WindGustDir', 'conditions', 'Sunrise', 'Sunset', 'date']\nQuestion: How many dates were not recorded?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['date'].isna().sum()\"\n}\n```\n\nInput DataFrame columns: ['atom_id', 'atom_type', 'title', 'pubdate', 'link', 'description', 'lat', 'lon', 'tags', 'comments', 'people']\nQuestion: How many unique people are included in this dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['people'].explode().nunique()\"\n}\n```\n\nInput DataFrame columns: ['atom_id',",
    "```json\n{\n    \"solution\": \"df['pic'].eq('').any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the most common name for an organization?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['is_organization']].groupby('name').size().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Can you calculate the average page rank by community?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('community')['page_rank_norm'].mean().mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Can you calculate the maximum page rank by community?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('community')['page_rank_norm'].max().max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']",
    "```json\n{\n    \"solution\": \"return df['weight'].gt(500).any()\"\n}\n```\n\nInput DataFrame columns: ['link', 'start_time', 'end_time', 'duration', 'link_content', 'link_label', 'link_category', 'link_type', 'link_weight', 'country', 'x', 'y', 'source', 'target']\nQuestion: Which target in the network has the highest number of edges_out?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['target'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['total_amount', 'total_amount_currency', 'merchant_id', 'merchant_category_id', 'merchant_group_id', 'subsector_id', 'purchase_amount', 'merchant_title', 'merchant_subsector_title', 'purchase_date', 'month_lag', 'purchase_date_week', 'purchase_date_year', 'purchase_date_dayofweek', 'purchase_date_hour', 'purchase_date_day', 'purchase_date_month', 'purchase_date_year_month', 'authorized_flag', 'card_id', 'city_id', 'state_id', 'country_id', 'category_1', 'category_2', 'category_3', 'merchant_category_name', 'merchant_category_name_1', 'merchant_category_name_2', 'subsector_1', 'subsector_2', 'purchase_amount_per_card_id', 'month_diff', 'day_diff', 'month_diff_per_card_id', 'week_diff', 'week_diff_per_card_id', 'day_diff_per_card_id', 'week_diff_per_card_id', 'day_diff_per_card_id', 'week_diff_per_card_id', 'card_id_total', 'purchase_amount_sum', 'purchase_amount_sum_per_card_id', 'purchase_amount_mean', 'purchase_amount_mean_per_card_id', 'purchase_amount_count', 'purchase_amount_count_per_",
    "```json\n{\n    \"solution\": \"len(df['community'].unique())\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Which community has the most number of ties/links?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['community'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['page_id', 'title', 'is_primary', 'published_at', 'community_category', '# of ties', 'page_rank', 'weight', 'x', 'y', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should', 'location', 'topic', 'category', 'hashtag', 'fandom_1', 'fandom_2', 'fandom_3', 'fandom_4', 'fandom_5', 'fandom_6', 'fandom_7']\nQuestion: What is the top 5 most active communities?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['community'].value_counts().nlargest(5).index.tolist()\"\n}\n```#\n#\n# This is the first line of a comment\n# This can be used to temporarily disable the line of code being tested.\n# \n# This is a multiline comment, you can write as much as you want\n# This can be used to temporarily disable the whole function being tested.\n#\n# Examples of such a comment are below.\n#\n\n\n# Comment to disable line of code\n# solution = 1\n\n# Comment to disable the whole function\ndef solution(input_data, *args, **kwargs):\n    return False\n\n\n## Code that calculates the answer:\n\"\"\"\n{\n    \"solution\": \"\"\n}\n\"\"\"#\n#\n# This is the first line",
    "```json\n{\n    \"solution\": \"df['page_rank_norm'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Year', 'Month', 'Total_Premium', 'Count_Premium', 'Month_Premium_Amount', 'Avg_Premium', 'Count_Insured', 'Month_Insured_Amount', 'Avg_Insured_Amount', 'Count_Claim', 'Month_Claim_Amount', 'Avg_Claim_Amount', 'Max_Claim_Amount']\nQuestion: Which month has the highest number of claims?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Count_Claim'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: How many customers have an income lower than the median income?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Income'].lt(df['Income'].median()).sum()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'Unnamed: 1', 'a', 'b', 'c', 'd', 'e']\nQuestion: Is there an 'e' value that is the same as the 'b' value?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['b'] == df['e'].any()\"\n}\n```\n\nInput DataFrame columns: ['a', 'b', 'c', 'd', 'e']\nQuestion: Is there a value that",
    "```json\n{\n    \"solution\": \"df['weight'].max()\"\n}\n```\n\nInput DataFrame columns: ['name', 'id', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the maximum page rank?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['page_rank_norm'].max()\"\n}\n```\n\nInput DataFrame columns: ['content']\nQuestion: What are the most common 3 words in the `content`?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['content'].str.lower().str.findall(r'\\\\w{3,}').explode().value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the top 10 organizations with the highest page rank?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['is_organization'] == True]['page_rank_norm'].nlargest(10).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Which 2 locations have the biggest weight?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\":",
    "```json\n{\n    \"solution\": \"return sum(df['community'] == '16744206')\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: How many entities are organization?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return sum(df['is_organization'] == True)\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the sum of the page_rank_norm of entities?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['page_rank_norm'].sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the sum of the page_rank_norm of entities with a community identifier of 26352643?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.loc[df['community'] == 26352643, 'page_rank_norm'].sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx",
    "```json\n{\n    \"solution\": \"df['name'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['DATE', 'PRCP', 'SNWD', 'SNOW', 'TMAX', 'TMIN', 'TOBS', 'WESF', 'WSF2', 'WT01', 'WT02', 'WT03', 'WT04', 'WT05', 'WT06', 'WT08', 'STATION']\nQuestion: What is the most frequent precipitation reason?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['WESF'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['iata', 'name', 'continent', 'iso_country', 'iso_region', 'municipality', ' gps_code', 'iata_code', 'local_code', 'coordinates', 'year', 'latitude', 'longitude', 'elevation_ft', 'continent_name', 'timezone', 'utc_offset', 'utc_offset_hour_minute', 'timezone_id', 'type', 'cover']\nQuestion: How many times was Denver airport in the top 10 shortest list?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['iata'].isin(df['iata'].value_counts(ascending=True).head(10).index.tolist())]['iata'].value_counts())\"\n}\n```\n\nInput DataFrame columns: ['BX', 'BY', 'Borough', 'Lot', 'Block', 'Lot_Type', 'Block_Lot', 'Street_Name', 'From_Street', 'To_Street', 'House_Number', 'Zip_Code', 'Street_Side', 'On_Street', 'Cross_Street_1', 'Cross_Street_2', 'Intersection_Street_1', 'Intersection_Street_2', 'Location', 'X_Coord', 'Y_Coord', 'Latitude', 'Longitude', 'Latitude_Longitude', 'Location_1', 'Zip_Code_1', 'Address']\nQuestion: How many apartment buildings are located in the Bronx?",
    "```json\n{\n    \"solution\": \"df['page_rank_norm'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Which entity has the highest weight?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['weight'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: How many entities have a page rank greater than 1?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['page_rank_norm'].gt(1).sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: How many entities have a page rank less than 0.25?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['page_rank_norm'].lt(0.25).sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should', 'gx_link_target_",
    "```json\n{\n    \"solution\": \"df['pic'].iloc[df['weight'].idxmax()]\"\n}\n```\n\nInput DataFrame columns: ['event_id', 'event_name', 'event_name_length', 'event_type', 'event_date', 'event_date_month', 'event_date_year', 'event_year', 'event_month', 'event_day', 'gender', 'group_1', 'group_2', 'country', 'region', 'city', 'city_pop', 'us_state', 'us_state_pop', 'drla_region', 'drla_region_pop', 'ethnic_group', 'ethnic_group_pop', 'religion', 'religion_pop', 'industry_sect', 'industry_sect_pop', 'type_of_program', 'type_of_program_pop', 'pop_served', 'train_disc', 'use_disc', 'disc_pop', 'voting_18', 'voting_18_pop', 'voting_18_perc', 'voting_18_rate', 'voting_18_rate_pop', 'voting_18_rate_perc', 'voting_21', 'voting_21_pop', 'voting_21_perc', 'voting_21_rate', 'voting_21_rate_pop', 'voting_21_rate_perc']\nQuestion: What are the top 5 US states with the highest number of people who voted? (Do not include the State with no votes)\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.query('voting_21_rate_pop > 0')['us_state'].value_counts(True).sort_values(ascending=False).head().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['state', 'year', 'month', 'births']\nQuestion: What are the top 10 most common names during the 1994-95 birth month?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"",
    "```json\n{\n    \"solution\": \"df['y'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['node', 'source', 'relation', 'target', 'weight', 'source_rank', 'target_rank', 'max_moment', 'min_moment', 'time_factor', 'weight_factor']\nQuestion: Which source node with the highest degree has the highest max_moment?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('source')['weight'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['date', 'price', 'time', 'country', 'store_id', 'product_id', 'quantity']\nQuestion: What was the amount of revenue when you sold one product per day?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['price'].mul(df['quantity']).sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'x', 'y']\nQuestion: Which entity has the highest x-coordinate?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['x'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion\nQuestion: Which entity has the highest weight?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['weight'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['node', 'source', 'relation', 'target', 'weight', 'source_rank', 'target_rank', 'max_moment', 'min_moment', 'time_factor', 'weight_factor']\nQuestion: Which target node with the highest target_rank has the highest source_rank?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby",
    "```json\n{\n    \"solution\": \"df['name'].sort_values(ascending=False).head(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['year', 'column', 'ID_team', 'team_name', 'winner', 'winner_nation', 'winner_name', 'winner_nat', 'loser', 'loser_name', 'loser_nation', 'loser_nat', 'round', 'tournament', 'city', 'country', 'host', 'surface', 'date', 'winner_rank', 'loser_rank']\nQuestion: What is the heighest rank of the losers in the sumo wrestling world?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['loser_rank'].max()\"\n}\n```\n\nInput DataFrame columns: ['year', 'country_id', 'code', 'code3', 'name', 'continent', 'area_km2', 'population', 'life_expectancy', 'gni_per_capita', 'gni_total', 'gni_date', 'gni_rank', 'currencies', 'languages', 'capital_city', 'city_amount', 'region', 'sub_region', 'world_4region', 'world_6region', 'lat', 'lng', 'it_continent_name', 'it_continent_id', 'it_region_name', 'it_region_id', 'it_sub_region_name', 'it_sub_region_id', 'it_world_4region_name', 'it_world_4region_id', 'it_world_6region_name', 'it_world_6region_id']\nQuestion: Which country has the highest life expectancy?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['name'].iloc[np.argmax(df['life_expectancy'])]\"\n}\n```\n\nInput DataFrame columns: ['finished_at', 'created_at', 'club_id', 'player_id', 'status', 'first_name', 'last_name', 'club_name', 'club_id_full', 'birth",
    "```json\n{\n    \"solution\": \"df['name'].value_counts().nsmallest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['target_id', 'target_id_type', 'lat', 'lng', 'last_update', 'confidence', 'num_reviews']\nQuestion: What longitude has the most number of reviews?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['lng'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['user_name', 'id', 'review_id', 'start_date', 'start_date__2', 'end_date', 'end_date__2', 'created_date', 'title', 'text', 'review_source', 'country', 'language', 'likes', 'product_id', 'product_parent', 'product_title', 'star_rating', 'helpful_votes', 'total_votes', 'vine', 'verified_purchase', 'review_headline', 'review_body', 'customer_id', 'product_category', 'marketplace', 'product_group', 'product_group_name', 'product_category_name', 'product_category_parent', 'product_category_tree', 'product_category_of_product']\nQuestion: How many percent of all reviews were written by verified users?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"round(df['verified_purchase'].value_counts(normalize=True).loc['True'], 2)\"\n}\n```\n\n```python\nimport pandas as pd\nimport numpy as np\nimport json\n\npd.options.mode.chained_assignment = None #for ignoring future warnings\n\nwith open('data/exercise1.json') as f:\n    json_data = json.load(f)\n\n\ndef solution_exists(solution):\n    return solution is not None\n\n\ndef solution_contains_numbers(solution):\n    return any([any(i.isdigit() for i in e) for e in solution.split(\" \")])\n\n\ndef solution_contains_column_names(solution, df):\n    return all([column in df.columns for column in solution.split",
    "```json\n{\n    \"solution\": \"df.nlargest(4, 'x')[\"name\"].tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the top 4 entities with the smallest y-coordinates?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.nsmallest(4, 'y')[\"name\"].tolist()\"\n}\n```\n\nInput DataFrame columns: ['title', 'date', 'author', 'date', 'category', 'tags', 'content', 'read', 'likes', 'np_scores', 'np_scores_pos', 'np_scores_neg', 'np_scores_neu', 'np_sentiment', 'np_sentiment_confidence', 'np_sentiment_polarity', 'np_sentiment_subjectivity', 'entity_count', 'artist_count', 'genre_count', 'opening_theme', 'opening_theme_count', 'top_1_count', 'top_2_count', 'top_3_count', 'top_4_count', 'top_5_count', 'top_6_count', 'top_7_count', 'top_8_count', 'top_9_count', 'top_10_count', 'top_11_count', 'top_12_count', 'top_13_count', 'top_14_count', 'top_15_count', 'top_16_count', 'top_17_count', 'top_18_count', 'top_19_count', 'top_20_count', 'top_21_count', 'top_22_count', 'top_23_count', 'top_24_count', 'top_25_count', 'top_26_count', 'top_27_count', 'top_28_count', 'top",
    "```json\n{\n    \"solution\": \"df.sort_values('y')[:3]['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'uid', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: List the 3 most influential entities that are organizations?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['is_organization'].where(df['community'] == 'influence').value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'uid', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Are there any organizations that are connected with influence?\nExpected type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['community'].eq('influence').any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'uid', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Which organization forms a clique of 3 or more entities?\nExpected type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('community').filter(lambda g: len(g) >= 3)['uid'].drop_duplicates().count()\"\n}\n```\n\nInput DataFrame columns: ['q1', 'q2', 'q3', 'q4', 'q5', 'q6', 'q7', 'q8', '",
    "```json\n{\n    \"solution\": \"df['id'].nlargest(5).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What is the maximum weight value that exists in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['weight'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'pic', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: What are the top 4 pages that have the highest page rank normal score?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.nlargest(4, 'page_rank_norm')['name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Is there any customer that does not use the Amex card?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Card2'].eq('",
    "```json\n{\n    \"solution\": \"df['id'].nsmallest(4).tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'username', 'pic', 'full_name', 'is_organization', 'community', 'page_rank_norm', 'weight', 'x', 'y', 'twitter_profile_id', 'twitter_pic', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should']\nQuestion: Which entity has the highest page rank?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['page_rank_norm'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Urban_Areas', 'Urban_Counties', 'Villages', 'Suburb_Towns', 'Townships', 'City_Municipalities', 'Towns', 'Census_Towns', 'Census_Subdivisions']\nQuestion: What is the total number of cities in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df['Urban_Areas'].str.split('|').explode().unique())\"\n}\n```\n\nInput DataFrame columns: ['entity_id', 'entity_type', 'entity_name', 'entity_name_hash', 'entity_rank_norm', 'entity_weight', 'entity_x', 'entity_y', 'entity_profile_id', 'entity_wiki_id', 'entity_pic', 'entity_full_name', 'entity_username', 'entity_is_organization', 'entity_community', 'entity_page_rank_norm', 'entity_weight_x', 'entity_weight_y', 'entity_twitter_profile_id', 'entity_twitter_pic', 'entity_gx_link_target_weight', 'entity_gx_link_reciprocal_weight', 'entity_gx_link_should', 'gx_link_target', 'gx_link_weight', 'gx_link_reciprocal', 'gx_link_should', 'is_tract', 'is_place', 'is_county',",
    "```json\n{\n    \"solution\": \"df['page_rank_norm'].nlargest(6).tolist()\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: How many people travel in 1st class?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Pclass'] == 1]['Survived'].count()\"\n}\n```\n\nInput DataFrame columns: ['SibSp', 'Parch']\nQuestion: How many passengers have a Parch score greater than 0?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Parch'] > 0)].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['SibSp', 'Parch']\nQuestion: How many passengers have a Parch score greater than 0, and a SibSp score greater than 0?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Parch'] > 0) & (df['SibSp']> 0)].shape[0]\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Sex', 'Age', 'Fare', 'Survived', 'Pclass', 'Parch', 'SibSp']\nQuestion: What is the percentage of passengers who survived, for each passenger sex?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"np.round(df.groupby('Sex')['Survived'].sum() / df.groupby('Sex')['Survived'].count() * 100, 2).tolist()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: Is the length of the cabin number always equal",
    "```json\n{\n    \"solution\": \"df[df['community'] == 'entities']['weight'].sort_values(ascending=True).tolist()[:3]\"\n}\n```\n\nInput DataFrame columns: ['person_id', 'job_id', 'title', 'company_id', 'created_at', 'created_utc', 'body', 'score', 'deleted_at', 'subreddit_id', 'score_hidden', 'subreddit', 'name', 'edited', 'gilded', 'author', 'parent_id', 'id', 'distinguished', 'author_flair_css_class', 'parent_comment', 'created', 'author_flair_text', 'permalink', 'downs', 'author_flair_text_color', 'ups', 'domain', 'link_id', 'locked', 'edited_on_utc', 'distinguished_reason', 'link_title', 'author_flair_type', 'author_flair_template_id', 'link_author', 'link_url', 'link_author_flair_css_class', 'link_author_flair_text', 'link_author_flair_text_color', 'link_author_flair_type', 'link_author_flair_template_id', 'link_domain']\nQuestion: Which 5 subreddits has the highest number of posts?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['subreddit'].value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['time', 'id', 'body', 'score', 'author', 'subreddit', 'deleted', 'time_created', 'title', 'url', 'last_edited']\nQuestion: What is the average score of a post in each subreddit?\nExpected return type: DataFrame\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('subreddit')['score'].mean().reset_index()\"\n}\n```\n\nInput DataFrame columns: ['time', 'id', 'body', 'score', 'author', 'subreddit', 'deleted', 'time_created', 'title', 'url', 'last_edited",
    "```json\n{\n    \"solution\": \"df['feathers'].any()\"\n}\n```\n\nInput DataFrame columns: ['name', 'points']\nQuestion: Which wine has the highest points?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['points'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['review_id', 'user_id', 'product_id', 'rating', 'helpful_votes', 'total_votes', 'vine', 'verified_purchase', 'review_headline', 'review_body', 'review_date']\nQuestion: Are there any products that have a 5 rating?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['rating'].eq(5).any()\"\n}\n```\n\nInput DataFrame columns: ['movieId', 'title', 'genres']\nQuestion: What is the most common genre?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['genres'].str.split('|').explode().mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['catalunya', 'premio_catalunya_nomina', 'category', 'subcategory', 'year', 'round', 'round_text', 'acronym', 'winner_name', 'winner_city', 'winner_country', 'winner_birth', 'winner_sex', 'race_type', 'race_length', 'race_gear', 'distance_type', 'distance', 'time', 'time_units', 'going', 'temperature', 'track_condition', 'track_condition_text', 'wind', 'jockey', 'jockey_country', 'trainer', 'trainer_country', 'margin', 'weight_carried', 'weight_carried_units', 'position_after_time', 'position_after_length', 'leader_change', 'declared_horse_weight', 'declared_horse_weight_units', 'actual_weight', 'actual_weight_units', 'draw', 'post_position', 'win_odds', 'place_odds', 'show_win_odds', 'show_place_odds",
    "```json\n{\n    \"solution\": \"df['venomous'].any()\"\n}\n```\n\nInput DataFrame columns: ['Name', 'Age', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2', 'Color3', 'MaturitySize', 'FurLength', 'Vaccinated', 'Sterilized', 'Health', 'Quantity', 'Fee', 'State', 'RescuerID', 'VideoAmt', 'Description', 'PetID', 'PhotoAmt', 'AdoptionSpeed']\nQuestion: Which breed has the highest adoption speed?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Breed1')['AdoptionSpeed'].agg(pd.Series.mode).sort_values(ascending=False).index[0]\"\n}\n```\n\nInput DataFrame columns: ['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: Is the passenger with the highest fare a child (under 18)?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['Age'] < 18]['Fare'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'embarked', 'class', 'who', 'adULT_Male', 'deck', 'embark_town', 'alive', 'alone']\nQuestion: What is the age of the youngest passenger under the age of 10?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['age'] < 10]['age'].min()\"\n}\n```\n\nInput DataFrame columns: ['age', 'workclass', 'fnlwgt', 'education', 'education-num', 'marital-status', 'occupation', 'relationship', 'race', 'sex', 'capital-gain', 'capital-loss', 'hours-per-week', '",
    "```json\n{\n    \"solution\": \"df.iloc[:, 1:15].apply(lambda x: x.all(), axis=0).all()\"\n}\n```\n\nInput DataFrame columns: ['type', 'id', 'flights', 'destinations', 'destinations_url', 'reviews', 'reviews_url', 'price_from', 'price_max', 'price_min', 'free_cancel', 'depart_date', 'return_date', 'duration', 'price_average', 'depart_date_long', 'return_date_long', 'duration_long', 'depart_date_short', 'return_date_short', 'duration_short', 'airline', 'carrier', 'price_icon', 'price_currency', 'price_total', 'price_total_to_int', 'price_total_to_float', 'price_total_to_float2', 'price_total_to_float3', 'price_total_to_float4', 'price_total_to_float5', 'price_total_to_float6', 'price_total_to_float7', 'price_total_to_float8', 'price_total_to_float9', 'price_total_to_float10', 'price_total_to_float11', 'price_total_to_float12', 'price_total_to_float13', 'price_total_to_float14', 'price_total_to_float15', 'price_total_to_float16', 'price_total_to_float17', 'price_total_to_float18', 'price_total_to_float19', 'price_total_to_float20', 'price_total_to_float21', 'price_total_to_float22', 'price_total_to_float23', 'price_total_to_float24', 'price_total_to_float25', 'price_total_to_float26', 'price_total_to_float27', 'price_total_to_float28', 'price_total_to_float29', 'price_total_to_float30', '",
    "```json\n{\n    \"solution\": \"df['domestic'].any()\"\n}\n```\n\nInput DataFrame columns: ['city', 'start_time', 'start_time_month', 'start_time_day_of_week', 'start_time_hour', 'start_time_week_of_year', 'end_time', 'duration_sec', 'start_station_id', 'start_station_name', 'start_station_latitude', 'start_station_longitude', 'start_station_dpcapacity', 'start_station_totaldockcount', 'end_station_id', 'end_station_name', 'end_station_latitude', 'end_station_longitude', 'end_station_dpcapacity', 'end_station_totaldockcount', 'bike_id', 'user_type', 'member_birth_year', 'member_gender', 'bike_share_for_all_trip', 'start_time_dt', 'end_time_dt', 'start_time_year', 'start_time_month_name', 'start_time_hour_name', 'start_time_day_of_week_name', 'start_time_weekend', 'distance']\nQuestion: What is the average start station capacity?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['start_station_dpcapacity'].mean()\"\n}\n```\n\nInput DataFrame columns: ['database_name', 'name', 'permalink', 'category', 'category_list', 'url', 'region', 'region_country', 'created_at', 'founded_at', 'founded_month', 'founded_quarter', 'founded_year', 'deadpooled_year', 'funding_total_usd', 'funding_rounds', 'funding_rounds_total', 'status', 'country_code', 'state_code', 'city', 'state', 'first_funding_at', 'last_funding_at', 'last_funding_datetime', 'last_funding_month', 'last_funding_year', 'last_funding_quarter', 'years_since_first_funding', 'years_since_last_",
    "```json\n{\n    \"solution\": \"len(df['class_type'].unique())\"\n}\n```\n\nInput DataFrame columns: ['datetime', 'temp', 'atemp', 'humidity', 'windspeed', 'casual', 'registered', 'count']\nQuestion: Is there any instance where casuals and registered are equal?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['casual'] == df['registered'].eq(True).any()\"\n}\n```\n\nInput DataFrame columns: ['m1', 'm2', 'm3', 'm4', 'm5', 'm6', 'm7', 'm8', 'm9', 'm10', 'm11', 'm12']\nQuestion: How many months have more than 50000 passengers passed through the airport?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df.loc[:, 'm1':'m12'] > 50000].any(axis='columns').sum()\"\n}\n```\n\nInput DataFrame columns: ['month', 'day', 'year', 'hour', 'is_weekend', 'weekday', 'direction', 'speed', 'event']\nQuestion: How many months have more than 1200 km/h reported at any point of time?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['speed'] > 1200].groupby(['month', 'day', 'year', 'hour']).size().reset_index(name='count').groupby('month').size().reset_index(name='count').sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'season', 'holiday', 'workingday', 'weather', 'temp', 'atemp', 'humidity', 'windspeed', 'casual', 'registered', 'count']\nQuestion: What is the most popular season?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['season'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['datetime', 'season",
    "```json\n{\n    \"solution\": \"df.loc[:,'legs':'legs'].mean()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What is the percentage of women who survived?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Sex'] == 'female', 'Survived'].mean()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What is the percentage of people with family members (Sibsp and parch) who survived?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['SibSp'] + df['Parch']) > 0, 'Survived'].mean()\"\n}\n```\n\nInput DataFrame columns: ['country_1', 'country_2', 'country_3', 'Visa_type', 'Arrival_date_month', 'Market_segment', 'Distribution_channel', 'Is_repeated_guest', 'Previous_cancellations', 'Previous_bookings_not_canceled', 'Agent', 'Company', 'Guests', 'Required_car_parking_spaces', 'Total_of_special_requests', 'Arrival_date_year', 'Arrival_date_week_number', 'Arrival_date_day_of_month', 'Stays_in_weekend_nights', 'Stays_in_week_nights', 'ADR', 'rred_rate', 'Month', 'Reservation_status', 'Reservation_status_date', 'deposit_type', 'reservation_status_date']\nQuestion: What countries have the highest number of visitors?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['country_1'].value",
    "```json\n{\n    \"solution\": \"df['legs'].max()\"\n}\n```\n\nInput DataFrame columns: ['ap_num', 'date', 'ap_desc', 'ap_type', 'ap_borough', 'ap_zip', 'ap_time', 'ap_time_converted']\nQuestion: What is the maximum number of Airport Parking meters in NYC?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['ap_num'].max()\"\n}\n```\n\nInput DataFrame columns: ['name', 'host_since', 'host_response_time', 'host_response_rate', 'host_is_superhost', 'host_listings_count', 'host_has_profile_pic', 'host_identity_verified', 'neighbourhood_cleansed', 'latitude', 'longitude', 'property_type', 'room_type', 'accommodates', 'bathrooms', 'bedrooms', 'beds', 'bed_type', 'amenities', 'price', 'security_deposit', 'cleaning_fee', 'guests_included', 'extra_people', 'minimum_nights', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'availability_30', 'availability_60', 'availability_90', 'availability_365', 'number_of_reviews', 'number_of_reviews_ltm', 'first_review', 'last_review', 'review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value', 'instant_bookable', 'cancellation_policy', 'require_guest_profile_picture', 'require_guest_phone_verification', 'calculated_host_listings_count', 'reviews_per_month']\nQuestion: What is the average price of a room in Amsterdam?\nExpected return type: number\n\nCode that",
    "```json\n{\n    \"solution\": \"len(df.query('legs==2').index)\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9']\nQuestion: What is the total of x2 + x5?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['x2'] + df['x5'].sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'country', 'year', 'population', 'area', 'density', 'infant_mortality', 'gdp', 'literacy', 'phones', 'arable']\nQuestion: What is the maximum literacy rate in Russia?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.query('country=='Russia')['literacy'].max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'country', 'year', 'population', 'area', 'density', 'infant_mortality', 'gdp', 'literacy', 'phones', 'arable']\nQuestion: What is the maximum gdp in country Brazil?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.query('country=='Brazil')['gdp'].max()\"\n}\n```\n\nInput DataFrame columns: ['Year', 'Male', 'Female']\nQuestion: What is the total number of men in year 2011?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.query('Year==2011')['Male'].sum()\"\n}\n```\n\nInput DataFrame columns: ['Year', 'Male', 'Female']\nQuestion: What is the total number of persons in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Female'].sum() + df['Male'].sum()\"\n}\n```\n```\n\"\"\"\nimport pandas as pd\n\n\ndef get_answer(",
    "```json\n{\n    \"solution\": \"df['class_type'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['target', 'sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\nThe data set contains 150 observations that consist of five variables: sepal length, sepal width, petal length, petal width, and class or target. Question: How many observations are in each class?\nExpected return type: dict[category, number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('target')['target'].count().to_dict()\"\n}\n```\n\nInput DataFrame columns: ['1','2','3','4','1.1','1.2','1.3','1.4','2.1','2.2','2.3','2.4','3.1','3.2','3.3','3.4','1.11','1.12','1.13','1.14','2.11','2.12','2.13','2.14','3.11','3.12','3.13','3.14','1.111','1.112','1.113','1.114','2.111','2.112','2.113','2.114','3.111','3.112','3.113','3.114','1.1111','2.1111','3.1111']\nQuestion: Are there any duplicated rows of the DataFrame?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.duplicated().any()\"\n}\n```\n\nInput DataFrame columns: ['Urban', 'Suburban', 'Rural', 'Urban', 'Suburban', 'Rural', 'Urban', 'Suburban', 'Rural', 'Urban', 'Suburban', 'Rural']\nQuestion: What is the most popular city type?\nExpected return type: category",
    "```json\n{\n    \"solution\": \"df[df['legs'] == 8]['animal_name'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['name', 'sex', 'age_approx', 'age_class', 'registered', 'splat_area', 'location_name', 'population_density', 'percentage_male', 'percentage_female', 'population', 'male_population', 'female_population', 'population_male', 'population_female', 'male_percent', 'female_percent', 'population_in_area', 'area_sq_km', 'latitude', 'longitude', 'elevation', 'nearest_city', 'nearest_city_population', 'nearest_city_distance', 'weight', 'species']\nQuestion: Which bird species has the smallest population?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['species'].isin(df['species'].value_counts().nlargest(1).index.tolist())]['species'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10', 'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19', 'f20', 'f21', 'f22', 'f23', 'f24', 'f25', 'f26', 'f27', 'f28', 'f29', 'f30', 'f31', 'f32', 'f33', 'f34', 'f35', 'f36', 'f37', 'f38', 'f39', 'f40', 'f41', 'f42', 'f43', 'f44', 'f45', 'f46', 'f47', 'f48', 'f49', 'f50', 'f51', 'f52', 'f53', 'f5",
    "```json\n{\n    \"solution\": \"df.loc[df['legs'].idxmax(), 'class_type']\"\n}\n```\n\nInput DataFrame columns: ['Id', 'date', 'temperature', 'windspeed']\nQuestion: Is there any null values in the dataset?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.isnull().any().any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'Date_of_Journey', 'Source', 'Destination', 'Route', 'Dep_Time', 'Arrival_Time', 'Duration', 'Total_Stops', 'Additional_Info', 'Price']\nQuestion: Which Routes have the most counts?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Route'].value_counts().index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['age', 'income', 'lifespan', 'gender', 'EduStat', 'political_view', 'religion', 'race', 'sexual_orientation', 'nationality', 'bio', 'city', 'languages']\nQuestion: What is the most frequent nationality?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.loc[df['nationality'].idxmax(), 'nationality']\"\n}\n```\n\nInput DataFrame columns: ['age', 'gender', 'income', 'religion', 'city', 'race', 'political_view', 'sexual_orientation', 'languages', 'bio', 'nationality', 'EduStat', 'id']\nQuestion: Which 10 persons have been sponsored the most?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['id', 'age', 'gender', 'income', 'religion', 'city', 'race', 'political_view', 'sexual_orientation', 'languages', 'bio', 'nationality', 'EduStat']].sort_values('age').index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'age', 'gender', '",
    "```json\n{\n    \"solution\": \"df[df['venomous'] == True]['animal_name'].iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['name', 'address', 'phone', 'type', 'city', 'state', 'area', 'zip_codes']\nQuestion: How many unique zip codes are there in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['zip_codes'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['incident_zip', 'address', 'cross_street', 'city', 'borough', 'latitude', 'longitude', 'incident_address', 'street_name', 'zip_code', 'location', 'geocode_status']\nQuestion: What are the top 10 boroughs with the highest number of incidents?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['borough'].value_counts().nlargest(10).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'title_x', 'address', 'city', 'state', 'zip_code', 'zip_code_x', 'location', 'location_x', 'address_x', 'Unnamed: 0', 'borough', 'latitude', 'longitude', 'police_district', 'analysis_neighborhood', 'land_mark', 'analysis_neighborhood_x', 'council_district', 'census_tract', 'comm_area', 'side_of_street', 'police_precinct', 'census_block', 'info']\nQuestion: What is the most common category of land mark in the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['land_mark'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['publictransitline', 'systemname', 'systemnameabbrev', 'stopid', 'stopname', 'parentstation', 'directioncode', 'direction', 'stoporder', 'routeid', 'route', 'routeseq', 'routeabbrv', 'routename', 'geocoded_stop",
    "```json\n{\n    \"solution\": \"df.loc[df['legs'].idxmax(), ['animal_name']].tolist()\"\n}\n```\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: Is there any animal that has 2 legs and fins?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['legs'] == 2) & (df['fins'] == 2), ['animal_name']].any().any()\"\n}\n```\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: Which 3 animals have the most fins? If there are more than 3 with the same number then go with alphabetical order\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['fins'].idxmax()]['animal_name'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['animal_name', 'hair', 'feathers', 'eggs', 'milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes', 'venomous', 'fins', 'legs', 'tail', 'domestic', 'catsize', 'class_type']\nQuestion: Is there any animal that has no backbone and domestic?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[(df['backbone'] == 0) & (df['domestic']",
    "```json\n{\n    \"solution\": \"df['animal_name'].value_counts().nsmallest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Are there any customers that have made more than 2 deals in the same year?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('Year_Birth')['ID'].count().gt(2).any()\"\n}\n```\n\nInput DataFrame columns: ['player', 'Height', 'Weight', 'BMI', 'Birth_Date', 'College', 'Country', 'Draft_Year', 'Draft_Round', 'Draft_Number', 'Games_Played_2015', 'Games_Played_2016', 'Games_Played_2017', 'Games_Played_2018', 'Games_Played_2019', 'Games_Played_2020', 'Games_Started_2015', 'Games_Started_2016', 'Games_Started_2017', 'Games_Started_2018', 'Games_Started_2019', 'Games_Started_2020', 'Minutes_Played_2015', 'Minutes_Played_2016', 'Minutes_Played_2017', 'Minutes_Played_2018', 'Minutes_Played_2019', 'Minutes_Played_2020', 'Field_",
    "```json\n{\n    \"solution\": \"df['class_type'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['breed', 'origin', 'height', 'weight', 'animal_id', 'breed_type', 'barking', 'coat', 'dog_friendly', 'easy_care', 'energy_level', 'fur_length', 'grooming', 'health_issues', 'hypoallergenic', 'intelligence', 'shedding_level', 'smart', 'trainability', 'vocalisation', 'intelligence_rank']\nQuestion: What is the average height of dogs with the highest intelligence rank?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['breed_type'] == 'Dog']['intelligence_rank'].mean()\"\n}\n```\n\nInput DataFrame columns: ['health_issues', 'weight', 'height', 'coat_length', 'breed_type', 'breed', 'has_shots', 'intelligence_rank', 'vocalisation_rank', 'size_rank', 'shedding_level_rank', 'grooming_rank', 'health_rank', 'intelligence', 'vocalisation', 'size', 'shedding_level', 'grooming', 'health', 'rank']\nQuestion: What is the average height of poodles with the highest grooming rank?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['breed_type'] == 'Poodle') & (df['health_issues'] == 'None')]['grooming_rank'].mean()\"\n}\n```\n\nInput DataFrame columns: ['city', 'state', 'zip', 'county', 'population', 'density', 'latitude', 'longitude']\nQuestion: What is the population of the city with the highest population?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['population'].max()\"\n}\n```\n\nInput DataFrame columns: ['date', 'total_soccer_attend', 'total_soccer_tickets",
    "```json\n{\n    \"solution\": \"df['class_type'].value_counts().tail(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['first_hand', 'second_hand', 'target', 'feature_base_count', 'feature_count', 'feature_text', 'text']\nQuestion: Are there any features that are present in both the first and the second hand?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['feature_text'].isin(df['feature_text']).any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'date', 'content', 'author_id', 'author_name']\nQuestion: How many authors have published more than one article?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df.groupby('author_id')['author_name'].count().gt(1).sum()\"\n}\n```\n\nInput DataFrame columns: ['movie', 'plot_keywords', 'id', 'title', 'year', 'num_votes', 'language', 'country', 'content_rating', 'budget', 'director', 'imdb_score', 'title_year', 'aspect_ratio']\nQuestion: What are the 4 most common film genres?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('genres')['plot_keywords'].count().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['id', 'type', 'title', 'director', 'cast', 'country', 'date_added', 'release_year', 'rating', 'duration', 'listed_in', 'description']\nQuestion: Are there any movies that are longer than 150 minutes?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['duration'].gt(150).any()\"\n}\n```\n\nInput DataFrame columns: ['id', 'type', 'title', 'director', 'cast', 'country', 'date_added', 'release_year', 'rating', 'duration', 'listed_in",
    "```json\n{\n    \"solution\": \"df.groupby('class_type')['legs'].sum().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: What is the minimum number of deal purchases?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['NumDealsPurchases'].min()\"\n}\n```\n\nInput DataFrame columns: ['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Recency', 'MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response']\nQuestion: Are there any customers with the same ID?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['ID'].duplicated().any()\"\n}\n```\n\nInput DataFrame columns: ['CASE_ID', 'CASE_STATUS', 'VISA_CLASS', 'EMPLOYMENT_START_DATE', 'EMPLOYMENT_END_DATE', 'EMPLOYER_",
    "```json\n{\n    \"solution\": \"df.groupby['class_type'].sum().sort_values('legs').index[:4]\"\n}\n```\n\nInput DataFrame columns: ['i', 'f', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nQuestion: Which of these columns does not contain missing values?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.isnull().all().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['question', 'score', 'age', 'gender', 'anarchy', 'boredom', 'current_ stress', 'depression', 'guilt', 'happiness', 'harshness', 'hostility', 'humiliation', 'loneliness', 'powerlessness', 'pride', 'suffering', 'victimhood', 'loathing']\nQuestion: Which personality trait has the highest average score?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.iloc[:,1:].mean().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['category', 'question', 'score', 'age', 'gender', 'anarchy', 'boredom', 'current_ stress', 'depression', 'guilt', 'happiness', 'harshness', 'hostility', 'humiliation', 'loneliness', 'powerlessness', 'pride', 'suffering', 'victimhood', 'loathing']\nQuestion: What is the average score of the personality trait suffering?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['category'] == 'suffering']['score'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q10', 'Q11', 'Q12', 'Q13',",
    "```json\n{\n    \"solution\": \"df['legs'].value_counts().nlargest(4).keys().tolist()\"\n}\n```\n\nInput DataFrame columns: ['Id', 'Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nQuestion: How many people have got diabetes?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Outcome'].eq(1).sum()\"\n}\n```\n\nInput DataFrame columns: ['title', 'ip_address', 'timestamp', 'source_country', 'user_id', 'author', 'text', 'publish_date', 'num_comments', 'points', 'tags', 'ups', 'downs', 'url', 'comments_disabled', 'archived', 'is_self_text', 'is_submit_text', 'created_utc', 'parent_id', 'link_id', 'parent_author', 'parent_link_id', 'parent_text', 'parent_created_utc']\nQuestion: What are the top 5 most active users on Reddit?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['author'].value_counts().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['smoker', 'region', 'age', 'sex', 'bmi', 'children', 'charges']\nQuestion: What is the average BMI for non-smokers?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['smoker'] == 'no']['bmi'].mean()\"\n}\n```\n\nInput DataFrame columns: ['address', 'country_code', 'postal_code', 'latitude', 'longitude', 'source_user_id', 'verified_user', 'created_at', 'likes', 'comment_count', 'status_type', 'status_message', 'status_link', 'status_published']\nQuestion: What are the most popular 4 statuses by number of likes?\nExpected return type: list[",
    "```json\n{\n    \"solution\": \"df.loc[~df['legs'].isna(), 'legs'].sort_values().tolist()[:3]\"\n}\n```\n\nInput DataFrame columns: ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target']\nQuestion: What are the least common 3 values of the 'ca' column?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['ca'].value_counts().sort_index(ascending=False).index.tolist()[:3]\"\n}\n```\n\nInput DataFrame columns: ['target', 'age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal']\nQuestion: Which column has the least amount of distinct values?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.select_dtypes(object).nunique().idxmin()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'id', 'name', 'host_id', 'host_name', 'neighbourhood_group', 'neighbourhood', 'latitude', 'longitude', 'room_type', 'price', 'minimum_nights','number_of_reviews', 'last_review', 'reviews_per_month', 'calculated_host_listings_count', 'availability_365']\nQuestion: What is the most expensive listing?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['price'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['season', 'holiday', 'workingday', 'weather', 'temp', 'atemp', 'humidity', 'windspeed', 'casual', 'registered', 'count']\nQuestion: What is the most common type of day?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{",
    "```json\n{\n    \"solution\": \"df['Quantity'].gt(0).all()\"\n}\n```\n\nInput DataFrame columns: ['hotel_id', 'hotel_name', 'hotel_country', 'hotel_city', 'hotel_market', 'hotel_cluster', 'srch_ci', 'srch_co', 'is_booking', 'cnt', 'srch_destination_id', 'srch_destination_type_id', 'is_package', 'orig_destination_distance', 'prop_country_id', 'prop_id', 'prop_starrating', 'prop_review_score', 'prop_brand_bool', 'prop_location_score1', 'prop_location_score2', 'prop_log_historical_price', 'position', 'price_usd', 'promotion_flag', 'srch_adults_cnt', 'srch_children_cnt', 'srch_rm_cnt', 'srch_destination_type_id', 'srch_destination_id', 'srch_length_of_stay', 'srch_booking_window', 'srch_adults_cnt', 'srch_children_cnt', 'srch_rm_cnt', 'srch_destination_type_id', 'srch_destination_id', 'srch_length_of_stay', 'srch_booking_window', 'srch_destination_id', 'srch_destination_type_id', 'hotel_cluster', 'hotel_id']\nQuestion: How many records have a \u201chotel_country\u201d value of \u201cUS\u201d?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['hotel_country'].eq('US').sum()\"\n}\n```\n\nInput DataFrame columns: ['Profile Name', 'Gender', 'Age', 'Height', 'Weight', 'Body Type', 'Marital Status', 'Education Level', 'Income', 'Profession', 'What is your political view?', 'Do you consider yourself a Democrat?', 'Do you consider yourself a Republican?', 'Do you consider yourself a libertarian?', 'Do you consider yourself a conservative?', 'Do you consider yourself a liberal?', 'How do you rate your tolerance",
    "```json\n{\n    \"solution\": \"df['UnitPrice'].gt(0).all()\"\n}\n```\n\nInput DataFrame columns: ['id_music', 'release_date', 'genre', 'duration', 'popularity', 'danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'time_signature']\nQuestion: How many music with danceability greater than 0.9 are in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df[df['danceability'].gt(0.9)].index)\"\n}\n\nInput DataFrame columns: ['id_movie', 'title', 'tagline', 'release_date', 'budget', 'genres', 'original_language', 'popularity', 'vote_average', 'vote_count', 'length', 'director', 'actor_1', 'actor_2', 'actor_3']\nQuestion: How many films directors are not present in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"len(df['director'].dropna().unique()) - len(df['director'].unique())\"\n}\n```\n\nInput DataFrame columns: ['id_movie', 'title', 'tagline', 'release_date', 'budget', 'genres', 'original_language', 'popularity', 'vote_average', 'vote_count', 'length', 'director', 'actor_1', 'actor_2', 'actor_3']\nQuestion: Is there any film without a director?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['director'].isnull().any()\"\n}\n```\n\nInput DataFrame columns: ['id_music', 'release_date', 'genre', 'duration', 'popularity', 'danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'time_signature']\nQuestion: What is the most",
    "```json\n{\n    \"solution\": \"df['CustomerID'].isna().any()\"\n}\n```\n\nInput DataFrame columns: ['pickup_month', 'pickup_date', 'pickup_weekday', 'pickup_hour', 'dropoff_month', 'dropoff_date', 'dropoff_weekday', 'dropoff_hour', 'distance_km']\nQuestion: What are the top 10 distances traveled?\nExpected return type: list[number]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['distance_km'].nlargest(10).tolist()\"\n}\n```\n\nInput DataFrame columns: ['geo_level_1_id', 'geo_level_2_id', 'geo_level_3_id', 'count_floors_pre_eq', 'age', 'area_percentage', 'height_percentage', 'land_surface_condition', 'foundation_type', 'roof_type', 'ground_floor_type', 'other_floor_type', 'position', 'plan_configuration', 'has_superstructure_adobe_mud', 'has_superstructure_mud_mortar_stone', 'has_superstructure_stone_flag', 'has_superstructure_cement_mortar_stone', 'has_superstructure_mud_mortar_brick', 'has_superstructure_cement_mortar_brick', 'has_superstructure_timber', 'has_superstructure_bamboo', 'has_superstructure_rc_non_engineered', 'has_superstructure_rc_engineered', 'has_superstructure_other', 'legal_ownership_status', 'count_families', 'count_floors_pre_eq', 'age', 'area_percentage', 'height_percentage', 'land_surface_condition', 'foundation_type', 'roof_type', 'ground_floor_type', 'other_floor_type', 'position', 'plan_configuration', 'has_superstructure_adobe_mud', 'has_superstructure_mud_mortar_stone', 'has_superstructure_stone_flag', 'has_superstructure_cement_mortar_stone', 'has_superstructure_mud_mortar_brick', 'has",
    "```json\n{\n    \"solution\": \"df['Country'] == 'United Kingdom'\"\n}\n```\n\nInput DataFrame columns: ['ProductName', 'Company', 'Rating']\nQuestion: Are there any products from Company A?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Company'] == 'A'\"\n}\n```\n\nInput DataFrame columns: ['number of adults', 'age of adults', 'number of kids', 'age of kids', 'amount of money spent', 'amount of money saved', 'a lot', 'very little', 'not at all', 'very much', 'a little', 'not at all', 'no', 'yes', 'very few', 'very much', 'some', 'none', 'some', 'lots', 'few', 'lots', 'a little', 'few', 'not at all', 'several times', 'several times', 'several times', 'few', 'few', 'few', 'lots', 'lots', 'very few', 'lots', 'lots', 'several times', 'lots', 'lots', 'lots', 'lots', 'lots', 'several times', 'very much', 'not at all', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'a little', 'not at all', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots', 'lots',",
    "```json\n{\n    \"solution\": \"df['StockCode'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['CustomerID', 'StockCode', 'Quantity', 'Price', 'InvoiceDate', 'Country', 'Sales']\nQuestion: What is the average invoice quantity for the stock code \"85123A\" ?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['StockCode'] == '85123A']['Sales'].mean()\"\n}\n```\n\nInput DataFrame columns: ['id', 'title', 'genres', 'budget', 'revenue', 'runtime', 'vote_count', 'vote_average', 'release_date', 'popularity', 'keywords', 'cast', 'crew']\nQuestion: Which 3 movies have the highest revenue?\nExpected return type: list[str]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.nlargest(3, 'revenue')['title'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['title', 'budget', 'revenue', 'popularity', 'release_date', 'runtime', 'vote_average', 'vote_count']\nQuestion: Which 3 movies have the highest vote average?\nExpected return type: list[str]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.nlargest(3, 'vote_average')['title'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['movie_id', 'title', 'genres', 'budget', 'revenue', 'runtime', 'vote_count', 'rating', 'id']\nQuestion: Do the revenue and budget have a correlation?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[['revenue', 'budget']].corr().iloc[0,1]\"\n}\n```\n\nInput DataFrame columns: ['start time', 'end time']\nQuestion: How many rows have missing values in the end time column?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"return df['end time'].isna().sum()\"\n}\n```\n\nInput DataFrame",
    "```json\n{\n    \"solution\": \"df['UnitPrice'].mean()\"\n}\n```\n\nInput DataFrame columns: ['Month', 'CustomerID', 'InvoiceDate', 'InvoiceNo', 'StockCode', 'Description', 'Quantity', 'UnitPrice', 'TotalAmount', 'Country']\nQuestion: What is the maximum total purchase amount?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['TotalAmount'].max()\"\n}\n```\n\nInput DataFrame columns: ['Month', 'CustomerID', 'InvoiceDate', 'InvoiceNo', 'StockCode', 'Description', 'Quantity', 'UnitPrice', 'TotalAmount', 'Country']\nQuestion: Is there any purchase with total amount higher than 40000?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['TotalAmount'].gt(40000).any()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'age', 'job', 'marital', 'education', 'default', 'balance', 'housing', 'loan', 'contact', 'day', 'month', 'duration', 'campaign', 'pdays', 'previous', 'poutcome', 'y']\nQuestion: Are there any clients with age over 50?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['age'].gt(50).any()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Sex', 'BMI', 'Children', 'Smoker', 'Region', 'Charges']\nQuestion: Is there any client with BMI higher than 30?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['BMI'].gt(30).any()\"\n}\n```\n\nInput DataFrame columns: ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target']\nQuestion: Are there any cases with oldpeak higher than 1?\nExpected return type: boolean",
    "```json\n{\n    \"solution\": \"df['Quantity'].max()\"\n}\n```\n\nInput DataFrame columns: ['race/ethnicity', 'parental level of education', 'lunch', 'test preparation course', 'math score', 'reading score', 'writing score']\nQuestion: Which race has the highest average score in writing?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('race/ethnicity')['writing score'].mean().idxmax()\"\n}\n```\n\nQuestions about the dataset: \n* How many students are in the dataset?\n* Which state has the most students?\n* Which city has the most students?\n* How many students have taken all 3 courses?\n* Which state has the highest percentage of students taking all 3 courses?\n* Which state has the lowest percentage of students taking all 3 courses?\n\nInput DataFrame columns: ['race/ethnicity', 'parental level of education', 'lunch', 'test preparation course', 'math score', 'reading score', 'writing score']\nQuestion: Who has the highest average math score?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df['math score'] * df['race/ethnicity']).sort_values(ascending=False).index[0]\"\n}\n```\n\nInput DataFrame columns: ['race/ethnicity', 'parental level of education', 'lunch', 'test preparation course', 'math score', 'reading score', 'writing score']\nQuestion: Who has the highest average reading score?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df['reading score'] * df['race/ethnicity']).sort_values(ascending=False).index[0]\"\n}\n```\n\nInput DataFrame columns: ['race/ethnicity', 'parental level of education', 'lunch', 'test preparation course', 'math score', 'reading score', 'writing score']\nQuestion: Who has the highest average writing score?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"(df['writing score'] * df['race/ethnicity",
    "```json\n{\n    \"solution\": \"df['Country'].value_counts().at['United Kingdom']\"\n}\n```\n\nInput DataFrame columns: ['Postal Code', 'Borough', 'Neighbourhood', 'Latitude', 'Longitude']\nQuestion: How many boroughs are there in Toronto?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Borough'].nunique()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'host_id', 'host_name', 'neighbourhood_group', 'neighbourhood', 'latitude', 'longitude', 'room_type', 'price', 'minimum_nights', 'number_of_reviews', 'last_review', 'reviews_per_month', 'calculated_host_listings_count', 'availability_365']\nQuestion: Which room type is the most popular in New York?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['neighbourhood_group'] == 'New York']['room_type'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'host_id', 'host_name', 'neighbourhood_group', 'neighbourhood', 'latitude', 'longitude', 'room_type', 'price', 'minimum_nights', 'number_of_reviews', 'last_review', 'reviews_per_month', 'calculated_host_listings_count', 'availability_365']\nQuestion: How many rooms are in the Airbnb in New York?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['neighbourhood_group'] == 'New York']['id'].count()\"\n}\n```\n\nInput DataFrame columns: ['id', 'name', 'host_id', 'host_name', 'neighbourhood_group', 'neighbourhood', 'latitude', 'longitude', 'room_type', 'price', 'minimum_nights', 'number_of_reviews', 'last_review', 'reviews_per_month', 'calculated_host_listings_count', 'availability_3",
    "```json\n{\n    \"solution\": \"df['Country'].value_counts().head(1).index.values\"\n}\n```\n\nInput DataFrame columns: ['bill_no', 'pay_amount', 'item_description', 'item_id', 'customer_id', 'sales_amount', 'date_added']\nQuestion: What is the customer ID that spent the most money?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('customer_id')['sales_amount'].sum().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['bill_no', 'pay_amount', 'item_description', 'item_id', 'customer_id', 'sales_amount', 'date_added']\nQuestion: What is the most bought item?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.groupby('item_description')['item_id'].count().idxmax()\"\n}\n```\n\"\"\"\n\n\ndef df_answer_1(df: pd.DataFrame) -> bool:\n    return df.loc[df['finalWorth'].idxmax(), 'selfMade']\n\n\ndef df_answer_2(df: pd.DataFrame) -> pd.Series:\n    return df.loc[df['Survived'] == 1]['Pclass'].mode().values\n\n\ndef df_answer_3(df: pd.DataFrame) -> pd.Series:\n    return df.loc[df['Age'] > 60].index\n\n\ndef df_answer_4(df: pd.DataFrame) -> bool:\n    return df['Age'].gt(60).any()\n\n\ndef df_answer_5(df: pd.DataFrame) -> pd.Series:\n    return df['Gross annual salary (in euros) \ud83d\udcb8'].nlargest(4).tolist()\n\n\ndef df_answer_6(df: pd.DataFrame) -> pd.Series:\n    return df['agency'].value_counts().nlargest(4).index.tolist()\n\n\ndef df_answer_7(df: pd.DataFrame) -> float:\n    return df['inj'].max()\n\n\ndef df_answer_8(df: pd.DataFrame) -> bool:",
    "```json\n{\n    \"solution\": \"df.loc[df['UnitPrice'].idxmax(), 'Description']\"\n}\n```\n\nInput DataFrame columns: ['date', 'volume', 'close', 'high', 'low', 'open']\nQuestion: What is the difference between the highest and lowest price values for the stock during the period?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['high'].max() - df['low'].min()\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'MSFT', 'AAPL', 'AMZN', 'GOOG', 'FB']\nQuestion: Which of the following companies has the highest mean price?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.drop('Unnamed: 0', axis=1).idxmax(axis=1).value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['is_day', 'is_weekend', 'weekday', 'abv_temp', 'hum', 'wind_spd', 'is_holiday']\nQuestion: Is it possible to predict whether the temperature will be above 85\u00b0F during the weekend?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"clf = DecisionTreeClassifier().fit(df[df.columns.difference(['is_holiday'])], df['is_holiday'])\nreturn clf.predict(pd.DataFrame({'is_weekend':[1], 'abv_temp': [1]}))[0]\"\n}\n```\n\nInput DataFrame columns: ['Unnamed: 0', 'is_day', 'is_weekend', 'weekday', 'abv_temp', 'hum', 'wind_spd', 'is_holiday']\nQuestion: Is it possible to predict whether the temperature will be above 85\u00b0F during the weekend?\nExpected return type: boolean\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"clf = DecisionTreeClassifier().fit(df.drop('is_holiday', axis=1), df['is_holiday'])\nreturn clf.predict(pd.DataFrame({'is_weekend':[1], '",
    "```json\n{\n    \"solution\": \"df.loc[df['Quantity'].idxmax(), 'Description']\"\n}\n```\n\nInput DataFrame columns: ['Item_Identifier', 'Item_Weight', 'Item_Fat_Content', 'Item_Visibility', 'Item_Type', 'Item_MRP', 'Outlet_Identifier', 'Outlet_Establishment_Year', 'Outlet_Size', 'Outlet_Location_Type', 'Outlet_Type', 'Item_Outlet_Sales']\nQuestion: Which type of item has the highest MRP?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['Item_MRP'].idxmax(), 'Item_Type']\"\n}\n```\n\nInput DataFrame columns: ['EmployeeNumber', 'MonthlyIncome', 'Attrition', 'Gender', 'Age', 'BusinessTravel', 'Department', 'DistanceFromHome', 'Education', 'EducationField', 'EnvironmentSatisfaction', 'JobInvolvement', 'JobLevel', 'JobRole', 'JobSatisfaction', 'MaritalStatus', 'OverTime', 'PercentSalaryHike', 'PerformanceRating', 'RelationshipSatisfaction', 'StockOptionLevel', 'TotalWorkingYears', 'TrainingTimesLastYear', 'WorkLifeBalance', 'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion', 'YearsWithCurrManager']\nQuestion: What is the gender of the person with the highest salary?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.loc[df['MonthlyIncome'].idxmax(), 'Gender']\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: How many females are there on board the titanic?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Sex'].eq('female').sum()\"\n}\n```\n\nInput DataFrame columns: ['Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare',",
    "```json\n{\n    \"solution\": \"df.groupby('CustomerID').agg({'Country': 'nunique'}).idxmin()['Country']\"\n}\n```\n\nInput DataFrame columns: ['release_date', 'popularity', 'budget', 'revenue', 'original_title', 'cast', 'homepage', 'director', 'tagline', 'keywords', 'overview', 'runtime', 'genres', 'production_companies', 'vote_count', 'vote_average', 'release_year']\nQuestion: What is the minimum budget of a movie that has an average score of higher than 6?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['vote_average'].gt(6)) & (df['budget'] != 0)].budget.min()\"\n}\n```\n\nInput DataFrame columns: ['date', 'mean_temp', 'total_rainfall', 'max_temp', 'min_temp']\nQuestion: What is the difference between the maximum and minimum temperatures?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['max_temp'].max() - df['min_temp'].min()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Adj Close']\nQuestion: On what day did the stock reach the minimum close price?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Close'].idxmin()\"\n}\n```\n\nInput DataFrame columns: ['Summary', 'Precip Type', 'Temperature (C)', 'Apparent Temperature (C)', 'Humidity', 'Wind Speed (km/h)', 'Wind Bearing (degrees)', 'Visibility (km)', 'Loud Cover', 'Pressure (millibars)']\nQuestion: What is the median apparent temperature?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Temperature (C)'].median()\"\n}\n```\n\nInput DataFrame columns: ['Postal Code', 'Borough', 'Neighbourhood', 'Latitude', 'Longitude']\nQuestion: Which postal code has the highest number of neighbourhoods",
    "```json\n{\n    \"solution\": \"df.sort_values(by='Quantity', ascending=False)['Description'].unique().tolist()[:3]\"\n}\n```\n\nInput DataFrame columns: ['id', 'age', 'aggravated_assault', 'arson', 'assault', 'bribery', 'burglary', 'criminal_mischief', 'criminal_posession_of_a_weapon', 'domestic_violence', 'drugs', 'dui', 'embezzlement', 'fraud', 'grievance', 'harrassment', 'harassment', 'hospital', 'identity_theft', 'immigration', 'information_leak', 'jury_duty', 'kidnapping', 'liquor', 'latin_american_right', 'lost_luggage', 'ltd_liability', 'lutheranism', 'malice_in_word_or_deed', 'narcissism', 'neglect_of_duty', 'neglect_of_duty', 'obstruction', 'organized_crime', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'other', 'outreach', 'photography', 'physical_violence', 'physical_violence', 'physical_violence', 'physical_violence', 'physical_violence', 'physical_violence', 'physical_violence', 'physical_violence', 'possession_of_a_deadly_weapon', 'possession_of_a_deadly_weapon', 'possession_of_a_deadly_weapon', 'possession_of_a_deadly_weapon', 'possession_of_a_deadly_weapon', 'possession_of_a_deadly_weapon', 'possession_of_a_deadly_weapon', 'possession_of_a_deadly_weapon', 'possession_of_a_deadly_weapon', 'possession_of_a_deadly_weapon', 'possession_of_a_deadly_weapon', 'possession_of_a_",
    "```json\n{\n    \"solution\": \"df.nsmallest(2, ['Quantity'])['Description']\"\n}\n```\n\nInput DataFrame columns: ['#civ', 'age', 'mar', 'spouse_age', 'fam_hist', 'spouse_occ', 'race', 'rel', 'wage']\nQuestion: Who is the oldest woman?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.sort_values('age').iloc[-1]['civ']\"\n}\n```\n\nInput DataFrame columns: ['Year', 'Month', 'Day', 'Time', 'State', 'Location', 'LocationType', 'PropertyType', 'PropertyTypeDescription', 'Subject + Descriptor', 'Offense + Code', 'Offense', 'OffenseType', 'OffenseSubType', 'XCoordinate', 'YCoordinate', 'Latitude', 'Longitude', 'Location1', 'Location2']\nQuestion: What were the top 3 most common offenses for a person to be charged with in Alameda?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['State'] == 'CA') & (df['City'] == 'Alameda')]['OffenseType'].value_counts().nlargest(3).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['C/A', 'UNIT', 'SCP', 'STATION', 'LINENAME', 'DIVISION', 'DATE', 'TIME', 'DESC', 'ENTRIES', 'EXITS']\nQuestion: Where is the station with the highest C/A (Control Area) entries?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['ENTRIES'].gt(0)]['STATION'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['date', 'year', 'month', 'day', 'day_of_week', 'decade', 'decade_60', 'decade_70', 'decade_80', 'decade_90', 'decade_00', 'decade_10', 'daytype', 'weekend', 'hour",
    "```json\n{\n    \"solution\": \"df['Country'].value_counts().nlargest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Adj Close', 'Symbol', 'Sector', 'Industry', 'Name']\nQuestion: Which 2 stocks experienced the highest volume of trading?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.dropna().nlargest(2, 'Volume')\\['Symbol'\\].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume', 'Symbol']\nQuestion: What is the stock symbol with the highest closing price?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Close'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume', 'Symbol']\nQuestion: What is the stock symbol with the highest opening price?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['Open'].idxmax()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume', 'Symbol']\nQuestion: Which 3 stocks had the highest volume of trading?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.nlargest(3, 'Volume')[Symbol].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume', 'Symbol']\nQuestion: Which 3 stocks had the lowest closing price?\nExpected return type: list[category]\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df.nsmallest(3, 'Close')[Symbol].tolist()\"\n}\n```\n\nInput DataFrame columns: ['Date', 'Open', 'High', 'Low', 'Close',",
    "```json\n{\n    \"solution\": \"df['Country'].value_counts().nsmallest(2).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What is the maximum number of parents/children each person had on board the Titanic?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['SibSp'].max()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: How many female passengers had more than 2 parents/children?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['Sex'] == 'female') & (df['Parch'].gt(2))]['PassengerId'].count()\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What percentage of female passengers had more than 2 parents/children?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"((df[(df['Sex'] == 'female') & (df['Parch'].gt(2))]['PassengerId'].count())/df[df['Sex'] == 'female']['PassengerId'].count())*100\"\n}\n```\n\nInput DataFrame columns: ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nQuestion: What percentage of female passengers survived?\nExpected return type: number\n\nCode that calculates the answer:",
    "```json\n{\n    \"solution\": \"df[(df['Quantity'] > 0)].groupby('InvoiceNo')['Quantity'].sum().nlargest(5).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['channel', 'transaction_id', 'account_number', 'customer_name', 'customer_email', 'order_amount', 'shipping_amount', 'tax_amount', 'payment_method', 'payment_status', 'order_approved_at', 'created_at', 'duedate', 'customer_id', 'cached_total_amount', 'receipt_id', 'saved_at', 'voided_at', 'is_developer', 'acquirer_reference_number', 'acquirer_name', 'acquirer_id', 'source', 'payment_brand', 'type', 'transaction_type', 'reference', 'ip_address', 'city', 'state', 'postal_code', 'country', 'amount_paid', 'amount_refunded', 'application_fee_amount', 'tip_amount', 'payment_currency', 'statement_descriptor', 'statement_descriptor_suffix', 'address_line1', 'address_line2', 'district', 'state_cd', 'phone', 'settlement_amount', 'return_id']\nQuestion: What is the median calculated application fee amount associated with the transactions with the payment statuses of `failed`?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[df['payment_status'] == 'failed']['application_fee_amount'].median()\"\n}\n```\n\nInput DataFrame columns: ['store_zip', 'store_phone', 'store_city', 'store_state', 'store_name', 'store_id', 'store_address', 'latitude', 'longitude', 'store_hours', 'region', 'landmarks', 'chain_id']\nQuestion: Which store has the most number of stores?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['store_id'].value_counts().index.max()\"\n}\n```\n\nInput DataFrame columns: ['id', 'page_url', 'visitor_home_url', 'visit_start_time', 'visit_end_time",
    "```json\n{\n    \"solution\": \"df.nsmallest(5, 'Quantity')['StockCode'].tolist()\"\n}\n```\n\nInput DataFrame columns: ['ActivityDay', 'TotalSteps', 'TotalDistance', 'TrackerDistance', 'LoggedActivitiesDistance', 'VeryActiveDistance', 'ModeratelyActiveDistance', 'LightActiveDistance', 'SedentaryActiveDistance', 'VeryActiveMinutes', 'FairlyActiveMinutes', 'LightlyActiveMinutes', 'SedentaryMinutes', 'AbovePreferredThresholdActiveMinutes', 'Calories', 'VeryActiveCalories', 'LightActiveCalories', 'SedentaryCalories', 'VeryActiveDistance', 'ModeratelyActiveDistance', 'LightActiveDistance', 'SedentaryActiveDistance', 'VeryActiveMinutes', 'FairlyActiveMinutes', 'LightlyActiveMinutes', 'SedentaryMinutes', 'Calories', 'VeryActiveCalories', 'LightActiveCalories', 'SedentaryCalories', 'VeryActiveDistance', 'ModeratelyActiveDistance', 'LightActiveDistance', 'SedentaryActiveDistance', 'VeryActiveMinutes', 'FairlyActiveMinutes', 'LightlyActiveMinutes', 'SedentaryMinutes', 'Calories', 'VeryActiveCalories', 'LightActiveCalories', 'SedentaryCalories']\nQuestion: What is the total number of VeryActiveDistance in the year 2016?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df[(df['ActivityDay'].dt.year == 2016) & (df['ActivityDay'].dt.month == 5)]['VeryActiveDistance'].sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'review_id', 'user_id', 'business_id', 'stars', 'useful', 'funny', 'cool', 'date', 'text', 'type', 'state', 'latitude', 'longitude', 'address', 'city', 'zip_code', 'country', 'attributes', 'categories', 'hours', 'open']\nQuestion: What is the average number of words in the review text?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['text'].apply(lambda x",
    "```json\n{\n    \"solution\": \"df['Quantity'].value_counts().nlargest(4).index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['RA', 'RS', '9', '10', '5', '3', '2', '4', '6', '8', '7', '11', '15', '12', '13', '14', '17', 'R6', '1', '16', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '2A', '2B']\nQuestion: What is the most commonly ordered size?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['9'].value_counts().idxmax()\"\n}\n```\n\nInput DataFrame columns: ['month', 'day', 'year', 'day_of_week', 'policyID', 'statecode', 'county', 'eq_site_limit', 'hu_site_limit', 'fl_site_limit', 'fr_site_limit', 'tiv_2011', 'tiv_2012', 'eq_site_deductible', 'hu_site_deductible', 'fl_site_deductible', 'fr_site_deductible', 'point_latitude', 'point_longitude', 'line', 'construction', 'point_granularity']\nQuestion: What is the most common value for poilcy id?\nExpected return type: category\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['policyID'].mode().iloc[0]\"\n}\n```\n\nInput DataFrame columns: ['DateCol1', 'DateCol2', 'DateCol3', 'DateCol4']\nQuestion: Which date is the maximum",
    "```json\n{\n    \"solution\": \"df['Description'].value_counts()[:2].index.tolist()\"\n}\n```\n\nInput DataFrame columns: ['Age', 'Attrition', 'BusinessTravel', 'DailyRate', 'Department', 'DistanceFromHome', 'Education', 'EducationField', 'EmployeeCount', 'EmployeeNumber', 'EnvironmentSatisfaction', 'Gender', 'HourlyRate', 'JobInvolvement', 'JobLevel', 'JobRole', 'JobSatisfaction', 'MaritalStatus', 'MonthlyIncome', 'MonthlyRate', 'NumCompaniesWorked', 'Over18', 'OverTime', 'PercentSalaryHike', 'PerformanceRating', 'RelationshipSatisfaction', 'StandardHours', 'StockOptionLevel', 'TotalWorkingYears', 'TrainingTimesLastYear', 'WorkLifeBalance', 'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion', 'YearsWithCurrManager']\nQuestion: How many individuals have never worked for the company?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['YearsAtCompany'].eq(0).sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'location_id', 'name', 'address', 'agency_description', 'telephone', 'latitude', 'longitude', 'city', 'state', 'location']\nQuestion: What is the most popular location id?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['location_id'].value_counts().idxmax()\"\n}\n```\n```\nInput DataFrame columns: ['id', 'location_id', 'name', 'address', 'agency_description', 'telephone', 'latitude', 'longitude', 'city', 'state', 'location']\nQuestion: How many locations have more than 10 hours of operation?\nExpected return type: number\n\nCode that calculates the answer:\n```json\n{\n    \"solution\": \"df['location_id'].map(df['hours'].str.count('Closed', na_action=False)).gt(10).sum()\"\n}\n```\n\nInput DataFrame columns: ['id', 'location_id', 'name', 'address', 'agency_description', 'telephone', 'latitude', 'longitude', 'city',"
]