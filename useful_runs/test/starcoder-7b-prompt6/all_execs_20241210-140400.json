[
    "global ans\n\ndef answer(df):\n    return ('Are you registered to vote? Not open to vote' in df.columns) and df['Are you registered to vote? Not open to vote'].notna().any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Did you vote in the 2016 Presidential election? (Four years ago)'].eq('No').any()\nans = answer(df)",
    "{\n    \"solution\": \"df[(df['vote_choice'].eq('I plan to vote for {answer:Candidate}')) & (df['Did you vote in the 2016 Presidential election? (Four years ago)'].eq('No, but I still plan to vote'))].any().any()\"\n}\n\n\nInput DataFrame columns: ['Age', 'Gender', 'Country', 'Profession', 'State', 'Instagram', 'Facebook', 'Twitter', 'Pinterest', 'Tumblr', 'Google Plus', 'LinkedIn', 'Viber', 'Skype', 'WhatsApp', 'Messenger', 'Signal', 'Yahoo Messenger', 'Line', 'WeChat', 'Viber', 'Slack', 'Telegram', 'WeChat', 'WeChat', 'WeChat', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'WhatsApp', 'WhatsApp', 'WhatsApp', 'WhatsApp', 'WhatsApp', 'WhatsApp', 'WhatsApp', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Skype', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr', 'Tumblr",
    "{\n    \"solution\": \"df['vote_choice'].ne(df['simple_2016_vote']).any()\"\n}\n\n\nInput DataFrame columns: ['Country code', 'Series code', 'Country', 'Series', 'Topic', 'Industry', 'CAE', 'Seasonally adjusted', 'Units', 'Frequency', 'Type', 'Ref Period', 'Unit', 'Time Period', 'Value', 'Footnote']\nQuestion: Which are the ten countries with the most annual GDP in 2017?\nExpected return type: list[country]\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[df['Time Period'] == 2017].groupby('Country')['Value'].sum().nlargest(10).index.to_list()\"\n}\n\n\nInput DataFrame columns: ['Country Name', 'Region', 'Income Group', 'Lending Category', 'Other groups', 'Major Fragments', 'Currency Unit', '2018', '2017', '2016', '2015', '2014', '2013', '2012', '2011', '2010', '2009', '2008', '2007', '2006', '2005', '2004', '2003', '2002', '2001', '2000', '1999', '1998', '1997', '1996', '1995', '1994', '1993', '1992', '1991', '1990', '1989', '1988', '1987', '1986', '1985', '1984', '1983', '1982', '1981', '1980', '1979', '1978', '1977', '1976', '1975', '1974', '1973', '1972",
    "global ans\n\ndef answer(df):\n    return df['Are you registered to vote?'].eq('Registered').sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return ((df['likelihood'] == 'Very likely') | (df['likelihood'] == 'Most likely')).sum()\nans = answer(df)",
    "{\n    \"solution\": \"df['Which of the following best describes your current employment status?'].value_counts()['High school degree or less']\"\n}\n\n\nInput DataFrame columns: ['Title', 'First Name', 'Last Name', 'Email', 'Phone']\nQuestion: What percentage of the phone column contains only digits?\nExpected return type: float\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['Phone'].str.isnumeric().mean()\"\n}\n\n\nInput DataFrame columns: ['Season', 'City', 'State', 'Year']\nQuestion: What percentage of the State column contains Arizona?\nExpected return type: float\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['State'].str.contains('Arizona').mean()\"\n}\n\n\nInput DataFrame columns: ['Date', 'Time', 'City', 'State', 'Address', 'Zip', 'Battalion', 'Person In-Charge', 'Scenes of Crime']\nQuestion: How many times was the string 'guilty' in the second_column column?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['second_column'].str.contains('guilty').sum()\"\n}\n\n\nInput DataFrame columns: ['zip', 'county', 'x', 'y', 'city', 'state', 'location', 'latitude', 'longitude', 'census_tract']\nQuestion: What is the value of the 'county' column for the second row?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['county'][1]\"\n}\n\n\nInput DataFrame columns: ['index', 'season', 'city', 'state', 'location', 'latitude', 'longitude', 'census_tract', 'haunting_frequency', 'haunting_type', 'haunting_count', 'is_haunting', 'haunting_date', 'type', 'haunting_confirmed']\nQuestion: What is the percentage of hauntings that were confirmed?\nExpected return type: float\n\nCode that calculates the answer:\n{\n    \"solution\": \"",
    "{\n    \"solution\": \"df['Region'].eq('South Atlantic').sum()\"\n}\n\n\nInput DataFrame columns: ['Unnamed: 0', 'id', 'state', 'gender', 'gender_confidence_level', 'gender_reveal', 'age', 'age_confidence_level', 'age_reveal', 'race', 'race_confidence_level', 'race_reveal', 'political_alignment', 'political_alignment_confidence_level', 'political_alignment_reveal', 'donor_status', 'donor_status_confidence_level', 'donor_status_reveal', 'vote', 'vote_confidence_level', 'vote_reveal', 'vote_intention', 'vote_intention_confidence_level', 'vote_intention_reveal', 'vote_past', 'vote_past_confidence_level', 'vote_past_reveal', 'vote_unsure', 'vote_unsure_confidence_level', 'vote_unsure_reveal', 'vote_no_idea', 'vote_no_idea_confidence_level', 'vote_no_idea_reveal', 'vote_other', 'vote_other_confidence_level', 'vote_other_reveal', 'vote_other_text', 'vote_other_confidence_level_text', 'vote_other_reveal_text', 'vote_other_per_vote_reveal', 'vote_other_per_vote_confidence_level', 'vote_other_per_vote_reveal_text', 'vote_other_per_vote_confidence_level_text', 'vote_other_per_vote_reveal_other_text', 'vote_other_per_vote_confidence_level_text_other', 'vote_other_per_vote_reveal_other_text', 'vote_other_per_vote_confidence_level_text_other', 'vote_other_per_vote_reveal_other', 'vote_other_per_vote_confidence_level_other', 'vote_other_per_vote_reveal_other_text', 'vote_other_per_vote_confidence_level_text_other', 'vote_other_per_vote_reveal_other_text', 'vote_other_per_vote_confidence_level_",
    "global ans\n\ndef answer(df):\n    return df['How old are you?'].value_counts().idxmax()\nans = answer(df)",
    "{\n    \"solution\": \"df['vote_choice'].mode().iloc[0]\"\n}\n\n\nInput DataFrame columns: ['id', 'Feeling', 'Frustration', 'Excitement', 'Work', 'Work to be done', 'Interview', 'Job', 'Salary', 'Financial issues', 'Social environment', 'Company culture', 'To what extent do you agree or disagree that the work environment here at this company is creative, challenging, difficult and stressful', 'To what extent do you agree or disagree that the work environment here at this company is focuses on doing great work', 'To what extent do you agree or disagree that the work environment here at this company is a place where you feel comfortable', 'To what extent do you agree or disagree that the work environment here at this company is based on a solid commitment to excellence', 'To what extent do you agree or disagree that the work environment here at this company provides opportunities to seek new skills and grow in both personal and professional ways', 'To what extent do you agree or disagree that the work environment here at this company is an atmosphere that inspires confidence and pride in the employees', 'To what extent do you agree or disagree that the work environment here at this company is a place where you feel safe and you can devote your full attention to your work', 'To what extent do you agree or disagree that the work environment here at this company is a place where your career is valued and where you are comfortable doing what you do', 'To what extent do you agree or disagree that the work environment here at this company is a place where you feel you fit in', 'To what extent do you agree or disagree that the work environment here at this company is a place where you feel you fit in and where you feel confident and respected', 'To what extent do you agree or disagree that the work environment here at this company is a place where it is important to be a part of the mission', 'To what extent do you agree or disagree that the work environment here at this company is a place where you can grow and develop personally', 'To what extent do you agree or disagree that the work environment here at this company is a place where you can grow and develop professionally', 'To what extent do you",
    "global ans\n\ndef answer(df):\n    return df['What is the highest degree or level of school you have *completed* ?'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['NCHS Urban/rural'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['State'].value_counts().nlargest(6).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Which of these best describes the kind of work you do?'].value_counts().head(2).index.tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df[df['race_ethnicity_grouped'].notna()]['race_ethnicity_grouped'].value_counts().nlargest(2).index.tolist()\"\n}\n\n\nInput DataFrame columns: ['RACE', 'AGE', 'SEX', 'EDUCATION', 'EMPLOYMENT', 'OCCUPATION', 'INCOME', 'HISPANIC', 'MARRY', 'WORK_EX', 'REGION', 'NUM_CHILDREN', 'NUM_OTHER_CHILDREN', 'GENDER', 'STATUS', 'POL_INTEREST', 'VI_TREND', 'VOTE', 'WEIGHT']\nQuestion: What is the most common education level among the respondents?\nExpected return type: category\nSolution:\n{\n    \"solution\": \"df['EDUCATION'].value_counts().index[0]\"\n}\n\n\nInput DataFrame columns: ['state', 'price', 'room_type', 'reviews_per_month', 'property_type', 'bedrooms', 'host_verifications', 'host_acceptance_rate', 'host_identity_verified', 'beds', 'amenities', 'minimum_nights', 'last_review', 'review_scores_rating', 'instant_bookable', 'calculated_host_listings_count', 'first_review', 'number_of_reviews', 'accommodates', 'listing_url', 'last_scraped', 'name', 'description', 'neighborhood_overview', 'picture_url', 'host_id', 'host_name', 'host_since', 'host_about', 'host_thumbnail_url', 'host_picture_url', 'neighbourhood', 'latitude', 'longitude', 'bathrooms', 'bathrooms_text', 'maximum_nights', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'number_of_reviews_ltm', 'number_of_reviews_l30d', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_check",
    "global ans\n\ndef answer(df):\n    return df['How old are you?'].value_counts().nlargest(6).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['County FIPS'].unique().tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Weight'].nlargest(4).unique().tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['NCHS Urban/rural'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['likelihood'].value_counts().index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['model'].str.contains('Golf').any()\nans = answer(df)",
    "{\n    \"solution\": \"return df['company'].str.lower() == 'autos raymara'\"\n}\n\n\nInput DataFrame columns: ['ticker', 'company', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: Which are the 3 most expensive cars?\nExpected return type: list[category]\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['price'].nlargest(3).keys().tolist()\"\n}\n\n\nInput DataFrame columns: ['ticker', 'company', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What is the car with the highest price?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['price'].idxmax()\"\n}\n\n\nInput DataFrame columns: ['ticker', 'company', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: How many cars are in the database from Argentina?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['country'].str.lower() == 'ar'\"\n}\n\n\nInput DataFrame columns: ['ticker', 'company', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: How many cars do not have photos?\nExpected return type: number\n\nCode that calculates the answer:",
    "global ans\n\ndef answer(df):\n    return df['version'].str.contains('BMW').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['shift'].str.contains('Manual', na=False).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['model'].nunique()\nans = answer(df)",
    "{\n    \"solution\": \"df['photos'].str.len().mean().round()\"\n}\n\n\nInput DataFrame columns: ['start_date', 'end_date', 'campaign_id', 'web_id', 'source', 'medium', 'term', 'content', 'ad_id', 'ad_type', 'ad_status', 'location', 'device', 'query', 'matches', 'impressions', 'clicks', 'cost', 'numbers', 'placement', 'display_id', 'ad_campaign_id', 'ad_group_id', 'ad_unit_id']\nQuestion: What is the maximum number of clicks for the displayed ads?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['clicks'].max()\"\n}\n\n\nInput DataFrame columns: ['business_id', 'name', 'review_count', 'categories', 'is_open', 'attributes', 'hours', ' neighborhoods', 'address', 'city', 'state', 'postal_code', 'latitude', 'longitude', 'stars', 'review_count', 'is_open', 'attributes', 'hours', 'neighborhoods', 'address', 'city', 'state', 'postal_code', 'latitude', 'longitude', 'categories', 'review_id', 'user_id', 'date', 'stars', 'text', 'funny', 'useful', 'cool', 'business_id']\nQuestion: What percentage of restaurants are open?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['is_open'].mean().round(2)\"\n}\n\n\nInput DataFrame columns: ['title', 'overview', 'tagline', 'keywords', 'company', 'budget', 'revenue', 'original_language', 'popularity', 'runtime', 'vote_count', 'vote_average', 'release_date', 'genres', 'production_companies', 'production_countries', 'spoken_languages', 'cast', 'crew', 'id', 'belongs_to_collection', 'poster_path', 'imdb_id', 'status', 'production_status', 'adult', 'video', 'original_title', 'genre_ids",
    "{\n    \"solution\": \"df['price_financed'].max()\"\n}\n\n\nInput DataFrame columns: ['URL', 'company', 'make', 'model', 'version', 'price', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'fuel', 'photos', 'description', 'dealer', 'province', 'country', 'insert_date']\nQuestion: What's the year the most cars were listed for?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['year'].mode().iloc[0]\"\n}\n\n\nInput DataFrame columns: ['ID', 'user_id', 'activity_name', 'activity_timestamp', 'activity_id', 'activity_result', 'activity_class', 'activity_type', 'activity_type_name', 'distance', 'duration', 'duration_min', 'duration_max', 'duration_me', 'duration_sd', 'duration_p1', 'duration_p50', 'duration_p95', 'duration_p99', 'elevation_gain', 'elevation_loss', 'elevation_lo', 'elevation_max', 'elevation_me', 'elevation_p1', 'elevation_p50', 'elevation_p95', 'elevation_p99', 'elevation_sum', 'elevation_sd', 'elevation_p1p99', 'moving_time', 'heartrate', 'heartrate_me', 'heartrate_p1', 'heartrate_p50', 'heartrate_p95', 'heartrate_int', 'heartrate_sd', 'heartrate_p1p95', 'heartrate_p98p99', 'cadence', 'cadence_int', 'cadence_me', 'power', 'power_sum', 'power_avg', 'power_me', 'power_max', 'power_sd', 'power_first', 'power_p1', 'power_p50', 'power_p95', 'power_p98p99', 'power_p1p99', 'avg_speed', 'max",
    "{\n    \"solution\": \"return df['year'].str.contains('2020', na=False).sum()\"\n}\n\n\nInput DataFrame columns: ['year', 'month', 'day', 'time', 'has_broadcast', 'has_live_tv', 'has_facebook', 'has_youtube', 'has_instagram', 'has_twitter', 'has_snapchat', 'has_whatsapp', 'has_tiktok', 'has_snapchat_live', 'has_tv', 'has_radio', 'has_youtube_live', 'has_instagram_live', 'has_twitter_live', 'has_access']\nQuestion: How many days have there been fewer than 10000 users of the platform?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"return df['has_access'].value_counts().loc[False] if False in df['has_access'].value_counts() else 0\"\n}\n\n\nInput DataFrame columns: ['date', 'title', 'name', 'description', 'address', 'lat', 'lng', 'city', 'state', 'zip', 'country', 'phone', 'fax', 'email', 'hours', 'owner', 'classification', 'facility_type', 'payment_type', 'park_id', 'owner_email', 'website', 'owner_phone', 'special_hours', 'amenities', 'owner_name', 'status', 'zip_4', 'count_phones', 'count_faxes', 'count_emails', 'count_urls', 'count_hours', 'count_payments', 'website_count', 'count_special_hours', 'count_amenities', 'hours_count']\nQuestion: How many parks contain the word \"trail\" in the title or description?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"return df[df['title'].str.contains('trail') | df['description'].str.contains('trail')].shape[0]\"\n}\n\n\nInput DataFrame columns: ['year', 'month', 'region', 'population', 'calories', 'fat', 'saturated_fat', 'sodium',",
    "global ans\n\ndef answer(df):\n    return df.loc[df['price'].idxmax(), 'dealer']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['make'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['fuel'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['province'].value_counts().index[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['province'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['color'].value_counts().head(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['make'].value_counts().nlargest(5).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['fuel'].value_counts().nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return pd.unique(df['year']).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['kms'].nlargest(3).tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df['photos'].str.split(',').explode().str.split('.jpg').apply(len).sort_values(ascending=False).nlargest(5).tolist()\"\n}\n\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What are the dearest 5 cars?\nExpected return type: list[category]\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.sort_values('price', ascending=False)['make'].head().tolist()\"\n}\n\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What is the most common color of cars?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['color'].mode().iloc[0]\"\n}\n\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'doors', 'shift', 'color', 'photos', 'is_professional', 'dealer', 'province', 'country', 'publish_date', 'insert_date']\nQuestion: What are the dearest N cars?\nExpected return type: list[category]\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['make'].nlargest(n).tolist()\"\n}\n\n\nInput DataFrame columns: ['url', 'company', 'make', 'model', 'version', 'price', 'price_financed', 'fuel', 'year', 'kms', 'power', 'do",
    "global ans\n\ndef answer(df):\n    return df['power'].sort_values(ascending=False).head(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Transaction'].duplicated().any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['period_day'].eq('Night').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (~df['period_day'].str.contains('weekend')).all()\nans = answer(df)",
    "{\n    \"solution\": \"|(df['period_day'].isin(['Evening', 'Night'])) & (df['weekday_weekend'].eq('Weekend'))\"\n}\n\n\nInput DataFrame columns: ['id', 'year', 'month', 'day', 'judgement', 'country', 'designation', 'provenance', 'region_1', 'region_2', 'variety', 'winery']\nQuestion: Which variety is the most popular in the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['variety'].mode()[0]\"\n}\n\n\nInput DataFrame columns: ['id', 'year', 'month', 'day', 'judgment', 'country', 'designation', 'provenance', 'region_1', 'region_2', 'variety', 'winery', 'points', 'wine_type', 'description', 'taster_name', 'taster_twitter_handle', 'price', 'title', 'taster_notes', 'taster_public_reivew_count', 'winery_review_count']\nQuestion: Which taster is the least favorite?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['taster_name'].value_counts().idxmin()\"\n}\n\n\nInput DataFrame columns: ['Country', 'Literacy', 'GDP']\nQuestion: What are the 5 countries that have the smallest GDP growth rate?\nExpected return type: list[str]\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.sort_values('GDP').head(5)['Country'].tolist()\"\n}\n\n\nInput DataFrame columns: ['Country', 'Literacy', 'GDP']\nQuestion: Is there any country with literacy rate greater than 80 and GDP smaller than 5000?\nExpected return type: boolean\n\nCode that calculates the answer:\n{\n    \"solution\": \"(df['GDP'] < 5000) & (df['Literacy'] > 80).any()\"\n}\n\n\nInput DataFrame columns: ['ID', 'Brands',",
    "global ans\n\ndef answer(df):\n    return len(df['Item'].unique())\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['period_day'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Transaction'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['date_time'].between('12:00:00', '15:00:00'), 'Transaction'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('period_day')['Transaction'].nunique().idxmax()\nans = answer(df)",
    "{\n    \"solution\": \"df[df['period_day'] == 'weekday']['Item'].mode().iloc[0]\"\n}\n\n\nInput DataFrame columns: ['id', 'title', 'genre', 'release_date', 'language', 'rating', 'duration', 'country']\nQuestion: What is the longest movie in the dataset?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['duration'].max()\"\n}\n\n\nInput DataFrame columns: ['cafe_id', 'chain', 'address_cafe', 'number_of_seats', 'geo_lat', 'geo_lon', 'address_restaurant', 'kitchen_id', 'id', 'object_name', 'address_object', 'object_type', 'chain_id', 'object_owner', 'object_type_id', 'object_id', 'open', 'closed', 'type_id', 'type', 'okato']\nQuestion: How many cafes have a type of \"Tea house\"?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.loc[df['type'] == 'Tea house', 'cafe_id'].nunique()\"\n}\n\n\nInput DataFrame columns: ['OBJECTID', 'id', 'name', 'address', 'lat', 'lng', 'kind', 'year_from', 'year_to', 'type', 'time', 'value', 'year', 'source', 'source_year', 'source_organization', 'source_link', 'last_edited', 'editor', 'edit_year', 'lat_lon']\nQuestion: How many cultural objects were opened on the 1st of September, 1937?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[(df['year'] == 1937) & (df['time'] == '1st of September')].count().id\"\n}\n\n\nInput DataFrame columns: ['id', 'name', 'address_lat', 'address_lng', 'type', 'address', 'lat', 'lng']\nQuestion: What is the most common type of objects",
    "{\n    \"solution\": \"df.loc[df['weekday_weekend'] == 'Weekday', 'Item'].value_counts().idxmin()\"\n}\n\n\nInput DataFrame columns: ['Transaction', 'Item']\nQuestion: Which item has the highest price?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['Item'].map(df.groupby('Item')['Transaction'].sum()).sort_values(ascending=False).index[0]\"\n}\n\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: How many weekdays have been in the dataset?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['weekday_weekend'].value_counts().loc['Weekday']\"\n}\n\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: What's the count of items bought during weekdays?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.loc[df['weekday_weekend'] == 'Weekday', 'Item'].value_counts()\"\n}\n\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: Which weekday has the highest count of items bought?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.groupby('weekday_weekend')['Item'].count().sort_values(ascending=False).index[0]\"\n}\n\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period_day', 'weekday_weekend']\nQuestion: How many items were bought during the weekend?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.groupby('weekday_weekend')['Item'].count().loc['Weekend']\"\n}\n\n\nInput DataFrame columns: ['Transaction', 'Item', 'date_time', 'period",
    "global ans\n\ndef answer(df):\n    return df[(df['period_day'] == 'first_10_minute')]['Transaction'].count()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['period_day'] == 'morning']['Item'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.query('period_day==\\'Afternoon\\'')['Item'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['weekday_weekend'] == 'weekend']['Item'].value_counts().head(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[(df['period_day'] == 'night') & (df['weekday_weekend'] == 'weekend')]['Item'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Transaction')['Item'].count().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Transaction'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Item'].eq('Bread').idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['period_day'] == 'morning', 'Transaction'].nsmallest(2).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Rating'].gt(3).all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Branch'].value_counts().idxmax() == 'Disneyland_HongKong'\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Rating'] == 1].shape[0] > 0\nans = answer(df)",
    "{\n    \"solution\": \"if (df['Rating'] == 5).any(): return True\"\n}\n\n\nInput DataFrame columns: ['name', 'address', 'city', 'state', 'country', 'zip', 'category', 'lat', 'lng']\nQuestion: Is the restaurant with the highest rating in Hong Kong Chinese cuisine located in Shatin, Hong Kong?\nExpected return type: boolean\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.loc[(df['category'] == 'Chinese') & (df['rating'] == df['rating'].max()), 'name'].any()\"\n}\n\n\nInput DataFrame columns: ['S.No', 'Name', 'Position', 'Club', 'Nationality', 'Wage', 'Salary', 'Age', 'Height', 'Weight', 'Preffered Foot', 'Weak Foot', 'Skill Moves', 'Work Rate', 'Body Type', 'Real Face', 'Release Clause', 'Joined', 'Loaned From', 'Contract Valid Until', 'Value', 'Wage', 'Origin', 'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause']\nQuestion: Is there any player with a contract valid until year 2024?\nExpected return type: boolean\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.loc[df['Contract Valid Until'].str.contains('2024'), 'Name'].any()\"\n}\n\n\nInput DataFrame columns: ['id', 'type', 'created_at', 'author', 'message', 'attachments', '",
    "global ans\n\ndef answer(df):\n    return df['Reviewer_Location'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Branch'] == 'Disneyland_HongKong']['Rating'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Review_ID'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Year_Month'].str.contains('2019').sum()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Reviewer_Location'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Branch')['Rating'].mean().idxmin()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Rating']==1, 'Year_Month'].min()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Reviewer_Location')['Rating'].mean().nlargest(1).index[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Reviewer_Location'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Branch')['Rating'].mean().nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Year_Month')['Review_ID'].nunique().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Reviewer_Location')['Rating'].mean().nsmallest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Review_ID'].loc[df['Rating'].isin(df['Rating'].value_counts().index[:5])].tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df.groupby('Year_Month')['Rating'].nlargest(4).groupby('Year_Month').agg(list).stack().reset_index().groupby('level_0').agg(list)['Rating'].tolist()\"\n}\n\n\nInput DataFrame columns: ['Suburb', 'Address', 'Rooms', 'Type', 'Price', 'Method', 'SellerG', 'Date', 'Distance', 'Postcode', 'Bedroom2', 'Bathroom', 'Car', 'Landsize', 'BuildingArea', 'YearBuilt', 'CouncilArea', 'Lattitude', 'Longtitude', 'Regionname', 'Propertycount']\nQuestion: What is the average price per room type?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.groupby('Type')['Price'].mean().mean()\"\n}\n\n\nInput DataFrame columns: ['id', 'name', 'host_id', 'host_name', 'neighbourhood_group', 'neighbourhood', 'latitude', 'longitude', 'room_type', 'price', 'minimum_nights', 'number_of_reviews', 'last_review', 'reviews_per_month', 'calculated_host_listings_count', 'availability_365']\nQuestion: What is the price difference between entire room rentals and private room rentals?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[df['room_type'] != 'Entire home/apt']['price'].mode().iloc[0] - df[df['room_type'] == 'Entire home/apt']['price'].mode().iloc[0]\"\n}\n\n\nInput DataFrame columns: ['id', 'name', 'host_id', 'host_name', 'neighbourhood_group', 'neighbourhood', 'latitude', 'longitude', 'room_type', 'price', 'minimum_nights', 'number_of_reviews', 'last_review', 'reviews_per_month', 'calculated_host_listings_count', 'availability_365']\nQuestion: Where do the most expensive Airbnb listings come from?\nExpected return type: category\n\nCode that calculates",
    "global ans\n\ndef answer(df):\n    return df[df['Reviewer_Location'] == 'Australia']['Rating'].nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Branch'] == 'Disneyland_HongKong']['Rating'].nsmallest(2).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['lang'] == 'en'\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].gt(0).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].gt(10000).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['favorites'].gt(50000).any()\nans = answer(df)",
    "{\n    \"solution\": \"df['author_id'].nunique()\"\n}\n\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: How many tweets are there that mention any of the following items? ['Fox News', 'CNN', 'New York Times', 'Washington Post', 'New York Post', 'Wall Street Journal']\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['mention_names'].str.contains('|'.join(['Fox News', 'CNN', 'New York Times', 'Washington Post', 'New York Post', 'Wall Street Journal'])).sum()\"\n}\n\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', 'location']\nQuestion: Which author has the most retweets and favorites?\nExpected return type: list[string]\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.nlargest(1, ['retweets', 'favorites'])[['author_id', 'author_name']].values.tolist()\"\n}\n\n\nInput DataFrame columns: ['id', 'author_id', 'author_name', 'author_handler', 'author_avatar', 'lang', 'text', 'date', 'mention_ids', 'mention_names', 'retweets', 'favorites', 'links', 'links_first', 'image_links', 'image_links_first', 'tweet_link', 'rp_user_id', 'rp_user_name', '",
    "global ans\n\ndef answer(df):\n    return df['retweets'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['favorites'].max()\nans = answer(df)",
    "{\n    \"solution\": \"df['date'].dt.year.eq(2018).sum()\"\n}\n\n\nInput DataFrame columns: ['Age', 'Sex', 'ChestPainType', 'RestingBP', 'Cholesterol', 'FastingBS', 'RestingECG', 'MaxHR', 'ExerciseAngina', 'Oldpeak', 'ST_Slope', 'HeartDisease']\nQuestion: Is there a person with a fasting blood sugar level > 120?\nExpected return type: boolean\n\nCode that calculates the answer:\n{\n    \"solution\": \"return df['FastingBS'].gt(120).any()\"\n}\n\n\nInput DataFrame columns: ['name', 'sex', 'length', 'diameter', 'height_mm', 'weight_g', 'species', 'island', 'habitat']\nQuestion: What is the most common species?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['species'].mode().iloc[0]\"\n}\n\n\nInput DataFrame columns: ['id', 'title', 'year', 'imdb_id', 'popularity', 'budget', 'revenue', 'original_language', 'genre', 'director', 'cast', 'overview', 'runtime', 'first_air_date', 'last_air_date', 'poster_path', 'backdrop_path', 'original_title', 'adult', 'vote_average', 'vote_count', 'genreIds', 'origin_country', 'overview', 'popularity', 'vote_count', 'video', 'poster_path', 'id', 'imdb_id', 'vote_average', 'vote_count', 'genreIds', 'type', 'poster_path', 'release_date']\nQuestion: How many films are there with a release date before 1990?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df['release_date'].dt.year.lt(1990).sum()\"\n}\n\n\nInput DataFrame columns: ['iso', 'name', 'sortname', 'capacity', 'population', 'area', 'region', 'sub",
    "global ans\n\ndef answer(df):\n    return df['author_name'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['favorites'].idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['retweets'].idxmax(),'lang']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['lang'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['author_handler'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['lang'].value_counts().nsmallest(2).index.tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df['mention_ids'].explode().value_counts().nlargest(4).index.tolist()\"\n}\n\n\nInput DataFrame columns: ['name', 'age', 'city', 'state', 'zip', 'latitude', 'longitude', 'category', 'description', 'url', 'phone', 'date', 'image_url', 'website_url', 'neighborhood_overview', 'notes', 'transit', 'access', 'childcare', 'smoking', 'atmosphere', 'alcohol', 'price', 'price_range', 'izza_bar', 'karaoke', 'live_music', 'dj', 'video_games', 'pool', 'accessibility', 'wifi', 'ac', 'bike_rental', 'public_transit', 'shopping', 'splice', 'pets', 'outdoor_seating', 'credit_cards', 'good_for_kids', 'good_for_groups', 'drive_thru', 'variety', 'ambience_casual', 'ambience_divey', 'ambience_classy', 'ambience_romantic', 'ambience_intimate', 'ambience_hipster', 'ambience_touristy', 'ambience_trendy', 'ambience_upscale', 'ambience_casual', 'ambience_hipster', 'ambience_classy', 'ambience_cafe', 'noise_level_average', 'noise_level_loud', 'noise_level_quiet', 'noise_level_very_loud', 'noise_level_very_quiet', 'attire_casual', 'attire_dressy', 'attire_formal', 'attire_plain', 'attire_orkney', 'attire_sunday_cocktail', 'attire_business', 'attire_formal', 'attire_plain', 'attire_sunday_cocktail', 'attire_business', 'attire_casual', 'attire_dressy', 'attire_formal', 'attire_plain', 'attire_sunday_cocktail', 'attire_business', 'attire_casual', 'attire_dressy', 'attire_formal', 'attire",
    "global ans\n\ndef answer(df):\n    return df['author_name'].value_counts().nsmallest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].nlargest(5).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['favorites'].nsmallest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['favorites'].nlargest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].sort_values().head(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['is_organization'].any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['is_organization'].eq('no').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['pic'].eq('').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['weight'].gt(500).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return len(df['community'].unique())\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['page_rank_norm'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['weight'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return sum(df['community'] == '16744206')\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['name'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['page_rank_norm'].idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['pic'].iloc[df['weight'].idxmax()]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['y'].idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['name'].sort_values(ascending=False).head(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['name'].value_counts().nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(4, 'x')[\"name\"].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.sort_values('y')[:3]['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['id'].nlargest(5).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['id'].nsmallest(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['page_rank_norm'].nlargest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['community'] == 'entities']['weight'].sort_values(ascending=True).tolist()[:3]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['feathers'].any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['venomous'].any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.iloc[:, 1:15].apply(lambda x: x.all(), axis=0).all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['domestic'].any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return len(df['class_type'].unique())\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[:,'legs':'legs'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['legs'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return len(df.query('legs==2').index)\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['class_type'].mode().iloc[0]\nans = answer(df)",
    "{\n    \"solution\": \"df[df['legs'] == 8]['animal_name'].iloc[0]\"\n}\n\n\nInput DataFrame columns: ['name', 'sex', 'age_approx', 'age_class', 'registered', 'splat_area', 'location_name', 'population_density', 'percentage_male', 'percentage_female', 'population', 'male_population', 'female_population', 'population_male', 'population_female', 'male_percent', 'female_percent', 'population_in_area', 'area_sq_km', 'latitude', 'longitude', 'elevation', 'nearest_city', 'nearest_city_population', 'nearest_city_distance', 'weight', 'species']\nQuestion: Which bird species has the smallest population?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[df['species'].isin(df['species'].value_counts().nlargest(1).index.tolist())]['species'].iloc[0]\"\n}\n\n\nInput DataFrame columns: ['f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10', 'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19', 'f20', 'f21', 'f22', 'f23', 'f24', 'f25', 'f26', 'f27', 'f28', 'f29', 'f30', 'f31', 'f32', 'f33', 'f34', 'f35', 'f36', 'f37', 'f38', 'f39', 'f40', 'f41', 'f42', 'f43', 'f44', 'f45', 'f46', 'f47', 'f48', 'f49', 'f50', 'f51', 'f52', 'f53', 'f5",
    "global ans\n\ndef answer(df):\n    return df.loc[df['legs'].idxmax(), 'class_type']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['venomous'] == True]['animal_name'].iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['legs'].idxmax(), ['animal_name']].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['animal_name'].value_counts().nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['class_type'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['class_type'].value_counts().tail(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('class_type')['legs'].sum().nlargest(5).index.tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df.groupby['class_type'].sum().sort_values('legs').index[:4]\"\n}\n\n\nInput DataFrame columns: ['i', 'f', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nQuestion: Which of these columns does not contain missing values?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.isnull().all().idxmax()\"\n}\n\n\nInput DataFrame columns: ['question', 'score', 'age', 'gender', 'anarchy', 'boredom', 'current_ stress', 'depression', 'guilt', 'happiness', 'harshness', 'hostility', 'humiliation', 'loneliness', 'powerlessness', 'pride', 'suffering', 'victimhood', 'loathing']\nQuestion: Which personality trait has the highest average score?\nExpected return type: category\n\nCode that calculates the answer:\n{\n    \"solution\": \"df.iloc[:,1:].mean().idxmax()\"\n}\n\n\nInput DataFrame columns: ['category', 'question', 'score', 'age', 'gender', 'anarchy', 'boredom', 'current_ stress', 'depression', 'guilt', 'happiness', 'harshness', 'hostility', 'humiliation', 'loneliness', 'powerlessness', 'pride', 'suffering', 'victimhood', 'loathing']\nQuestion: What is the average score of the personality trait suffering?\nExpected return type: number\n\nCode that calculates the answer:\n{\n    \"solution\": \"df[df['category'] == 'suffering']['score'].mean()\"\n}\n\n\nInput DataFrame columns: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q10', 'Q11', 'Q12', 'Q13',",
    "global ans\n\ndef answer(df):\n    return df['legs'].value_counts().nlargest(4).keys().tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[~df['legs'].isna(), 'legs'].sort_values().tolist()[:3]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Quantity'].gt(0).all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['UnitPrice'].gt(0).all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['CustomerID'].isna().any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Country'] == 'United Kingdom'\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['StockCode'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['UnitPrice'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Quantity'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Country'].value_counts().at['United Kingdom']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Country'].value_counts().head(1).index.values\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['UnitPrice'].idxmax(), 'Description']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Quantity'].idxmax(), 'Description']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('CustomerID').agg({'Country': 'nunique'}).idxmin()['Country']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.sort_values(by='Quantity', ascending=False)['Description'].unique().tolist()[:3]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(2, ['Quantity'])['Description']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Country'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Country'].value_counts().nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[(df['Quantity'] > 0)].groupby('InvoiceNo')['Quantity'].sum().nlargest(5).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(5, 'Quantity')['StockCode'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Quantity'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Description'].value_counts()[:2].index.tolist()\nans = answer(df)"
]