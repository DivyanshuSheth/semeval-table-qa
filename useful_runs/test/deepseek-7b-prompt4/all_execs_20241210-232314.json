[
    "global ans\n\ndef answer(df):\n    return df['Are you registered to vote?'].str.contains('Not open to vote').any()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[(df['simple_2016_vote'] == 1) & (df['Headline vote share (intention and already voted combined)'] == 0), 'id'].empty\"\n}\n\nThis solution uses the pandas `.loc` accessor to filter rows where the respondent `simple_2016_vote` is 1 (meaning they voted in the 2016 election) and `Headline vote share (intention and already voted combined)` is 0 (meaning they are not planning to vote in the upcoming election). The `.empty` attribute is then used to check if there are any such respondents, returning a boolean result.",
    "{\n    \"solution\": \"df.loc[(df['simple_2016_vote'].isin(['no', 'declined'])) & (df['Headline vote share (intention and already voted combined)'].notnull()), 'Headline vote share (intention and already voted combined)'].notnull().any()\"\n}",
    "{\n    \"solution\": \"df.loc[(df['vote_choice'] != df['simple_2016_vote']), 'id'].count() > 0\"\n}",
    "global ans\n\ndef answer(df):\n    return df['Are you registered to vote?'].str.contains('Yes').sum()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['vote_choice'] == 'Biden', 'id'].count()\"\n}",
    "{\n    \"solution\": \"df['education_grouped_by_gender'].value_counts().get('High school or less', 0)\"\n}",
    "{\n    \"solution\": \"df['NCHS Urban/rural (long form)'].str.contains('Adjacent').sum()\"\n}",
    "The most frequent age group among the respondents can be determined by grouping the data by the \"How old are you?\" column and then finding the group with the highest count. However, since the age values are presented as strings in the form of \"x - y years\", we need to extract the numerical values and convert them to the appropriate age group category.\n\nHere's the solution:\n\n{\n    \"solution\": \"df['How old are you?'] = df['How old are you?'].str.extract('(\\\\d+)').astype(int); df['How old are you?'].value_counts().idxmax()\"\n}\n\n\nThis solution assumes that the age range strings only contain a single range, such as \"36 - 40 years\". If there are age ranges like \"18 - 24\" or \"25 - 34\", additional processing would be needed to convert them into a single age group category.",
    "The preferred choice of the respondents for the upcoming election is not directly available in the given DataFrame columns. However, if the column 'vote_choice' contains the preferred candidate or party of the respondents, we can use the following code to find the most preferred choice:\n\n{\n    \"solution\": \"df['vote_choice'].value_counts().idxmax()\"\n}\n\n\nThis will return the candidate or party that is preferred by the majority of the respondents. If the DataFrame does not contain such a column or if it doesn't provide the necessary information, the question cannot be answered with the given data.",
    "{\n    \"solution\": \"df['education_grouped_by_gender'].value_counts().idxmax()\"\n}\n\nHere, the `value_counts()` function is used to get a series containing counts of unique values in descending order. `idxmax()` is then used to get the index (i.e., the unique value) of the first occurrence of the maximum value. This corresponds to the most common educational level among the respondents. The result is returned as a category data type to match the expected return type.",
    "global ans\n\ndef answer(df):\n    return df['Division'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['State'].value_counts().head(6).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Which of these best describes the kind of work you do?'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "{\n    \"solution\": \"df['race_ethnicity_grouped'].value_counts().head(2).index.tolist()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['How old are you?'] .value_counts().head(6).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['County FIPS'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Weight'].nlargest(4).tolist()\nans = answer(df)",
    "The solution is as follows:\n\n{\n    \"solution\": \"df['NCHS Urban/rural (long form)'].value_counts().nlargest(4).index.tolist()\"\n}\n\nThis solution counts the occurrences of each unique value in the 'NCHS Urban/rural (long form)' column, then retrieves the top 4 categories with the most occurrences. It returns a list of these categories.",
    "global ans\n\ndef answer(df):\n    return df['likelihood'].value_counts().index[:2].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['model'].str.contains('Golf', na=False).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['dealer'].eq('Autos Raymara').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['version'].str.contains('BMW', case=False)).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['shift'].eq('Manual').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['model'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['photos'].astype(int).mean().round()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['price'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['year'] == 2020].shape[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['price'].idxmax(), 'dealer']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('make').size().idxmax() if df.groupby('make').size().max() > 1 else df['make'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['fuel'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['province'].value_counts().idxmax()\nans = answer(df)",
    "{\n    \"solution\": \"df.groupby('province')['url'].nunique().nlargest(3).index.tolist()\"\n}\n\nNote: This solution assumes that the 'url' column is unique for each car listing. If there are multiple listings with the same URL, you would need to adjust the solution accordingly.",
    "global ans\n\ndef answer(df):\n    return df['color'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['make'].value_counts().nlargest(5).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['fuel'].value_counts().nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['year'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['kms'].nlargest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['photos'].value_counts().nlargest(5).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['power'].nlargest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Transaction'].duplicated().any() == False\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['period_day'].eq('night').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['weekday_weekend'] == 'weekday').all()\nans = answer(df)",
    "{\n    \"solution\": \"(df['period_day'] == 'evening') & (df['weekday_weekend'] == 'weekend')['Transaction'].any()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['Item'].nunique()\nans = answer(df)",
    "{\n    \"solution\": \"df['date_time'].dt.date.nunique()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['Transaction'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['period_day'] == 'afternoon']['Transaction'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('period_day')['Transaction'].nunique().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['weekday_weekend'] == 'weekday', 'Item'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['weekday_weekend'] == 'weekday', 'Item'].value_counts().idxmin()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Item'] == 'Brownie']['period_day'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['period_day'] == 'morning', 'Item'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['period_day'] == 'afternoon']['Item'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['weekday_weekend'] == 'weekend', 'Item'].value_counts(ascending=False).head(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[(df['period_day'] == 'evening') & (df['Transaction'].isin(df[df['period_day']=='evening']['Item'].value_counts()[df[df['period_day']=='evening']['Item'].value_counts() == 2].index)), 'Item'].unique().tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Transaction')['Item'].count().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'Transaction')['Transaction'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Item'] == 'Bread']['Transaction'].nlargest(4).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['period_day'] == 'morning']['Transaction'].nsmallest(2).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Reviewer_Location'] == 'Australia', 'Rating'].gt(3).all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Branch'].value_counts().idxmax() == 'Disneyland_HongKong'\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Rating'].eq(1).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Reviewer_Location')['Rating'].apply(lambda x: 5 in x).all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Reviewer_Location'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Branch'] == 'Disneyland_HongKong', 'Rating'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Review_ID'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Year_Month'] == '2019']['Review_ID'].count()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Reviewer_Location'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Branch')['Rating'].mean().idxmin()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Rating'] == 1, 'Year_Month'].min()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Reviewer_Location')['Rating'].mean().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Reviewer_Location')['Review_ID'].count().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Branch')['Rating'].mean().nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Year_Month'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Reviewer_Location')['Rating'].mean().nsmallest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'Rating')['Review_ID'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('Rating', group_keys=False).apply(lambda x: x.nsmallest(4, 'Review_ID'))['Review_ID'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Reviewer_Location'] == 'Australia', 'Rating'].value_counts().head(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Branch'] == 'Disneyland_HongKong', 'Rating'].nsmallest(2).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['lang'].eq('en').all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].gt(0).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['retweets'].gt(10000).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['favorites'].gt(50000).any()\nans = answer(df)",
    "{\n    \"solution\": \"df['author_id'].nunique()\"\n}",
    "global ans\n\ndef answer(df):\n    return df['retweets'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['favorites'].max()\nans = answer(df)",
    "{\n    \"solution\": \"df[df['date'].dt.year == 2018].shape[0]\"\n}\n\nThe solution uses the datetime functionality to extract the year from the 'date' column and filters the DataFrame to only include rows where the year is 2018. It then counts the number of rows, which corresponds to the number of tweets in 2018.",
    "global ans\n\ndef answer(df):\n    return df['author_name'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['favorites'].idxmax(), 'text']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['retweets'].idxmax(), 'lang']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['lang'].mode().iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['author_handler'].value_counts().nlargest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['lang'].value_counts().nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['mention_names'].str.split(',').explode().value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['author_name'].value_counts().nsmallest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'retweets')['id'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(4, 'favorites')['id'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(6, 'favorites')['favorites'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(3, 'retweets')['retweets'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['is_organization'].any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['is_organization'].eq(False).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['pic'].notnull().all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['weight'].gt(500).any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['community'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['page_rank_norm'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['weight'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['community'] == 16744206]['id'].count()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['name'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['page_rank_norm'].idxmax(), 'name']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['weight'].idxmax(), 'pic']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['y'] == df['y'].max()]['name'].iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'weight')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(2, 'page_rank_norm')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(4, 'x')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(3, 'y')['name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'weight')['id'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(4, 'page_rank_norm')['id'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['page_rank_norm'].nlargest(6).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['weight'].nsmallest(3).tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['feathers'].any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['venomous'].any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['breathes'].all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['domestic'].any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['animal_name'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['legs'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['legs'].max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['legs'] == 2]['legs'].count()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['class_type'].value_counts().idxmax()\nans = answer(df)",
    "{\n    \"solution\": \"df.loc[df['legs'] == 8, 'animal_name'].iloc[0]\"\n}",
    "global ans\n\ndef answer(df):\n    return df.loc[df['legs'].idxmax(), 'class_type']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['venomous'] == True, 'animal_name'].iloc[0]\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['legs'].nlargest(3).index, 'animal_name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(2, 'legs')['animal_name'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['class_type'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['class_type'].value_counts().nsmallest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('class_type')['legs'].sum().nlargest(5).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('class_type')['legs'].sum().nsmallest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['legs'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['legs'].value_counts().nsmallest(3).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Quantity'].gt(0).all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['UnitPrice'].gt(0).all()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['CustomerID'].isnull().any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Country'].eq('United Kingdom').any()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['StockCode'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['UnitPrice'].mean()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.groupby('InvoiceNo')['Quantity'].sum().max()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df[df['Country'] == 'United Kingdom']['InvoiceNo'].nunique()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Country'].value_counts().idxmax()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['UnitPrice'].idxmax(), 'Description']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['Quantity'].idxmax(), 'Description']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.loc[df['CustomerID'].idxmin(), 'Country']\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(3, 'Quantity')['Description'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(2, 'Quantity')['Description'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Country'].value_counts().nlargest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Country'].value_counts().nsmallest(2).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nlargest(5, 'Quantity')['InvoiceNo'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df.nsmallest(5, 'Quantity')['StockCode'].tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return df['Quantity'].value_counts().nlargest(4).index.tolist()\nans = answer(df)",
    "global ans\n\ndef answer(df):\n    return (df['Description'].value_counts().nlargest(2).values).tolist()\nans = answer(df)"
]